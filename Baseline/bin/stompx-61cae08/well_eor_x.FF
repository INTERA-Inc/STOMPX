!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE EQUIL_COUP_WELL( NCW )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!
!     STOMPX-EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Equilibrate coupled-well pressure with reservoir.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 16 December 2022
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GRID
      USE FDVP
      USE COUP_WELL
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/EQUIL_COUP_WELL'
!
!---  Injection well, equilibrate with first well node  ---
!
      IF( IT_CW(NCW).GT.0 ) THEN
        N = IWN_CW(ID_CW(3,NCW))
        XCWX = XTP_CW(1,ID_CW(1,NCW))
        YCWX = YTP_CW(1,ID_CW(1,NCW))
        ZCWX = ZTP_CW(1,ID_CW(1,NCW))
!
!---  Withdrawl well, equilibrate with last well node  ---
!
      ELSE
        N = IWN_CW(ID_CW(4,NCW))
        XCWX = XTP_CW(2,ID_CW(2,NCW))
        YCWX = YTP_CW(2,ID_CW(2,NCW))
        ZCWX = ZTP_CW(2,ID_CW(2,NCW))
      ENDIF
!
!---  Saturation weighted fluid density  ---
!
      IDLX = -1
      IF( N.NE.0 ) THEN
        IF( SG(2,N).GT.0.D+0 ) THEN
          IDLX = ID
          RHOX = RHOG(2,N)
          P_CW(2,NCW) = PSO(2,N) - (ZCWX-ZP(N))*GRAV*RHOX
        ELSE
          IDLX = ID
          RHOX = SN(2,N)*RHON(2,N) + SL(2,N)*RHOL(2,N)
          P_CW(2,NCW) = PSO(2,N) - (ZCWX-ZP(N))*GRAV*RHOX
        ENDIF
      ENDIF
!
!---  Identify processor with defining well node  ---
!
      CALL MPI_ALLREDUCE( IDLX,IDX,1,MPI_INTEGER,MPI_MAX,
     &  MPI_COMM_WORLD,IERR )
!
!---  Broadcast coupled-well pressure from processor with
!     defining well node  ---
!
      CALL MPI_BCAST( P_CW(2,NCW),1,MPI_REAL8,IDX,MPI_COMM_WORLD,IERR )
!
!---  Reset subroutine character string ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of EQUIL_COUP_WELL group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE INCRM_COUP_WELL
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!
!     STOMPX-EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Define well nodes, determine trajectory points, and 
!     check for well trajectories within node surface planes
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 16 December 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE COUP_WELL
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/INCRM_COUP_WELL'
!
!---  Loop over coupled wells ---
!
      DO NCW = 1,N_CW
!
!---    Coupled-well is an injection type well, estimate the
!       well pressure and whether the well is pressure or flow
!       controlled  ---
!
        IF( IT_CW(NCW).GT.0 ) THEN
          CALL INJP_COUP_WELL( NCW )
        ENDIF
        DNR_CW(NCW) = 1.D-1
        P_CW(3,NCW) = P_CW(2,NCW) + DNR_CW(NCW)
      ENDDO
!
!---  Reset subroutine character string ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of INCRM_COUP_WELL group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE INJ_BO_WELL( NCW )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!
!     STOMPX-EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Injection black-oil well model
!     
!     Rate controlled or pressure controlled
!
!     Flux of water mass, gas mass, and oil mass from coupled-well 
!     nodes to field nodes.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 16 December 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOURC
      USE SOLTN
      USE PROP
      USE JACOB
      USE HYST
      USE GRID
      USE GLB_PAR
      USE FDVP
      USE COUP_WELL
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 XPX(2),YPX(2),ZPX(2)
      REAL*8 VAR_CWX(6+LNGC)
      REAL*8 XGC_CWX(LNGC),XNC_CWX(LNGC)
      REAL*8, DIMENSION(1:(LUK_CW+1)) :: RSL_CWX
      INTEGER, SAVE :: IALLOC
      DATA IALLOC /0/
      INTEGER, DIMENSION(1:(LUK+2)) :: MCW,MFD
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/INJ_BO_WELL'
      DO M = 1,ISVC+2
        IF( M.NE.ISVC+2 ) THEN
          MCW(M) = 2
        ELSE
          MCW(M) = 3
        ENDIF
        IF( M.NE.ISVC+2 ) THEN
          MFD(M) = M+1
        ELSE
          MFD(M) = 2
        ENDIF
      ENDDO       
!
!---  Zero injection well fluxes ---
!
      QM_CW(1,NCW) = 0.D+0
      QM_CW(3,NCW) = 0.D+0
      QM_CW(5,NCW) = 0.D+0
      DO IGC = 1,NGC+2
        QM_CW((7+(IGC-1)*2),NCW) = 0.D+0
      ENDDO
!
!---  Loop over coupled-well nodes  ---
!
      DO NWN = ID_CW(3,NCW),ID_CW(4,NCW)
!
!---    Zero volumetric injection well fluxes
!
!       Q_CW(1,NWN) - total volumetric flux, m^3/s
!       Q_CW(2,NWN) - aqueous volumetric flux, m^3/s
!       Q_CW(3,NWN) - gas volumetric flux, m^3/s
!       Q_CW(4,NWN) - nonaqueous-liquid volumetric flux, m^3/s  ---
!
        DO M = 1,4
          Q_CW(M,NWN) = 0.D+0
        ENDDO
!
!---    Loop over increment indices  ---
!
        DO M = 1,ISVC+2
          DO IGC = 1,NGC+2
            FXC_CW(IGC,M,NWN) = 0.D+0
          ENDDO
          FXW_CW(M,NWN) = 0.D+0
        ENDDO
      ENDDO
!
!---  Injection well time interval ---
!
      DQ_CWX = 1.D-6
      TMZ = TM
      IF( NSTEP-NRST.EQ.0 ) TMZ = TMZ*(1.D+0+EPSL)+EPSL
!
!---  Cyclic time periods  ---
!
      IF( ICC_CW(NCW).EQ.1 ) THEN
!
!---    Loop over the injection well time periods, to find the 
!       final well time  ---
!
        NTX = 0
        DO NTP = 1,IM_CW(NCW)
          NTX = NTX + IMP_CW(NTP,NCW)
        ENDDO
!
!---    Determine time with the cyclic time period  ---
!
        TMZ = MOD( TM,VAR_CW(1,NTX,NCW) )
        IF( TM.GT.VAR_CW(1,NTX,NCW) ) THEN
          IF( TMZ.LT.EPSL ) TMZ = VAR_CW(1,NTX,NCW)
        ENDIF
      ENDIF
!
!---  Injection well is inactive set well pressure to be in 
!     equilibrium with reservoir  ---
!
      IF( TMZ.LE.VAR_CW(1,1,NCW) ) THEN
        CALL EQUIL_COUP_WELL( NCW )
        ID_CW(8,NCW) = 1
        ISUB_LOG = ISUB_LOG-1
        RETURN
      ENDIF
!
!---  Loop over the injection well time periods  ---
!
      NS = 1
      IFIND = 0
      L1 : DO NTP = 1,IM_CW(NCW)
!
!---    Injection well time period only has one time (start time)  ---
!
        IF( IMP_CW(NTP,NCW).EQ.1 ) THEN
!
!---      Time prior to start time, injection well is inactive, set 
!         well pressure to be in equilibrium with reservoir  ---
!
          IF( TMZ.LE.VAR_CW(1,NS,NCW) ) THEN
            CALL EQUIL_COUP_WELL( NCW )
            ID_CW(8,NCW) = 1
            ISUB_LOG = ISUB_LOG-1
            RETURN
!
!---      Time after start time, injection well is active  ---
!
          ELSE
            DO N = 2,7
              VAR_CWX(N) = VAR_CW(N,1,NCW)
            ENDDO
            IFIND = 1
            EXIT L1
          ENDIF
!
!---    Injection well time period only has multiple times  ---
!
        ELSE
          NE = NS + IMP_CW(NTP,NCW) - 1
!
!---      Time outside of injection well time period, go to next 
!         injection well time period  ---
!
          IF( TMZ.LE.VAR_CW(1,NS,NCW) .OR. 
     &      TMZ.GT.VAR_CW(1,NE,NCW) ) THEN
            NS = NS + IMP_CW(NTP,NCW)
            CYCLE L1
          ENDIF 
!
!---      Injection well time period has multiple time points, use  
!         linear interpolation of well parameters between 
!         time points  ---
!
          DO M = 2,IMP_CW(NTP,NCW)
            MX = NS + M - 1
            IF( TMZ.LE.VAR_CW(1,MX,NCW) ) THEN
              TD_CW = VAR_CW(1,MX,NCW)-VAR_CW(1,MX-1,NCW)
              DT_CW = MIN( VAR_CW(1,MX,NCW)-TMZ,DT )
              TF_CWX = (TMZ-VAR_CW(1,MX-1,NCW))/TD_CW
              DO N = 2,7
                VAR_CWX(N) = VAR_CW(N,MX-1,NCW) + 
     &            TF_CWX*(VAR_CW(N,MX,NCW)-VAR_CW(N,MX-1,NCW))
              ENDDO
              IFIND = 1
              EXIT L1
            ENDIF
          ENDDO
        ENDIF
        NS = NS + IMP_CW(NTP,NCW)
      ENDDO L1
!
!---  Injection well is inactive set well pressure to be in 
!     equilibrium with reservoir  ---
!
      IF( IFIND.EQ.0 ) THEN
        CALL EQUIL_COUP_WELL( NCW )
        ID_CW(8,NCW) = 1
        ISUB_LOG = ISUB_LOG-1
        RETURN
      ENDIF
!
!---  Initialize local coupled-well mass residuals ---
!
      DO M = 1,(LUK_CW+1)
        RSL_CWX(M) = 0.D+0
      ENDDO
!
!---  Load pressure limit ---
!
      PL_CW(NCW) = VAR_CWX(3) - PATM
!
!---  Loop over increment indices ---
!
      DO M = 1,ISVC+2
        MW = MCW(M)
        MF = MFD(M)
        N = IWN_CW(ID_CW(3,NCW))
        P_CWX = P_CW(MW,NCW)
        NPHAZX = 0
!
!---    Nonisothermal simulations  ---
!
        IF( ISLC(30).EQ.0 ) THEN
          T_CWX = VAR_CWX(4)
        ELSE
          T_CWX = T(2,N)
        ENDIF
!
!---    Well state #1  ---
!
!       SL = 1.0
!       SG+SN = 0.0
!
!       Declared variables:
!
!       VAR_CWX(6) - aqueous salt relative saturation, or
!                    aqueous salt mass fraction
!
        IF( ITS_CW(NTP,NCW)/100.EQ.1 ) THEN
          PVAX = VAR_CWX(5)
          TMSX = VAR_CWX(6)
          ISR5X = MOD(ITS_CW(NTP,NCW)/10,10)
          CALL BO_IC1( P_CWX,RHOL_CWX,TMSX,T_CWX,
     &      XLS_CWX,XLW_CWX,YLSX,ISR5X )
          SG_CWX = 0.D+0
          SN_CWX = 0.D+0
          SL_CWX = 1.D+0
          RHOF_CWX = RHOL_CWX
!
!---    Well state #2  ---
!
!       SL < 1.0
!       SG+SN > 0.0
!
!       Declared variables:
!
!       VAR_CWX(5) - aqueous saturation
!       VAR_CWX(6) - aqueous salt relative saturation, or
!                    aqueous salt mass fraction
!       VAR_CWX(7) - gas mass fraction of oil + gas
!
        ELSEIF( ITS_CW(NTP,NCW)/100.EQ.2 ) THEN
          SL_CWX = VAR_CWX(5)
          TMSX = VAR_CWX(6)
          XGX = VAR_CWX(7)
          RHOGSX = 1.225D+0*GCPP(37,1)
          RHONSX = 1.D+3*GCPP(37,2)
          PX = P_CWX + PATM
          IF( 1.D+0-XGX.GT.EPSL ) THEN
            POSM_CWX = XGX*RHONSX/((1.D+0-XGX)*RHOGSX)
            CALL BO_BP( PBPX,POSM_CWX,T_CWX )
            IF( PX.GT.PBPX ) THEN
              SN_CWX = 1.D+0
              SG_CWX = 0.D+0
            ELSE
              PVWX = 0.D+0
              CALL BO_EQ_GAS( PX,PVWX,RHOGX,T_CWX,XGC_CWX,XGWX )
              CALL BO_EQ_OIL( RHONX,PX,POSM_CWX,T_CWX,XNC_CWX )
              SN_CWX = RHOGX*(XGX*(1.D+0-SL_CWX)-XGC_CWX(1)*
     &          (1.D+0-SL_CWX))/(RHONX*(XNC_CWX(1)-XGX) - 
     &          RHOGX*(XGC_CWX(1)-XGX))
              SG_CWX = MAX( 1.D+0-SL_CWX-SN_CWX,0.D+0 )
            ENDIF
          ELSE
            SG_CWX = 1.D+0
            SN_CWX = 0.D+0
          ENDIF
          ISR5X = MOD(ISRT(NS)/10,10)
          IZNX = 0
          CALL BO_IC2( POSM_CWX,P_CWX,RHOG_CWX,RHOL_CWX,RHON_CWX,SL_CWX,
     &      TMSX,T_CWX,XGC_CWX,XGW_CWX,XLS_CWX,XLW_CWX,XNC_CWX,
     &      YLSX,ISR5X,IZNX )
          RHOF_CWX = SG_CWX*RHOG_CWX + SL_CWX*RHOL_CWX + 
     &      SN_CWX*RHON_CWX
!
!---    Well state #3  ---
!
!       SL = 0.0
!       SG+SN = 1.0
!
!       Declared variables:
!
!       VAR_CWX(5) - water vapor relative saturation
!       VAR_CWX(7) - gas mass fraction of oil + gas
!      
        ELSEIF( ITS_CW(NTP,NCW)/100.EQ.3 ) THEN
          SL_CWX = 0.D+0
          PVWX = VAR_CWX(5)
          YLSX = 0.D+0
          XGX = VAR_CWX(7)
          RHOGSX = 1.225D+0*GCPP(37,1)
          RHONSX = 1.D+3*GCPP(37,2)
          PX = P_CWX + PATM
          IF( 1.D+0-XGX.GT.EPSL ) THEN
            POSM_CWX = XGX*RHONSX/((1.D+0-XGX)*RHOGSX)
            CALL BO_BP( PBPX,POSM_CWX,T_CWX )
            IF( PX.GT.PBPX ) THEN
              SN_CWX = 1.D+0
              SG_CWX = 0.D+0
            ELSE
              PVWX = 0.D+0
              CALL BO_EQ_GAS( PX,PVWX,RHOGX,T_CWX,XGC_CWX,XGWX )
              CALL BO_EQ_OIL( RHONX,PX,POSM_CWX,T_CWX,XNC_CWX )
              SN_CWX = RHOGX*(XGX*(1.D+0-SL_CWX)-XGC_CWX(1)*
     &          (1.D+0-SL_CWX))/(RHONX*(XNC_CWX(1)-XGX) - 
     &          RHOGX*(XGC_CWX(1)-XGX))
              SG_CWX = MAX( 1.D+0-SL_CWX-SN_CWX,0.D+0 )
            ENDIF
          ELSE
            SG_CWX = 1.D+0
            SN_CWX = 0.D+0
          ENDIF
          IZNX = 0
          CALL BO_IC3( POSM_CWX,PVWX,P_CWX,RHOG_CWX,RHON_CWX,
     &      T_CWX,XGC_CWX,XGW_CWX,XNC_CWX,YLSX,IZNX )
          RHOF_CWX = SG_CWX*RHOG_CWX + SN_CWX*RHON_CWX
        ENDIF
!
!---    Load local variable for mass flux, kg/s  ---
!
        IF( M.EQ.1 ) THEN
!
!---      Convert volumetric flow rate, m^3/s to mass flow rate, kg/s,
!         using fluid density at top of screened interval  ---
!
          IF( IT_CW(NCW).EQ.2 ) THEN
            VAR_CW2X = VAR_CWX(2)*RHOF_CWX
          ELSE
            VAR_CW2X = VAR_CWX(2)
          ENDIF
!
!---      Load injection mass flux for use in RSDL_COUP_WELL ---
!
          FX_CW(NCW) = VAR_CW2X
        ENDIF
!
!---    Store top of coupled-well location in previous
!       coupled-well node location  ---
!
        XPX(1) = XTP_CW(1,ID_CW(1,NCW))
        YPX(1) = YTP_CW(1,ID_CW(1,NCW))
        ZPX(1) = ZTP_CW(1,ID_CW(1,NCW))
!
!---    Loop over the nodes in the coupled well ---
!
        DO NWN = ID_CW(3,NCW),ID_CW(4,NCW)
          N = IWN_CW(NWN)
          INVX = INV_CW(NWN)
          IZN = IZ(N)
          NPHAZX = 0
!
!---      Nonisothermal simulations  ---
!
          IF( ISLC(30).EQ.0 ) THEN
            T_CWX = VAR_CWX(4)
          ELSE
            T_CWX = T(2,N)
          ENDIF
!
!---      Coupled-well node centroids and projections ---
!
          XLX = PLX_CW(NWN)
          YLX = PLY_CW(NWN)
          ZLX = PLZ_CW(NWN)
          XPX(2) = 5.D-1*(XP_CW(2,NWN)+XP_CW(1,NWN))
          YPX(2) = 5.D-1*(YP_CW(2,NWN)+YP_CW(1,NWN))
          ZPX(2) = 5.D-1*(ZP_CW(2,NWN)+ZP_CW(1,NWN))
!
!---      Cylindrical coordinates with azimuthal symmetry,
!         centrally located wells  ---
!
          IF( (ICS.EQ.2 .OR. ICS.EQ.6) .AND. JFLD.EQ.1 ) THEN
            XPNX = 0.D+0
            YPNX = 0.D+0
            ZPNX = ZP(N)
!
!---      Cylindrical coordinates  ---
!
          ELSEIF( ICS.EQ.2 .OR. ICS.EQ.6 ) THEN
            XPNX = XP(N)*COS(YP(N))
            YPNX = XP(N)*SIN(YP(N))
            ZPNX = ZP(N)
!
!---      Cartesian or boundary-fitted orthogonal coordinates  ---
!
          ELSE
            XPNX = XP(N)
            YPNX = YP(N)
            ZPNX = ZP(N)
          ENDIF
!
!---      Well pressure using previous coupled-well node density ---
!
          P_CWX = P_CWX - (ZPX(2)-ZPX(1))*GRAV*RHOF_CWX
!
!---      Well pressure at the node centroid, used for coupled-well
!         nodal output  ---
!
          IF( M.EQ.1 ) THEN
            NWF = IWP_CW(NWN)
            PF_CW(NWF) = P_CWX - (ZPNX-ZPX(1))*GRAV*RHOF_CWX
          ENDIF
!
!---      Adjust the reservoir pressure to the coupled-well node
!         centroid  ---
!
!
!---      Phase condition #1  ---
!
!         SL = 1.0, SG+SN = 0.0
!
          IF( MOD(NPHAZ(2,N),10).EQ.1 ) THEN
            PLFX = PL(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHOL(MF,N)
            PNFX = PN(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHOL(MF,N)
            PTX = MAX( PLFX,PNFX )
            CPGTX = MAX( (PG(MF,N)-MAX( PL(MF,N),PN(MF,N) )),0.D+0 )
            PGFX = PTX + CPGTX
!
!---      Phase condition #2  ---
!
!         SL < 1.0, ST > 0.0, SG = 0.0
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.2 ) THEN
            PLFX = PL(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHOL(MF,N)
            PNFX = PN(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHON(MF,N)
            PTX = MAX( PLFX,PNFX )
            CPGTX = MAX( (PG(MF,N)-MAX( PL(MF,N),PN(MF,N) )),0.D+0 )
            PGFX = PTX + CPGTX
!
!---      Phase condition #3  ---
!
!         SL < 1.0, ST > 0.0, SG > 0.0
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.3 ) THEN
            PGFX = PG(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHOG(MF,N)
            PLFX = PL(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHOL(MF,N)
            PNFX = PN(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHON(MF,N)
!
!---      Phase condition #4  ---
!
!         SL = 0.0, ST = 1.0, SG = 0.0
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.4 ) THEN
            PLFX = PL(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHON(MF,N)
            PNFX = PN(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHON(MF,N)
            PTX = MAX( PLFX,PNFX )
            CPGTX = MAX( (PG(MF,N)-MAX( PL(MF,N),PN(MF,N) )),0.D+0 )
            PGFX = PTX + CPGTX
!
!---      Phase condition #5  ---
!
!         SL = 0.0, ST = 1.0, SG > 0.0
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.5 ) THEN
            PGFX = PG(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHOG(MF,N)
            PLFX = PL(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHON(MF,N)
            PNFX = PN(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHON(MF,N)
          ENDIF
!
!---      Well state #1  ---
!
!         SL = 1.0
!         SG+SN = 0.0
!
!         Declared variables:
!
!         VAR_CWX(6) - aqueous salt relative saturation, or
!                           aqueous salt mass fraction
!
          IF( ITS_CW(NTP,NCW)/100.EQ.1 ) THEN
            PVAX = VAR_CWX(5)
            TMSX = VAR_CWX(6)
            ISR5X = MOD(ITS_CW(NTP,NCW)/10,10)
            CALL BO_IC1( P_CWX,RHOL_CWX,TMSX,T_CWX,
     &        XLS_CWX,XLW_CWX,YLSX,ISR5X )
            SG_CWX = 0.D+0
            SN_CWX = 0.D+0
            SL_CWX = 1.D+0
            RHOF_CWX = RHOL_CWX
!
!---      Well state #2  ---
!
!         SL < 1.0
!         SG+SN > 0.0
!
!         Declared variables:
!
!         VAR_CWX(5) - aqueous saturation
!         VAR_CWX(6) - aqueous salt relative saturation, or
!                      aqueous salt mass fraction
!         VAR_CWX(7) - gas mass fraction of oil + gas
!
          ELSEIF( ITS_CW(NTP,NCW)/100.EQ.2 ) THEN
            SL_CWX = VAR_CWX(5)
            TMSX = VAR_CWX(6)
            XGX = VAR_CWX(7)
            RHOGSX = 1.225D+0*GCPP(37,1)
            RHONSX = 1.D+3*GCPP(37,2)
            PX = P_CWX + PATM
            IF( 1.D+0-XGX.GT.EPSL ) THEN
              POSM_CWX = XGX*RHONSX/((1.D+0-XGX)*RHOGSX)
              CALL BO_BP( PBPX,POSM_CWX,T_CWX )
              IF( PX.GT.PBPX ) THEN
                SN_CWX = 1.D+0
                SG_CWX = 0.D+0
              ELSE
                PVWX = 0.D+0
                CALL BO_EQ_GAS( PX,PVWX,RHOGX,T_CWX,XGC_CWX,XGWX )
                CALL BO_EQ_OIL( RHONX,PX,POSM_CWX,T_CWX,XNC_CWX )
                SN_CWX = RHOGX*(XGX*(1.D+0-SL_CWX)-XGC_CWX(1)*
     &            (1.D+0-SL_CWX))/(RHONX*(XNC_CWX(1)-XGX) - 
     &            RHOGX*(XGC_CWX(1)-XGX))
                SG_CWX = MAX( 1.D+0-SL_CWX-SN_CWX,0.D+0 )
              ENDIF
            ELSE
              SG_CWX = 1.D+0
              SN_CWX = 0.D+0
            ENDIF
            ISR5X = MOD(ISRT(NS)/10,10)
            IZNX = 0
            CALL BO_IC2( POSM_CWX,P_CWX,RHOG_CWX,RHOL_CWX,RHON_CWX,
     &        SL_CWX,TMSX,T_CWX,XGC_CWX,XGW_CWX,XLS_CWX,XLW_CWX,XNC_CWX,
     &        YLSX,ISR5X,IZNX )
            RHOF_CWX = SG_CWX*RHOG_CWX + SL_CWX*RHOL_CWX + 
     &        SN_CWX*RHON_CWX
!
!---      Well state #3  ---
!
!         SL = 0.0
!         SG+SN = 1.0
!
!         Declared variables:
!
!         VAR_CWX(5) - water vapor relative saturation
!         VAR_CWX(7) - gas mass fraction of oil + gas
!        
          ELSEIF( ITS_CW(NTP,NCW)/100.EQ.3 ) THEN
            SL_CWX = 0.D+0
            PVWX = VAR_CWX(5)
            YLSX = 0.D+0
            XLS_CWX = 0.D+0
            XGX = VAR_CWX(7)
            RHOGSX = 1.225D+0*GCPP(37,1)
            RHONSX = 1.D+3*GCPP(37,2)
            PX = P_CWX + PATM
            IF( 1.D+0-XGX.GT.EPSL ) THEN
              POSM_CWX = XGX*RHONSX/((1.D+0-XGX)*RHOGSX)
              CALL BO_BP( PBPX,POSM_CWX,T_CWX )
              IF( PX.GT.PBPX ) THEN
                SN_CWX = 1.D+0
                SG_CWX = 0.D+0
              ELSE
                PVWX = 0.D+0
                CALL BO_EQ_GAS( PX,PVWX,RHOGX,T_CWX,XGC_CWX,XGWX )
                CALL BO_EQ_OIL( RHONX,PX,POSM_CWX,T_CWX,XNC_CWX )
                SN_CWX = RHOGX*(XGX*(1.D+0-SL_CWX)-XGC_CWX(1)*
     &            (1.D+0-SL_CWX))/(RHONX*(XNC_CWX(1)-XGX) - 
     &            RHOGX*(XGC_CWX(1)-XGX))
                SG_CWX = MAX( 1.D+0-SL_CWX-SN_CWX,0.D+0 )
              ENDIF
            ELSE
              SG_CWX = 1.D+0
              SN_CWX = 0.D+0
            ENDIF
            IZNX = 0
            CALL BO_IC3( POSM_CWX,PVWX,P_CWX,RHOG_CWX,RHON_CWX,
     &        T_CWX,XGC_CWX,XGW_CWX,XNC_CWX,YLSX,IZNX )
              RHOF_CWX = SG_CWX*RHOG_CWX + SN_CWX*RHON_CWX
          ENDIF
!
!---      Well gas viscosity, Pa s  ---
!
          IF( SG_CWX.GT.0.D+0 ) THEN
            CALL BO_VISG( RHOG_CWX,VISG_CWX )
          ENDIF
!
!---      Well aqueous viscosity, Pa s
!         concentration of CO2 in mol/kg,
!         concentration of salt in mol/kg  ---
!
          IF( SL_CWX.GT.0.D+0 ) THEN
            CMLAX = 0.D+0
            CMLSX = 1.D+3*XLS_CWX*RHOL_CWX/WTMS
            CALL VISC_L( CMLAX,CMLSX,P_CWX,T_CWX,VISL_CWX )
          ENDIF
!
!---      Well nonaqueous-liquid viscosity, Pa s  ---
!
          IF( SN_CWX.GT.0.D+0 ) THEN
            CALL BO_VISN( PX,POSM_CWX,T_CWX,VISN_CWX )
          ENDIF
!
!---      Equivalent field node radius components  ---
!
          PERMX = MAX( PERM(1,IZN),1.D-20 )
          PERMY = MAX( PERM(2,IZN),1.D-20 )
          PERMZ = MAX( PERM(3,IZN),1.D-20 )
          RWX = MAX( PAR_CW(2,INVX),1.D-20 )
!
!---      Cylindrical coordinates with azimuthal symmetry,
!         centrally located wells  ---
!
          IF( (ICS.EQ.2 .OR. ICS.EQ.6) .AND. JFLD.EQ.1 ) THEN
            ROZ = RP(N)
!
!---        Specified pressure-equivalent radius  ---
!
            IF( PAR_CW(3,INVX)/EPSL.GT.EPSL ) THEN
              ROZ = PAR_CW(3,INVX)
            ENDIF
            RWX = MIN( RWX,9.999D-1*ROZ )
            PERMX = PERMRF(MF,N)*PERM(1,IZN)
            WI_CWX = 2.D+0*GPI*PERMX*ZLX/(LOG(ROZ/RWX)+PAR_CW(1,INVX))
          ELSE
            PERMYZ = SQRT(PERMY/PERMZ)
            PERMZY = SQRT(PERMZ/PERMY)
            DXGFX = DXGF(N)/FF_CW(1,NCW)
            DYGFX = DYGF(N)*RP(N)/FF_CW(2,NCW)
            DZGFX = DZGF(N)/FF_CW(3,NCW)
            ROX = 2.8D-1*SQRT(PERMYZ*(DZGFX**2) + PERMZY*(DYGFX**2))
     &      /(SQRT(PERMYZ)+SQRT(PERMZY))
            PERMZX = SQRT(PERMZ/PERMX)
            PERMXZ = SQRT(PERMX/PERMZ)
            ROY = 2.8D-1*SQRT(PERMZX*(DXGFX**2) + PERMXZ*(DZGFX**2))
     &        /(SQRT(PERMZX)+SQRT(PERMXZ))
            PERMYX = SQRT(PERMY/PERMX)
            PERMXY = SQRT(PERMX/PERMY)
            ROZ = 2.8D-1*SQRT(PERMYX*(DXGFX**2) + PERMXY*(DYGFX**2))
     &        /(SQRT(PERMYX)+SQRT(PERMXY))
!
!---        Specified pressure-equivalent radius  ---
!
            IF( PAR_CW(3,INVX)/EPSL.GT.EPSL ) THEN
              ROX = PAR_CW(3,INVX)
              ROY = PAR_CW(3,INVX)
              ROZ = PAR_CW(3,INVX)
            ENDIF
!
!---        Well index components  ---
!
            PERMX = PERMRF(MF,N)*PERM(1,IZN)
            PERMY = PERMRF(MF,N)*PERM(2,IZN)
            PERMZ = PERMRF(MF,N)*PERM(3,IZN)
            WIX = 2.D+0*GPI*SQRT(PERMY*PERMZ)*XLX/
     &        (LOG(ROX/RWX)+PAR_CW(1,INVX))
            WIY = 2.D+0*GPI*SQRT(PERMX*PERMZ)*YLX/
     &        (LOG(ROY/RWX)+PAR_CW(1,INVX))
            WIZ = 2.D+0*GPI*SQRT(PERMX*PERMY)*ZLX/
     &        (LOG(ROZ/RWX)+PAR_CW(1,INVX))
            WI_CWX = SQRT((WIX**2) + (WIY**2) + (WIZ**2))
          ENDIF
!
!---      Mass fluxes, positive into the node  ---
!
          DPGX = MAX( P_CWX-PGFX,0.D+0 )
          DPNX = MAX( P_CWX-PGFX,0.D+0 )
          DPLX = MAX( P_CWX-PGFX,0.D+0 )
!
!---      Zero fluxes from well to reservoir  ---
!
          FXW_CW(M,NWN) = 0.D+0
          DO IGC = 1,NGC+2
            FXC_CW(IGC,M,NWN) = 0.D+0
          ENDDO
!
!---      Gas flux from well to reservoir  ---
!
          IF( SG_CWX.GT.0.D+0 ) THEN
            FGX_CWX = SG_CWX*WI_CWX*RHOG_CWX*DPGX/VISG_CWX
!
!---        Water component gas flux from well to reservoir  ---
!
            FXW_CW(M,NWN) = FXW_CW(M,NWN) + FGX_CWX*XGW_CWX
!
!---        Gas component gas flux from well to reservoir  ---
!
            FXC_CW(1,M,NWN) = FXC_CW(1,M,NWN) +  FGX_CWX*XGC_CWX(1)
          ENDIF
!
!---      Aqueous flux from well to reservoir  ---
!
          IF( SL_CWX.GT.0.D+0 ) THEN
            FLX_CWX = SL_CWX*WI_CWX*RHOL_CWX*DPLX/VISL_CWX
!
!---        Water component aqueous flux from well to reservoir  ---
!
            FXW_CW(M,NWN) = FXW_CW(M,NWN) + FLX_CWX*XLW_CWX
          ENDIF
!
!---      Nonaqueous-liquid flux from well to reservoir  ---
!
          IF( SN_CWX.GT.0.D+0 ) THEN
            FNX_CWX = SN_CWX*WI_CWX*RHON_CWX*DPNX/VISN_CWX
!
!---        Gas component Nonaqueous-liquid flux from well to 
!           reservoir  ---
!
            FXC_CW(1,M,NWN) = FXC_CW(1,M,NWN) +  FNX_CWX*XNC_CWX(1)
!
!---        Oil component Nonaqueous-liquid flux from well to 
!           reservoir  ---
!
            FXC_CW(2,M,NWN) = FXC_CW(2,M,NWN) +  FNX_CWX*XNC_CWX(2)
          ENDIF
!
!---      Store current coupled-well node location in previous
!         coupled-well node location  ---
!
          XPX(1) = XPX(2)
          YPX(1) = YPX(2)
          ZPX(1) = ZPX(2)
!
!---      Volumetric injection well fluxes  ---
!
          IF( M.EQ.1 ) THEN
            IF( SL_CWX.GT.0.D+0 ) Q_CW(2,NWN) = FLX_CWX/RHOL_CWX
            IF( SG_CWX.GT.0.D+0 ) Q_CW(3,NWN) = FGX_CWX/RHOG_CWX
            IF( SN_CWX.GT.0.D+0 ) Q_CW(4,NWN) = FNX_CWX/RHON_CWX
            Q_CW(1,NWN) = Q_CW(2,NWN) + Q_CW(3,NWN) + Q_CW(4,NWN)
          ENDIF
        ENDDO
      ENDDO
!
!---  Mass balance residuals for injection type coupled well  ---
!
      NWFX = ID_CW(6,NCW)-ID_CW(5,NCW)+1
      NX = (NWFX*ISVC)+2
      RSL_CWX(1) = 0.D+0
      RSL_CWX(NX) = 0.D+0
      QM_CW(1,NCW) = 0.D+0
      QM_CW(3,NCW) = 0.D+0
      QM_CW(5,NCW) = 0.D+0
      DO IGC = 1,NGC+2
        QM_CW((7+(IGC-1)*2),NCW) = 0.D+0
      ENDDO
      QM_CWX = 0.D+0
      QTM_CWX = 0.D+0
!
!---  Loop over coupled-well nodes  ---
!
      DO NWN = ID_CW(3,NCW),ID_CW(4,NCW)
        RSL_CWX(1) = RSL_CWX(1) - FXW_CW(1,NWN)
        RSL_CWX(NX) = RSL_CWX(NX) - FXW_CW(ISVC+2,NWN)
        QTM_CWX = QTM_CWX + FXW_CW(1,NWN)
        QM_CW(3,NCW) = QM_CW(3,NCW) + FXW_CW(1,NWN)
        QM_CWX = QM_CWX + FXW_CW(ISVC+2,NWN)
        DO IGC = 1,NGC+2
          RSL_CWX(1) = RSL_CWX(1) - FXC_CW(IGC,1,NWN)
          RSL_CWX(NX) = RSL_CWX(NX) - FXC_CW(IGC,ISVC+2,NWN)
          QTM_CWX = QTM_CWX + FXC_CW(IGC,1,NWN)
          QM_CW(1,NCW) = QM_CW(1,NCW) + FXC_CW(IGC,1,NWN)
          QM_CW((7+(IGC-1)*2),NCW) = QM_CW((7+(IGC-1)*2),NCW) + 
     &      FXC_CW(IGC,1,NWN)
          QM_CWX = QM_CWX + FXC_CW(IGC,ISVC+2,NWN)
        ENDDO
      ENDDO
!
!---  Loop over field nodes that contain coupled-well nodes  ---
!
      DO NWF = ID_CW(5,NCW),ID_CW(6,NCW)
!
!---    Skip for processors without field nodes with coupled-well
!       nodes  ---
!
        IF( IWF_CW(NWF).EQ.0 ) CYCLE
        M1 = (NWF-ID_CW(5,NCW))*ISVC + 1
        DO M2 = 1,ISVC
          M3 = M1+M2
          RSL_CWX(M3) = VAR_CW2X
!
!---      Loop over coupled-well nodes  ---
!
          DO NWN = ID_CW(3,NCW),ID_CW(4,NCW)
!
!---        If coupled-well node is within the current field
!           node, use incremented fluxes  ---
!
            IF( IWF_CW(NWF).EQ.IWN_CW(NWN) ) THEN
              RSL_CWX(M3) = RSL_CWX(M3) - FXW_CW(M2+1,NWN) 
              DO  IGC = 1,NGC+2
                RSL_CWX(M3) = RSL_CWX(M3) - FXC_CW(IGC,M2+1,NWN)
              ENDDO
!
!---        If coupled-well node is outside the current field
!           node, use un-incremented fluxes  ---
!
            ELSE
              RSL_CWX(M3) = RSL_CWX(M3) - FXW_CW(1,NWN)
              DO IGC = 1,NGC+2
                RSL_CWX(M3) = RSL_CWX(M3) - FXC_CW(IGC,1,NWN)
              ENDDO
            ENDIF
          ENDDO
        ENDDO
      ENDDO
!
!---  Redefine local residuals to be the change in the coupled-well
!     residual mass with respect to the change in the field-node
!     primary variables, except for the first and last residuals  ---
!
      DO NWF = ID_CW(5,NCW),ID_CW(6,NCW)
        N = IWF_CW(NWF)
        IF( N.EQ.0 ) CYCLE
        MX = (NWF-ID_CW(5,NCW))*ISVC + 1
        DO M = 1,ISVC
          RSL_CWX(MX+M) = (RSL_CWX(MX+M)-RSL_CWX(1))/DNR(M,N)
        ENDDO
      ENDDO
!
!---  Global injection well mass balance residuals  ---
!
      CALL MPI_ALLREDUCE( RSL_CWX,RS_CW(1,NCW),NX,MPI_REAL8,MPI_SUM,
     &  MPI_COMM_WORLD,IERR )
!
!---  Add mass injection rate into global injection well mass 
!     balance residuals for the first and last residuals  ---
!
      RS_CW(1,NCW) = RS_CW(1,NCW) + VAR_CWX(2)
      RS_CW(NX,NCW) = RS_CW(NX,NCW) + VAR_CWX(2)
!
!---  Reset subroutine character string ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of INJ_BO_WELL group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE INJ_COUP_WELL( NCW )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!
!     STOMPX-EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Injection coupled well model
!     
!     Rate controlled or pressure controlled
!
!     Flux of energy, water mass, CO2 mass, CH4 mass, and petroleum
!     component masses from coupled-well nodes to field nodes.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 16 December 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOURC
      USE SOLTN
      USE PROP
      USE JACOB
      USE HYST
      USE GRID
      USE GLB_PAR
      USE FDVP
      USE COUP_WELL
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 XPX(2),YPX(2),ZPX(2)
      REAL*8 VAR_CWX(6+LNGC)
      REAL*8 ZMCX(LNGC)
      REAL*8 XGC_CWX(LNGC),XNC_CWX(LNGC),XMGCX(LNGC),XMNCX(LNGC)
      REAL*8, DIMENSION(1:(LUK_CW+1)) :: RSL_CWX
      INTEGER, SAVE :: IALLOC
      DATA IALLOC /0/
      INTEGER, DIMENSION(1:(LUK+2)) :: MCW,MFD
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/INJ_COUP_WELL'
!
!---  Black-oil option  ---
!
      IF( ISLC(68).EQ.0 ) THEN
        CALL INJ_BO_WELL( NCW )
        ISUB_LOG = ISUB_LOG-1
        RETURN
      ENDIF
!
!---  Compositional option  ---
!
      DO M = 1,ISVC+2
        IF( M.NE.ISVC+2 ) THEN
          MCW(M) = 2
        ELSE
          MCW(M) = 3
        ENDIF
        IF( M.NE.ISVC+2 ) THEN
          MFD(M) = M+1
        ELSE
          MFD(M) = 2
        ENDIF
      ENDDO       
!
!---  K-factors computed from fugacity coefficients  ---
!
      IFK = 0
!
!---  Flow controlled well ---
!
      ID_CW(8,NCW) = 0
!
!---  Zero injection well fluxes ---
!
      QM_CW(1,NCW) = 0.D+0
      QM_CW(3,NCW) = 0.D+0
      QM_CW(5,NCW) = 0.D+0
      DO IGC = 1,NGC+2
        QM_CW((7+(IGC-1)*2),NCW) = 0.D+0
      ENDDO
!
!---  Loop over coupled-well nodes  ---
!
      DO NWN = ID_CW(3,NCW),ID_CW(4,NCW)
!
!---    Zero volumetric injection well fluxes
!
!       Q_CW(1,NWN) - total volumetric flux, m^3/s
!       Q_CW(2,NWN) - aqueous volumetric flux, m^3/s
!       Q_CW(3,NWN) - gas volumetric flux, m^3/s
!       Q_CW(4,NWN) - nonaqueous-liquid volumetric flux, m^3/s  ---
!
        DO M = 1,4
          Q_CW(M,NWN) = 0.D+0
        ENDDO
!
!---    Loop over increment indices  ---
!
        DO M = 1,ISVC+2
          DO IGC = 1,NGC+2
            FXC_CW(IGC,M,NWN) = 0.D+0
          ENDDO
          FXE_CW(M,NWN) = 0.D+0
          FXW_CW(M,NWN) = 0.D+0
        ENDDO
      ENDDO
!
!---  Injection well time interval ---
!
      DQ_CWX = 1.D-6
      TMZ = TM
      IF( NSTEP-NRST.EQ.0 ) TMZ = TMZ*(1.D+0+EPSL)+EPSL
!
!---  Cyclic time periods  ---
!
      IF( ICC_CW(NCW).EQ.1 ) THEN
!
!---    Loop over the injection well time periods, to find the 
!       final well time  ---
!
        NTX = 0
        DO NTP = 1,IM_CW(NCW)
          NTX = NTX + IMP_CW(NTP,NCW)
        ENDDO
!
!---    Determine time with the cyclic time period  ---
!
        TMZ = MOD( TM,VAR_CW(1,NTX,NCW) )
        IF( TM.GT.VAR_CW(1,NTX,NCW) ) THEN
          IF( TMZ.LT.EPSL ) TMZ = VAR_CW(1,NTX,NCW)
        ENDIF
      ENDIF
!
!---  Injection well is inactive set well pressure to be in 
!     equilibrium with reservoir  ---
!
      IF( TMZ.LE.VAR_CW(1,1,NCW) ) THEN
        CALL EQUIL_COUP_WELL( NCW )
        ID_CW(8,NCW) = 1
        ISUB_LOG = ISUB_LOG-1
        RETURN
      ENDIF
!
!---  Loop over the injection well time periods  ---
!
      NS = 1
      IFIND = 0
      L1 : DO NTP = 1,IM_CW(NCW)
!
!---    Injection well time period only has one time (start time)  ---
!
        IF( IMP_CW(NTP,NCW).EQ.1 ) THEN
!
!---      Time prior to start time, injection well is inactive, set 
!         well pressure to be in equilibrium with reservoir  ---
!
          IF( TMZ.LE.VAR_CW(1,NS,NCW) ) THEN
            CALL EQUIL_COUP_WELL( NCW )
            ID_CW(8,NCW) = 1
            ISUB_LOG = ISUB_LOG-1
            RETURN
!
!---      Time after start time, injection well is active  ---
!
          ELSE
            DO N = 2,NGC+8
              VAR_CWX(N) = VAR_CW(N,1,NCW)
            ENDDO
            QMO_CWX = 0.D+0
            IFIND = 1
            EXIT L1
          ENDIF
!
!---    Injection well time period has multiple times  ---
!
        ELSE
          NE = NS + IMP_CW(NTP,NCW) - 1
!
!---      Time outside of injection well time period, go to next 
!         injection well time period  ---
!
          IF( TMZ.LE.VAR_CW(1,NS,NCW) .OR. 
     &      TMZ.GT.VAR_CW(1,NE,NCW) ) THEN
            NS = NS + IMP_CW(NTP,NCW)
            CYCLE L1
          ENDIF
!
!---      Injection well time period has multiple time points, use  
!         linear interpolation of well parameters between time points  ---
!
          DO M = 2,IMP_CW(NTP,NCW)
            MX = NS + M - 1
            IF( TMZ.LE.VAR_CW(1,MX,NCW) ) THEN
              TD_CW = VAR_CW(1,MX,NCW)-VAR_CW(1,MX-1,NCW)
              DT_CW = MIN( VAR_CW(1,MX,NCW)-TMZ,DT )
              TF_CWX = (TMZ-VAR_CW(1,MX-1,NCW))/TD_CW
              DO N = 2,NGC+8
                VAR_CWX(N) = VAR_CW(N,MX-1,NCW) + 
     &            TF_CWX*(VAR_CW(N,MX,NCW)-VAR_CW(N,MX-1,NCW))
              ENDDO
              QMO_CWX = 0.D+0
              IFIND = 1
              EXIT L1
            ENDIF
          ENDDO
        ENDIF
        NS = NS + IMP_CW(NTP,NCW)
      ENDDO L1
!
!---  Injection well is inactive set well pressure to be in 
!     equilibrium with reservoir  ---
!
      IF( IFIND.EQ.0 ) THEN
        CALL EQUIL_COUP_WELL( NCW )
        ID_CW(8,NCW) = 1
        ISUB_LOG = ISUB_LOG-1
        RETURN
      ENDIF
      L2 : DO
!
!---  Initialize local coupled-well mass residuals ---
!
      DO M = 1,(LUK_CW+1)
        RSL_CWX(M) = 0.D+0
      ENDDO
!
!---  Load pressure limit ---
!
      PL_CW(NCW) = VAR_CWX(3) - PATM
!
!---  Pressure controlled well ---
!
      IF( PL_CW(NCW)-P_CW(2,NCW).LT.EPSL ) THEN
        ID_CW(8,NCW) = 1
      ENDIF
!
!---  Excessive flow rate, pressure controlled well ---
!
      IF( VAR_CWX(2).GT.1.D+5 ) THEN
        ID_CW(8,NCW) = 1
        P_CW(2,NCW) = PL_CW(NCW)
      ENDIF
!
!---  Loop over increment indices ---
!
      DO M = 1,ISVC+2
        MW = MCW(M)
        MF = MFD(M)
        N = IWN_CW(ID_CW(3,NCW))
        P_CWX = P_CW(MW,NCW)
        NPHAZX = 0
!
!---    Nonisothermal simulations  ---
!
        IF( ISLC(30).EQ.0 ) THEN
          T_CWX = VAR_CWX(4)
        ELSE
          T_CWX = T(2,N)
        ENDIF
!
!---    Well state #1  ---
!
!       SL = 1.0
!       SG+SN = 0.0
!
!       Declared variables:
!
!       VAR_CWX(5) - aqueous CO2 relative saturation, or
!                    aqueous CO2 mass fraction
!       VAR_CWX(6) - aqueous salt relative saturation, or
!                         aqueous salt mass fraction
!
        IF( ITS_CW(NTP,NCW)/100.EQ.1 ) THEN
          PVAX = VAR_CWX(5)
          TMSX = VAR_CWX(6)
          ISR4X = MOD(ITS_CW(NTP,NCW),10)
          ISR5X = MOD(ITS_CW(NTP,NCW)/10,10)
          CALL FLH_IC1( P_CWX,PVAX,RHOL_CWX,RHOMLX,TMSX,T_CWX,XLA_CWX,
     &      XLS_CWX,XLW_CWX,XMLAX,XMLSX,XMLWX,YLSX,ZMCX,ISR4X,ISR5X )
          SG_CWX = 0.D+0
          SN_CWX = 0.D+0
          SL_CWX = 1.D+0
          RHOF_CWX = RHOL_CWX
!
!---    Well state #2  ---
!
!       SL < 1.0
!       SG+SN > 0.0
!
!       Declared variables:
!
!       VAR_CWX(5) - aqueous saturation
!       VAR_CWX(6) - aqueous salt relative saturation, or
!                    aqueous salt mass fraction
!       VAR_CWX(6+NGC) - total mole fraction of petroleum comp.
!
        ELSEIF( ITS_CW(NTP,NCW)/100.EQ.2 ) THEN
          SL_CWX = VAR_CWX(5)
          TMSX = VAR_CWX(6)
          ISR5X = MOD(ISRT(NS)/10,10)
          DO IGC = 1,NGC+2
            JGC = 6 + IGC
            ZMCX(IGC) = VAR_CWX(JGC)
          ENDDO
          IZNX = 0
          CALL FLH_IC2( P_CWX,RHOG_CWX,RHOMGX,RHOL_CWX,RHOMLX,
     &      RHON_CWX,RHOMNX,SG_CWX,SL_CWX,SN_CWX,TMSX,T_CWX,
     &      XGC_CWX,
     &      XMGCX,XGW_CWX,XMGWX,XLA_CWX,XLS_CWX,XLW_CWX,XMLAX,XMLSX,
     &      XMLWX,XNC_CWX,XMNCX,YLSX,ZGX,ZMCX,ZNX,ISR5X,IZNX,NPHAZX )
          RHOF_CWX = SG_CWX*RHOG_CWX + SL_CWX*RHOL_CWX + 
     &      SN_CWX*RHON_CWX
!
!---    Well state #3  ---
!
!       SL = 0.0
!       SG+SN = 1.0
!
!       Declared variables:
!
!       VAR_CWX(5) - water vapor relative saturation
!       VAR_CWX(6+) - total mole fraction of petroleum comp.
!      
        ELSEIF( ITS_CW(NTP,NCW)/100.EQ.3 ) THEN
          DO IGC = 1,NGC+2
            JGC = 6 + IGC
            ZMCX(IGC) = VAR_CWX(JGC)
          ENDDO
          SL_CWX = 0.D+0
          PVWX = VAR_CWX(5)
          YLSX = 0.D+0
          IZNX = 0
          CALL FLH_IC3( PVWX,P_CWX,RHOG_CWX,RHOMGX,RHON_CWX,RHOMNX,
     &      SG_CWX,SN_CWX,T_CWX,XGC_CWX,XGW_CWX,XMGCX,
     &      XMGWX,XNC_CWX,XMNCX,YLSX,ZGX,ZMCX,ZNX,IZNX,NPHAZX )
          RHOF_CWX = SG_CWX*RHOG_CWX + SN_CWX*RHON_CWX
        ENDIF
!
!---    Load local variable for mass flux, kg/s  ---
!
        IF( M.EQ.1 ) THEN
!
!---      Convert volumetric flow rate, m^3/s to mass flow rate, kg/s,
!         using fluid density at top of screened interval  ---
!
          IF( IT_CW(NCW).EQ.2 ) THEN
            VAR_CW2X = VAR_CWX(2)*RHOF_CWX
          ELSE
            VAR_CW2X = VAR_CWX(2)
          ENDIF
!
!---      Load injection mass flux for use in RSDL_COUP_WELL ---
!
          FX_CW(NCW) = VAR_CW2X
        ENDIF
!
!---    Store top of coupled-well location in previous
!       coupled-well node location  ---
!
        XPX(1) = XTP_CW(1,ID_CW(1,NCW))
        YPX(1) = YTP_CW(1,ID_CW(1,NCW))
        ZPX(1) = ZTP_CW(1,ID_CW(1,NCW))
!
!---    Loop over the nodes in the coupled well ---
!
        DO NWN = ID_CW(3,NCW),ID_CW(4,NCW)
          N = IWN_CW(NWN)
          INVX = INV_CW(NWN)
          IZN = IZ(N)
          NPHAZX = 0
!
!---      Nonisothermal simulations  ---
!
          IF( ISLC(30).EQ.0 ) THEN
            T_CWX = VAR_CWX(4)
          ELSE
            T_CWX = T(2,N)
          ENDIF
!
!---      Coupled-well node centroids and projections ---
!
          XLX = PLX_CW(NWN)
          YLX = PLY_CW(NWN)
          ZLX = PLZ_CW(NWN)
          XPX(2) = 5.D-1*(XP_CW(2,NWN)+XP_CW(1,NWN))
          YPX(2) = 5.D-1*(YP_CW(2,NWN)+YP_CW(1,NWN))
          ZPX(2) = 5.D-1*(ZP_CW(2,NWN)+ZP_CW(1,NWN))
!
!---      Cylindrical coordinates with azimuthal symmetry,
!         centrally located wells  ---
!
          IF( (ICS.EQ.2 .OR. ICS.EQ.6) .AND. JFLD.EQ.1 ) THEN
            XPNX = 0.D+0
            YPNX = 0.D+0
            ZPNX = ZP(N)
!
!---      Cylindrical coordinates  ---
!
          ELSEIF( ICS.EQ.2 .OR. ICS.EQ.6 ) THEN
            XPNX = XP(N)*COS(YP(N))
            YPNX = XP(N)*SIN(YP(N))
            ZPNX = ZP(N)
!
!---      Cartesian or boundary-fitted orthogonal coordinates  ---
!
          ELSE
            XPNX = XP(N)
            YPNX = YP(N)
            ZPNX = ZP(N)
          ENDIF
!
!---      Well pressure using previous coupled-well node density ---
!
          P_CWX = P_CWX - (ZPX(2)-ZPX(1))*GRAV*RHOF_CWX
!
!---      Well pressure at the node centroid, used for coupled-well
!         nodal output  ---
!
          IF( M.EQ.1 ) THEN
            NWF = IWP_CW(NWN)
            PF_CW(NWF) = P_CWX - (ZPNX-ZPX(1))*GRAV*RHOF_CWX
          ENDIF
!
!---      Adjust the reservoir pressure to the coupled-well node
!         centroid  ---
!
!---      Phase condition #1  ---
!
!         SL = 1.0, SG+SN = 0.0
!
          IF( MOD(NPHAZ(2,N),10).EQ.1 ) THEN
            PLFX = PL(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHOL(MF,N)
            PNFX = PN(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHOL(MF,N)
            PTX = MAX( PLFX,PNFX )
            CPGTX = MAX( (PG(MF,N)-MAX( PL(MF,N),PN(MF,N) )),0.D+0 )
            PGFX = PTX + CPGTX
!
!---      Phase condition #2  ---
!
!         SL < 1.0, ST > 0.0, SG = 0.0
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.2 ) THEN
            PLFX = PL(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHOL(MF,N)
            PNFX = PN(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHON(MF,N)
            PTX = MAX( PLFX,PNFX )
            CPGTX = MAX( (PG(MF,N)-MAX( PL(MF,N),PN(MF,N) )),0.D+0 )
            PGFX = PTX + CPGTX
!
!---      Phase condition #3  ---
!
!         SL < 1.0, ST > 0.0, SG > 0.0
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.3 ) THEN
            PLFX = PL(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHOL(MF,N)
            PNFX = PN(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHON(MF,N)
            PTX = MAX( PLFX,PNFX )
            CPGTX = MAX( (PG(MF,N)-MAX( PL(MF,N),PN(MF,N) )),0.D+0 )
            PGFX = PTX + CPGTX
!
!---      Phase condition #4  ---
!
!         SL = 0.0, ST = 1.0, SG = 0.0
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.4 ) THEN
            PLFX = PL(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHON(MF,N)
            PNFX = PN(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHON(MF,N)
            PTX = MAX( PLFX,PNFX )
            CPGTX = MAX( (PG(MF,N)-MAX( PL(MF,N),PN(MF,N) )),0.D+0 )
            PGFX = PTX + CPGTX
!
!---      Phase condition #5  ---
!
!         SL = 0.0, ST = 1.0, SG > 0.0
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.5 ) THEN
            PLFX = PL(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHON(MF,N)
            PNFX = PN(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHON(MF,N)
            PTX = MAX( PLFX,PNFX )
            CPGTX = MAX( (PG(MF,N)-MAX( PL(MF,N),PN(MF,N) )),0.D+0 )
            PGFX = PTX + CPGTX
          ENDIF
!
!---      Well state #1  ---
!
!         SL = 1.0
!         SG+SN = 0.0
!
!         Declared variables:
!
!         VAR_CWX(5) - aqueous CO2 relative saturation, or
!                      aqueous CO2 mass fraction
!         VAR_CWX(6) - aqueous salt relative saturation, or
!                           aqueous salt mass fraction
!
          IF( ITS_CW(NTP,NCW)/100.EQ.1 ) THEN
            PVAX = VAR_CWX(5)
            TMSX = VAR_CWX(6)
            ISR4X = MOD(ITS_CW(NTP,NCW),10)
            ISR5X = MOD(ITS_CW(NTP,NCW)/10,10)
            CALL FLH_IC1( P_CWX,PVAX,RHOL_CWX,RHOMLX,TMSX,T_CWX,XLA_CWX,
     &      XLS_CWX,XLW_CWX,XMLAX,XMLSX,XMLWX,YLSX,ZMCX,ISR4X,ISR5X )
            SG_CWX = 0.D+0
            SN_CWX = 0.D+0
            SL_CWX = 1.D+0
            RHOF_CWX = RHOL_CWX
!
!---      Well state #2  ---
!
!         SL < 1.0
!         SG+SN > 0.0
!
!         Declared variables:
!
!         VAR_CWX(5) - aqueous saturation
!         VAR_CWX(6) - aqueous salt relative saturation, or
!                      aqueous salt mass fraction
!         VAR_CWX(6+NGC) - total mole fraction of petroleum comp.
!
          ELSEIF( ITS_CW(NTP,NCW)/100.EQ.2 ) THEN
            SL_CWX = VAR_CWX(5)
            TMSX = VAR_CWX(6)
            ISR5X = MOD(ISRT(NS)/10,10)
            DO IGC = 1,NGC+2
              JGC = 6 + IGC
              ZMCX(IGC) = VAR_CWX(JGC)
            ENDDO
            IZNX = 0
            CALL FLH_IC2( P_CWX,RHOG_CWX,RHOMGX,RHOL_CWX,RHOMLX,
     &        RHON_CWX,RHOMNX,SG_CWX,SL_CWX,SN_CWX,TMSX,T_CWX,XGC_CWX,
     &        XMGCX,XGW_CWX,XMGWX,XLA_CWX,XLS_CWX,XLW_CWX,XMLAX,XMLSX,
     &        XMLWX,XNC_CWX,XMNCX,YLSX,ZGX,ZMCX,ZNX,ISR5X,IZNX,NPHAZX )
            RHOF_CWX = SG_CWX*RHOG_CWX + SL_CWX*RHOL_CWX + 
     &        SN_CWX*RHON_CWX
!
!---      Well state #3  ---
!
!         SL = 0.0
!         SG+SN = 1.0
!
!         Declared variables:
!
!         VAR_CWX(5) - water vapor relative saturation
!         VAR_CWX(6+) - total mole fraction of petroleum comp.
!        
          ELSEIF( ITS_CW(NTP,NCW)/100.EQ.3 ) THEN
            DO IGC = 1,NGC+2
              JGC = 6 + IGC
              ZMCX(IGC) = VAR_CWX(JGC)
            ENDDO
            SL_CWX = 0.D+0
            PVWX = VAR_CWX(5)
            YLSX = 0.D+0
            IZNX = 0
            CALL FLH_IC3( PVWX,P_CWX,RHOG_CWX,RHOMGX,RHON_CWX,RHOMNX,
     &        SG_CWX,SN_CWX,T_CWX,XGC_CWX,XGW_CWX,XMGCX,XMGWX,
     &        XNC_CWX,
     &        XMNCX,YLSX,ZGX,ZMCX,ZNX,IZNX,NPHAZX )
            RHOF_CWX = SG_CWX*RHOG_CWX + SN_CWX*RHON_CWX
          ENDIF
!
!---      Well gas viscosity, Pa s  ---
!
          IF( SG_CWX.GT.0.D+0 ) THEN
            CALL VISC_G( RHOMGX,T_CWX,VISG_CWX,XMGCX,XMGWX )
          ENDIF
!
!---      Well aqueous viscosity, Pa s
!         concentration of CO2 in mol/kg,
!         concentration of salt in mol/kg  ---
!
          IF( SL_CWX.GT.0.D+0 ) THEN
            CMLAX = 0.D+0
            CMLSX = 1.D+3*XLS_CWX*RHOL_CWX/WTMS
            CALL VISC_L( CMLAX,CMLSX,P_CWX,T_CWX,VISL_CWX )
          ENDIF
!
!---      Well nonaqueous-liquid viscosity, Pa s  ---
!
          IF( SN_CWX.GT.0.D+0 ) THEN
            CALL VISC_N( RHOMNX,T_CWX,VISN_CWX,XMNCX )
          ENDIF
!
!---      Fluid enthalpy, unless nonisothermal simulation  ---
!
          IF( ISLC(30).EQ.0 ) THEN
!
!---        Well gas enthalpy and internal energy, W/kg  ---
!
            IF( SG_CWX.GT.0.D+0 ) THEN
              CALL ENTH_G( HG_CWX,HGA_CWX,HGW_CWX,P_CWX,T_CWX,
     &          RHOG_CWX,UEGX,XGC_CWX,XGW_CWX,XMGCX,ZGX )
            ENDIF
!
!---        Well nonaqueous-liquid enthalpy and 
!           internal energy, W/kg  ---
!
            IF( SN_CWX.GT.0.D+0 ) THEN
              CALL ENTH_N( HN_CWX,HNAX,P_CWX,T_CWX,RHON_CWX,
     &           UENX,XNC_CWX,XMNCX,ZNX )
            ENDIF
!
!---        Well aqueous enthalpy and internal energy, W/kg  ---
!
            IF( SL_CWX.GT.0.D+0 ) THEN
!
!---          Pure water liquid enthalpy  ---
!
              CALL SP_W( T_CWX,PSWX )
              PEX = MAX( PSWX,P_CWX )
              ISRX = 1
              CALL ENTH_W( T_CWX,PEX,HLWX,HGWX,ISRX )
!
!---          Brine enthalpy  ---
!
              CALL ENTH_B( T_CWX,XLS_CWX,HLWX,HBX )
!
!---          Dissolved CO2 contribution  ---
!
              IF( SG_CWX.GT.0.D+0 ) THEN
                FGAX = SG_CWX*RHOG_CWX*XGC_CWX(1)
              ELSE
                FGAX = 0.D+0
              ENDIF
              IF( SN_CWX.GT.0.D+0 ) THEN
                FNAX = SN_CWX*RHON_CWX*XNC_CWX(1)
              ELSE
                FNAX = 0.D+0
              ENDIF
              IF( (FGAX+FNAX)/EPSL.LT.EPSL ) THEN
                HAX = 0.D+0
              ELSE
                HAX = (HGA_CWX*FGAX + HNAX*FNAX)/(FGAX + FNAX)
              ENDIF
!
!---          Aqueous enthalpy and internal energy  ---
!
              CALL ENTH_L( HAX,HBX,HL_CWX,T_CWX,XLA_CWX,XLS_CWX )
            ENDIF
          ENDIF
!
!---      Equivalent field node radius components  ---
!
          PERMX = MAX( PERM(1,IZN),1.D-20 )
          PERMY = MAX( PERM(2,IZN),1.D-20 )
          PERMZ = MAX( PERM(3,IZN),1.D-20 )
          RWX = MAX( PAR_CW(2,INVX),1.D-20 )
!
!---      Cylindrical coordinates with azimuthal symmetry,
!         centrally located wells  ---
!
          IF( (ICS.EQ.2 .OR. ICS.EQ.6) .AND. JFLD.EQ.1 ) THEN
            ROZ = RP(N)
!
!---        Specified pressure-equivalent radius  ---
!
            IF( PAR_CW(3,INVX)/EPSL.GT.EPSL ) THEN
              ROZ = PAR_CW(3,INVX)
            ENDIF
            RWX = MIN( RWX,9.999D-1*ROZ )
            PERMX = PERMRF(MF,N)*PERM(1,IZN)
            WI_CWX = 2.D+0*GPI*PERMX*ZLX/(LOG(ROZ/RWX)+PAR_CW(1,INVX))
          ELSE
            PERMYZ = SQRT(PERMY/PERMZ)
            PERMZY = SQRT(PERMZ/PERMY)
            DXGFX = DXGF(N)/FF_CW(1,NCW)
            DYGFX = DYGF(N)*RP(N)/FF_CW(2,NCW)
            DZGFX = DZGF(N)/FF_CW(3,NCW)
            ROX = 2.8D-1*SQRT(PERMYZ*(DZGFX**2) + PERMZY*(DYGFX**2))
     &      /(SQRT(PERMYZ)+SQRT(PERMZY))
            PERMZX = SQRT(PERMZ/PERMX)
            PERMXZ = SQRT(PERMX/PERMZ)
            ROY = 2.8D-1*SQRT(PERMZX*(DXGFX**2) + PERMXZ*(DZGFX**2))
     &        /(SQRT(PERMZX)+SQRT(PERMXZ))
            PERMYX = SQRT(PERMY/PERMX)
            PERMXY = SQRT(PERMX/PERMY)
            ROZ = 2.8D-1*SQRT(PERMYX*(DXGFX**2) + PERMXY*(DYGFX**2))
     &        /(SQRT(PERMYX)+SQRT(PERMXY))
!
!---        Specified pressure-equivalent radius  ---
!
            IF( PAR_CW(3,INVX)/EPSL.GT.EPSL ) THEN
              ROX = PAR_CW(3,INVX)
              ROY = PAR_CW(3,INVX)
              ROZ = PAR_CW(3,INVX)
            ENDIF
!
!---        Well index components  ---
!
            PERMX = PERMRF(MF,N)*PERM(1,IZN)
            PERMY = PERMRF(MF,N)*PERM(2,IZN)
            PERMZ = PERMRF(MF,N)*PERM(3,IZN)
            WIX = 2.D+0*GPI*SQRT(PERMY*PERMZ)*XLX/
     &        (LOG(ROX/RWX)+PAR_CW(1,INVX))
            WIY = 2.D+0*GPI*SQRT(PERMX*PERMZ)*YLX/
     &        (LOG(ROY/RWX)+PAR_CW(1,INVX))
            WIZ = 2.D+0*GPI*SQRT(PERMX*PERMY)*ZLX/
     &        (LOG(ROZ/RWX)+PAR_CW(1,INVX))
            WI_CWX = SQRT((WIX**2) + (WIY**2) + (WIZ**2))
          ENDIF
!
!---      Mass fluxes, positive into the node  ---
!
          DPGX = MAX( P_CWX-PGFX,0.D+0 )
          DPNX = MAX( P_CWX-PGFX,0.D+0 )
          DPLX = MAX( P_CWX-PGFX,0.D+0 )
!
!---      Zero fluxes from well to reservoir  ---
!
          FXE_CW(M,NWN) = 0.D+0
          FXW_CW(M,NWN) = 0.D+0
          DO IGC = 1,NGC+2
            FXC_CW(IGC,M,NWN) = 0.D+0
          ENDDO
!
!---      Gas flux from well to reservoir  ---
!
          IF( SG_CWX.GT.0.D+0 ) THEN
            FGX_CWX = SG_CWX*WI_CWX*RHOG_CWX*DPGX/VISG_CWX
            IF( ISLC(30).EQ.0 )
     &        FXE_CW(M,NWN) = FXE_CW(M,NWN) + FGX_CWX*HG_CWX
            FXW_CW(M,NWN) = FXW_CW(M,NWN) + FGX_CWX*XGW_CWX
            DO IGC = 1,NGC+2
              IF( ISLC(45).NE.0 .AND. IGC.EQ.1 ) CYCLE
              IF( ISLC(64).NE.0 .AND. IGC.EQ.2 ) CYCLE
              FXC_CW(IGC,M,NWN) = FXC_CW(IGC,M,NWN) + 
     &          FGX_CWX*XGC_CWX(IGC)
            ENDDO
          ELSE
            FGX_CWX = 0.D+0
          ENDIF
!
!---      Aqueous flux from well to reservoir  ---
!
          IF( SL_CWX.GT.0.D+0 ) THEN
            FLX_CWX = SL_CWX*WI_CWX*RHOL_CWX*DPLX/VISL_CWX
            IF( ISLC(30).EQ.0 )
     &        FXE_CW(M,NWN) = FXE_CW(M,NWN) + FLX_CWX*HL_CWX
            FXW_CW(M,NWN) = FXW_CW(M,NWN) + FLX_CWX*XLW_CWX
            IF( ISLC(45).EQ.0 ) 
     &        FXC_CW(1,M,NWN) = FXC_CW(1,M,NWN) + FLX_CWX*XLA_CWX
          ELSE
            FLX_CWX = 0.D+0
          ENDIF
!
!---      Nonaqueous-liquid flux from well to reservoir  ---
!
          IF( SN_CWX.GT.0.D+0 ) THEN
            FNX_CWX = SN_CWX*WI_CWX*RHON_CWX*DPNX/VISN_CWX
            IF( ISLC(30).EQ.0 )
     &        FXE_CW(M,NWN) = FXE_CW(M,NWN) + FNX_CWX*HN_CWX
            DO IGC = 1,NGC+2
              IF( ISLC(45).NE.0 .AND. IGC.EQ.1 ) CYCLE
              IF( ISLC(64).NE.0 .AND. IGC.EQ.2 ) CYCLE
              FXC_CW(IGC,M,NWN) = FXC_CW(IGC,M,NWN) + 
     &          FNX_CWX*XNC_CWX(IGC)
            ENDDO
          ELSE
            FNX_CWX = 0.D+0
          ENDIF
!
!---      Store current coupled-well node location in previous
!         coupled-well node location  ---
!
          XPX(1) = XPX(2)
          YPX(1) = YPX(2)
          ZPX(1) = ZPX(2)
!
!---      Volumetric injection well fluxes  ---
!
          IF( M.EQ.1 ) THEN
            IF( SL_CWX.GT.0.D+0 ) Q_CW(2,NWN) = FLX_CWX/RHOL_CWX
            IF( SG_CWX.GT.0.D+0 ) Q_CW(3,NWN) = FGX_CWX/RHOG_CWX
            IF( SN_CWX.GT.0.D+0 ) Q_CW(4,NWN) = FNX_CWX/RHON_CWX
            Q_CW(1,NWN) = Q_CW(2,NWN) + Q_CW(3,NWN) + Q_CW(4,NWN)
          ENDIF
        ENDDO
      ENDDO
!
!---  Mass balance residuals for injection type coupled well  ---
!
      NWFX = ID_CW(6,NCW)-ID_CW(5,NCW)+1
      NX = (NWFX*ISVC)+2
      RSL_CWX(1) = 0.D+0
      RSL_CWX(NX) = 0.D+0
      QM_CW(1,NCW) = 0.D+0
      QM_CW(3,NCW) = 0.D+0
      QM_CW(5,NCW) = 0.D+0
      DO IGC = 1,NGC+2
        QM_CW((7+(IGC-1)*2),NCW) = 0.D+0
      ENDDO
      QM_CWX = 0.D+0
      QTM_CWX = 0.D+0
!
!---  Loop over coupled-well nodes  ---
!
      DO NWN = ID_CW(3,NCW),ID_CW(4,NCW)
        RSL_CWX(1) = RSL_CWX(1) - FXW_CW(1,NWN)
        RSL_CWX(NX) = RSL_CWX(NX) - FXW_CW(ISVC+2,NWN)
        QTM_CWX = QTM_CWX + FXW_CW(1,NWN)
        QM_CW(3,NCW) = QM_CW(3,NCW) + FXW_CW(1,NWN)
        IF( ISLC(30).EQ.0 )
     &    QM_CW(5,NCW) = QM_CW(5,NCW) + FXE_CW(1,NWN)
        QM_CWX = QM_CWX + FXW_CW(ISVC+2,NWN)
        DO IGC = 1,NGC+2
          RSL_CWX(1) = RSL_CWX(1) - FXC_CW(IGC,1,NWN)
          RSL_CWX(NX) = RSL_CWX(NX) - FXC_CW(IGC,ISVC+2,NWN)
          QM_CW(1,NCW) = QM_CW(1,NCW) + FXC_CW(IGC,1,NWN)
          QTM_CWX = QTM_CWX + FXC_CW(IGC,1,NWN)
          QM_CWX = QM_CWX + FXC_CW(IGC,ISVC+2,NWN)
          QM_CW((7+(IGC-1)*2),NCW) = QM_CW((7+(IGC-1)*2),NCW) + 
     &      FXC_CW(IGC,1,NWN)
        ENDDO
      ENDDO
!
!---  Hold pressure controlled option  ---
!
      IF( ID_CW(8,NCW).EQ.1 .AND. NITER.GE.3 ) THEN
        P_CW(2,NCW) = PL_CW(NCW)
        DNR_CW(NCW) = 1.D-1
        P_CW(3,NCW) = P_CW(2,NCW) + DNR_CW(NCW)
        ID_CW(8,NCW) = 1
        ISUB_LOG = ISUB_LOG-1
        RETURN
!
!---  Insufficient increment in coupled-well pressure to create
!     flow from well, increase increment and well pressure  ---
!
      ELSEIF( ABS(QM_CWX/DNR_CW(NCW)).LT.1.D-7 ) THEN
        DNR_CW(NCW) = 1.25D+0*DNR_CW(NCW)
        P_CW(3,NCW) = P_CW(2,NCW) + DNR_CW(NCW)
        ID_CW(8,NCW) = 0
!
!---    Incremented pressure exceeds upper pressure limit,
!       transition to pressure-controlled well  ---
!
        IF( P_CW(3,NCW).GE.PL_CW(NCW) ) THEN
          P_CW(2,NCW) = PL_CW(NCW)
          DNR_CW(NCW) = 1.D-1
          P_CW(3,NCW) = P_CW(2,NCW) + DNR_CW(NCW)
          ID_CW(8,NCW) = 1
          ISUB_LOG = ISUB_LOG-1
          RETURN
        ENDIF
!
!---    Zero coupled-well fluxes ---
!
        QM_CW(1,NCW) = 0.D+0
        QM_CW(3,NCW) = 0.D+0
        QM_CW(5,NCW) = 0.D+0
        DO IGC = 1,NGC+2
          QM_CW((7+(IGC-1)*2),NCW) = 0.D+0
        ENDDO
!
!---    Loop over coupled-well nodes  ---
!
        DO NWN = ID_CW(3,NCW),ID_CW(4,NCW)
!
!---      Zero fluxes from well to reservoir  ---
!
          FXE_CW(M,NWN) = 0.D+0
          FXW_CW(M,NWN) = 0.D+0
          DO IGC = 1,NGC+2
            FXC_CW(IGC,M,NWN) = 0.D+0
          ENDDO
        ENDDO
!
!---    Recompute well fluxes at higher well pressure increment ---
!
        QMO_CWX = QM_CWX
        CYCLE L2
!
!---  Excessive well flow for pressure controlled well,
!     reduce well pressure  ---
!
      ELSEIF( ABS(ID_CW(8,NCW)).EQ.1 .AND. QM_CWX.GT.VAR_CW2X ) THEN
        DQ_CWX = 1.D+1*DQ_CWX
        DP_CWX = -DQ_CWX*PATM
        P_CW(2,NCW) = P_CW(2,NCW) + DP_CWX
        P_CW(3,NCW) = P_CW(2,NCW) + DNR_CW(NCW)
!
!---    Zero coupled-well fluxes ---
!
        QM_CW(1,NCW) = 0.D+0
        QM_CW(3,NCW) = 0.D+0
        QM_CW(5,NCW) = 0.D+0
        DO IGC = 1,NGC+2
          QM_CW((7+(IGC-1)*2),NCW) = 0.D+0
        ENDDO
!
!---    Pressure correction for pressure controlled well ---
!
        ID_CW(8,NCW) = -1
!
!---    Loop over coupled-well nodes  ---
!
        DO NWN = ID_CW(3,NCW),ID_CW(4,NCW)
!
!---      Zero fluxes from well to reservoir  ---
!
          FXE_CW(M,NWN) = 0.D+0
          FXW_CW(M,NWN) = 0.D+0
          DO IGC = 1,NGC+2
            FXC_CW(IGC,M,NWN) = 0.D+0
          ENDDO
        ENDDO
!
!---    Recompute well fluxes lower well pressure ---
!
        QMO_CWX = QM_CWX
        CYCLE L2
!
!---  Acceptable pressure reduction for pressure controlled well, 
!     switch to flow controlled well  ---
!
      ELSEIF( ID_CW(8,NCW).EQ.-1 .AND. QM_CWX.LE.VAR_CW2X ) THEN
        ID_CW(8,NCW) = 0
      ENDIF
      EXIT L2
      ENDDO L2
!
!---  Loop over field nodes that contain coupled-well nodes  ---
!
      DO NWF = ID_CW(5,NCW),ID_CW(6,NCW)
!
!---    Skip for processors without field nodes with coupled-well
!       nodes  ---
!
        IF( IWF_CW(NWF).EQ.0 ) CYCLE
        M1 = (NWF-ID_CW(5,NCW))*ISVC + 1
        DO M2 = 1,ISVC
          M3 = M1+M2
          RSL_CWX(M3) = VAR_CW2X
!
!---      Loop over coupled-well nodes  ---
!
          DO NWN = ID_CW(3,NCW),ID_CW(4,NCW)
!
!---        If coupled-well node is within the current field
!           node, use incremented fluxes  ---
!
            IF( IWF_CW(NWF).EQ.IWN_CW(NWN) ) THEN
              RSL_CWX(M3) = RSL_CWX(M3) - FXW_CW(M2+1,NWN)                
              DO IGC = 1,NGC+2
                RSL_CWX(M3) = RSL_CWX(M3) - FXC_CW(IGC,M2+1,NWN)
              ENDDO
!
!---        If coupled-well node is outside the current field
!           node, use un-incremented fluxes  ---
!
            ELSE
              RSL_CWX(M3) = RSL_CWX(M3) - FXW_CW(1,NWN)
              DO IGC = 1,NGC+2
                RSL_CWX(M3) = RSL_CWX(M3) - FXC_CW(IGC,1,NWN)
              ENDDO
            ENDIF
          ENDDO
        ENDDO
      ENDDO
!
!---  Redefine local residuals to be the change in the coupled-well
!     residual mass with respect to the change in the field-node
!     primary variables, except for the first and last residuals  ---
!
      DO NWF = ID_CW(5,NCW),ID_CW(6,NCW)
        N = IWF_CW(NWF)
        IF( N.EQ.0 ) CYCLE
        MX = (NWF-ID_CW(5,NCW))*ISVC + 1
        DO M = 1,ISVC
          RSL_CWX(MX+M) = (RSL_CWX(MX+M)-RSL_CWX(1))/DNR(M,N)
        ENDDO
      ENDDO
!
!---  Global injection well mass balance residuals  ---
!
      CALL MPI_ALLREDUCE( RSL_CWX,RS_CW(1,NCW),NX,MPI_REAL8,MPI_SUM,
     &  MPI_COMM_WORLD,IERR )
!
!---  Add mass injection rate into global injection well mass 
!     balance residuals for the first and last residuals  ---
!
      RS_CW(1,NCW) = RS_CW(1,NCW) + VAR_CWX(2)
      RS_CW(NX,NCW) = RS_CW(NX,NCW) + VAR_CWX(2)
!
!---  Reset subroutine character string ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of INJ_COUP_WELL group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE INJP_BO_WELL( NCW )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!
!     STOMPX-EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Injection coupled well model
!     
!     Rate controlled or pressure controlled
!
!     Flux of energy, water mass, CO2 mass, CH4 mass, and petroleum
!     component masses from coupled-well nodes to field nodes.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 16 December 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOURC
      USE SOLTN
      USE PROP
      USE HYST
      USE GRID
      USE GLB_PAR
      USE FDVP
      USE COUP_WELL
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 XPX(2),YPX(2),ZPX(2)
      REAL*8 VAR_CWX(6+LNGC)
      REAL*8 XGC_CWX(LNGC),XNC_CWX(LNGC)
      REAL*8 FXC_CWX(LNGC,3,LWN_CW),FXW_CWX(3,LWN_CW)
      REAL*8 QM_CWX(3),P_CWY(3),VAR_CW2X(3)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/INJP_BO_WELL'
!
!---  Loop over coupled-well nodes  ---
!
      DO NWN = ID_CW(3,NCW),ID_CW(4,NCW)
!
!---    Loop over increment indices  ---
!
        DO M = 1,2
!
!---      Loop over petroleum components  ---
!
          DO IGC = 1,NGC+2
            FXC_CWX(IGC,M,NWN) = 0.D+0
          ENDDO
          FXW_CWX(M,NWN) = 0.D+0
        ENDDO
      ENDDO
!
!---  Injection well time interval ---
!
      TMZ = TM
      IF( NSTEP-NRST.EQ.0 ) TMZ = TMZ*(1.D+0+EPSL)+EPSL
!
!---  Cyclic time periods  ---
!
      IF( ICC_CW(NCW).EQ.1 ) THEN
!
!---    Loop over the injection well time periods, to find the 
!       final well time  ---
!
        NTX = 0
        DO NTP = 1,IM_CW(NCW)
          NTX = NTX + IMP_CW(NTP,NCW)
        ENDDO
!
!---    Determine time with the cyclic time period  ---
!
        TMZ = MOD( TM,VAR_CW(1,NTX,NCW) )
        IF( TM.GT.VAR_CW(1,NTX,NCW) ) THEN
          IF( TMZ.LT.EPSL ) TMZ = VAR_CW(1,NTX,NCW)
        ENDIF
      ENDIF
!
!---  Injection well is inactive set well pressure to be in 
!     equilibrium with reservoir  ---
!
      IF( TMZ.LE.VAR_CW(1,1,NCW) ) THEN
        CALL EQUIL_COUP_WELL( NCW )
        ID_CW(8,NCW) = 1
        ISUB_LOG = ISUB_LOG-1
        RETURN
      ENDIF
!
!---  Loop over the injection well time periods  ---
!
      NS = 1
      IFIND = 0
      L1 : DO NTP = 1,IM_CW(NCW)
!
!---    Injection well time period only has one time (start time)  ---
!
        IF( IMP_CW(NTP,NCW).EQ.1 ) THEN
!
!---      Time prior to start time, injection well is inactive, set 
!         well pressure to be in equilibrium with reservoir  ---
!
          IF( TMZ.LE.VAR_CW(1,NS,NCW) ) THEN
            CALL EQUIL_COUP_WELL( NCW )
            ID_CW(8,NCW) = 1
            ISUB_LOG = ISUB_LOG-1
            RETURN
!
!---      Time after start time, injection well is active  ---
!
          ELSE
            DO N = 2,NGC+8
              VAR_CWX(N) = VAR_CW(N,1,NCW)
            ENDDO
            IFIND = 1
            EXIT L1
          ENDIF
!
!---    Injection well time period has multiple times  ---
!
        ELSE
          NE = NS + IMP_CW(NTP,NCW) - 1
!
!---      Time outside of injection well time period, go to next 
!         injection well time period  ---
!
          IF( TMZ.LE.VAR_CW(1,NS,NCW) .OR. 
     &      TMZ.GT.VAR_CW(1,NE,NCW) ) THEN
            NS = NS + IMP_CW(NTP,NCW)
            CYCLE L1
          ENDIF
!
!---      Injection well time period has multiple time points, use  
!         linear interpolation of well parameters between time points  ---
!
          DO M = 2,IMP_CW(NTP,NCW)
            MX = NS + M - 1
            IF( TMZ.LE.VAR_CW(1,MX,NCW) ) THEN
              TD_CW = VAR_CW(1,MX,NCW)-VAR_CW(1,MX-1,NCW)
              DT_CW = MIN( VAR_CW(1,MX,NCW)-TMZ,DT )
              TF_CWX = (TMZ-VAR_CW(1,MX-1,NCW))/TD_CW
              DO N = 2,NGC+8
                VAR_CWX(N) = VAR_CW(N,MX-1,NCW) + 
     &            TF_CWX*(VAR_CW(N,MX,NCW)-VAR_CW(N,MX-1,NCW))
              ENDDO
              IFIND = 1
              EXIT L1
            ENDIF
          ENDDO
        ENDIF
        NS = NS + IMP_CW(NTP,NCW)
      ENDDO L1
!
!---  Injection well is inactive set well pressure to be in 
!     equilibrium with reservoir  ---
!
      IF( IFIND.EQ.0 ) THEN
        CALL EQUIL_COUP_WELL( NCW )
        ID_CW(8,NCW) = 1
        ISUB_LOG = ISUB_LOG-1
        RETURN
      ENDIF
!
!---  Load pressure limit ---
!
      PL_CW(NCW) = VAR_CWX(3) - PATM
!
!---  Upper pressure limit ---
!
      PL_CWX = VAR_CWX(3) - PATM
      P_CWY(1) = P_CW(2,NCW)
      P_CWY(2) = PL_CWX
      DP_CWX = 1.D-1
      ICHK_CWX = 0
      ML = 1
      MU = 2
      NC = 0
      L2 : DO  
      NC = NC + 1
!
!---  Loop over increment indices ---
!
      DO M = ML,MU
        N = IWN_CW(ID_CW(3,NCW))
        P_CWX = P_CWY(M)
        NPHAZX = 0
!
!---    Nonisothermal simulations  ---
!
        IF( ISLC(30).EQ.0 ) THEN
          T_CWX = VAR_CWX(4)
        ELSE
          T_CWX = T(2,N)
        ENDIF
!
!---    Well state #1  ---
!
!       SL = 1.0
!       SG+SN = 0.0
!
!       Declared variables:
!
!       VAR_CWX(6) - aqueous salt relative saturation, or
!                    aqueous salt mass fraction
!
        IF( ITS_CW(NTP,NCW)/100.EQ.1 ) THEN
          PVAX = VAR_CWX(5)
          TMSX = VAR_CWX(6)
          ISR5X = MOD(ITS_CW(NTP,NCW)/10,10)
          CALL BO_IC1( P_CWX,RHOL_CWX,TMSX,T_CWX,
     &      XLS_CWX,XLW_CWX,YLSX,ISR5X )
          SG_CWX = 0.D+0
          SN_CWX = 0.D+0
          SL_CWX = 1.D+0
          RHOF_CWX = RHOL_CWX
!
!---    Well state #2  ---
!
!       SL < 1.0
!       SG+SN > 0.0
!
!       Declared variables:
!
!       VAR_CWX(5) - aqueous saturation
!       VAR_CWX(6) - aqueous salt relative saturation, or
!                    aqueous salt mass fraction
!       VAR_CWX(7) - gas mass fraction of oil + gas
!
        ELSEIF( ITS_CW(NTP,NCW)/100.EQ.2 ) THEN
          SL_CWX = VAR_CWX(5)
          TMSX = VAR_CWX(6)
          XGX = VAR_CWX(7)
          RHOGSX = 1.225D+0*GCPP(37,1)
          RHONSX = 1.D+3*GCPP(37,2)
          PX = P_CWX + PATM
          IF( 1.D+0-XGX.GT.EPSL ) THEN
            POSM_CWX = XGX*RHONSX/((1.D+0-XGX)*RHOGSX)
            CALL BO_BP( PBPX,POSM_CWX,T_CWX )
            IF( PX.GT.PBPX ) THEN
              SN_CWX = 1.D+0
              SG_CWX = 0.D+0
            ELSE
              PVWX = 0.D+0
              CALL BO_EQ_GAS( PX,PVWX,RHOGX,T_CWX,XGC_CWX,XGWX )
              CALL BO_EQ_OIL( RHONX,PX,POSM_CWX,T_CWX,XNC_CWX )
              SN_CWX = RHOGX*(XGX*(1.D+0-SL_CWX)-XGC_CWX(1)*
     &          (1.D+0-SL_CWX))/(RHONX*(XNC_CWX(1)-XGX) - 
     &          RHOGX*(XGC_CWX(1)-XGX))
              SG_CWX = MAX( 1.D+0-SL_CWX-SN_CWX,0.D+0 )
            ENDIF
          ELSE
            SG_CWX = 1.D+0
            SN_CWX = 0.D+0
          ENDIF
          ISR5X = MOD(ISRT(NS)/10,10)
          IZNX = 0
          CALL BO_IC2( POSM_CWX,P_CWX,RHOG_CWX,RHOL_CWX,RHON_CWX,SL_CWX,
     &      TMSX,T_CWX,XGC_CWX,XGW_CWX,XLS_CWX,XLW_CWX,XNC_CWX,
     &      YLSX,ISR5X,IZNX )
          RHOF_CWX = SG_CWX*RHOG_CWX + SL_CWX*RHOL_CWX + 
     &      SN_CWX*RHON_CWX
!
!---    Well state #3  ---
!
!       SL = 0.0
!       SG+SN = 1.0
!
!       Declared variables:
!
!       VAR_CWX(5) - water vapor relative saturation
!       VAR_CWX(7) - gas mass fraction of oil + gas
!      
        ELSEIF( ITS_CW(NTP,NCW)/100.EQ.3 ) THEN
          SL_CWX = 0.D+0
          PVWX = VAR_CWX(5)
          YLSX = 0.D+0
          XGX = VAR_CWX(7)
          RHOGSX = 1.225D+0*GCPP(37,1)
          RHONSX = 1.D+3*GCPP(37,2)
          PX = P_CWX + PATM
          IF( 1.D+0-XGX.GT.EPSL ) THEN
            POSM_CWX = XGX*RHONSX/((1.D+0-XGX)*RHOGSX)
            CALL BO_BP( PBPX,POSM_CWX,T_CWX )
            IF( PX.GT.PBPX ) THEN
              SN_CWX = 1.D+0
              SG_CWX = 0.D+0
            ELSE
              PVWX = 0.D+0
              CALL BO_EQ_GAS( PX,PVWX,RHOGX,T_CWX,XGC_CWX,XGWX )
              CALL BO_EQ_OIL( RHONX,PX,POSM_CWX,T_CWX,XNC_CWX )
              SN_CWX = RHOGX*(XGX*(1.D+0-SL_CWX)-XGC_CWX(1)*
     &          (1.D+0-SL_CWX))/(RHONX*(XNC_CWX(1)-XGX) - 
     &          RHOGX*(XGC_CWX(1)-XGX))
              SG_CWX = MAX( 1.D+0-SL_CWX-SN_CWX,0.D+0 )
            ENDIF
          ELSE
            SG_CWX = 1.D+0
            SN_CWX = 0.D+0
          ENDIF
          IZNX = 0
          CALL BO_IC3( POSM_CWX,PVWX,P_CWX,RHOG_CWX,RHON_CWX,
     &      T_CWX,XGC_CWX,XGW_CWX,XNC_CWX,YLSX,IZNX )
          RHOF_CWX = SG_CWX*RHOG_CWX + SN_CWX*RHON_CWX
        ENDIF
!
!---    Convert volumetric flow rate, m^3/s to mass flow rate, kg/s,
!       using fluid density at top of screened interval  ---
!
        IF( IT_CW(NCW).EQ.2 ) THEN
          VAR_CW2X(M) = VAR_CWX(2)*RHOF_CWX
        ELSE
          VAR_CW2X(M) = VAR_CWX(2)
        ENDIF
!
!---    Store top of coupled-well location in previous
!       coupled-well node location  ---
!
        XPX(1) = XTP_CW(1,ID_CW(1,NCW))
        YPX(1) = YTP_CW(1,ID_CW(1,NCW))
        ZPX(1) = ZTP_CW(1,ID_CW(1,NCW))
!
!---    Loop over the nodes in the coupled well ---
!
        DO NWN = ID_CW(3,NCW),ID_CW(4,NCW)
          N = IWN_CW(NWN)
          INVX = INV_CW(NWN)
          IZN = IZ(N)
          NPHAZX = 0
!
!---      Nonisothermal simulations  ---
!
          IF( ISLC(30).EQ.0 ) THEN
            T_CWX = VAR_CWX(4)
          ELSE
            T_CWX = T(2,N)
          ENDIF
!
!---      Coupled-well node centroids and projections ---
!
          XLX = PLX_CW(NWN)
          YLX = PLY_CW(NWN)
          ZLX = PLZ_CW(NWN)
          XPX(2) = 5.D-1*(XP_CW(2,NWN)+XP_CW(1,NWN))
          YPX(2) = 5.D-1*(YP_CW(2,NWN)+YP_CW(1,NWN))
          ZPX(2) = 5.D-1*(ZP_CW(2,NWN)+ZP_CW(1,NWN))
!
!---      Cylindrical coordinates with azimuthal symmetry,
!         centrally located wells  ---
!
          IF( (ICS.EQ.2 .OR. ICS.EQ.6) .AND. JFLD.EQ.1 ) THEN
            XPNX = 0.D+0
            YPNX = 0.D+0
            ZPNX = ZP(N)
!
!---      Cylindrical coordinates  ---
!
          ELSEIF( ICS.EQ.2 .OR. ICS.EQ.6 ) THEN
            XPNX = XP(N)*COS(YP(N))
            YPNX = XP(N)*SIN(YP(N))
            ZPNX = ZP(N)
!
!---      Cartesian or boundary-fitted orthogonal coordinates  ---
!
          ELSE
            XPNX = XP(N)
            YPNX = YP(N)
            ZPNX = ZP(N)
          ENDIF
!
!---      Well pressure using previous coupled-well node density ---
!
          P_CWX = P_CWX - (ZPX(2)-ZPX(1))*GRAV*RHOF_CWX
!
!---      Adjust the reservoir pressure to the coupled-well node
!         centroid  ---
!
!---      Phase condition #1  ---
!
!         SL = 1.0, SG+SN = 0.0
!
          IF( MOD(NPHAZ(2,N),10).EQ.1 ) THEN
            PLFX = PL(2,N) - (ZPX(2)-ZPNX)*GRAV*RHOL(2,N)
            PNFX = PN(2,N) - (ZPX(2)-ZPNX)*GRAV*RHOL(2,N)
            PTX = MAX( PLFX,PNFX )
            CPGTX = MAX( (PG(2,N)-MAX( PL(2,N),PN(2,N) )),0.D+0 )
            PGFX = PTX + CPGTX
!
!---      Phase condition #2  ---
!
!         SL < 1.0, ST > 0.0, SG = 0.0
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.2 ) THEN
            PLFX = PL(2,N) - (ZPX(2)-ZPNX)*GRAV*RHOL(2,N)
            PNFX = PN(2,N) - (ZPX(2)-ZPNX)*GRAV*RHON(2,N)
            PTX = MAX( PLFX,PNFX )
            CPGTX = MAX( (PG(2,N)-MAX( PL(2,N),PN(2,N) )),0.D+0 )
            PGFX = PTX + CPGTX
!
!---      Phase condition #3  ---
!
!         SL < 1.0, ST > 0.0, SG > 0.0
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.3 ) THEN
            PGFX = PG(2,N) - (ZPX(2)-ZPNX)*GRAV*RHOG(2,N)
            PLFX = PL(2,N) - (ZPX(2)-ZPNX)*GRAV*RHOL(2,N)
            PNFX = PN(2,N) - (ZPX(2)-ZPNX)*GRAV*RHON(2,N)
!
!---      Phase condition #4  ---
!
!         SL = 0.0, ST = 1.0, SG = 0.0
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.4 ) THEN
            PLFX = PL(2,N) - (ZPX(2)-ZPNX)*GRAV*RHON(2,N)
            PNFX = PN(2,N) - (ZPX(2)-ZPNX)*GRAV*RHON(2,N)
            PTX = MAX( PLFX,PNFX )
            CPGTX = MAX( (PG(2,N)-MAX( PL(2,N),PN(2,N) )),0.D+0 )
            PGFX = PTX + CPGTX
!
!---      Phase condition #5  ---
!
!         SL = 0.0, ST = 1.0, SG > 0.0
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.5 ) THEN
            PGFX = PG(2,N) - (ZPX(2)-ZPNX)*GRAV*RHOG(2,N)
            PLFX = PL(2,N) - (ZPX(2)-ZPNX)*GRAV*RHON(2,N)
            PNFX = PN(2,N) - (ZPX(2)-ZPNX)*GRAV*RHON(2,N)
          ENDIF
!
!---      Well state #1  ---
!
!         SL = 1.0
!         SG+SN = 0.0
!
!         Declared variables:
!
!         VAR_CWX(6) - aqueous salt relative saturation, or
!                           aqueous salt mass fraction
!
          IF( ITS_CW(NTP,NCW)/100.EQ.1 ) THEN
            PVAX = VAR_CWX(5)
            TMSX = VAR_CWX(6)
            ISR5X = MOD(ITS_CW(NTP,NCW)/10,10)
            CALL BO_IC1( P_CWX,RHOL_CWX,TMSX,T_CWX,
     &        XLS_CWX,XLW_CWX,YLSX,ISR5X )
            SG_CWX = 0.D+0
            SN_CWX = 0.D+0
            SL_CWX = 1.D+0
            RHOF_CWX = RHOL_CWX
!
!---      Well state #2  ---
!
!         SL < 1.0
!         SG+SN > 0.0
!
!         Declared variables:
!
!         VAR_CWX(5) - aqueous saturation
!         VAR_CWX(6) - aqueous salt relative saturation, or
!                      aqueous salt mass fraction
!         VAR_CWX(7) - gas mass fraction of oil + gas
!
          ELSEIF( ITS_CW(NTP,NCW)/100.EQ.2 ) THEN
            SL_CWX = VAR_CWX(5)
            TMSX = VAR_CWX(6)
            XGX = VAR_CWX(7)
            RHOGSX = 1.225D+0*GCPP(37,1)
            RHONSX = 1.D+3*GCPP(37,2)
            PX = P_CWX + PATM
            IF( 1.D+0-XGX.GT.EPSL ) THEN
              POSM_CWX = XGX*RHONSX/((1.D+0-XGX)*RHOGSX)
              CALL BO_BP( PBPX,POSM_CWX,T_CWX )
              IF( PX.GT.PBPX ) THEN
                SN_CWX = 1.D+0
                SG_CWX = 0.D+0
              ELSE
                PVWX = 0.D+0
                CALL BO_EQ_GAS( PX,PVWX,RHOGX,T_CWX,XGC_CWX,XGWX )
                CALL BO_EQ_OIL( RHONX,PX,POSM_CWX,T_CWX,XNC_CWX )
                SN_CWX = RHOGX*(XGX*(1.D+0-SL_CWX)-XGC_CWX(1)*
     &            (1.D+0-SL_CWX))/(RHONX*(XNC_CWX(1)-XGX) - 
     &            RHOGX*(XGC_CWX(1)-XGX))
                SG_CWX = MAX( 1.D+0-SL_CWX-SN_CWX,0.D+0 )
              ENDIF
            ELSE
              SG_CWX = 1.D+0
              SN_CWX = 0.D+0
            ENDIF
            ISR5X = MOD(ISRT(NS)/10,10)
            IZNX = 0
            CALL BO_IC2( POSM_CWX,P_CWX,RHOG_CWX,RHOL_CWX,RHON_CWX,
     &        SL_CWX,TMSX,T_CWX,XGC_CWX,XGW_CWX,XLS_CWX,XLW_CWX,XNC_CWX,
     &        YLSX,ISR5X,IZNX )
            RHOF_CWX = SG_CWX*RHOG_CWX + SL_CWX*RHOL_CWX + 
     &        SN_CWX*RHON_CWX
!
!---      Well state #3  ---
!
!         SL = 0.0
!         SG+SN = 1.0
!
!         Declared variables:
!
!         VAR_CWX(5) - water vapor relative saturation
!         VAR_CWX(7) - gas mass fraction of oil + gas
!        
          ELSEIF( ITS_CW(NTP,NCW)/100.EQ.3 ) THEN
            SL_CWX = 0.D+0
            PVWX = VAR_CWX(5)
            YLSX = 0.D+0
            XLS_CWX = 0.D+0
            XGX = VAR_CWX(7)
            RHOGSX = 1.225D+0*GCPP(37,1)
            RHONSX = 1.D+3*GCPP(37,2)
            PX = P_CWX + PATM
            IF( 1.D+0-XGX.GT.EPSL ) THEN
              POSM_CWX = XGX*RHONSX/((1.D+0-XGX)*RHOGSX)
              CALL BO_BP( PBPX,POSM_CWX,T_CWX )
              IF( PX.GT.PBPX ) THEN
                SN_CWX = 1.D+0
                SG_CWX = 0.D+0
              ELSE
                PVWX = 0.D+0
                CALL BO_EQ_GAS( PX,PVWX,RHOGX,T_CWX,XGC_CWX,XGWX )
                CALL BO_EQ_OIL( RHONX,PX,POSM_CWX,T_CWX,XNC_CWX )
                SN_CWX = RHOGX*(XGX*(1.D+0-SL_CWX)-XGC_CWX(1)*
     &            (1.D+0-SL_CWX))/(RHONX*(XNC_CWX(1)-XGX) - 
     &            RHOGX*(XGC_CWX(1)-XGX))
                SG_CWX = MAX( 1.D+0-SL_CWX-SN_CWX,0.D+0 )
              ENDIF
            ELSE
              SG_CWX = 1.D+0
              SN_CWX = 0.D+0
            ENDIF
            IZNX = 0
            CALL BO_IC3( POSM_CWX,PVWX,P_CWX,RHOG_CWX,RHON_CWX,
     &        T_CWX,XGC_CWX,XGW_CWX,XNC_CWX,YLSX,IZNX )
              RHOF_CWX = SG_CWX*RHOG_CWX + SN_CWX*RHON_CWX
          ENDIF
!
!---      Well gas viscosity, Pa s  ---
!
          IF( SG_CWX.GT.0.D+0 ) THEN
            CALL BO_VISG( RHOG_CWX,VISG_CWX )
          ENDIF
!
!---      Well aqueous viscosity, Pa s
!         concentration of CO2 in mol/kg,
!         concentration of salt in mol/kg  ---
!
          IF( SL_CWX.GT.0.D+0 ) THEN
            CMLAX = 0.D+0
            CMLSX = 1.D+3*XLS_CWX*RHOL_CWX/WTMS
            CALL VISC_L( CMLAX,CMLSX,P_CWX,T_CWX,VISL_CWX )
          ENDIF
!
!---      Well nonaqueous-liquid viscosity, Pa s  ---
!
          IF( SN_CWX.GT.0.D+0 ) THEN
            CALL BO_VISN( PX,POSM_CWX,T_CWX,VISN_CWX )
          ENDIF
!
!---      Equivalent field node radius components  ---
!
          PERMX = MAX( PERM(1,IZN),1.D-20 )
          PERMY = MAX( PERM(2,IZN),1.D-20 )
          PERMZ = MAX( PERM(3,IZN),1.D-20 )
          RWX = MAX( PAR_CW(2,INVX),1.D-20 )
!
!---      Cylindrical coordinates with azimuthal symmetry,
!         centrally located wells  ---
!
          IF( (ICS.EQ.2 .OR. ICS.EQ.6) .AND. JFLD.EQ.1 ) THEN
            ROZ = RP(N)
!
!---        Specified pressure-equivalent radius  ---
!
            IF( PAR_CW(3,INVX)/EPSL.GT.EPSL ) THEN
              ROZ = PAR_CW(3,INVX)
            ENDIF
            RWX = MIN( RWX,9.999D-1*ROZ )
            PERMX = PERMRF(2,N)*PERM(1,IZN)
            WI_CWX = 2.D+0*GPI*PERMX*ZLX/(LOG(ROZ/RWX)+PAR_CW(1,INVX))
          ELSE
            PERMYZ = SQRT(PERMY/PERMZ)
            PERMZY = SQRT(PERMZ/PERMY)
            DXGFX = DXGF(N)/FF_CW(1,NCW)
            DYGFX = DYGF(N)*RP(N)/FF_CW(2,NCW)
            DZGFX = DZGF(N)/FF_CW(3,NCW)
            ROX = 2.8D-1*SQRT(PERMYZ*(DZGFX**2) + PERMZY*(DYGFX**2))
     &      /(SQRT(PERMYZ)+SQRT(PERMZY))
            PERMZX = SQRT(PERMZ/PERMX)
            PERMXZ = SQRT(PERMX/PERMZ)
            ROY = 2.8D-1*SQRT(PERMZX*(DXGFX**2) + PERMXZ*(DZGFX**2))
     &        /(SQRT(PERMZX)+SQRT(PERMXZ))
            PERMYX = SQRT(PERMY/PERMX)
            PERMXY = SQRT(PERMX/PERMY)
            ROZ = 2.8D-1*SQRT(PERMYX*(DXGFX**2) + PERMXY*(DYGFX**2))
     &        /(SQRT(PERMYX)+SQRT(PERMXY))
!
!---        Specified pressure-equivalent radius  ---
!
            IF( PAR_CW(3,INVX)/EPSL.GT.EPSL ) THEN
              ROX = PAR_CW(3,INVX)
              ROY = PAR_CW(3,INVX)
              ROZ = PAR_CW(3,INVX)
            ENDIF
!
!---        Well index components  ---
!
            PERMX = PERMRF(2,N)*PERM(1,IZN)
            PERMY = PERMRF(2,N)*PERM(2,IZN)
            PERMZ = PERMRF(2,N)*PERM(3,IZN)
            WIX = 2.D+0*GPI*SQRT(PERMY*PERMZ)*XLX/
     &        (LOG(ROX/RWX)+PAR_CW(1,INVX))
            WIY = 2.D+0*GPI*SQRT(PERMX*PERMZ)*YLX/
     &        (LOG(ROY/RWX)+PAR_CW(1,INVX))
            WIZ = 2.D+0*GPI*SQRT(PERMX*PERMY)*ZLX/
     &        (LOG(ROZ/RWX)+PAR_CW(1,INVX))
            WI_CWX = SQRT((WIX**2) + (WIY**2) + (WIZ**2))
          ENDIF
!
!---      Mass fluxes, positive into the node  ---
!
          DPGX = MAX( P_CWX-PGFX,0.D+0 )
          DPNX = MAX( P_CWX-PGFX,0.D+0 )
          DPLX = MAX( P_CWX-PGFX,0.D+0 )
!
!---      Zero fluxes from well to reservoir  ---
!
          FXW_CWX(M,NWN) = 0.D+0
          DO IGC = 1,NGC+2
            FXC_CWX(IGC,M,NWN) = 0.D+0
          ENDDO
!
!---      Gas flux from well to reservoir  ---
!
          IF( SG_CWX.GT.0.D+0 ) THEN
            FGX_CWX = SG_CWX*WI_CWX*RHOG_CWX*DPGX/VISG_CWX
!
!---        Water component gas flux from well to reservoir  ---
!
            FXW_CWX(M,NWN) = FXW_CWX(M,NWN) + FGX_CWX*XGW_CWX
!
!---        Gas component gas flux from well to reservoir  ---
!
            FXC_CWX(1,M,NWN) = FXC_CWX(1,M,NWN) +  FGX_CWX*XGC_CWX(1)
          ENDIF
!
!---      Aqueous flux from well to reservoir  ---
!
          IF( SL_CWX.GT.0.D+0 ) THEN
            FLX_CWX = SL_CWX*WI_CWX*RHOL_CWX*DPLX/VISL_CWX
!
!---        Water component aqueous flux from well to reservoir  ---
!
            FXW_CWX(M,NWN) = FXW_CWX(M,NWN) + FLX_CWX*XLW_CWX
          ENDIF
!
!---      Nonaqueous-liquid flux from well to reservoir  ---
!
          IF( SN_CWX.GT.0.D+0 ) THEN
            FNX_CWX = SN_CWX*WI_CWX*RHON_CWX*DPNX/VISN_CWX
!
!---        Gas component Nonaqueous-liquid flux from well to 
!           reservoir  ---
!
            FXC_CWX(1,M,NWN) = FXC_CWX(1,M,NWN) +  FNX_CWX*XNC_CWX(1)
!
!---        Oil component Nonaqueous-liquid flux from well to 
!           reservoir  ---
!
            FXC_CWX(2,M,NWN) = FXC_CWX(2,M,NWN) +  FNX_CWX*XNC_CWX(2)
          ENDIF
!
!---      Store current coupled-well node location in previous
!         coupled-well node location  ---
!
          XPX(1) = XPX(2)
          YPX(1) = YPX(2)
          ZPX(1) = ZPX(2)
        ENDDO
!
!---    Mass balance residuals for injection type coupled well  ---
!
        QM_CWX(M) = 0.D+0
!
!---    Loop over coupled-well nodes  ---
!
        DO NWN = ID_CW(3,NCW),ID_CW(4,NCW)
          QM_CWX(M) = QM_CWX(M) + FXW_CWX(M,NWN)
          DO IGC = 1,NGC+2
            QM_CWX(M) = QM_CWX(M) + FXC_CWX(IGC,M,NWN)
          ENDDO
        ENDDO
      ENDDO
!
!---  Consider current well pressure and well pressure limit  ---
!
      IF( ICHK_CWX.EQ.0 ) THEN
        ICHK_CWX = 1
!
!---    Well-limit pressure insufficient to produce specified
!       rate, well is pressure controlled  ---
!
        IF( QM_CWX(2).LT.VAR_CW2X(2) ) THEN
          P_CW(2,NCW) = PL_CW(NCW)
          DNR_CW(NCW) = 1.D-1
          P_CW(3,NCW) = P_CW(2,NCW) + DNR_CW(NCW)
          ID_CW(8,NCW) = 1
          RETURN
!
!---    Well-limit pressure and current well pressure yield
!       flow above specified rate, well is flow controlled.  Find
!       well pressure that yields positive flow below specified rate ---
!
        ELSEIF( QM_CWX(1).GE.VAR_CW2X(1) ) THEN
          DP_CWX = 1.D+1*DP_CWX
          P_CWY(1) = P_CWY(1) - DP_CWX
          ICHK_CWX = 0
          CYCLE L2
!
!---    Well-limit pressure yields flow above specified rate,
!       and current well pressure yields positive flow, well is flow
!       controlled  ---
!
        ELSEIF( QM_CWX(1).GT.EPSL ) THEN
          DNR_CW(NCW) = 1.D-1
          P_CW(3,NCW) = P_CW(2,NCW) + DNR_CW(NCW)
          ID_CW(8,NCW) = 0
          ISUB_LOG = ISUB_LOG-1
          RETURN
!
!---    Well limit pressure yields flow above specified rate,
!       and current well pressure yields zero flow, use bisection to
!       determine a well pressure that yields the specified rate  ---
!
        ELSE
          P_CWY(3) = 5.D-1*(P_CWY(1)+P_CWY(2))
          ML = 3
          MU = 3
          CYCLE L2
        ENDIF
!
!---    Use bisection to determine a well pressure that yields
!       the specified rate  ---
!
      ELSE
        IF( (ABS(QM_CWX(3)-VAR_CW2X(3)).LT.(1.D-3*VAR_CW2X(3))
     &    .OR. (P_CWY(2)-P_CWY(1)).LT.1.D-1) .OR. NC.GT.32 ) THEN
          P_CW(2,NCW) = P_CWY(3)
          DNR_CW(NCW) = 1.D-1
          P_CW(3,NCW) = P_CW(2,NCW) + DNR_CW(NCW)
          ID_CW(8,NCW) = 0
          ISUB_LOG = ISUB_LOG-1
          RETURN
        ELSEIF( ((QM_CWX(3)-VAR_CW2X(3)).LE.0.D+0 .AND.
     &    (QM_CWX(1)-VAR_CW2X(1)).LE.0.D+0) .OR. 
     &    ((QM_CWX(3)-VAR_CW2X(3)).GT.0.D+0 .AND.
     &    (QM_CWX(1)-VAR_CW2X(1)).GT.0.D+0) ) THEN
          P_CWY(1) = P_CWY(3)
          QM_CWX(1) = QM_CWX(3)
          VAR_CW2X(1) = VAR_CW2X(3)
          P_CWY(3) = 5.D-1*(P_CWY(1)+P_CWY(2))
          CYCLE L2
        ELSE
          P_CWY(2) = P_CWY(3)
          QM_CWX(2) = QM_CWX(3)
          VAR_CW2X(2) = VAR_CW2X(3)
          P_CWY(3) = 5.D-1*(P_CWY(1)+P_CWY(2))
          CYCLE L2
        ENDIF
      ENDIF
      EXIT L2
      ENDDO L2
!
!---  Reset subroutine character string ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of INJP_BO_WELL group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE INJP_COUP_WELL( NCW )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!
!     STOMPX-EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Injection coupled well model
!     
!     Rate controlled or pressure controlled
!
!     Flux of energy, water mass, CO2 mass, CH4 mass, and petroleum
!     component masses from coupled-well nodes to field nodes.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 16 December 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOURC
      USE SOLTN
      USE PROP
      USE HYST
      USE GRID
      USE GLB_PAR
      USE FDVP
      USE COUP_WELL
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 XPX(2),YPX(2),ZPX(2)
      REAL*8 VAR_CWX(6+LNGC)
      REAL*8 ZMCX(LNGC)
      REAL*8 XGC_CWX(LNGC),XNC_CWX(LNGC),XMGCX(LNGC),XMNCX(LNGC)
      REAL*8 FXC_CWX(LNGC,3,LWN_CW),FXW_CWX(3,LWN_CW)
      REAL*8 QM_CWX(3),P_CWY(3),VAR_CW2X(3)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/INJP_COUP_WELL'
!
!---  Black-oil option  ---
!
      IF( ISLC(68).EQ.0 ) THEN
        CALL INJP_BO_WELL( NCW )
        ISUB_LOG = ISUB_LOG-1
        RETURN
      ENDIF
!
!---  K-factors computed from fugacity coefficients  ---
!
      IFK = 0
!
!---  Loop over coupled-well nodes  ---
!
      DO NWN = ID_CW(3,NCW),ID_CW(4,NCW)
!
!---    Loop over increment indices  ---
!
        DO M = 1,2
!
!---      Loop over petroleum components  ---
!
          DO IGC = 1,NGC+2
            FXC_CWX(IGC,M,NWN) = 0.D+0
          ENDDO
          FXW_CWX(M,NWN) = 0.D+0
        ENDDO
      ENDDO
!
!---  Injection well time interval ---
!
      TMZ = TM
      IF( NSTEP-NRST.EQ.0 ) TMZ = TMZ*(1.D+0+EPSL)+EPSL
!
!---  Cyclic time periods  ---
!
      IF( ICC_CW(NCW).EQ.1 ) THEN
!
!---    Loop over the injection well time periods, to find the 
!       final well time  ---
!
        NTX = 0
        DO NTP = 1,IM_CW(NCW)
          NTX = NTX + IMP_CW(NTP,NCW)
        ENDDO
!
!---    Determine time with the cyclic time period  ---
!
        TMZ = MOD( TM,VAR_CW(1,NTX,NCW) )
        IF( TM.GT.VAR_CW(1,NTX,NCW) ) THEN
          IF( TMZ.LT.EPSL ) TMZ = VAR_CW(1,NTX,NCW)
        ENDIF
      ENDIF
!
!---  Injection well is inactive set well pressure to be in 
!     equilibrium with reservoir  ---
!
      IF( TMZ.LE.VAR_CW(1,1,NCW) ) THEN
        CALL EQUIL_COUP_WELL( NCW )
        ID_CW(8,NCW) = 1
        ISUB_LOG = ISUB_LOG-1
        RETURN
      ENDIF
!
!---  Loop over the injection well time periods  ---
!
      NS = 1
      IFIND = 0
      L1 : DO NTP = 1,IM_CW(NCW)
!
!---    Injection well time period only has one time (start time)  ---
!
        IF( IMP_CW(NTP,NCW).EQ.1 ) THEN
!
!---      Time prior to start time, injection well is inactive, set 
!         well pressure to be in equilibrium with reservoir  ---
!
          IF( TMZ.LE.VAR_CW(1,NS,NCW) ) THEN
            CALL EQUIL_COUP_WELL( NCW )
            ID_CW(8,NCW) = 1
            ISUB_LOG = ISUB_LOG-1
            RETURN
!
!---      Time after start time, injection well is active  ---
!
          ELSE
            DO N = 2,NGC+8
              VAR_CWX(N) = VAR_CW(N,1,NCW)
            ENDDO
            IFIND = 1
            EXIT L1
          ENDIF
!
!---    Injection well time period has multiple times  ---
!
        ELSE
          NE = NS + IMP_CW(NTP,NCW) - 1
!
!---      Time outside of injection well time period, go to next 
!         injection well time period  ---
!
          IF( TMZ.LE.VAR_CW(1,NS,NCW) .OR. 
     &      TMZ.GT.VAR_CW(1,NE,NCW) ) THEN
            NS = NS + IMP_CW(NTP,NCW)
            CYCLE L1
          ENDIF 
!
!---      Injection well time period has multiple time points, use  
!         linear interpolation of well parameters between time points  ---
!
          DO M = 2,IMP_CW(NTP,NCW)
            MX = NS + M - 1
            IF( TMZ.LE.VAR_CW(1,MX,NCW) ) THEN
              TD_CW = VAR_CW(1,MX,NCW)-VAR_CW(1,MX-1,NCW)
              DT_CW = MIN( VAR_CW(1,MX,NCW)-TMZ,DT )
              TF_CWX = (TMZ-VAR_CW(1,MX-1,NCW))/TD_CW
              DO N = 2,NGC+8
                VAR_CWX(N) = VAR_CW(N,MX-1,NCW) + 
     &            TF_CWX*(VAR_CW(N,MX,NCW)-VAR_CW(N,MX-1,NCW))
              ENDDO
              IFIND = 1
              EXIT L1
            ENDIF
          ENDDO
        ENDIF
        NS = NS + IMP_CW(NTP,NCW)
      ENDDO L1
!
!---  Injection well is inactive set well pressure to be in 
!     equilibrium with reservoir  ---
!
      IF( IFIND.EQ.0 ) THEN
        CALL EQUIL_COUP_WELL( NCW )
        ID_CW(8,NCW) = 1
        ISUB_LOG = ISUB_LOG-1
        RETURN
      ENDIF
!
!---  Load pressure limit ---
!
      PL_CW(NCW) = VAR_CWX(3) - PATM
!
!---  Upper pressure limit ---
!
      PL_CWX = VAR_CWX(3) - PATM
      P_CWY(1) = P_CW(2,NCW)
      P_CWY(2) = PL_CWX
      DP_CWX = 1.D-1
      ICHK_CWX = 0
      ML = 1
      MU = 2
      NC = 0
      L2 : DO  
      NC = NC + 1
!
!---  Loop over increment indices ---
!
      DO M = ML,MU
        N = IWN_CW(ID_CW(3,NCW))
        P_CWX = P_CWY(M)
        NPHAZX = 0
!
!---    Nonisothermal simulations  ---
!
        IF( ISLC(30).EQ.0 ) THEN
          T_CWX = VAR_CWX(4)
        ELSE
          T_CWX = T(2,N)
        ENDIF
!
!---    Well state #1  ---
!
!       SL = 1.0
!       SG+SN = 0.0
!
!       Declared variables:
!
!       VAR_CWX(5) - aqueous CO2 relative saturation, or
!                    aqueous CO2 mass fraction
!       VAR_CWX(6) - aqueous salt relative saturation, or
!                         aqueous salt mass fraction
!
        IF( ITS_CW(NTP,NCW)/100.EQ.1 ) THEN
          PVAX = VAR_CWX(5)
          TMSX = VAR_CWX(6)
          ISR4X = MOD(ITS_CW(NTP,NCW),10)
          ISR5X = MOD(ITS_CW(NTP,NCW)/10,10)
          CALL FLH_IC1( P_CWX,PVAX,RHOL_CWX,RHOMLX,TMSX,T_CWX,XLA_CWX,
     &      XLS_CWX,XLW_CWX,XMLAX,XMLSX,XMLWX,YLSX,ZMCX,ISR4X,ISR5X )
          SG_CWX = 0.D+0
          SN_CWX = 0.D+0
          SL_CWX = 1.D+0
          RHOF_CWX = RHOL_CWX
!
!---    Well state #2  ---
!
!       SL < 1.0
!       SG+SN > 0.0
!
!       Declared variables:
!
!       VAR_CWX(5) - aqueous saturation
!       VAR_CWX(6) - aqueous salt relative saturation, or
!                    aqueous salt mass fraction
!       VAR_CWX(6+NGC) - total mole fraction of petroleum comp.
!
        ELSEIF( ITS_CW(NTP,NCW)/100.EQ.2 ) THEN
          SL_CWX = VAR_CWX(5)
          TMSX = VAR_CWX(6)
          ISR5X = MOD(ISRT(NS)/10,10)
          DO IGC = 1,NGC+2
            JGC = 6 + IGC
            ZMCX(IGC) = VAR_CWX(JGC)
          ENDDO
          IZNX = 0
          CALL FLH_IC2( P_CWX,RHOG_CWX,RHOMGX,RHOL_CWX,RHOMLX,
     &      RHON_CWX,RHOMNX,SG_CWX,SL_CWX,SN_CWX,TMSX,T_CWX,
     &      XGC_CWX,
     &      XMGCX,XGW_CWX,XMGWX,XLA_CWX,XLS_CWX,XLW_CWX,XMLAX,XMLSX,
     &      XMLWX,XNC_CWX,XMNCX,YLSX,ZGX,ZMCX,ZNX,ISR5X,IZNX,NPHAZX )
          RHOF_CWX = SG_CWX*RHOG_CWX + SL_CWX*RHOL_CWX + 
     &      SN_CWX*RHON_CWX
!
!---    Well state #3  ---
!
!       SL = 0.0
!       SG+SN = 1.0
!
!       Declared variables:
!
!       VAR_CWX(5) - water vapor relative saturation
!       VAR_CWX(6+) - total mole fraction of petroleum comp.
!      
        ELSEIF( ITS_CW(NTP,NCW)/100.EQ.3 ) THEN
          DO IGC = 1,NGC+2
            JGC = 6 + IGC
            ZMCX(IGC) = VAR_CWX(JGC)
          ENDDO
          SL_CWX = 0.D+0
          PVWX = VAR_CWX(5)
          YLSX = 0.D+0
          IZNX = 0
          CALL FLH_IC3( PVWX,P_CWX,RHOG_CWX,RHOMGX,RHON_CWX,RHOMNX,
     &      SG_CWX,SN_CWX,T_CWX,XGC_CWX,XGW_CWX,XMGCX,XMGWX,
     &      XNC_CWX,
     &      XMNCX,YLSX,ZGX,ZMCX,ZNX,IZNX,NPHAZX )
          RHOF_CWX = SG_CWX*RHOG_CWX + SN_CWX*RHON_CWX
        ENDIF
!
!---    Convert volumetric flow rate, m^3/s to mass flow rate, kg/s,
!       using fluid density at top of screened interval  ---
!
        IF( IT_CW(NCW).EQ.2 ) THEN
          VAR_CW2X(M) = VAR_CWX(2)*RHOF_CWX
        ELSE
          VAR_CW2X(M) = VAR_CWX(2)
        ENDIF
!
!---    Store top of coupled-well location in previous
!       coupled-well node location  ---
!
        XPX(1) = XTP_CW(1,ID_CW(1,NCW))
        YPX(1) = YTP_CW(1,ID_CW(1,NCW))
        ZPX(1) = ZTP_CW(1,ID_CW(1,NCW))
!
!---    Loop over the nodes in the coupled well ---
!
        DO NWN = ID_CW(3,NCW),ID_CW(4,NCW)
          N = IWN_CW(NWN)
           INVX = INV_CW(NWN)
          IZN = IZ(N)
          NPHAZX = 0
!
!---      Nonisothermal simulations  ---
!
          IF( ISLC(30).EQ.0 ) THEN
            T_CWX = VAR_CWX(4)
          ELSE
            T_CWX = T(2,N)
          ENDIF
!
!---      Coupled-well node centroids and projections ---
!
          XLX = PLX_CW(NWN)
          YLX = PLY_CW(NWN)
          ZLX = PLZ_CW(NWN)
          XPX(2) = 5.D-1*(XP_CW(2,NWN)+XP_CW(1,NWN))
          YPX(2) = 5.D-1*(YP_CW(2,NWN)+YP_CW(1,NWN))
          ZPX(2) = 5.D-1*(ZP_CW(2,NWN)+ZP_CW(1,NWN))
!
!---      Cylindrical coordinates with azimuthal symmetry,
!         centrally located wells  ---
!
          IF( (ICS.EQ.2 .OR. ICS.EQ.6) .AND. JFLD.EQ.1 ) THEN
            XPNX = 0.D+0
            YPNX = 0.D+0
            ZPNX = ZP(N)
!
!---      Cylindrical coordinates  ---
!
          ELSEIF( ICS.EQ.2 .OR. ICS.EQ.6 ) THEN
            XPNX = XP(N)*COS(YP(N))
            YPNX = XP(N)*SIN(YP(N))
            ZPNX = ZP(N)
!
!---      Cartesian or boundary-fitted orthogonal coordinates  ---
!
          ELSE
            XPNX = XP(N)
            YPNX = YP(N)
            ZPNX = ZP(N)
          ENDIF
!
!---      Well pressure using previous coupled-well node density ---
!
          P_CWX = P_CWX - (ZPX(2)-ZPX(1))*GRAV*RHOF_CWX
!
!---      Adjust the reservoir pressure to the coupled-well node
!         centroid  ---
!
!---      Phase condition #1  ---
!
!         SL = 1.0, SG+SN = 0.0
!
          IF( MOD(NPHAZ(2,N),10).EQ.1 ) THEN
            PLFX = PL(2,N) - (ZPX(2)-ZPNX)*GRAV*RHOL(2,N)
            PNFX = PN(2,N) - (ZPX(2)-ZPNX)*GRAV*RHOL(2,N)
            PTX = MAX( PLFX,PNFX )
            CPGTX = MAX( (PG(2,N)-MAX( PL(2,N),PN(2,N) )),0.D+0 )
            PGFX = PTX + CPGTX
!
!---      Phase condition #2  ---
!
!         SL < 1.0, ST > 0.0, SG = 0.0
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.2 ) THEN
            PLFX = PL(2,N) - (ZPX(2)-ZPNX)*GRAV*RHOL(2,N)
            PNFX = PN(2,N) - (ZPX(2)-ZPNX)*GRAV*RHON(2,N)
            PTX = MAX( PLFX,PNFX )
            CPGTX = MAX( (PG(2,N)-MAX( PL(2,N),PN(2,N) )),0.D+0 )
            PGFX = PTX + CPGTX
!
!---      Phase condition #3  ---
!
!         SL < 1.0, ST > 0.0, SG > 0.0
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.3 ) THEN
            PGFX = PG(2,N) - (ZPX(2)-ZPNX)*GRAV*RHOG(2,N)
            PLFX = PL(2,N) - (ZPX(2)-ZPNX)*GRAV*RHOL(2,N)
            PNFX = PN(2,N) - (ZPX(2)-ZPNX)*GRAV*RHON(2,N)
!
!---      Phase condition #4  ---
!
!         SL = 0.0, ST = 1.0, SG = 0.0
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.4 ) THEN
            PLFX = PL(2,N) - (ZPX(2)-ZPNX)*GRAV*RHON(2,N)
            PNFX = PN(2,N) - (ZPX(2)-ZPNX)*GRAV*RHON(2,N)
            PTX = MAX( PLFX,PNFX )
            CPGTX = MAX( (PG(2,N)-MAX( PL(2,N),PN(2,N) )),0.D+0 )
            PGFX = PTX + CPGTX
!
!---      Phase condition #5  ---
!
!         SL = 0.0, ST = 1.0, SG > 0.0
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.5 ) THEN
            PGFX = PG(2,N) - (ZPX(2)-ZPNX)*GRAV*RHOG(2,N)
            PLFX = PL(2,N) - (ZPX(2)-ZPNX)*GRAV*RHON(2,N)
            PNFX = PN(2,N) - (ZPX(2)-ZPNX)*GRAV*RHON(2,N)
          ENDIF
!
!---      Well state #1  ---
!
!         SL = 1.0
!         SG+SN = 0.0
!
!         Declared variables:
!
!         VAR_CWX(5) - aqueous CO2 relative saturation, or
!                      aqueous CO2 mass fraction
!         VAR_CWX(6) - aqueous salt relative saturation, or
!                           aqueous salt mass fraction
!
          IF( ITS_CW(NTP,NCW)/100.EQ.1 ) THEN
            PVAX = VAR_CWX(5)
            TMSX = VAR_CWX(6)
            ISR4X = MOD(ITS_CW(NTP,NCW),10)
            ISR5X = MOD(ITS_CW(NTP,NCW)/10,10)
            CALL FLH_IC1( P_CWX,PVAX,RHOL_CWX,RHOMLX,TMSX,T_CWX,XLA_CWX,
     &      XLS_CWX,XLW_CWX,XMLAX,XMLSX,XMLWX,YLSX,ZMCX,ISR4X,ISR5X )
            SG_CWX = 0.D+0
            SN_CWX = 0.D+0
            SL_CWX = 1.D+0
            RHOF_CWX = RHOL_CWX
!
!---      Well state #2  ---
!
!         SL < 1.0
!         SG+SN > 0.0
!
!         Declared variables:
!
!         VAR_CWX(5) - aqueous saturation
!         VAR_CWX(6) - aqueous salt relative saturation, or
!                      aqueous salt mass fraction
!         VAR_CWX(6+NGC) - total mole fraction of petroleum comp.
!
          ELSEIF( ITS_CW(NTP,NCW)/100.EQ.2 ) THEN
            SL_CWX = VAR_CWX(5)
            TMSX = VAR_CWX(6)
            ISR5X = MOD(ISRT(NS)/10,10)
            DO IGC = 1,NGC+2
              JGC = 6 + IGC
              ZMCX(IGC) = VAR_CWX(JGC)
            ENDDO
            IZNX = 0
            CALL FLH_IC2( P_CWX,RHOG_CWX,RHOMGX,RHOL_CWX,RHOMLX,
     &        RHON_CWX,RHOMNX,SG_CWX,SL_CWX,SN_CWX,TMSX,T_CWX,
     &        XGC_CWX,
     &        XMGCX,XGW_CWX,XMGWX,XLA_CWX,XLS_CWX,XLW_CWX,XMLAX,XMLSX,
     &        XMLWX,XNC_CWX,XMNCX,YLSX,ZGX,ZMCX,ZNX,ISR5X,IZNX,NPHAZX )
            RHOF_CWX = SG_CWX*RHOG_CWX + SL_CWX*RHOL_CWX + 
     &        SN_CWX*RHON_CWX
!
!---      Well state #3  ---
!
!         SL = 0.0
!         SG+SN = 1.0
!
!         Declared variables:
!
!         VAR_CWX(5) - water vapor relative saturation
!         VAR_CWX(6+) - total mole fraction of petroleum comp.
!        
          ELSEIF( ITS_CW(NTP,NCW)/100.EQ.3 ) THEN
            DO IGC = 1,NGC+2
              JGC = 6 + IGC
              ZMCX(IGC) = VAR_CWX(JGC)
            ENDDO
            SL_CWX = 0.D+0
            PVWX = VAR_CWX(5)
            YLSX = 0.D+0
            IZNX = 0
            CALL FLH_IC3( PVWX,P_CWX,RHOG_CWX,RHOMGX,RHON_CWX,RHOMNX,
     &        SG_CWX,SN_CWX,T_CWX,XGC_CWX,XGW_CWX,XMGCX,XMGWX,
     &        XNC_CWX,
     &        XMNCX,YLSX,ZGX,ZMCX,ZNX,IZNX,NPHAZX )
            RHOF_CWX = SG_CWX*RHOG_CWX + SN_CWX*RHON_CWX
          ENDIF
!
!---      Well gas viscosity, Pa s  ---
!
          IF( SG_CWX.GT.0.D+0 ) THEN
            CALL VISC_G( RHOMGX,T_CWX,VISG_CWX,XMGCX,XMGWX )
          ENDIF
!
!---      Well aqueous viscosity, Pa s
!         concentration of CO2 in mol/kg,
!         concentration of salt in mol/kg  ---
!
          IF( SL_CWX.GT.0.D+0 ) THEN
            CMLAX = 0.D+0
            CMLSX = 1.D+3*XLS_CWX*RHOL_CWX/WTMS
            CALL VISC_L( CMLAX,CMLSX,P_CWX,T_CWX,VISL_CWX )
          ENDIF
!
!---      Well nonaqueous-liquid viscosity, Pa s  ---
!
          IF( SN_CWX.GT.0.D+0 ) THEN
            CALL VISC_N( RHOMNX,T_CWX,VISN_CWX,XMNCX )
          ENDIF
!
!---      Equivalent field node radius components  ---
!
          PERMX = MAX( PERM(1,IZN),1.D-20 )
          PERMY = MAX( PERM(2,IZN),1.D-20 )
          PERMZ = MAX( PERM(3,IZN),1.D-20 )
          RWX = MAX( PAR_CW(2,INVX),1.D-20 )
!
!---      Cylindrical coordinates with azimuthal symmetry,
!         centrally located wells  ---
!
          IF( (ICS.EQ.2 .OR. ICS.EQ.6) .AND. JFLD.EQ.1 ) THEN
            ROZ = RP(N)
!
!---        Specified pressure-equivalent radius  ---
!
            IF( PAR_CW(3,INVX)/EPSL.GT.EPSL ) THEN
              ROZ = PAR_CW(3,INVX)
            ENDIF
            RWX = MIN( RWX,9.999D-1*ROZ )
            PERMX = PERMRF(2,N)*PERM(1,IZN)
            WI_CWX = 2.D+0*GPI*PERMX*ZLX/(LOG(ROZ/RWX)+PAR_CW(1,INVX))
          ELSE
            PERMYZ = SQRT(PERMY/PERMZ)
            PERMZY = SQRT(PERMZ/PERMY)
            DXGFX = DXGF(N)/FF_CW(1,NCW)
            DYGFX = DYGF(N)*RP(N)/FF_CW(2,NCW)
            DZGFX = DZGF(N)/FF_CW(3,NCW)
            ROX = 2.8D-1*SQRT(PERMYZ*(DZGFX**2) + PERMZY*(DYGFX**2))
     &      /(SQRT(PERMYZ)+SQRT(PERMZY))
            PERMZX = SQRT(PERMZ/PERMX)
            PERMXZ = SQRT(PERMX/PERMZ)
            ROY = 2.8D-1*SQRT(PERMZX*(DXGFX**2) + PERMXZ*(DZGFX**2))
     &        /(SQRT(PERMZX)+SQRT(PERMXZ))
            PERMYX = SQRT(PERMY/PERMX)
            PERMXY = SQRT(PERMX/PERMY)
            ROZ = 2.8D-1*SQRT(PERMYX*(DXGFX**2) + PERMXY*(DYGFX**2))
     &        /(SQRT(PERMYX)+SQRT(PERMXY))
!
!---        Specified pressure-equivalent radius  ---
!
            IF( PAR_CW(3,INVX)/EPSL.GT.EPSL ) THEN
              ROX = PAR_CW(3,INVX)
              ROY = PAR_CW(3,INVX)
              ROZ = PAR_CW(3,INVX)
            ENDIF
!
!---        Well index components  ---
!
            PERMX = PERMRF(2,N)*PERM(1,IZN)
            PERMY = PERMRF(2,N)*PERM(2,IZN)
            PERMZ = PERMRF(2,N)*PERM(3,IZN)
            WIX = 2.D+0*GPI*SQRT(PERMY*PERMZ)*XLX/
     &        (LOG(ROX/RWX)+PAR_CW(1,INVX))
            WIY = 2.D+0*GPI*SQRT(PERMX*PERMZ)*YLX/
     &        (LOG(ROY/RWX)+PAR_CW(1,INVX))
            WIZ = 2.D+0*GPI*SQRT(PERMX*PERMY)*ZLX/
     &        (LOG(ROZ/RWX)+PAR_CW(1,INVX))
            WI_CWX = SQRT((WIX**2) + (WIY**2) + (WIZ**2))
          ENDIF
!
!---      Mass fluxes, positive into the node  ---
!
          DPGX = MAX( P_CWX-PGFX,0.D+0 )
          DPNX = MAX( P_CWX-PGFX,0.D+0 )
          DPLX = MAX( P_CWX-PGFX,0.D+0 )
!
!---      Zero fluxes from well to reservoir  ---
!
          FXW_CWX(M,NWN) = 0.D+0
          DO IGC = 1,NGC+2
            FXC_CWX(IGC,M,NWN) = 0.D+0
          ENDDO
!
!---      Gas flux from well to reservoir  ---
!
          IF( SG_CWX.GT.0.D+0 ) THEN
            FGX_CWX = SG_CWX*WI_CWX*RHOG_CWX*DPGX/VISG_CWX
            FXW_CWX(M,NWN) = FXW_CWX(M,NWN) + FGX_CWX*XGW_CWX
            DO IGC = 1,NGC+2
              FXC_CWX(IGC,M,NWN) = FXC_CWX(IGC,M,NWN) + 
     &          FGX_CWX*XGC_CWX(IGC)
            ENDDO
          ENDIF
!
!---      Aqueous flux from well to reservoir  ---
!
          IF( SL_CWX.GT.0.D+0 ) THEN
            FLX_CWX = SL_CWX*WI_CWX*RHOL_CWX*DPLX/VISL_CWX
            FXW_CWX(M,NWN) = FXW_CWX(M,NWN) + FLX_CWX*XLW_CWX
            FXC_CWX(1,M,NWN) = FXC_CWX(1,M,NWN) + FLX_CWX*XLA_CWX
          ENDIF
!
!---      Nonaqueous-liquid flux from well to reservoir  ---
!
          IF( SN_CWX.GT.0.D+0 ) THEN
            FNX_CWX = SN_CWX*WI_CWX*RHON_CWX*DPNX/VISN_CWX
            DO IGC = 1,NGC+2
              FXC_CWX(IGC,M,NWN) = FXC_CWX(IGC,M,NWN) + 
     &          FNX_CWX*XNC_CWX(IGC)
            ENDDO
          ENDIF
!
!---      Store current coupled-well node location in previous
!         coupled-well node location  ---
!
          XPX(1) = XPX(2)
          YPX(1) = YPX(2)
          ZPX(1) = ZPX(2)
        ENDDO
!
!---    Mass balance residuals for injection type coupled well  ---
!
        QM_CWX(M) = 0.D+0
!
!---    Loop over coupled-well nodes  ---
!
        DO NWN = ID_CW(3,NCW),ID_CW(4,NCW)
          QM_CWX(M) = QM_CWX(M) + FXW_CWX(M,NWN)
          DO IGC = 1,NGC+2
            QM_CWX(M) = QM_CWX(M) + FXC_CWX(IGC,M,NWN)
          ENDDO
        ENDDO
      ENDDO
!
!---  Consider current well pressure and well pressure limit  ---
!
      IF( ICHK_CWX.EQ.0 ) THEN
        ICHK_CWX = 1
!
!---    Hold pressure controlled option  ---
!
        IF( ID_CW(8,NCW).EQ.1 .AND. NITER.GE.3 ) THEN
          P_CW(2,NCW) = PL_CW(NCW)
          DNR_CW(NCW) = 1.D-1
          P_CW(3,NCW) = P_CW(2,NCW) + DNR_CW(NCW)
          ID_CW(8,NCW) = 1
          ISUB_LOG = ISUB_LOG-1
          RETURN
!
!---    Well-limit pressure insufficient to produce specified
!       rate, well is pressure controlled  ---
!
        ELSEIF( QM_CWX(2).LT.VAR_CW2X(2) ) THEN
          P_CW(2,NCW) = PL_CW(NCW)
          DNR_CW(NCW) = 1.D-1
          P_CW(3,NCW) = P_CW(2,NCW) + DNR_CW(NCW)
          ID_CW(8,NCW) = 1
          ISUB_LOG = ISUB_LOG-1
          RETURN
!
!---    Well-limit pressure and current well pressure yield
!       flow above specified rate, well is flow controlled.  Find
!       well pressure that yields positive flow below specified rate ---
!
        ELSEIF( QM_CWX(1).GT.VAR_CW2X(1) ) THEN
          DP_CWX = 1.D+1*DP_CWX
          P_CWY(1) = P_CWY(1) - DP_CWX
          ICHK_CWX = 0
          CYCLE L2
!
!---    Well-limit pressure yields flow above specified rate,
!       and current well pressure yields positive flow, well is flow
!       controlled  ---
!
        ELSEIF( QM_CWX(1).GT.EPSL ) THEN
          DNR_CW(NCW) = 1.D-1
          P_CW(3,NCW) = P_CW(2,NCW) + DNR_CW(NCW)
          ID_CW(8,NCW) = 0
          ISUB_LOG = ISUB_LOG-1
          RETURN
!
!---    Well limit pressure yields flow above specified rate,
!       and current well pressure yields zero flow, use bisection to
!       determine a well pressure that yields the specified rate  ---
!
        ELSE
          P_CWY(3) = 5.D-1*(P_CWY(1)+P_CWY(2))
          ML = 3
          MU = 3
          CYCLE L2
        ENDIF
!
!---    Use bisection to determine a well pressure that yields
!       the specified rate  ---
!
      ELSE
        IF( (ABS(QM_CWX(3)-VAR_CW2X(3)).LT.(1.D-3*VAR_CW2X(3))
     &    .OR. (P_CWY(2)-P_CWY(1)).LT.1.D-1) .OR. NC.GT.32 ) THEN
          P_CW(2,NCW) = P_CWY(3)
          DNR_CW(NCW) = 1.D-1
          P_CW(3,NCW) = P_CW(2,NCW) + DNR_CW(NCW)
          ID_CW(8,NCW) = 0
          ISUB_LOG = ISUB_LOG-1
          RETURN
        ELSEIF( ((QM_CWX(3)-VAR_CW2X(3)).LE.0.D+0 .AND.
     &    (QM_CWX(1)-VAR_CW2X(1)).LE.0.D+0) .OR. 
     &    ((QM_CWX(3)-VAR_CW2X(3)).GT.0.D+0 .AND.
     &    (QM_CWX(1)-VAR_CW2X(1)).GT.0.D+0) ) THEN
          P_CWY(1) = P_CWY(3)
          QM_CWX(1) = QM_CWX(3)
          VAR_CW2X(1) = VAR_CW2X(3)
          P_CWY(3) = 5.D-1*(P_CWY(1)+P_CWY(2))
          CYCLE L2
        ELSE
          P_CWY(2) = P_CWY(3)
          QM_CWX(2) = QM_CWX(3)
          VAR_CW2X(2) = VAR_CW2X(3)
          P_CWY(3) = 5.D-1*(P_CWY(1)+P_CWY(2))
          CYCLE L2
        ENDIF
      ENDIF
      EXIT L2
      ENDDO L2
!
!---  Reset subroutine character string ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of INJP_COUP_WELL group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE JCB_COUP_WELL
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!
!     STOMPX-EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Modify Jacobian matrix for the coupled-well equations
!     and load Jacobian matrix for the coupled-well equations
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 20 April 2011.
!
#ifdef lis
!----------------------LIS Modules-------------------------------------!
!
      USE LIS_STOMP
!
#endif
#ifdef petsc
!----------------------PETSc Modules-----------------------------------!
!
      USE PETSC_STOMP
!
#endif
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE JACOB
      USE GRID
      USE GLB_PAR
      USE FDVP
      USE COUP_WELL
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
#ifdef lis
#include "lisf.h"
#endif
#ifdef petsc
#include "petsc/finclude/petscmat.h"
#include "petsc/finclude/petscvec.h"
#include "petsc/finclude/petscksp.h"
#endif
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/JCB_COUP_WELL'
#ifdef lis
!
!---  Lis solver  ---
!
!
!---  Loop over coupled wells ---
!
      DO NCW = 1,N_CW
        NC = 0
!
!---    Loop over coupled-well well nodes ---
!
        NWFX = ID_CW(6,NCW)-ID_CW(5,NCW)+1
        DO NWN = ID_CW(3,NCW),ID_CW(4,NCW)
          N = IWN_CW(NWN)
          IF( N.EQ.0 ) CYCLE
          NMD = (IXP(N)-1)*ISVC
!
!---      Energy equation, unless isothermal simulation  ---
!
          IF( ISLC(30).EQ.0 ) THEN
!
!---        Energy balance equation at field node ---
!
            MP = NMD + IEQT
!
!---        Change in energy flow into field node with respect
!           to change in field node primary variables  ---
!
            MA = 0
            DO M = 1,ISVC
              MCOL = KLU(MP-IEQ_OFFSET,M+MA)
              DLU(MCOL) = DLU(MCOL) + 
     &          (FXE_CW(1,NWN)-FXE_CW(M+1,NWN))/DNR(M,N)
            ENDDO
!
!---        Change in energy flow with respect
!           to change in coupled-well pressure  ---
!
            MCOL = KLU1_CW(IEQT,NWN,NCW)
            MX = ISVC+2
            DLU(MCOL) = DLU(MCOL) + 
     &        (FXE_CW(1,NWN)-FXE_CW(MX,NWN))/DNR_CW(NCW)
!
!---        Pressure controlled coupled well  ---
!
            IF( ID_CW(8,NCW).EQ.1 ) DLU(MCOL) = 0.D+0
!
!---        Energy flow into field node, W  ---
!
            BUFFER = FXE_CW(1,NWN)
            CALL LIS_VECTOR_SET_VALUE( LIS_ADD_VALUE,MP,BUFFER,
     &        F_RHS_VEC,IERR )
            RSDL(IEQT,N) = BLU(MP)
          ENDIF
!
!---      Water mass balance equation at field node ---
!
          MP = NMD + IEQW
!
!---      Change in water mass flux into field node with respect
!         to change in field node primary variables  ---
!
          MA = 0
          DO M = 1,ISVC
            MCOL = KLU(MP-IEQ_OFFSET,M+MA)
            DLU(MCOL) = DLU(MCOL) + 
     &        (FXW_CW(1,NWN)-FXW_CW(M+1,NWN))/DNR(M,N)
          ENDDO
!
!---      Change in water fraction of coupled-well flux with respect
!         to change in coupled-well pressure  ---
!
          MCOL = KLU1_CW(IEQW,NWN,NCW)
          MX = ISVC+2
          DLU(MCOL) = DLU(MCOL) + 
     &      (FXW_CW(1,NWN)-FXW_CW(MX,NWN))/DNR_CW(NCW)
!
!---      Pressure controlled coupled well  ---
!
          IF( ID_CW(8,NCW).EQ.1 ) DLU(MCOL) = 0.D+0
!
!---      Water mass flux into field node, kg/s  ---
!
          BUFFER = FXW_CW(1,NWN)
          CALL LIS_VECTOR_SET_VALUE( LIS_ADD_VALUE,MP,BUFFER,
     &      F_RHS_VEC,IERR )
          RSDL(IEQW,N) = BLU(MP)
!
!---      Petroleum component mass balance equation at field node ---
!
          DO IGC = 1,NGC+2
!
!---        Iso-CO2 option  ---
!
            IF( IGC.EQ.1 .AND. ISLC(45).NE.0 ) CYCLE
!
!---        Iso-CH4 option  ---
!
            IF( IGC.EQ.2 .AND. ISLC(64).NE.0 ) CYCLE
            MP = NMD + IEQGC(IGC)
!
!---        Change in CO2 fraction of coupled-well flux with respect
!           to change in field node primary variables  ---
!
            MA = 0
            DO M = 1,ISVC
              MCOL = KLU(MP-IEQ_OFFSET,M+MA)
              DLU(MCOL) = DLU(MCOL) + 
     &          (FXC_CW(IGC,1,NWN)-FXC_CW(IGC,M+1,NWN))/DNR(M,N)
            ENDDO
!
!---        Change in petroleum component fraction of coupled-well 
!           flux with respect to change in coupled-well pressure  ---
!
            MCOL = KLU1_CW(IEQGC(IGC),NWN,NCW)
            MX = ISVC+2
            DLU(MCOL) = DLU(MCOL) + 
     &        (FXC_CW(IGC,1,NWN)-FXC_CW(IGC,MX,NWN))/DNR_CW(NCW)
!
!---        Pressure controlled coupled well  ---
!
            IF( ID_CW(8,NCW).EQ.1 ) DLU(MCOL) = 0.D+0
!
!---        Petroleum component mass flux into field node, kg/s  ---
!
            BUFFER = FXC_CW(IGC,1,NWN)
            CALL LIS_VECTOR_SET_VALUE( LIS_ADD_VALUE,MP,BUFFER,
     &        F_RHS_VEC,IERR )
            RSDL(IEQGC(IGC),N) = BLU(MP)
          ENDDO
        ENDDO
!
!---    Coupled-well mass balance, coupled-well equations located
!       on last processor  ---
!
        IROW = JM_CW(NCW)
        IF( ID.EQ.(NP-1) ) THEN
          BUFFER = -RS_CW(1,NCW)
          CALL LIS_VECTOR_SET_VALUE( LIS_ADD_VALUE,IROW,BUFFER,
     &      F_RHS_VEC,IERR )
!
!---      Pressure controlled coupled well  ---
!
          IF( ID_CW(8,NCW).EQ.1 ) THEN
            BUFFER = 0.D+0
            CALL LIS_VECTOR_SET_VALUE( LIS_INS_VALUE,IROW,BUFFER,
     &        F_RHS_VEC,IERR )
          ENDIF
!
!---      Change in coupled-well mass balance with respect to
!         change in coupled-well pressure  ---
!
          NWFX = ID_CW(6,NCW)-ID_CW(5,NCW)+1
          MX = (NWFX*ISVC)+2
          NC = NC + 1
          MCOL = KLU2_CW(NC,NCW)
          DLU(MCOL) = DLU(MCOL) + 
     &      (RS_CW(MX,NCW)-RS_CW(1,NCW))/DNR_CW(NCW)
!
!---      Pressure controlled coupled well  ---
!
          IF( ID_CW(8,NCW).EQ.1 ) DLU(MCOL) = 1.D+0
!
!---      Loop over field nodes with coupled-well nodes ---
!
          DO NWF = ID_CW(5,NCW),ID_CW(6,NCW)
            N = IWF_CW(NWF)
            MX = (NWF-ID_CW(5,NCW))*ISVC + 1
!
!---        Change in coupled-well mass balance with respect to
!           change in field node primary variables  ---
!
            DO M = 1,ISVC
              NC = NC + 1
              MCOL = KLU2_CW(NC,NCW)
              DLU(MCOL) = DLU(MCOL) + RS_CW(MX+M,NCW)
!
!---          Pressure controlled coupled well  ---
!
              IF( ID_CW(8,NCW).EQ.1 ) DLU(MCOL) = 0.D+0
            ENDDO
          ENDDO
        ENDIF
      ENDDO
#endif
#ifdef petsc
!
!---  PETSc solver  ---
!
!
!---  Loop over coupled wells ---
!
      DO NCW = 1,N_CW
        NC = 0
!
!---    Loop over coupled-well well nodes ---
!
        NWFX = ID_CW(6,NCW)-ID_CW(5,NCW)+1
        DO NWN = ID_CW(3,NCW),ID_CW(4,NCW)
          N = IWN_CW(NWN)
          IF( N.EQ.0 ) CYCLE
          NMD = (IXP(N)-1)*ISVC
!
!---      Energy equation, unless isothermal simulation  ---
!
          IF( ISLC(30).EQ.0 ) THEN
!
!---        Energy balance equation at field node ---
!
            MP = NMD + IEQT
!
!---        Change in energy flow into field node with respect
!           to change in field node primary variables  ---
!
            MA = 0
            DO M = 1,ISVC
              MCOL = KLU(MP-IEQ_OFFSET,M+MA)
              DLU(MCOL) = DLU(MCOL) + 
     &          (FXE_CW(1,NWN)-FXE_CW(M+1,NWN))/DNR(M,N)
            ENDDO
!
!---        Change in energy flow with respect
!           to change in coupled-well pressure  ---
!
            MCOL = KLU1_CW(IEQT,NWN,NCW)
            MX = ISVC+2
            DLU(MCOL) = DLU(MCOL) + 
     &        (FXE_CW(1,NWN)-FXE_CW(MX,NWN))/DNR_CW(NCW)
!
!---        Pressure controlled coupled well  ---
!
            IF( ID_CW(8,NCW).EQ.1 ) DLU(MCOL) = 0.D+0
!
!---        Energy flow into field node, W  ---
!
            BUFFER = FXE_CW(1,NWN)
            IROW_P = MP - 1
            CALL VecSetValues( F_RHS_VEC,1,IROW_P,BUFFER,
     &        ADD_VALUES,IERR )
            RSDL(IEQT,N) = BLU(MP)
          ENDIF
!
!---      Water mass balance equation at field node ---
!
          MP = NMD + IEQW
!
!---      Change in water mass flux into field node with respect
!         to change in field node primary variables  ---
!
          MA = 0
          DO M = 1,ISVC
            MCOL = KLU(MP-IEQ_OFFSET,M+MA)
            DLU(MCOL) = DLU(MCOL) + 
     &        (FXW_CW(1,NWN)-FXW_CW(M+1,NWN))/DNR(M,N)
          ENDDO
!
!---      Change in water fraction of coupled-well flux with respect
!         to change in coupled-well pressure  ---
!
          MCOL = KLU1_CW(IEQW,NWN,NCW)
          MX = ISVC+2
          DLU(MCOL) = DLU(MCOL) + 
     &      (FXW_CW(1,NWN)-FXW_CW(MX,NWN))/DNR_CW(NCW)
!
!---      Pressure controlled coupled well  ---
!
          IF( ID_CW(8,NCW).EQ.1 ) DLU(MCOL) = 0.D+0
!
!---      Water mass flux into field node, kg/s  ---
!
          BUFFER = FXW_CW(1,NWN)
          IROW_P = MP - 1
          CALL VecSetValues( F_RHS_VEC,1,IROW_P,BUFFER,
     &      ADD_VALUES,IERR )
          RSDL(IEQW,N) = BLU(MP)
!
!---      Petroleum component mass balance equation at field node ---
!
          DO IGC = 1,NGC+2
!
!---        Iso-CO2 option  ---
!
            IF( IGC.EQ.1 .AND. ISLC(45).NE.0 ) CYCLE
!
!---        Iso-CH4 option  ---
!
            IF( IGC.EQ.2 .AND. ISLC(64).NE.0 ) CYCLE
            MP = NMD + IEQGC(IGC)
!
!---        Change in CO2 fraction of coupled-well flux with respect
!           to change in field node primary variables  ---
!
            MA = 0
            DO M = 1,ISVC
              MCOL = KLU(MP-IEQ_OFFSET,M+MA)
              DLU(MCOL) = DLU(MCOL) + 
     &          (FXC_CW(IGC,1,NWN)-FXC_CW(IGC,M+1,NWN))/DNR(M,N)
            ENDDO
!
!---        Change in petroleum component fraction of coupled-well 
!           flux with respect to change in coupled-well pressure  ---
!
            MCOL = KLU1_CW(IEQGC(IGC),NWN,NCW)
            MX = ISVC+2
            DLU(MCOL) = DLU(MCOL) + 
     &        (FXC_CW(IGC,1,NWN)-FXC_CW(IGC,MX,NWN))/DNR_CW(NCW)
!
!---        Pressure controlled coupled well  ---
!
            IF( ID_CW(8,NCW).EQ.1 ) DLU(MCOL) = 0.D+0
!
!---        Petroleum component mass flux into field node, kg/s  ---
!
            BUFFER = FXC_CW(IGC,1,NWN)
            IROW_P = MP - 1
            CALL VecSetValues( F_RHS_VEC,1,IROW_P,BUFFER,
     &        ADD_VALUES,IERR )
            RSDL(IEQGC(IGC),N) = BLU(MP)
          ENDDO
        ENDDO
!
!---    Coupled-well mass balance, coupled-well equations located
!       on last processor  ---
!
        IROW = JM_CW(NCW)
        IF( ID.EQ.(NP-1) ) THEN
          BUFFER = -RS_CW(1,NCW)
          IROW_P = IROW - 1
          CALL VecSetValues( F_RHS_VEC,1,IROW_P,BUFFER,
     &      ADD_VALUES,IERR )
!
!---      Pressure controlled coupled well  ---
!
          IF( ID_CW(8,NCW).EQ.1 ) THEN
            BUFFER = 0.D+0
            IROW_P = IROW - 1
            CALL VecSetValues( F_RHS_VEC,1,IROW_P,BUFFER,
     &        INSERT_VALUES,IERR )
          ENDIF
!
!---      Change in coupled-well mass balance with respect to
!         change in coupled-well pressure  ---
!
          NWFX = ID_CW(6,NCW)-ID_CW(5,NCW)+1
          MX = (NWFX*ISVC)+2
          NC = NC + 1
          MCOL = KLU2_CW(NC,NCW)
          DLU(MCOL) = DLU(MCOL) + 
     &      (RS_CW(MX,NCW)-RS_CW(1,NCW))/DNR_CW(NCW)
!
!---      Pressure controlled coupled well  ---
!
          IF( ID_CW(8,NCW).EQ.1 ) DLU(MCOL) = 1.D+0
!
!---      Loop over field nodes with coupled-well nodes ---
!
          DO NWF = ID_CW(5,NCW),ID_CW(6,NCW)
            N = IWF_CW(NWF)
            MX = (NWF-ID_CW(5,NCW))*ISVC + 1
!
!---        Change in coupled-well mass balance with respect to
!           change in field node primary variables  ---
!
            DO M = 1,ISVC
              NC = NC + 1
              MCOL = KLU2_CW(NC,NCW)
              DLU(MCOL) = DLU(MCOL) + RS_CW(MX+M,NCW)
!
!---          Pressure controlled coupled well  ---
!
              IF( ID_CW(8,NCW).EQ.1 ) DLU(MCOL) = 0.D+0
            ENDDO
          ENDDO
        ENDIF
      ENDDO
#endif
!
!---  Reset subroutine character string ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of JCB_COUP_WELL group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE LDO_COUP_WELL
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!
!     STOMPX-EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Load old-time-step values for coupled-well arrays.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 16 December 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE COUP_WELL
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/LDO_COUP_WELL'
!
!---  Loop over coupled wells ---
!
      DO NCW = 1,N_CW
        P_CW(1,NCW) = P_CW(2,NCW)
        PL_CW(NCW) = P_CW(2,NCW)
      ENDDO
!
!---  Reset subroutine character string ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of LDO_COUP_WELL group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE PROD_BO_WELL( NCW )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!
!     STOMPX-EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Production black-oil well model
!     
!     Bottom-hole pressure controlled
!
!     Flux of energy, water mass, CO2 mass, CH4 mass, and petroleum
!     component masses from field nodes to coupled-well nodes.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 16 December 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE JACOB
      USE HYST
      USE GRID
      USE GLB_PAR
      USE FDVP
      USE COUP_WELL
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 XPX(2),YPX(2),ZPX(2)
      REAL*8 VAR_CWX(6+LNGC)
      INTEGER, SAVE :: IALLOC
      REAL*8, DIMENSION(1:(LUK_CW+1)) :: RSL_CWX
      DATA IALLOC /0/
      INTEGER, DIMENSION(1:(LUK+2)) :: MCW,MFD
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/PROD_BO_WELL'
      DO M = 1,ISVC+2
        IF( M.NE.ISVC+2 ) THEN
          MCW(M) = 2
        ELSE
          MCW(M) = 3
        ENDIF
        IF( M.NE.ISVC+2 ) THEN
          MFD(M) = M+1
        ELSE
          MFD(M) = 2
        ENDIF
      ENDDO       
!
!---  Zero production well fluxes ---
!
      QM_CW(1,NCW) = 0.D+0
      QM_CW(3,NCW) = 0.D+0
      QM_CW(5,NCW) = 0.D+0
      DO IGC = 1,NGC+2
        QM_CW((7+(IGC-1)*2),NCW) = 0.D+0
      ENDDO
!
!---  Loop over production well nodes from bottom to top  ---
!
      DO NWN = ID_CW(4,NCW),ID_CW(3,NCW),-1
!
!---    Zero volumetric production well fluxes
!
!       Q_CW(1,NWN) - total volumetric flux, m^3/s
!       Q_CW(2,NWN) - aqueous volumetric flux, m^3/s
!       Q_CW(3,NWN) - gas volumetric flux, m^3/s
!       Q_CW(4,NWN) - nonaqueous-liquid volumetric flux, m^3/s  ---
!
        DO M = 1,4
          Q_CW(M,NWN) = 0.D+0
        ENDDO
!
!---    Loop over increment indices  ---
!
        DO M = 1,ISVC+2
          DO IGC = 1,NGC+2
            FXC_CW(IGC,M,NWN) = 0.D+0
          ENDDO
          FXW_CW(M,NWN) = 0.D+0
        ENDDO
      ENDDO
!
!---  Production well time interval ---
!
      TMZ = TM
      IF( NSTEP-NRST.EQ.0 ) TMZ = TMZ*(1.D+0+EPSL)+EPSL
!
!---  Cyclic time periods  ---
!
      IF( ICC_CW(NCW).EQ.1 ) TMZ = MOD( TM,VAR_CW(1,IM_CW(NCW),NCW) )
!
!---  Time prior to start time, production well is inactive, set 
!     well pressure to be in equilibrium with reservoir  ---
!
      IF( TMZ.LE.VAR_CW(1,1,NCW) ) THEN
        CALL EQUIL_COUP_WELL( NCW )
        ISUB_LOG = ISUB_LOG-1
        RETURN
      ENDIF
!
!---  Time after start time, production well is active, with single
!     start time  ---
!
      IFIND = 0
      IF( IM_CW(NCW).EQ.1 ) THEN
        DO N = 2,7
          VAR_CWX(N) = VAR_CW(N,1,NCW)
        ENDDO
        IFIND = 1
!
!---  Time after start time, production well is active, with multiple
!     time points, use linear interpolation of well parameters 
!     between time points  ---
!
      ELSE
        L1 : DO M = 2,IM_CW(NCW)
          IF( TMZ.LE.VAR_CW(1,M,NCW) ) THEN
            TD_CW = VAR_CW(1,M,NCW)-VAR_CW(1,M-1,NCW)
            DT_CW = MIN( VAR_CW(1,M,NCW)-TMZ,DT )
            TF_CWX = (TMZ-VAR_CW(1,M-1,NCW))/TD_CW
            DO N = 2,7
              VAR_CWX(N) = VAR_CW(N,M-1,NCW) + 
     &          TF_CWX*(VAR_CW(N,M,NCW)-VAR_CW(N,M-1,NCW))
            ENDDO
            IFIND = 1
            EXIT L1
          ENDIF
        ENDDO L1
      ENDIF
!
!---  Production well is inactive set well pressure to be in 
!     equilibrium with reservoir  ---
!
      IF( IFIND.EQ.0 ) THEN
        CALL EQUIL_COUP_WELL( NCW )
        ISUB_LOG = ISUB_LOG-1
        RETURN
      ENDIF
!
!---  Set bottom-hole pressure  ---
!
      PL_CW(NCW) = VAR_CWX(3) - PATM
      P_CW(2,NCW) = PL_CW(NCW)
      P_CW(3,NCW) = P_CW(2,NCW) + DNR_CW(NCW)
!
!---  Pressure controlled coupled well  ---
!
      ID_CW(8,NCW) = 1
!
!---  Well fluid density based on relative fluid mobility
!     at the previous time step  ---
!
      SRHOFX = 0.D+0
      SVOLX = 0.D+0
!
!---  Store bottom of coupled-well location in previous
!     coupled-well node location  ---
!
      XPX(1) = XTP_CW(2,ID_CW(2,NCW))
      YPX(1) = YTP_CW(2,ID_CW(2,NCW))
      ZPX(1) = ZTP_CW(2,ID_CW(2,NCW))
!
!---  Loop over the nodes in the coupled well from bottom to top ---
!
      DO NWN = ID_CW(4,NCW),ID_CW(3,NCW),-1
        N = IWN_CW(NWN)
        INVX = INV_CW(NWN)
        IZN = IZ(N)
!
!---    Coupled-well node centroids and projections ---
!
        XLX = PLX_CW(NWN)
        YLX = PLY_CW(NWN)
        ZLX = PLZ_CW(NWN)
        XPX(2) = 5.D-1*(XP_CW(2,NWN)+XP_CW(1,NWN))
        YPX(2) = 5.D-1*(YP_CW(2,NWN)+YP_CW(1,NWN))
        ZPX(2) = 5.D-1*(ZP_CW(2,NWN)+ZP_CW(1,NWN))
!
!---    Cylindrical coordinates with azimuthal symmetry,
!       centrally located wells  ---
!
        IF( (ICS.EQ.2 .OR. ICS.EQ.6) .AND. JFLD.EQ.1 ) THEN
          XPNX = 0.D+0
          YPNX = 0.D+0
          ZPNX = ZP(N)
!
!---    Cylindrical coordinates  ---
!
        ELSEIF( ICS.EQ.2 .OR. ICS.EQ.6 ) THEN
          XPNX = XP(N)*COS(YP(N))
          YPNX = XP(N)*SIN(YP(N))
          ZPNX = ZP(N)
!
!---    Cartesian or boundary-fitted orthogonal coordinates  ---
!
        ELSE
          XPNX = XP(N)
          YPNX = YP(N)
          ZPNX = ZP(N)
        ENDIF
!
!---    Equivalent field node radius components  ---
!
        PERMX = MAX( PERM(1,IZN),1.D-20 )
        PERMY = MAX( PERM(2,IZN),1.D-20 )
        PERMZ = MAX( PERM(3,IZN),1.D-20 )
        RWX = MAX( PAR_CW(2,INVX),1.D-20 )
!
!---    Cylindrical coordinates with azimuthal symmetry,
!       centrally located wells  ---
!
        IF( (ICS.EQ.2 .OR. ICS.EQ.6) .AND. JFLD.EQ.1 ) THEN
          ROZ = RP(N)
!
!---      Specified pressure-equivalent radius  ---
!
          IF( PAR_CW(3,INVX)/EPSL.GT.EPSL ) THEN
            ROZ = PAR_CW(3,INVX)
          ENDIF
          RWX = MIN( RWX,9.999D-1*ROZ )
          PERMX = PERMRF(1,N)*PERM(1,IZN)
          PERMY = PERMRF(1,N)*PERM(2,IZN)
          WI_CWX = 2.D+0*GPI*SQRT(PERMX*PERMY)*ZLX/
     &      (LOG(ROZ/RWX)+PAR_CW(1,INVX))
        ELSE
          PERMYZ = SQRT(PERMY/PERMZ)
          PERMZY = SQRT(PERMZ/PERMY)
          DXGFX = DXGF(N)/FF_CW(1,NCW)
          DYGFX = DYGF(N)*RP(N)/FF_CW(2,NCW)
          DZGFX = DZGF(N)/FF_CW(3,NCW)
          ROX = 2.8D-1*SQRT(PERMYZ*(DZGFX**2) + PERMZY*(DYGFX**2))
     &    /(SQRT(PERMYZ)+SQRT(PERMZY))
          PERMZX = SQRT(PERMZ/PERMX)
          PERMXZ = SQRT(PERMX/PERMZ)
          ROY = 2.8D-1*SQRT(PERMZX*(DXGFX**2) + PERMXZ*(DZGFX**2))
     &      /(SQRT(PERMZX)+SQRT(PERMXZ))
          PERMYX = SQRT(PERMY/PERMX)
          PERMXY = SQRT(PERMX/PERMY)
          ROZ = 2.8D-1*SQRT(PERMYX*(DXGFX**2) + PERMXY*(DYGFX**2))
     &      /(SQRT(PERMYX)+SQRT(PERMXY))
!
!---      Specified pressure-equivalent radius  ---
!
          IF( PAR_CW(3,INVX)/EPSL.GT.EPSL ) THEN
            ROX = PAR_CW(3,INVX)
            ROY = PAR_CW(3,INVX)
            ROZ = PAR_CW(3,INVX)
          ENDIF
!
!---      Well index components  ---
!
          PERMX = PERMRF(1,N)*PERM(1,IZN)
          PERMY = PERMRF(1,N)*PERM(2,IZN)
          PERMZ = PERMRF(1,N)*PERM(3,IZN)
          WIX = 2.D+0*GPI*SQRT(PERMY*PERMZ)*XLX/
     &      (LOG(ROX/RWX)+PAR_CW(1,INVX))
          WIY = 2.D+0*GPI*SQRT(PERMX*PERMZ)*YLX/
     &      (LOG(ROY/RWX)+PAR_CW(1,INVX))
          WIZ = 2.D+0*GPI*SQRT(PERMX*PERMY)*ZLX/
     &      (LOG(ROZ/RWX)+PAR_CW(1,INVX))
          WI_CWX = SQRT((WIX**2) + (WIY**2) + (WIZ**2))
        ENDIF
!
!---    Mass fluxes, positive into the well  ---
!
        DPGX = 1.D+0
        DPNX = 1.D+0
        DPLX = 1.D+0
!
!---    Liquid production well, no gas flux from reservoir to
!       well  ---
!
        IF( IT_CW(NCW).EQ.-2 ) THEN
          FGX_CWX = 0.D+0
        ELSE
!
!---      Gas flux from reservoir to well  ---
!
          FGX_CWX = WI_CWX*RKG(1,N)*RHOG(1,N)*DPGX/VISG(1,N)
        ENDIF
!
!---    Aqueous flux from well to reservoir  ---
!
        FLX_CWX = WI_CWX*RKL(1,N)*RHOL(1,N)*DPLX/VISL(1,N)
!
!---    Nonaqueous-liquid flux from well to reservoir  ---
!
        FNX_CWX = WI_CWX*RKN(1,N)*RHON(1,N)*DPNX/VISN(1,N)
!
!---    Total mass and volumetric flux into well from reservoir  ---
!
        SRHOFX = SRHOFX + FGX_CWX + FLX_CWX + FNX_CWX
        SVOLX = SVOLX + FGX_CWX/RHOG(1,N) + FLX_CWX/RHOL(1,N) + 
     &    FNX_CWX/RHON(1,N)
!
!---    Store current coupled-well node location in previous
!       coupled-well node location  ---
!
        XPX(1) = XPX(2)
        YPX(1) = YPX(2)
        ZPX(1) = ZPX(2)
      ENDDO
!
!---  Dynamic average well-fluid density  ---
!
      IF( SRHOFX.GT.EPSL ) THEN
        RHOF_CWX = SRHOFX/SVOLX
!
!---  Static average well-fluid density  ---
!
      ELSE
        SRHOFX = 0.D+0
        SVOLX = 0.D+0
!
!---  Loop over the nodes in the coupled well from bottom to top ---
!
        DO NWN = ID_CW(4,NCW),ID_CW(3,NCW),-1
          N = IWN_CW(NWN)
!
!---      Liquid production well, no gas flux from reservoir to
!         well  ---
!
          IF( IT_CW(NCW).EQ.-2 ) THEN
            SRHOFX = SRHOFX + VOL(N)*PORD(1,N)* 
     &        (RHOL(1,N)/VISL(1,N) + RHON(1,N)/VISN(1,N))
            SVOLX = SVOLX + VOL(N)*PORD(1,N)* 
     &        (1.D+0/VISL(1,N) +  1.D+0/VISN(1,N))
          ELSE
            SRHOFX = SRHOFX + VOL(N)*PORD(1,N)*
     &       (RHOG(1,N)/VISG(1,N) + RHOL(1,N)/VISL(1,N) + 
     &        RHON(1,N)/VISN(1,N))
            SVOLX = SVOLX + VOL(N)*PORD(1,N)*
     &       (1.D+0/VISG(1,N) + 1.D+0/VISL(1,N) + 1.D+0/VISN(1,N))
          ENDIF
        ENDDO
        IF( SRHOFX.GT.EPSL ) THEN
          RHOF_CWX = SRHOFX/SVOLX
!
!---    Reference well-fluid density  ---
!
        ELSE
          RHOF_CWX = RHORL
        ENDIF
      ENDIF
!
!---  Record well fluid density for output  ---
!
      RHOF_CW(NCW) = RHOF_CWX
!
!---  Initialize local coupled-well mass residuals ---
!
      DO M = 1,(LUK_CW+1)
        RSL_CWX(M) = 0.D+0
      ENDDO
!
!---  Loop over increment indices ---
!
      DO M = 1,ISVC+2
        MW = MCW(M)
        MF = MFD(M)
        N = IWN_CW(ID_CW(3,NCW))
        P_CWX = P_CW(MW,NCW)
!
!---    Store bottom of coupled-well location in previous
!       coupled-well node location  ---
!
        XPX(1) = XTP_CW(2,ID_CW(2,NCW))
        YPX(1) = YTP_CW(2,ID_CW(2,NCW))
        ZPX(1) = ZTP_CW(2,ID_CW(2,NCW))
!
!---    Loop over the nodes in the coupled well from bottom to top ---
!
        DO NWN = ID_CW(4,NCW),ID_CW(3,NCW),-1
          N = IWN_CW(NWN)
          INVX = INV_CW(NWN)
          IZN = IZ(N)
!
!---      Coupled-well node centroids and projections ---
!
          XLX = PLX_CW(NWN)
          YLX = PLY_CW(NWN)
          ZLX = PLZ_CW(NWN)
          XPX(2) = 5.D-1*(XP_CW(2,NWN)+XP_CW(1,NWN))
          YPX(2) = 5.D-1*(YP_CW(2,NWN)+YP_CW(1,NWN))
          ZPX(2) = 5.D-1*(ZP_CW(2,NWN)+ZP_CW(1,NWN))
!
!---      Cylindrical coordinates with azimuthal symmetry,
!         centrally located wells  ---
!
          IF( (ICS.EQ.2 .OR. ICS.EQ.6) .AND. JFLD.EQ.1 ) THEN
            XPNX = 0.D+0
            YPNX = 0.D+0
            ZPNX = ZP(N)
!
!---      Cylindrical coordinates  ---
!
          ELSEIF( ICS.EQ.2 .OR. ICS.EQ.6 ) THEN
            XPNX = XP(N)*COS(YP(N))
            YPNX = XP(N)*SIN(YP(N))
            ZPNX = ZP(N)
!
!---      Cartesian or boundary-fitted orthogonal coordinates  ---
!
          ELSE
            XPNX = XP(N)
            YPNX = YP(N)
            ZPNX = ZP(N)
          ENDIF
!
!---      Well pressure using previous coupled-well node density ---
!
          P_CWX = P_CWX - (ZPX(2)-ZPX(1))*GRAV*RHOF_CWX
!
!---      Adjust the reservoir pressure to the coupled-well node
!         centroid  ---
!
!---      Phase condition #1  ---
!
!         SL = 1.0, SG+SN = 0.0
!
          IF( MOD(NPHAZ(2,N),10).EQ.1 ) THEN
            PLFX = PL(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHOL(MF,N)
            PNFX = PN(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHOL(MF,N)
            PTX = MAX( PLFX,PNFX )
            CPGTX = MAX( (PG(MF,N)-MAX( PL(MF,N),PN(MF,N) )),0.D+0 )
            PGFX = PTX + CPGTX
!
!---      Phase condition #2  ---
!
!         SL < 1.0, ST > 0.0, SG = 0.0
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.2 ) THEN
            PLFX = PL(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHOL(MF,N)
            PNFX = PN(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHON(MF,N)
            PTX = MAX( PLFX,PNFX )
            CPGTX = MAX( (PG(MF,N)-MAX( PL(MF,N),PN(MF,N) )),0.D+0 )
            PGFX = PTX + CPGTX
!
!---      Phase condition #3  ---
!
!         SL < 1.0, ST > 0.0, SG > 0.0
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.3 ) THEN
            PGFX = PG(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHOG(MF,N)
            PLFX = PL(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHOL(MF,N)
            PNFX = PN(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHON(MF,N)
!
!---      Phase condition #4  ---
!
!         SL = 0.0, ST = 1.0, SG = 0.0
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.4 ) THEN
            PLFX = PL(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHON(MF,N)
            PNFX = PN(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHON(MF,N)
            PTX = MAX( PLFX,PNFX )
            CPGTX = MAX( (PG(MF,N)-MAX( PL(MF,N),PN(MF,N) )),0.D+0 )
            PGFX = PTX + CPGTX
!
!---      Phase condition #5  ---
!
!         SL = 0.0, ST = 1.0, SG > 0.0
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.5 ) THEN
            PGFX = PG(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHOG(MF,N)
            PLFX = PL(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHON(MF,N)
            PNFX = PN(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHON(MF,N)
          ENDIF
!
!---      Equivalent field node radius components  ---
!
          PERMX = MAX( PERM(1,IZN),1.D-20 )
          PERMY = MAX( PERM(2,IZN),1.D-20 )
          PERMZ = MAX( PERM(3,IZN),1.D-20 )
          RWX = MAX( PAR_CW(2,INVX),1.D-20 )
!
!---      Cylindrical coordinates with azimuthal symmetry,
!         centrally located wells  ---
!
          IF( (ICS.EQ.2 .OR. ICS.EQ.6) .AND. JFLD.EQ.1 ) THEN
            ROZ = RP(N)
!
!---        Specified pressure-equivalent radius  ---
!
            IF( PAR_CW(3,INVX)/EPSL.GT.EPSL ) THEN
              ROZ = PAR_CW(3,INVX)
            ENDIF
            RWX = MIN( RWX,9.999D-1*ROZ )
            PERMX = PERMRF(MF,N)*PERM(1,IZN)
            PERMY = PERMRF(MF,N)*PERM(2,IZN)
            WI_CWX = 2.D+0*GPI*SQRT(PERMX*PERMY)*ZLX/
     &        (LOG(ROZ/RWX)+PAR_CW(1,INVX))
          ELSE
            PERMYZ = SQRT(PERMY/PERMZ)
            PERMZY = SQRT(PERMZ/PERMY)
            DXGFX = DXGF(N)/FF_CW(1,NCW)
            DYGFX = DYGF(N)*RP(N)/FF_CW(2,NCW)
            DZGFX = DZGF(N)/FF_CW(3,NCW)
            ROX = 2.8D-1*SQRT(PERMYZ*(DZGFX**2) + PERMZY*(DYGFX**2))
     &      /(SQRT(PERMYZ)+SQRT(PERMZY))
            PERMZX = SQRT(PERMZ/PERMX)
            PERMXZ = SQRT(PERMX/PERMZ)
            ROY = 2.8D-1*SQRT(PERMZX*(DXGFX**2) + PERMXZ*(DZGFX**2))
     &        /(SQRT(PERMZX)+SQRT(PERMXZ))
            PERMYX = SQRT(PERMY/PERMX)
            PERMXY = SQRT(PERMX/PERMY)
            ROZ = 2.8D-1*SQRT(PERMYX*(DXGFX**2) + PERMXY*(DYGFX**2))
     &        /(SQRT(PERMYX)+SQRT(PERMXY))
!
!---        Specified pressure-equivalent radius  ---
!
            IF( PAR_CW(3,INVX)/EPSL.GT.EPSL ) THEN
              ROX = PAR_CW(3,INVX)
              ROY = PAR_CW(3,INVX)
              ROZ = PAR_CW(3,INVX)
            ENDIF
!
!---        Well index components  ---
!
            PERMX = PERMRF(MF,N)*PERM(1,IZN)
            PERMY = PERMRF(MF,N)*PERM(2,IZN)
            PERMZ = PERMRF(MF,N)*PERM(3,IZN)
            WIX = 2.D+0*GPI*SQRT(PERMY*PERMZ)*XLX/
     &        (LOG(ROX/RWX)+PAR_CW(1,INVX))
            WIY = 2.D+0*GPI*SQRT(PERMX*PERMZ)*YLX/
     &        (LOG(ROY/RWX)+PAR_CW(1,INVX))
            WIZ = 2.D+0*GPI*SQRT(PERMX*PERMY)*ZLX/
     &        (LOG(ROZ/RWX)+PAR_CW(1,INVX))
            WI_CWX = SQRT((WIX**2) + (WIY**2) + (WIZ**2))
          ENDIF
!
!---      Mass fluxes, positive into the well  ---
!
          DPGX = MAX( PGFX-P_CWX,0.D+0 )
          DPNX = MAX( PGFX-P_CWX,0.D+0 )
          DPLX = MAX( PGFX-P_CWX,0.D+0 )
!
!---      Zero fluxes from well to reservoir  ---
!
          FXW_CW(M,NWN) = 0.D+0
          DO IGC = 1,NGC+2
            FXC_CW(IGC,M,NWN) = 0.D+0
          ENDDO
!
!---      Liquid production well, no gas flux from reservoir to
!         well  ---
!
          IF( IT_CW(NCW).EQ.-2 ) THEN
            FGX_CWX = 0.D+0
          ELSE
!
!---        Gas flux from reservoir to well  ---
!
            FGX_CWX = WI_CWX*RKG(MF,N)*RHOG(MF,N)*DPGX/VISG(MF,N)
          ENDIF
!
!---      Water component gas flux from well to reservoir  ---
!
          FXW_CW(M,NWN) = FXW_CW(M,NWN) - FGX_CWX*XGW(MF,N)
!
!---      Gas component gas flux from well to reservoir  ---
!
          FXC_CW(1,M,NWN) = FXC_CW(1,M,NWN) - FGX_CWX*XGC(1,MF,N)
!
!---      Aqueous flux from well to reservoir  ---
!
          FLX_CWX = WI_CWX*RKL(MF,N)*RHOL(MF,N)*DPLX/VISL(MF,N)
!
!---      Water component aqueous fluxes from well to reservoir  ---
!
          FXW_CW(M,NWN) = FXW_CW(M,NWN) - FLX_CWX*XLW(MF,N)
!
!---      Nonaqueous-liquid flux from well to reservoir  ---
!
          FNX_CWX = WI_CWX*RKN(MF,N)*RHON(MF,N)*DPNX/VISN(MF,N)
!
!---      Gas component nonaqueous-liquid fluxes from well to 
!         reservoir  ---
!
          FXC_CW(1,M,NWN) = FXC_CW(1,M,NWN) - FNX_CWX*XNC(1,MF,N)
!
!---      Oil component nonaqueous-liquid fluxes from well to 
!         reservoir  ---
!
          FXC_CW(2,M,NWN) = FXC_CW(2,M,NWN) - FNX_CWX*XNC(2,MF,N)
!
!---      Store current coupled-well node location in previous
!         coupled-well node location  ---
!
          XPX(1) = XPX(2)
          YPX(1) = YPX(2)
          ZPX(1) = ZPX(2)
!
!---      Volumetric production well fluxes  ---
!
          IF( M.EQ.1 ) THEN
            IF( SL(2,N).GT.0.D+0 ) Q_CW(2,NWN) = FLX_CWX/RHOL(2,N)
            IF( SG(2,N).GT.0.D+0 ) Q_CW(3,NWN) = FGX_CWX/RHOG(2,N)
            IF( SN(2,N).GT.0.D+0 ) Q_CW(4,NWN) = FNX_CWX/RHON(2,N)
            Q_CW(1,NWN) = Q_CW(2,NWN) + Q_CW(3,NWN) + Q_CW(4,NWN)
          ENDIF
        ENDDO
      ENDDO
!
!---  Mass balance residuals for production type coupled well  ---
!
      NWFX = ID_CW(6,NCW)-ID_CW(5,NCW)+1
      NX = (NWFX*ISVC)+2
      RSL_CWX(1) = 0.D+0
      RSL_CWX(NX) = 0.D+0
      QM_CW(1,NCW) = 0.D+0
      QM_CW(3,NCW) = 0.D+0
      QM_CW(5,NCW) = 0.D+0
      DO IGC = 1,NGC+2
        QM_CW((7+(IGC-1)*2),NCW) = 0.D+0
      ENDDO
      QTM_CWX = 0.D+0
!
!---  Loop over coupled-well nodes from bottom to top  ---
!
      DO NWN = ID_CW(4,NCW),ID_CW(3,NCW),-1
        RSL_CWX(1) = RSL_CWX(1) - FXW_CW(1,NWN)
        RSL_CWX(NX) = RSL_CWX(NX) - FXW_CW(ISVC+2,NWN)
        QTM_CWX = QTM_CWX - FXW_CW(1,NWN)
        QM_CW(3,NCW) = QM_CW(3,NCW) - FXW_CW(1,NWN)
        DO IGC = 1,NGC+2
          RSL_CWX(1) = RSL_CWX(1) - FXC_CW(IGC,1,NWN)
          RSL_CWX(NX) = RSL_CWX(NX) - FXC_CW(IGC,ISVC+2,NWN)
          QTM_CWX = QTM_CWX - FXC_CW(IGC,1,NWN)
          QM_CW(1,NCW) = QM_CW(1,NCW) - FXC_CW(IGC,1,NWN)
          QM_CW((7+(IGC-1)*2),NCW) = QM_CW((7+(IGC-1)*2),NCW) - 
     &      FXC_CW(IGC,1,NWN)
        ENDDO
      ENDDO
!
!---  Loop over field nodes that contain coupled-well nodes  ---
!
      DO NWF = ID_CW(5,NCW),ID_CW(6,NCW)
!
!---    Skip for processors without field nodes with coupled-well
!       nodes  ---
!
        IF( IWF_CW(NWF).EQ.0 ) CYCLE
        M1 = (NWF-ID_CW(5,NCW))*ISVC + 1
        DO M2 = 1,ISVC
          M3 = M1+M2
          RSL_CWX(M3) = 0.D+0
!
!---      Loop over coupled-well nodes  ---
!
          DO NWN = ID_CW(3,NCW),ID_CW(4,NCW)
!
!---        If coupled-well node is within the current field
!           node, use incremented fluxes  ---
!
            IF( IWF_CW(NWF).EQ.IWN_CW(NWN) ) THEN
              RSL_CWX(M3) = RSL_CWX(M3) - FXW_CW(M2+1,NWN)                
              DO IGC = 1,NGC+2
                RSL_CWX(M3) = RSL_CWX(M3) - FXC_CW(IGC,M2+1,NWN)
              ENDDO
!
!---        If coupled-well node is outside the current field
!           node, use un-incremented fluxes  ---
!
            ELSE
              RSL_CWX(M3) = RSL_CWX(M3) - FXW_CW(1,NWN)
              DO IGC = 1,NGC+2
                RSL_CWX(M3) = RSL_CWX(M3) - FXC_CW(IGC,1,NWN)
              ENDDO
            ENDIF
          ENDDO
        ENDDO
      ENDDO
!
!---  Redefine local residuals to be the change in the coupled-well
!     residual mass with respect to the change in the field-node
!     primary variables, except for the first and last residuals  ---
!
      DO NWF = ID_CW(5,NCW),ID_CW(6,NCW)
        N = IWF_CW(NWF)
        IF( N.EQ.0 ) CYCLE
        MX = (NWF-ID_CW(5,NCW))*ISVC + 1
        DO M = 1,ISVC
          RSL_CWX(MX+M) = (RSL_CWX(MX+M)-RSL_CWX(1))/DNR(M,N)
        ENDDO
      ENDDO
!
!---  Global injection well mass balance residuals  ---
!
      CALL MPI_ALLREDUCE( RSL_CWX,RS_CW(1,NCW),NX,MPI_REAL8,MPI_SUM,
     &  MPI_COMM_WORLD,IERR )
!
!---  Reset subroutine character string ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of PROD_BO_WELL group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE PROD_COUP_WELL( NCW )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!
!     STOMPX-EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Production coupled well model
!     
!     Bottom-hole pressure controlled
!
!     Flux of energy, water mass, CO2 mass, CH4 mass, and petroleum
!     component masses from field nodes to coupled-well nodes.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 16 December 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE JACOB
      USE HYST
      USE GRID
      USE GLB_PAR
      USE FDVP
      USE COUP_WELL
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 XPX(2),YPX(2),ZPX(2)
      REAL*8 VAR_CWX(6+LNGC)
      REAL*8, DIMENSION(1:(LUK_CW+1)) :: RSL_CWX
      INTEGER, SAVE :: IALLOC
      DATA IALLOC /0/
      INTEGER, DIMENSION(1:(LUK+2)) :: MCW,MFD
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/PROD_COUP_WELL'
!
!---  Black-oil option  ---
!
      IF( ISLC(68).EQ.0 ) THEN
        CALL PROD_BO_WELL( NCW )
        ISUB_LOG = ISUB_LOG-1
        RETURN
      ENDIF
!
!---  Compositional option  ---
!
      DO M = 1,ISVC+2
        IF( M.NE.ISVC+2 ) THEN
          MCW(M) = 2
        ELSE
          MCW(M) = 3
        ENDIF
        IF( M.NE.ISVC+2 ) THEN
          MFD(M) = M+1
        ELSE
          MFD(M) = 2
        ENDIF
      ENDDO       
!
!---  K-factors computed from fugacity coefficients  ---
!
      IFK = 0
!
!---  Zero production well fluxes ---
!
      QM_CW(1,NCW) = 0.D+0
      QM_CW(3,NCW) = 0.D+0
      QM_CW(5,NCW) = 0.D+0
      DO IGC = 1,NGC+2
        QM_CW((7+(IGC-1)*2),NCW) = 0.D+0
      ENDDO
!
!---  Loop over production well nodes from bottom to top  ---
!
      DO NWN = ID_CW(4,NCW),ID_CW(3,NCW),-1
!
!---    Zero volumetric production well fluxes
!
!       Q_CW(1,NWN) - total volumetric flux, m^3/s
!       Q_CW(2,NWN) - aqueous volumetric flux, m^3/s
!       Q_CW(3,NWN) - gas volumetric flux, m^3/s
!       Q_CW(4,NWN) - nonaqueous-liquid volumetric flux, m^3/s  ---
!
        DO M = 1,4
          Q_CW(M,NWN) = 0.D+0
        ENDDO
!
!---    Loop over increment indices  ---
!
        DO M = 1,ISVC+2
          DO IGC = 1,NGC+2
            FXC_CW(IGC,M,NWN) = 0.D+0
          ENDDO
          FXE_CW(M,NWN) = 0.D+0
          FXW_CW(M,NWN) = 0.D+0
        ENDDO
      ENDDO
!
!---  Production well time interval ---
!
      TMZ = TM
      IF( NSTEP-NRST.EQ.0 ) TMZ = TMZ*(1.D+0+EPSL)+EPSL
!
!---  Cyclic time periods  ---
!
      IF( ICC_CW(NCW).EQ.1 ) TMZ = MOD( TM,VAR_CW(1,IM_CW(NCW),NCW) )
!
!---  Time prior to start time, production well is inactive, set 
!     well pressure to be in equilibrium with reservoir  ---
!
      IF( TMZ.LE.VAR_CW(1,1,NCW) ) THEN
        CALL EQUIL_COUP_WELL( NCW )
        ISUB_LOG = ISUB_LOG-1
        RETURN
      ENDIF
!
!---  Time after start time, production well is active, with single
!     start time  ---
!
      IFIND = 0
      IF( IM_CW(NCW).EQ.1 ) THEN
        DO N = 2,NGC+8
          VAR_CWX(N) = VAR_CW(N,1,NCW)
        ENDDO
        IFIND = 1
!
!---  Time after start time, production well is active, with multiple
!     time points, use linear interpolation of well parameters 
!     between time points  ---
!
      ELSE
        L1 : DO M = 2,IM_CW(NCW)
          IF( TMZ.LE.VAR_CW(1,M,NCW) ) THEN
            TD_CW = VAR_CW(1,M,NCW)-VAR_CW(1,M-1,NCW)
            DT_CW = MIN( VAR_CW(1,M,NCW)-TMZ,DT )
            TF_CWX = (TMZ-VAR_CW(1,M-1,NCW))/TD_CW
            DO N = 2,NGC+8
              VAR_CWX(N) = VAR_CW(N,M-1,NCW) + 
     &          TF_CWX*(VAR_CW(N,M,NCW)-VAR_CW(N,M-1,NCW))
            ENDDO
            IFIND = 1
            EXIT L1
          ENDIF
        ENDDO L1
      ENDIF
!
!---  Production well is inactive set well pressure to be in 
!     equilibrium with reservoir  ---
!
      IF( IFIND.EQ.0 ) THEN
        CALL EQUIL_COUP_WELL( NCW )
        ISUB_LOG = ISUB_LOG-1
        RETURN
      ENDIF
!
!---  Set bottom-hole pressure  ---
!
      PL_CW(NCW) = VAR_CWX(3) - PATM
      P_CW(2,NCW) = PL_CW(NCW)
      P_CW(3,NCW) = P_CW(2,NCW) + DNR_CW(NCW)
!
!---  Pressure controlled coupled well  ---
!
      ID_CW(8,NCW) = 1
!
!---  Well fluid density based on relative fluid mobility
!     at the previous time step  ---
!
      SRHOFX = 0.D+0
      SVOLX = 0.D+0
!
!---  Store bottom of coupled-well location in previous
!     coupled-well node location  ---
!
      XPX(1) = XTP_CW(2,ID_CW(2,NCW))
      YPX(1) = YTP_CW(2,ID_CW(2,NCW))
      ZPX(1) = ZTP_CW(2,ID_CW(2,NCW))
!
!---  Loop over the nodes in the coupled well from bottom to top ---
!
      DO NWN = ID_CW(4,NCW),ID_CW(3,NCW),-1
        N = IWN_CW(NWN)
        INVX = INV_CW(NWN)
        IZN = IZ(N)
!
!---    Coupled-well node centroids and projections ---
!
        XLX = PLX_CW(NWN)
        YLX = PLY_CW(NWN)
        ZLX = PLZ_CW(NWN)
        XPX(2) = 5.D-1*(XP_CW(2,NWN)+XP_CW(1,NWN))
        YPX(2) = 5.D-1*(YP_CW(2,NWN)+YP_CW(1,NWN))
        ZPX(2) = 5.D-1*(ZP_CW(2,NWN)+ZP_CW(1,NWN))
!
!---    Cylindrical coordinates with azimuthal symmetry,
!       centrally located wells  ---
!
        IF( (ICS.EQ.2 .OR. ICS.EQ.6) .AND. JFLD.EQ.1 ) THEN
          XPNX = 0.D+0
          YPNX = 0.D+0
          ZPNX = ZP(N)
!
!---    Cylindrical coordinates  ---
!
        ELSEIF( ICS.EQ.2 .OR. ICS.EQ.6 ) THEN
          XPNX = XP(N)*COS(YP(N))
          YPNX = XP(N)*SIN(YP(N))
          ZPNX = ZP(N)
!
!---    Cartesian or boundary-fitted orthogonal coordinates  ---
!
        ELSE
          XPNX = XP(N)
          YPNX = YP(N)
          ZPNX = ZP(N)
        ENDIF
!
!---    Equivalent field node radius components  ---
!
        PERMX = MAX( PERM(1,IZN),1.D-20 )
        PERMY = MAX( PERM(2,IZN),1.D-20 )
        PERMZ = MAX( PERM(3,IZN),1.D-20 )
        RWX = MAX( PAR_CW(2,INVX),1.D-20 )
!
!---    Cylindrical coordinates with azimuthal symmetry,
!       centrally located wells  ---
!
        IF( (ICS.EQ.2 .OR. ICS.EQ.6) .AND. JFLD.EQ.1 ) THEN
          ROZ = RP(N)
!
!---      Specified pressure-equivalent radius  ---
!
          IF( PAR_CW(3,INVX)/EPSL.GT.EPSL ) THEN
            ROZ = PAR_CW(3,INVX)
          ENDIF
          RWX = MIN( RWX,9.999D-1*ROZ )
          PERMX = PERMRF(1,N)*PERM(1,IZN)
          PERMY = PERMRF(1,N)*PERM(2,IZN)
          WI_CWX = 2.D+0*GPI*SQRT(PERMX*PERMY)*ZLX/
     &      (LOG(ROZ/RWX)+PAR_CW(1,INVX))
        ELSE
          PERMYZ = SQRT(PERMY/PERMZ)
          PERMZY = SQRT(PERMZ/PERMY)
          DXGFX = DXGF(N)/FF_CW(1,NCW)
          DYGFX = DYGF(N)*RP(N)/FF_CW(2,NCW)
          DZGFX = DZGF(N)/FF_CW(3,NCW)
          ROX = 2.8D-1*SQRT(PERMYZ*(DZGFX**2) + PERMZY*(DYGFX**2))
     &    /(SQRT(PERMYZ)+SQRT(PERMZY))
          PERMZX = SQRT(PERMZ/PERMX)
          PERMXZ = SQRT(PERMX/PERMZ)
          ROY = 2.8D-1*SQRT(PERMZX*(DXGFX**2) + PERMXZ*(DZGFX**2))
     &      /(SQRT(PERMZX)+SQRT(PERMXZ))
          PERMYX = SQRT(PERMY/PERMX)
          PERMXY = SQRT(PERMX/PERMY)
          ROZ = 2.8D-1*SQRT(PERMYX*(DXGFX**2) + PERMXY*(DYGFX**2))
     &      /(SQRT(PERMYX)+SQRT(PERMXY))
!
!---      Specified pressure-equivalent radius  ---
!
          IF( PAR_CW(3,INVX)/EPSL.GT.EPSL ) THEN
            ROX = PAR_CW(3,INVX)
            ROY = PAR_CW(3,INVX)
            ROZ = PAR_CW(3,INVX)
          ENDIF
!
!---      Well index components  ---
!
          PERMX = PERMRF(1,N)*PERM(1,IZN)
          PERMY = PERMRF(1,N)*PERM(2,IZN)
          PERMZ = PERMRF(1,N)*PERM(3,IZN)
          WIX = 2.D+0*GPI*SQRT(PERMY*PERMZ)*XLX/
     &      (LOG(ROX/RWX)+PAR_CW(1,INVX))
          WIY = 2.D+0*GPI*SQRT(PERMX*PERMZ)*YLX/
     &      (LOG(ROY/RWX)+PAR_CW(1,INVX))
          WIZ = 2.D+0*GPI*SQRT(PERMX*PERMY)*ZLX/
     &      (LOG(ROZ/RWX)+PAR_CW(1,INVX))
          WI_CWX = SQRT((WIX**2) + (WIY**2) + (WIZ**2))
        ENDIF
!
!---    Mass fluxes, positive into the well  ---
!
        DPGX = 1.D+0
        DPNX = 1.D+0
        DPLX = 1.D+0
!
!---    Liquid production well, no gas flux from reservoir to
!       well  ---
!
        IF( IT_CW(NCW).EQ.-2 ) THEN
          FGX_CWX = 0.D+0
        ELSE
!
!---      Gas flux from reservoir to well  ---
!
          FGX_CWX = WI_CWX*RKG(1,N)*RHOG(1,N)*DPGX/VISG(1,N)
        ENDIF
!
!---    Aqueous flux from well to reservoir  ---
!
        FLX_CWX = WI_CWX*RKL(1,N)*RHOL(1,N)*DPLX/VISL(1,N)
!
!---    Nonaqueous-liquid flux from well to reservoir  ---
!
        FNX_CWX = WI_CWX*RKN(1,N)*RHON(1,N)*DPNX/VISN(1,N)
!
!---    Total mass and volumetric flux into well from reservoir  ---
!
        SRHOFX = SRHOFX + FGX_CWX + FLX_CWX + FNX_CWX
        SVOLX = SVOLX + FGX_CWX/RHOG(1,N) + FLX_CWX/RHOL(1,N) + 
     &    FNX_CWX/RHON(1,N)
!
!---    Store current coupled-well node location in previous
!       coupled-well node location  ---
!
        XPX(1) = XPX(2)
        YPX(1) = YPX(2)
        ZPX(1) = ZPX(2)
      ENDDO
!
!---  Dynamic average well-fluid density  ---
!
      IF( SRHOFX.GT.EPSL ) THEN
        RHOF_CWX = SRHOFX/SVOLX
!
!---  Static average well-fluid density  ---
!
      ELSE
        SRHOFX = 0.D+0
        SVOLX = 0.D+0
!
!---  Loop over the nodes in the coupled well from bottom to top ---
!
        DO NWN = ID_CW(4,NCW),ID_CW(3,NCW),-1
          N = IWN_CW(NWN)
!
!---      Liquid production well, no gas flux from reservoir to
!         well  ---
!
          IF( IT_CW(NCW).EQ.-2 ) THEN
            SRHOFX = SRHOFX + VOL(N)*PORD(1,N)* 
     &        (RHOL(1,N)/VISL(1,N) + RHON(1,N)/VISN(1,N))
            SVOLX = SVOLX + VOL(N)*PORD(1,N)* 
     &        (1.D+0/VISL(1,N) +  1.D+0/VISN(1,N))
          ELSE
            SRHOFX = SRHOFX + VOL(N)*PORD(1,N)*
     &       (RHOG(1,N)/VISG(1,N) + RHOL(1,N)/VISL(1,N) + 
     &        RHON(1,N)/VISN(1,N))
            SVOLX = SVOLX + VOL(N)*PORD(1,N)*
     &       (1.D+0/VISG(1,N) + 1.D+0/VISL(1,N) + 1.D+0/VISN(1,N))
          ENDIF
        ENDDO
        IF( SRHOFX.GT.EPSL ) THEN
          RHOF_CWX = SRHOFX/SVOLX
!
!---    Reference well-fluid density  ---
!
        ELSE
          RHOF_CWX = RHORL
        ENDIF
      ENDIF
!
!---  Record well fluid density for output  ---
!
      RHOF_CW(NCW) = RHOF_CWX
!
!---  Loop over increment indices ---
!
      DO M = 1,ISVC+2
        MW = MCW(M)
        MF = MFD(M)
        N = IWN_CW(ID_CW(3,NCW))
        P_CWX = P_CW(MW,NCW)
!
!---    Store bottom of coupled-well location in previous
!       coupled-well node location  ---
!
        XPX(1) = XTP_CW(2,ID_CW(2,NCW))
        YPX(1) = YTP_CW(2,ID_CW(2,NCW))
        ZPX(1) = ZTP_CW(2,ID_CW(2,NCW))
!
!---    Loop over the nodes in the coupled well from bottom to top ---
!
        SRHOFX = 0.D+0
        SVOLX = 0.D+0
        DO NWN = ID_CW(4,NCW),ID_CW(3,NCW),-1
          N = IWN_CW(NWN)
          INVX = INV_CW(NWN)
          IZN = IZ(N)
!
!---      Coupled-well node centroids and projections ---
!
          XLX = PLX_CW(NWN)
          YLX = PLY_CW(NWN)
          ZLX = PLZ_CW(NWN)
          XPX(2) = 5.D-1*(XP_CW(2,NWN)+XP_CW(1,NWN))
          YPX(2) = 5.D-1*(YP_CW(2,NWN)+YP_CW(1,NWN))
          ZPX(2) = 5.D-1*(ZP_CW(2,NWN)+ZP_CW(1,NWN))
!
!---      Cylindrical coordinates with azimuthal symmetry,
!         centrally located wells  ---
!
          IF( (ICS.EQ.2 .OR. ICS.EQ.6) .AND. JFLD.EQ.1 ) THEN
            XPNX = 0.D+0
            YPNX = 0.D+0
            ZPNX = ZP(N)
!
!---      Cylindrical coordinates  ---
!
          ELSEIF( ICS.EQ.2 .OR. ICS.EQ.6 ) THEN
            XPNX = XP(N)*COS(YP(N))
            YPNX = XP(N)*SIN(YP(N))
            ZPNX = ZP(N)
!
!---      Cartesian or boundary-fitted orthogonal coordinates  ---
!
          ELSE
            XPNX = XP(N)
            YPNX = YP(N)
            ZPNX = ZP(N)
          ENDIF
!
!---      Well pressure using previous coupled-well node density ---
!
          P_CWX = P_CWX - (ZPX(2)-ZPX(1))*GRAV*RHOF_CWX
!
!---      Adjust the reservoir pressure to the coupled-well node
!         centroid  ---
!
!---      Phase condition #1  ---
!
!         SL = 1.0, SG+SN = 0.0
!
          IF( MOD(NPHAZ(2,N),10).EQ.1 ) THEN
            PLFX = PL(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHOL(MF,N)
            PNFX = PN(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHOL(MF,N)
            PTX = MAX( PLFX,PNFX )
            CPGTX = MAX( (PG(MF,N)-MAX( PL(MF,N),PN(MF,N) )),0.D+0 )
            PGFX = PTX + CPGTX
!
!---      Phase condition #2  ---
!
!         SL < 1.0, ST > 0.0, SG = 0.0
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.2 ) THEN
            PLFX = PL(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHOL(MF,N)
            PNFX = PN(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHON(MF,N)
            PTX = MAX( PLFX,PNFX )
            CPGTX = MAX( (PG(MF,N)-MAX( PL(MF,N),PN(MF,N) )),0.D+0 )
            PGFX = PTX + CPGTX
!
!---      Phase condition #3  ---
!
!         SL < 1.0, ST > 0.0, SG > 0.0
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.3 ) THEN
            PGFX = PG(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHOG(MF,N)
            PLFX = PL(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHOL(MF,N)
            PNFX = PN(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHON(MF,N)
!
!---      Phase condition #4  ---
!
!         SL = 0.0, ST = 1.0, SG = 0.0
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.4 ) THEN
            PLFX = PL(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHON(MF,N)
            PNFX = PN(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHON(MF,N)
            PTX = MAX( PLFX,PNFX )
            CPGTX = MAX( (PG(MF,N)-MAX( PL(MF,N),PN(MF,N) )),0.D+0 )
            PGFX = PTX + CPGTX
!
!---      Phase condition #5  ---
!
!         SL = 0.0, ST = 1.0, SG > 0.0
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.5 ) THEN
            PGFX = PG(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHOG(MF,N)
            PLFX = PL(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHON(MF,N)
            PNFX = PN(MF,N) - (ZPX(2)-ZPNX)*GRAV*RHON(MF,N)
          ENDIF
!
!---      Equivalent field node radius components  ---
!
          PERMX = MAX( PERM(1,IZN),1.D-20 )
          PERMY = MAX( PERM(2,IZN),1.D-20 )
          PERMZ = MAX( PERM(3,IZN),1.D-20 )
          RWX = MAX( PAR_CW(2,INVX),1.D-20 )
!
!---      Cylindrical coordinates with azimuthal symmetry,
!         centrally located wells  ---
!
          IF( (ICS.EQ.2 .OR. ICS.EQ.6) .AND. JFLD.EQ.1 ) THEN
            ROZ = RP(N)
!
!---        Specified pressure-equivalent radius  ---
!
            IF( PAR_CW(3,INVX)/EPSL.GT.EPSL ) THEN
              ROZ = PAR_CW(3,INVX)
            ENDIF
            RWX = MIN( RWX,9.999D-1*ROZ )
            PERMX = PERMRF(MF,N)*PERM(1,IZN)
            PERMY = PERMRF(MF,N)*PERM(2,IZN)
            WI_CWX = 2.D+0*GPI*SQRT(PERMX*PERMY)*ZLX/
     &        (LOG(ROZ/RWX)+PAR_CW(1,INVX))
          ELSE
            PERMYZ = SQRT(PERMY/PERMZ)
            PERMZY = SQRT(PERMZ/PERMY)
            DXGFX = DXGF(N)/FF_CW(1,NCW)
            DYGFX = DYGF(N)*RP(N)/FF_CW(2,NCW)
            DZGFX = DZGF(N)/FF_CW(3,NCW)
            ROX = 2.8D-1*SQRT(PERMYZ*(DZGFX**2) + PERMZY*(DYGFX**2))
     &      /(SQRT(PERMYZ)+SQRT(PERMZY))
            PERMZX = SQRT(PERMZ/PERMX)
            PERMXZ = SQRT(PERMX/PERMZ)
            ROY = 2.8D-1*SQRT(PERMZX*(DXGFX**2) + PERMXZ*(DZGFX**2))
     &        /(SQRT(PERMZX)+SQRT(PERMXZ))
            PERMYX = SQRT(PERMY/PERMX)
            PERMXY = SQRT(PERMX/PERMY)
            ROZ = 2.8D-1*SQRT(PERMYX*(DXGFX**2) + PERMXY*(DYGFX**2))
     &        /(SQRT(PERMYX)+SQRT(PERMXY))
!
!---        Specified pressure-equivalent radius  ---
!
            IF( PAR_CW(3,INVX)/EPSL.GT.EPSL ) THEN
              ROX = PAR_CW(3,INVX)
              ROY = PAR_CW(3,INVX)
              ROZ = PAR_CW(3,INVX)
            ENDIF
!
!---        Well index components  ---
!
            PERMX = PERMRF(MF,N)*PERM(1,IZN)
            PERMY = PERMRF(MF,N)*PERM(2,IZN)
            PERMZ = PERMRF(MF,N)*PERM(3,IZN)
            WIX = 2.D+0*GPI*SQRT(PERMY*PERMZ)*XLX/
     &        (LOG(ROX/RWX)+PAR_CW(1,INVX))
            WIY = 2.D+0*GPI*SQRT(PERMX*PERMZ)*YLX/
     &        (LOG(ROY/RWX)+PAR_CW(1,INVX))
            WIZ = 2.D+0*GPI*SQRT(PERMX*PERMY)*ZLX/
     &        (LOG(ROZ/RWX)+PAR_CW(1,INVX))
            WI_CWX = SQRT((WIX**2) + (WIY**2) + (WIZ**2))
          ENDIF
!
!---      Mass fluxes, positive into the well  ---
!
          DPGX = MAX( PGFX-P_CWX,0.D+0 )
          DPNX = MAX( PGFX-P_CWX,0.D+0 )
          DPLX = MAX( PGFX-P_CWX,0.D+0 )
!
!---      Zero fluxes of water, energy, and nonaqueous components
!         from well to reservoir  ---
!
          FXE_CW(M,NWN) = 0.D+0
          FXW_CW(M,NWN) = 0.D+0
          DO IGC = 1,NGC+2
            FXC_CW(IGC,M,NWN) = 0.D+0
          ENDDO
!
!---      Liquid production well, no gas flux from reservoir to
!         well  ---
!
          IF( IT_CW(NCW).EQ.-2 ) THEN
            FGX_CWX = 0.D+0
          ELSE
!
!---        Gas flux from reservoir to well  ---
!
            FGX_CWX = WI_CWX*RKG(MF,N)*RHOG(MF,N)*DPGX/VISG(MF,N)
          ENDIF
!
!---      Energy, water and oil component fluxes
!         from well to reservoir via gas phase  ---
!
          IF( ISLC(30).EQ.0 )
     &      FXE_CW(M,NWN) = FXE_CW(M,NWN) - FGX_CWX*HG(MF,N)
          FXW_CW(M,NWN) = FXW_CW(M,NWN) - FGX_CWX*XGW(MF,N)
          DO IGC = 1,NGC+2
            FXC_CW(IGC,M,NWN) = FXC_CW(IGC,M,NWN) - 
     &        FGX_CWX*XGC(IGC,MF,N)
          ENDDO
!
!---      Aqueous flux from reservoir to well  ---
!
          FLX_CWX = WI_CWX*RKL(MF,N)*RHOL(MF,N)*DPLX/VISL(MF,N)
!
!---      Energy, water and oil component fluxes
!         from well to reservoir via aqueous phase  ---
!
          IF( ISLC(30).EQ.0 )
     &      FXE_CW(M,NWN) = FXE_CW(M,NWN) - FLX_CWX*HL(MF,N)
          FXW_CW(M,NWN) = FXW_CW(M,NWN) - FLX_CWX*XLW(MF,N)
          FXC_CW(1,M,NWN) = FXC_CW(1,M,NWN) - FLX_CWX*XLA(MF,N)
!
!---      Nonaqueous-liquid flux from reservoir to well  ---
!
          FNX_CWX = WI_CWX*RKN(MF,N)*RHON(MF,N)*DPNX/VISN(MF,N)
!
!---      Energy, water and oil component fluxes
!         from well to reservoir via nonaqueous-liquid phase  ---
!
          IF( ISLC(30).EQ.0 )
     &      FXE_CW(M,NWN) = FXE_CW(M,NWN) - FNX_CWX*HN(MF,N)
          DO IGC = 1,NGC+2
            FXC_CW(IGC,M,NWN) = FXC_CW(IGC,M,NWN) - 
     &        FNX_CWX*XNC(IGC,MF,N)
          ENDDO
!
!---      Total mass and volumetric flux into well from reservoir  ---
!
          SRHOFX = SRHOFX + FGX_CWX + FLX_CWX + FNX_CWX
          SVOLX = SVOLX + FGX_CWX/RHOG(MF,N) + FLX_CWX/RHOL(MF,N) + 
     &      FNX_CWX/RHON(MF,N)
!
!---      Store current coupled-well node location in previous
!         coupled-well node location  ---
!
          XPX(1) = XPX(2)
          YPX(1) = YPX(2)
          ZPX(1) = ZPX(2)
!
!---      Volumetric production well fluxes  ---
!
          IF( M.EQ.1 ) THEN
            IF( SL(2,N).GT.0.D+0 ) Q_CW(2,NWN) = FLX_CWX/RHOL(2,N)
            IF( SG(2,N).GT.0.D+0 ) Q_CW(3,NWN) = FGX_CWX/RHOG(2,N)
            IF( SN(2,N).GT.0.D+0 ) Q_CW(4,NWN) = FNX_CWX/RHON(2,N)
            Q_CW(1,NWN) = Q_CW(2,NWN) + Q_CW(3,NWN) + Q_CW(4,NWN)
          ENDIF
        ENDDO
      ENDDO
!
!---  Mass balance residuals for production type coupled well  ---
!
      NWFX = ID_CW(6,NCW)-ID_CW(5,NCW)+1
      NX = (NWFX*ISVC)+2
      RSL_CWX(1) = 0.D+0
      RSL_CWX(NX) = 0.D+0
      QM_CW(1,NCW) = 0.D+0
      QM_CW(3,NCW) = 0.D+0
      QM_CW(5,NCW) = 0.D+0
      DO IGC = 1,NGC+2
        QM_CW((7+(IGC-1)*2),NCW) = 0.D+0
      ENDDO
      QTM_CWX = 0.D+0
!
!---  Loop over coupled-well nodes from bottom to top  ---
!
      DO NWN = ID_CW(4,NCW),ID_CW(3,NCW),-1
        RSL_CWX(1) = RSL_CWX(1) - FXW_CW(1,NWN)
        RSL_CWX(NX) = RSL_CWX(NX) - FXW_CW(ISVC+2,NWN)
        QTM_CWX = QTM_CWX - FXW_CW(1,NWN)
        QM_CW(3,NCW) = QM_CW(3,NCW) - FXW_CW(1,NWN)
        IF( ISLC(30).EQ.0 )
     &    QM_CW(5,NCW) = QM_CW(5,NCW) - FXE_CW(1,NWN)
        DO IGC = 1,NGC+2
          RSL_CWX(1) = RSL_CWX(1) - FXC_CW(IGC,1,NWN)
          RSL_CWX(NX) = RSL_CWX(NX) - FXC_CW(IGC,ISVC+2,NWN)
          QTM_CWX = QTM_CWX - FXC_CW(IGC,1,NWN)
          QM_CW(1,NCW) = QM_CW(1,NCW) - FXC_CW(IGC,1,NWN)
          QM_CW((7+(IGC-1)*2),NCW) = QM_CW((7+(IGC-1)*2),NCW) - 
     &      FXC_CW(IGC,1,NWN)
        ENDDO
      ENDDO
!
!---  Loop over field nodes that contain coupled-well nodes  ---
!
      DO NWF = ID_CW(5,NCW),ID_CW(6,NCW)
!
!---    Skip for processors without field nodes with coupled-well
!       nodes  ---
!
        IF( IWF_CW(NWF).EQ.0 ) CYCLE
        M1 = (NWF-ID_CW(5,NCW))*ISVC + 1
        DO M2 = 1,ISVC
          M3 = M1+M2
          RSL_CWX(M3) = 0.D+0
!
!---      Loop over coupled-well nodes  ---
!
          DO NWN = ID_CW(3,NCW),ID_CW(4,NCW)
!
!---        If coupled-well node is within the current field
!           node, use incremented fluxes  ---
!
            IF( IWF_CW(NWF).EQ.IWN_CW(NWN) ) THEN
              RSL_CWX(M3) = RSL_CWX(M3) - FXW_CW(M2+1,NWN)                
              DO IGC = 1,NGC+2
                RSL_CWX(M3) = RSL_CWX(M3) - FXC_CW(IGC,M2+1,NWN)
              ENDDO
!
!---        If coupled-well node is outside the current field
!           node, use un-incremented fluxes  ---
!
            ELSE
              RSL_CWX(M3) = RSL_CWX(M3) - FXW_CW(1,NWN)
              DO IGC = 1,NGC+2
                RSL_CWX(M3) = RSL_CWX(M3) - FXC_CW(IGC,1,NWN)
              ENDDO
            ENDIF
          ENDDO
        ENDDO
      ENDDO
!
!---  Redefine local residuals to be the change in the coupled-well
!     residual mass with respect to the change in the field-node
!     primary variables, except for the first and last residuals  ---
!
      DO NWF = ID_CW(5,NCW),ID_CW(6,NCW)
        N = IWF_CW(NWF)
        IF( N.EQ.0 ) CYCLE
        MX = (NWF-ID_CW(5,NCW))*ISVC + 1
        DO M = 1,ISVC
          RSL_CWX(MX+M) = (RSL_CWX(MX+M)-RSL_CWX(1))/DNR(M,N)
        ENDDO
      ENDDO
!
!---  Global injection well mass balance residuals  ---
!
      CALL MPI_ALLREDUCE( RSL_CWX,RS_CW(1,NCW),NX,MPI_REAL8,MPI_SUM,
     &  MPI_COMM_WORLD,IERR )
!
!---  Reset subroutine character string ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of PROD_COUP_WELL group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE RSDL_COUP_WELL
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!
!     STOMPX-EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Coupled-well equation residuals
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 16 December 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE MPI
      USE GLB_PAR
      USE SOLTN
      USE OUTPU
      USE JACOB
      USE GRID
      USE FILES
      USE COUP_WELL
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      INTEGER, DIMENSION(1:2) :: IVARX
      INTEGER	STATUS(MPI_STATUS_SIZE)	
      INTEGER	(KIND=MPI_OFFSET_KIND) OFFSET
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/RSDL_COUP_WELL'
!
!---  Zero maximum residuals  ---
!
      RSD_CW = 0.D+0
      NSD_CW = 0
!
!---  Loop over coupled wells ---
!
      DO NCW = 1,N_CW
!
!---    Injection well ---
!
        IF( IT_CW(NCW).GT.0 ) THEN
!
!---      Pressure controlled coupled well  ---
!
          IF( ID_CW(8,NCW).EQ.1 ) THEN
            RSDX = 0.D+0
!
!---      Flow controlled coupled well  ---
!
          ELSE
            RSDFX = 0.D+0
            RSDPX = ABS(DP_CW(NCW))/(ABS(P_CW(2,NCW))+PATM)
            RSDX = MAX( RSDPX,RSDFX )
            RSDX = ABS( RS_CW(1,NCW)/(QM_CW(1,NCW)+QM_CW(3,NCW)) )
          ENDIF
!
!---    Withdrawl well ---
!
        ELSEIF( IT_CW(NCW).LT.0 ) THEN
!
!---      Pressure controlled coupled well  ---
!
          IF( ID_CW(8,NCW).EQ.1 ) THEN
            RSDX = 0.D+0
!
!---      Flow controlled coupled well  ---
!
          ELSE
            RSDFX = 0.D+0
            RSDPX = ABS(DP_CW(NCW))/(ABS(P_CW(2,NCW))+PATM)
            RSDX = MAX( RSDPX,RSDFX )
          ENDIF
        ENDIF
        IF( RSDX.GT.RSD_CW ) THEN
          RSD_CW = RSDX
          NSD_CW = NCW
        ENDIF
      ENDDO
      IF( RSD_CW.GT.RSDMX ) ICNV = 2
!
!---  Unconverged solution Newton-Raphson iteration limit exceeded  ---
!
      IF( ICNV.EQ.2 .AND. NITER.GE.NRIMX ) THEN
        IF( RSD_CW.GE.1.D+2 ) THEN
          IF( ID.EQ.0 ) THEN
            PRINT *,'           ---  Excessive Residual  ---'
            PRINT *,'  Coupled Well Maximum Residual = ',RSD_CW,
     &        ': Coupled Well Number = ',NSD_CW
          ENDIF
          IVARX(1) = -7
        ELSE
          IF( ID.EQ.0 ) THEN
            PRINT *,'           ---  Convergence Failure  ---'
            PRINT *,'  Coupled Well Maximum Residual = ',RSD_CW,
     &        ': Coupled Well Number = ',NSD_CW
          ENDIF
          IVARX(1) = -8
        ENDIF
!
!---    Write a convergence failure index of -5 in the NSTEP location
!       of the output.bin file plus write the well number and 
!       maximum coupled-well residual  ---
!
        OFFSET = IOFFSET_REF
        NVAR = 2
        IVARX(2) = NSD_CW
        IF( ID.EQ.0 ) CALL MPI_FILE_WRITE_AT( IWR,OFFSET,IVARX,NVAR,
     &    MPI_INTEGER,STATUS,IERR)
        OFFSET = OFFSET + NVAR*NBYTI
        IOFFSET_REF = IOFFSET_REF + NVAR*NBYTI
        NVAR = 1
        IF( ID.EQ.0 ) CALL MPI_FILE_WRITE_AT( IWR,OFFSET,RSD_CW,NVAR,
     &    MPI_REAL8,STATUS,IERR)
        OFFSET = OFFSET + NVAR*NBYTR
        IOFFSET_REF = IOFFSET_REF + NVAR*NBYTR
      ENDIF
!
!---  Reset subroutine character string ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of RSDL_COUP_WELL group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE SORT_COUP_WELL( NSL )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!
!     STOMPX-EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Compute solute source transport terms for coupled wells.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 16 December 2022.
!
#ifdef lis
!----------------------LIS Modules-------------------------------------!
!
      USE LIS_STOMP
!
#endif
#ifdef petsc
!----------------------PETSc Modules-----------------------------------!
!
      USE PETSC_STOMP
!
#endif
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE TRNSPT
      USE SOLTN
      USE REACT
      USE JACOB
      USE GRID
      USE GLB_PAR
      USE FDVP
      USE COUP_WELL
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
#ifdef lis
#include "lisf.h"
#endif
#ifdef petsc
#include "petsc/finclude/petscmat.h"
#include "petsc/finclude/petscvec.h"
#include "petsc/finclude/petscksp.h"
#endif
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/SORT_COUP_WELL'
!
!---  Loop over coupled wells  ---
!
      L1: DO NCW = 1,N_CW
!
!---    Skip for conservation or kinetic components  ---
!
        IF( NSL.GT.NSOLU ) CYCLE L1
!
!---    Check for solute in well  ---
!
        IFIND = 0
        L2: DO M = 1,NSOLU
          IF( ISOLU_CW(M,NCW).EQ.0 ) EXIT L2
          IF( ISOLU_CW(M,NCW).EQ.NSL ) THEN
            IFIND = 1
            NC = M
            EXIT L2
          ENDIF
        ENDDO L2
!
!---    Solute not found in well cycle to next well ---
!
        IF( IFIND.EQ.0 ) CYCLE L1
!
!---    Coupled well time interval ---
!
        TMZ = TM
        IF( NSTEP-NRST.EQ.0 ) TMZ = TMZ*(1.D+0+EPSL)+EPSL
!
!---    Cyclic time periods  ---
!
        IF( ICC_CW(NCW).EQ.1 ) THEN
!
!---      Loop over the coupled well time periods, 
!         to find the final well time  ---
!
          NTX = 0
          L3: DO NTP = 1,IM_CW(NCW)
            NTX = NTX + IMP_CW(NTP,NCW)
          ENDDO L3
!
!---      Determine time with the cyclic time period  ---
!
          TMZ = MOD( TM,VAR_CW(1,NTX,NCW) )
          IF( TM.GT.VAR_CW(1,NTX,NCW) ) THEN
            IF( TMZ.LT.EPSL ) TMZ = VAR_CW(1,NTX,NCW)
          ENDIF
        ENDIF
!
!---    Coupled well is inactive  ---
!
        IF( TMZ.LE.VAR_CW(1,1,NCW) ) CYCLE L1
!
!---    Loop over the coupled well time periods  ---
!
        NS = 1
        IFIND = 0
        L4: DO NTP = 1,IM_CW(NCW)
!
!---      Coupled well time period only has one time (start time)  ---
!
          IF( IMP_CW(NTP,NCW).EQ.1 ) THEN
!
!---        Time prior to start time, coupled well is inactive,
!           cycle to next well  ---
!
            IF( TMZ.LE.VAR_CW(1,NS,NCW) ) CYCLE L1
!
!---        Time after start time, coupled well is active  ---
!
            VARC_CWX = VARC_CW(NSL,1,NCW)
            IFIND = 1
            EXIT L4
!
!---      Coupled well time period has multiple times  ---
!
          ELSE
            NE = NS + IMP_CW(NTP,NCW) - 1
!
!---        Time outside of coupled well time period, go to next 
!           coupled well time period  ---
!
            IF( TMZ.LE.VAR_CW(1,NS,NCW) .OR. 
     &        TMZ.GT.VAR_CW(1,NE,NCW) ) THEN
              NS = NS + IMP_CW(NTP,NCW)
              CYCLE L4
            ENDIF
!
!---        Coupled well time period has multiple time points, use  
!           linear interpolation of well parameters between 
!           time points  ---
!
            L5: DO M = 2,IMP_CW(NTP,NCW)
              MX = NS + M - 1
              IF( TMZ.LE.VAR_CW(1,MX,NCW) ) THEN
                TD_CW = VAR_CW(1,MX,NCW)-VAR_CW(1,MX-1,NCW)
                DT_CW = MIN( VAR_CW(1,MX,NCW)-TMZ,DT )
                TF_CWX = (TMZ-VAR_CW(1,MX-1,NCW))/TD_CW
                VARC_CWX = VARC_CW(NSL,MX-1,NCW) + 
     &            TF_CWX*(VARC_CW(NSL,MX,NCW)-VARC_CW(NSL,MX-1,NCW))
                IFIND = 1
                EXIT L4
              ENDIF
            ENDDO L5
          ENDIF
          NS = NS + IMP_CW(NTP,NCW)
        ENDDO L4
!
!---    Coupled well is inactive, cycle to next well  ---
!
        IF( IFIND.EQ.0 ) CYCLE L1
!
!---    Loop over coupled-well nodes  ---
!
        L6: DO NWN = ID_CW(3,NCW),ID_CW(4,NCW)
          N = IWN_CW(NWN)
!
!---      Skip for off-processor well nodes, inactive nodes
!         and ghost cells ---
!
          IF( N.EQ.0 ) CYCLE
          IF( IXP(N).EQ.0 .OR. IGHC(N).EQ.1 ) CYCLE
          IROW = IXP(N)
          SORTX = 0.D+0
!
!---      Injection well (volumetric fluxes are positive from well) ---
!
          IF( IT_CW(NCW).GT.0 ) THEN
#ifdef lis
            BUFFER = Q_CW(1,NWN)*VARC_CWX
            CALL LIS_VECTOR_SET_VALUE( LIS_ADD_VALUE,IROW,BUFFER,
     &        T_RHS_VEC,IERR )
#endif
#ifdef petsc
            BUFFER = Q_CW(1,NWN)*VARC_CWX
            IROW_P = IROW - 1
            CALL VecSetValues( T_RHS_VEC,1,IROW_P,BUFFER,ADD_VALUES,
     &        IERR )
#endif
!
!---      Production well (volumetric fluxes are positive into well) ---
!
          ELSEIF( IT_CW(NCW).LT.0 ) THEN
!
!---        Solute produced via aqueous phase production  ---
!
            CLX = PORD(2,N)*SL(2,N)
            IF( CLX.GT.EPSL ) SORTX = SORTX + Q_CW(2,NWN)/CLX
!
!---        Solute produced via gas phase production  ---
!
            CGX = PORD(2,N)*SG(2,N)
            IF( CGX.GT.EPSL ) SORTX = SORTX + Q_CW(3,NWN)/CGX
!
!---        Solute produced via nonaqueous-liquid phase production  ---
!
            CNX = PORD(2,N)*SN(2,N)
            IF( CNX.GT.EPSL ) SORTX = SORTX + Q_CW(4,NWN)/CNX
          ENDIF
!
!---      Load Jacobian  ---
!
#ifdef lis
          ICOL = IXP(N)
          BUFFER = SORTX
          CALL LIS_MATRIX_SET_VALUE( LIS_ADD_VALUE,IROW,ICOL,BUFFER,
     &      T_MAT,IERR )
#endif
#ifdef petsc
          IROW_P = IROW - 1
          ICOL_P = IXP(N) - 1
          BUFFER = SORTX
          CALL MatSetValue( T_MAT,IROW_P,ICOL_P,BUFFER,ADD_VALUES,IERR )
#endif
        ENDDO L6
      ENDDO L1
#ifdef ecke
      NEQ = NSL - NSOLU
!
!---  Loop over coupled wells ---
!
      L11: DO NCW = 1,N_CW
!
!---    Skip for passive solutes  ---
!
        IF( NSL.LE.NSOLU ) CYCLE L11
!
!---    Skip for non-conservation solutes  ---
!
        IF( NEQ.LT.1 .OR. NEQ.GT.NEQC ) CYCLE L11
!
!---    Check for conservation component solute in well  ---
!
        IF( NEQ.GT.0 .AND. NEQ.LE.NEQC ) THEN
          IF( ISOLC_CW(NEQ,NCW).EQ.0 ) CYCLE L11
        ENDIF
!
!---    Coupled well time interval ---
!
        TMZ = TM
        IF( NSTEP-NRST.EQ.0 ) TMZ = TMZ*(1.D+0+EPSL)+EPSL
!
!---    Cyclic time periods  ---
!
        IF( ICC_CW(NCW).EQ.1 ) THEN
!
!---      Loop over the coupled well time periods, 
!         to find the final well time  ---
!
          NTX = 0
          L13: DO NTP = 1,IM_CW(NCW)
            NTX = NTX + IMP_CW(NTP,NCW)
          ENDDO L13
!
!---      Determine time with the cyclic time period  ---
!
          TMZ = MOD( TM,VAR_CW(1,NTX,NCW) )
          IF( TM.GT.VAR_CW(1,NTX,NCW) ) THEN
            IF( TMZ.LT.EPSL ) TMZ = VAR_CW(1,NTX,NCW)
          ENDIF
        ENDIF
!
!---    Coupled well is inactive  ---
!
        IF( TMZ.LE.VAR_CW(1,1,NCW) ) CYCLE L11
!
!---    Loop over the coupled well time periods  ---
!
        NS = 1
        IFIND = 0
        L14: DO NTP = 1,IM_CW(NCW)
!
!---      Coupled well time period only has one time (start time)  ---
!
          IF( IMP_CW(NTP,NCW).EQ.1 ) THEN
            ITS_CWX = ITS_CW(NTP,NCW)
!
!---        Time prior to start time, coupled well is inactive,
!           cycle to next well  ---
!
            IF( TMZ.LE.VAR_CW(1,NS,NCW) ) CYCLE L11
!
!---        Time after start time, coupled well is active  ---
!
            VARC_CWX = 0.D+0
!
!---        Well state #1  ---
!
!           SL = 1.0
!           SG+SN = 0.0
!
!           Aqueous species only
!
            IF( ITS_CWX/100.EQ.1 ) THEN
              DO NSPCW = 1,NSP_CW(NCW)
                NSP = ISPC_CW(NSPCW,NCW)
                IF( NSP.EQ.0 ) EXIT
                IF( NSP.LE.NSPL ) THEN
                  DO IX = 1,IEQ_C(1,NEQ)
                    NSP_C = IEQ_C(IX+1,NEQ)
                    IF( NSP_C.EQ.NSP ) THEN
                      VARC_CWX = VARC_CWX + 
     &                  EQ_C(IX,NEQ)*VARSP_CW(NSPCW,1,NCW)
                      EXIT
                    ENDIF
                  ENDDO
                ENDIF   
              ENDDO             
!
!---        Well state #2  ---
!
!           SL < 1.0
!           SG+SN > 0.0
!
!           Aqueous, gas, and nonaqueous-liquid species
!
            ELSEIF( ITS_CWX/100.EQ.2 ) THEN
              DO NSPCW = 1,NSP_CW(NCW)
                NSP = ISPC_CW(NSPCW,NCW)
                IF( NSP.EQ.0 ) EXIT
                IF( NSP.LE.NSPL .OR. (NSP.GT.NSPL+NSPS .AND. 
     &            NSP.LE.NSPL+NSPS+NSPG) ) THEN
                  DO IX = 1,IEQ_C(1,NEQ)
                    NSP_C = IEQ_C(IX+1,NEQ)
                    IF( NSP_C.EQ.NSP ) THEN
                      VARC_CWX = VARC_CWX + 
     &                  EQ_C(IX,NEQ)*VARSP_CW(NSPCW,1,NCW)
                      EXIT
                    ENDIF
                  ENDDO
                ENDIF   
              ENDDO             
!
!---        Well state #3  ---
!
!           SL = 0.0
!           SG+SN = 1.0
!
!           Gas and nonaqueous-liquid species only
!      
            ELSEIF( ITS_CWX/100.EQ.3 ) THEN
              DO NSPCW = 1,NSP_CW(NCW)
                NSP = ISPC_CW(NSPCW,NCW)
                IF( NSP.EQ.0 ) EXIT
                IF( NSP.GT.NSPL+NSPS .AND. 
     &            NSP.LE.NSPL+NSPS+NSPG ) THEN
                  DO IX = 1,IEQ_C(1,NEQ)
                    NSP_C = IEQ_C(IX+1,NEQ)
                    IF( NSP_C.EQ.NSP ) THEN
                      VARC_CWX = VARC_CWX + 
     &                  EQ_C(IX,NEQ)*VARSP_CW(NSPCW,1,NCW)
                      EXIT
                    ENDIF
                  ENDDO
                ENDIF   
              ENDDO             
            ENDIF
            IFIND = 1
            EXIT L14
!
!---      Coupled well time period has multiple times  ---
!
          ELSE
            NE = NS + IMP_CW(NTP,NCW) - 1
            ITS_CWX = ITS_CW(NTP,NCW)
!
!---        Time outside of coupled well time period, go to next 
!           coupled well time period  ---
!
            IF( TMZ.LE.VAR_CW(1,NS,NCW) .OR. 
     &        TMZ.GT.VAR_CW(1,NE,NCW) ) THEN
              NS = NS + IMP_CW(NTP,NCW)
              CYCLE L14
            ENDIF
!
!---        Coupled well time period has multiple time points, use  
!           linear interpolation of well parameters between 
!           time points  ---
!
            L15: DO M = 2,IMP_CW(NTP,NCW)
              MX = NS + M - 1
              IF( TMZ.LE.VAR_CW(1,MX,NCW) ) THEN
                TD_CW = VAR_CW(1,MX,NCW)-VAR_CW(1,MX-1,NCW)
                DT_CW = MIN( VAR_CW(1,MX,NCW)-TMZ,DT )
                TF_CWX = (TMZ-VAR_CW(1,MX-1,NCW))/TD_CW
!
!---            Time after start time, coupled well is active  ---
!
                VARC_CWX = 0.D+0
!
!---            Well state #1  ---
!
!               SL = 1.0
!               SG+SN = 0.0
!
!               Aqueous species only
!
                IF( ITS_CWX/100.EQ.1 ) THEN
                  DO NSPCW = 1,NSP_CW(NCW)
                    NSP = ISPC_CW(NSPCW,NCW)
                    IF( NSP.EQ.0 ) EXIT
                    IF( NSP.LE.NSPL ) THEN
                      DO IX = 1,IEQ_C(1,NEQ)
                        NSP_C = IEQ_C(IX+1,NEQ)
                        IF( NSP_C.EQ.NSP ) THEN
                          VARC_CWX = VARC_CWX + EQ_C(IX,NEQ)*
     &                      (VARSP_CW(NSPCW,MX-1,NCW) + TF_CWX*
     &                      (VARSP_CW(NSPCW,MX,NCW) - 
     &                      VARSP_CW(NSPCW,MX-1,NCW)))
                          EXIT
                        ENDIF
                      ENDDO
                    ENDIF   
                  ENDDO             
!
!---            Well state #2  ---
!
!               SL < 1.0
!               SG+SN > 0.0
!
!               Aqueous, gas, and nonaqueous-liquid species
!
                ELSEIF( ITS_CWX/100.EQ.2 ) THEN
                  DO NSPCW = 1,NSP_CW(NCW)
                    NSP = ISPC_CW(NSPCW,NCW)
                    IF( NSP.EQ.0 ) EXIT
                    IF( NSP.LE.NSPL .OR. (NSP.GT.NSPL+NSPS .AND. 
     &                NSP.LE.NSPL+NSPS+NSPG) ) THEN
                      DO IX = 1,IEQ_C(1,NEQ)
                        NSP_C = IEQ_C(IX+1,NEQ)
                        IF( NSP_C.EQ.NSP ) THEN
                          VARC_CWX = VARC_CWX + EQ_C(IX,NEQ)*
     &                      (VARSP_CW(NSPCW,MX-1,NCW) + TF_CWX*
     &                      (VARSP_CW(NSPCW,MX,NCW) -
     &                      VARSP_CW(NSPCW,MX-1,NCW)))
                          EXIT
                        ENDIF
                      ENDDO
                    ENDIF   
                  ENDDO             
!
!---            Well state #3  ---
!
!               SL = 0.0
!               SG+SN = 1.0
!
!               Gas and nonaqueous-liquid species only
!          
                ELSEIF( ITS_CWX/100.EQ.3 ) THEN
                  DO NSPCW = 1,NSP_CW(NCW)
                    NSP = ISPC_CW(NSPCW,NCW)
                    IF( NSP.EQ.0 ) EXIT
                    IF( NSP.GT.NSPL+NSPS .AND. 
     &                NSP.LE.NSPL+NSPS+NSPG ) THEN
                      DO IX = 1,IEQ_C(1,NEQ)
                        NSP_C = IEQ_C(IX+1,NEQ)
                        IF( NSP_C.EQ.NSP ) THEN
                          VARC_CWX = VARC_CWX + EQ_C(IX,NEQ)*
     &                    (VARSP_CW(NSPCW,MX-1,NCW) + TF_CWX*
     &                    (VARSP_CW(NSPCW,MX,NCW) - 
     &                    VARSP_CW(NSPCW,MX-1,NCW)))
                          EXIT
                        ENDIF
                      ENDDO
                    ENDIF   
                  ENDDO             
                ENDIF
                IFIND = 1
                EXIT L14
              ENDIF
            ENDDO L15
          ENDIF
          NS = NS + IMP_CW(NTP,NCW)
        ENDDO L14
!
!---    Coupled well is inactive, cycle to next well  ---
!
        IF( IFIND.EQ.0 ) CYCLE L11
!
!---    Loop over coupled-well nodes  ---
!
        L16: DO NWN = ID_CW(3,NCW),ID_CW(4,NCW)
          N = IWN_CW(NWN)
          IF( IXP(N).EQ.0 ) CYCLE
          IROW = IXP(N)
          SORTX = 0.D+0
!
!---      Injection well (volumetric fluxes are positive from well) ---
!
!         Q_CW(1,NWN) - total volumetric flux, m^3/s
!         Q_CW(2,NWN) - aqueous volumetric flux, m^3/s
!         Q_CW(3,NWN) - gas volumetric flux, m^3/s
!         Q_CW(4,NWN) - nonaqueous-liquid volumetric flux, m^3/s
!
          IF( IT_CW(NCW).GT.0 ) THEN
!
!---        Well state #1  ---
!
!           SL = 1.0
!           SG+SN = 0.0
!
!           Aqueous species only,
!           mol/s = m^3 fluid/s * mol/m^3 fluid
!
            IF( ITS_CWX/100.EQ.1 ) THEN
#ifdef lis
              BUFFER = Q_CW(2,NWN)*VARC_CWX
              CALL LIS_VECTOR_SET_VALUE( LIS_ADD_VALUE,IROW,BUFFER,
     &          T_RHS_VEC,IERR )
#endif
#ifdef petsc
              BUFFER = Q_CW(2,NWN)*VARC_CWX
              IROW_P = IROW - 1
              CALL VecSetValues( T_RHS_VEC,1,IROW_P,BUFFER,ADD_VALUES,
     &         IERR )
#endif
!
!---        Well state #2  ---
!
!           SL < 1.0
!           SG+SN > 0.0
!
!           Aqueous, gas, and nonaqueous-liquid species,
!           mol/s = m^3 fluid/s * mol/m^3 fluid
!
            ELSEIF( ITS_CWX/100.EQ.2 ) THEN
#ifdef lis
              BUFFER = Q_CW(1,NWN)*VARC_CWX
              CALL LIS_VECTOR_SET_VALUE( LIS_ADD_VALUE,IROW,BUFFER,
     &          T_RHS_VEC,IERR )
#endif
#ifdef petsc
              BUFFER = Q_CW(1,NWN)*VARC_CWX
              IROW_P = IROW - 1
              CALL VecSetValues( T_RHS_VEC,1,IROW_P,BUFFER,ADD_VALUES,
     &         IERR )
#endif
!
!---        Well state #3  ---
!
!           SL = 0.0
!           SG+SN = 1.0
!
!           Gas and nonaqueous-liquid species only,
!           mol/s = m^3 fluid/s * mol/m^3 fluid
!            
            ELSEIF( ITS_CWX/100.EQ.3 ) THEN
#ifdef lis
              BUFFER = (Q_CW(3,NWN)+Q_CW(4,NWN))*VARC_CWX
              CALL LIS_VECTOR_SET_VALUE( LIS_ADD_VALUE,IROW,BUFFER,
     &          T_RHS_VEC,IERR )
#endif
#ifdef petsc
              BUFFER = (Q_CW(3,NWN)+Q_CW(4,NWN))*VARC_CWX
              IROW_P = IROW - 1
              CALL VecSetValues( T_RHS_VEC,1,IROW_P,BUFFER,ADD_VALUES,
     &         IERR )
#endif
            ENDIF
!
!---      Production well (volumetric fluxes are positive into well) ---
!
          ELSEIF( IT_CW(NCW).LT.0 ) THEN
!
!---        Solute produced via aqueous phase production  ---
!
            CLX = PORD(2,N)*SL(2,N)
            IF( CLX.GT.EPSL ) SORTX = SORTX + Q_CW(2,NWN)/CLX
!
!---        Solute produced via gas phase production  ---
!
            CGX = PORD(2,N)*SG(2,N)
            IF( CGX.GT.EPSL ) SORTX = SORTX + Q_CW(3,NWN)/CGX
!
!---        Solute produced via nonaqueous-liquid phase production  ---
!
            CNX = PORD(2,N)*SN(2,N)
            IF( CNX.GT.EPSL ) SORTX = SORTX + Q_CW(4,NWN)/CNX
          ENDIF
!
!---      Load Jacobian  ---
!
#ifdef lis
          ICOL = IXP(N)
          BUFFER = SORTX
          CALL LIS_MATRIX_SET_VALUE( LIS_ADD_VALUE,IROW,ICOL,BUFFER,
     &      T_MAT,IERR )
#endif
#ifdef petsc
          IROW_P = IROW - 1
          ICOL_P = IXP(N) - 1
          BUFFER = SORTX
          CALL MatSetValue( T_MAT,IROW_P,ICOL_P,BUFFER,ADD_VALUES,IERR )
#endif
          ENDIF
        ENDDO L16
      ENDDO L11
      NEQ = NEQ - NEQC
!
!---  Loop over coupled wells ---
!
      L21: DO NCW = 1,N_CW
!
!---    Skip for passive solutes  ---
!
        IF( NSL.LE.NSOLU ) CYCLE L21
!
!---    Skip for non-kinetic solutes  ---
!
        IF( NEQ.LT.1 .OR. NEQ.GT.NEQK ) CYCLE L21
!
!---    Coupled well time interval ---
!
        TMZ = TM
        IF( NSTEP-NRST.EQ.0 ) TMZ = TMZ*(1.D+0+EPSL)+EPSL
!
!---    Cyclic time periods  ---
!
        IF( ICC_CW(NCW).EQ.1 ) THEN
!
!---      Loop over the coupled well time periods, 
!         to find the final well time  ---
!
          NTX = 0
          L23: DO NTP = 1,IM_CW(NCW)
            NTX = NTX + IMP_CW(NTP,NCW)
          ENDDO L23
!
!---      Determine time with the cyclic time period  ---
!
          TMZ = MOD( TM,VAR_CW(1,NTX,NCW) )
          IF( TM.GT.VAR_CW(1,NTX,NCW) ) THEN
            IF( TMZ.LT.EPSL ) TMZ = VAR_CW(1,NTX,NCW)
          ENDIF
        ENDIF
!
!---    Coupled well is inactive  ---
!
        IF( TMZ.LE.VAR_CW(1,1,NCW) ) CYCLE L21
!
!---    Loop over the coupled well time periods  ---
!
        NS = 1
        IFIND = 0
        L24: DO NTP = 1,IM_CW(NCW)
!
!---      Coupled well time period only has one time (start time)  ---
!
          IF( IMP_CW(NTP,NCW).EQ.1 ) THEN
            ITS_CWX = ITS_CW(NTP,NCW)
!
!---        Time prior to start time, coupled well is inactive,
!           cycle to next well  ---
!
            IF( TMZ.LE.VAR_CW(1,NS,NCW) ) CYCLE L21
!
!---        Time after start time, coupled well is active  ---
!
            VARC_CWX = 0.D+0
!
!---        Well state #1  ---
!
!           SL = 1.0
!           SG+SN = 0.0
!
!           Aqueous species only
!
            IF( ITS_CWX/100.EQ.1 ) THEN
              DO NSPCW = 1,NSP_CW(NCW)
                NSP = ISPC_CW(NSPCW,NCW)
                IF( NSP.EQ.0 ) EXIT
                IF( NSP.LE.NSPL ) THEN
                  DO IX = 1,IEQ_K(1,NEQ)
                    NSP_K = IEQ_K(IX+1,NEQ)
                    IF( NSP_K.EQ.NSP ) THEN
                      VARC_CWX = VARC_CWX + 
     &                  EQ_K(IX,NEQ)*VARSP_CW(NSPCW,1,NCW)
                      EXIT
                    ENDIF
                  ENDDO
                ENDIF   
              ENDDO             
!
!---        Well state #2  ---
!
!           SL < 1.0
!           SG+SN > 0.0
!
!           Aqueous, gas, and nonaqueous-liquid species
!
            ELSEIF( ITS_CWX/100.EQ.2 ) THEN
              DO NSPCW = 1,NSP_CW(NCW)
                NSP = ISPC_CW(NSPCW,NCW)
                IF( NSP.EQ.0 ) EXIT
                IF( NSP.LE.NSPL .OR. (NSP.GT.NSPL+NSPS .AND. 
     &            NSP.LE.NSPL+NSPS+NSPG) ) THEN
                  DO IX = 1,IEQ_K(1,NEQ)
                    NSP_K = IEQ_K(IX+1,NEQ)
                    IF( NSP_K.EQ.NSP ) THEN
                      VARC_CWX = VARC_CWX + 
     &                  EQ_K(IX,NEQ)*VARSP_CW(NSPCW,1,NCW)
                      EXIT
                    ENDIF
                  ENDDO
                ENDIF   
              ENDDO             
!
!---        Well state #3  ---
!
!           SL = 0.0
!           SG+SN = 1.0
!
!           Gas and nonaqueous-liquid species only
!      
            ELSEIF( ITS_CWX/100.EQ.3 ) THEN
              DO NSPCW = 1,NSP_CW(NCW)
                NSP = ISPC_CW(NSPCW,NCW)
                IF( NSP.EQ.0 ) EXIT
                IF( NSP.GT.NSPL+NSPS .AND. 
     &            NSP.LE.NSPL+NSPS+NSPG ) THEN
                  DO IX = 1,IEQ_K(1,NEQ)
                    NSP_K = IEQ_K(IX+1,NEQ)
                    IF( NSP_K.EQ.NSP ) THEN
                      VARC_CWX = VARC_CWX + 
     &                  EQ_K(IX,NEQ)*VARSP_CW(NSPCW,1,NCW)
                      EXIT
                    ENDIF
                  ENDDO
                ENDIF   
              ENDDO             
            ENDIF
            IFIND = 1
            EXIT L24
!
!---      Coupled well time period has multiple times  ---
!
          ELSE
            NE = NS + IMP_CW(NTP,NCW) - 1
            ITS_CWX = ITS_CW(NTP,NCW)
!
!---        Time outside of coupled well time period, go to next 
!           coupled well time period  ---
!
            IF( TMZ.LE.VAR_CW(1,NS,NCW) .OR. 
     &        TMZ.GT.VAR_CW(1,NE,NCW) ) THEN
              NS = NS + IMP_CW(NTP,NCW)
              CYCLE L24
            ENDIF
!
!---        Coupled well time period has multiple time points, use  
!           linear interpolation of well parameters between 
!           time points  ---
!
            L25: DO M = 2,IMP_CW(NTP,NCW)
              MX = NS + M - 1
              IF( TMZ.LE.VAR_CW(1,MX,NCW) ) THEN
                TD_CW = VAR_CW(1,MX,NCW)-VAR_CW(1,MX-1,NCW)
                DT_CW = MIN( VAR_CW(1,MX,NCW)-TMZ,DT )
                TF_CWX = (TMZ-VAR_CW(1,MX-1,NCW))/TD_CW
!
!---            Time after start time, coupled well is active  ---
!
                VARC_CWX = 0.D+0
!
!---            Well state #1  ---
!
!               SL = 1.0
!               SG+SN = 0.0
!
!               Aqueous species only
!
                IF( ITS_CWX/100.EQ.1 ) THEN
                  DO NSPCW = 1,NSP_CW(NCW)
                    NSP = ISPC_CW(NSPCW,NCW)
                    IF( NSP.EQ.0 ) EXIT
                    IF( NSP.LE.NSPL ) THEN
                      DO IX = 1,IEQ_K(1,NEQ)
                        NSP_K = IEQ_K(IX+1,NEQ)
                        IF( NSP_K.EQ.NSP ) THEN
                          VARC_CWX = VARC_CWX + EQ_K(IX,NEQ)*
     &                      (VARSP_CW(NSPCW,MX-1,NCW) + TF_CWX*
     &                      (VARSP_CW(NSPCW,MX,NCW) - 
     &                      VARSP_CW(NSPCW,MX-1,NCW)))
                          EXIT
                        ENDIF
                      ENDDO
                    ENDIF   
                  ENDDO             
!
!---            Well state #2  ---
!
!               SL < 1.0
!               SG+SN > 0.0
!
!               Aqueous, gas, and nonaqueous-liquid species
!
                ELSEIF( ITS_CWX/100.EQ.2 ) THEN
                  DO NSPCW = 1,NSP_CW(NCW)
                    NSP = ISPC_CW(NSPCW,NCW)
                    IF( NSP.EQ.0 ) EXIT
                    IF( NSP.LE.NSPL .OR. (NSP.GT.NSPL+NSPS .AND. 
     &                NSP.LE.NSPL+NSPS+NSPG) ) THEN
                      DO IX = 1,IEQ_K(1,NEQ)
                        NSP_K = IEQ_K(IX+1,NEQ)
                        IF( NSP_K.EQ.NSP ) THEN
                          VARC_CWX = VARC_CWX + EQ_K(IX,NEQ)*
     &                      (VARSP_CW(NSPCW,MX-1,NCW) + TF_CWX*
     &                      (VARSP_CW(NSPCW,MX,NCW) - 
     &                      VARSP_CW(NSPCW,MX-1,NCW)))
                          EXIT
                        ENDIF
                      ENDDO
                    ENDIF   
                  ENDDO             
!
!---            Well state #3  ---
!
!               SL = 0.0
!               SG+SN = 1.0
!
!               Gas and nonaqueous-liquid species only
!          
                ELSEIF( ITS_CWX/100.EQ.3 ) THEN
                  DO NSPCW = 1,NSP_CW(NCW)
                    NSP = ISPC_CW(NSPCW,NCW)
                    IF( NSP.EQ.0 ) EXIT
                    IF( NSP.GT.NSPL+NSPS .AND. 
     &                NSP.LE.NSPL+NSPS+NSPG ) THEN
                      DO IX = 1,IEQ_K(1,NEQ)
                        NSP_K = IEQ_K(IX+1,NEQ)
                        IF( NSP_K.EQ.NSP ) THEN
                          VARC_CWX = VARC_CWX + EQ_K(IX,NEQ)*
     &                      (VARSP_CW(NSPCW,MX-1,NCW) + TF_CWX*
     &                      (VARSP_CW(NSPCW,MX,NCW) - 
     &                      VARSP_CW(NSPCW,MX-1,NCW)))
                          EXIT
                        ENDIF
                      ENDDO
                    ENDIF   
                  ENDDO             
                ENDIF
                IFIND = 1
                EXIT L24
              ENDIF
            ENDDO L25
          ENDIF
          NS = NS + IMP_CW(NTP,NCW)
        ENDDO L24
!
!---    Coupled well is inactive, cycle to next well  ---
!
        IF( IFIND.EQ.0 ) CYCLE L21
!
!---    Loop over coupled-well nodes  ---
!
        L26: DO NWN = ID_CW(3,NCW),ID_CW(4,NCW)
          N = IWN_CW(NWN)
          IF( IXP(N).EQ.0 ) CYCLE
          IROW = IXP(N)
          SORTX = 0.D+0
!
!---      Injection well (volumetric fluxes are positive from well) ---
!
!         Q_CW(1,NWN) - total volumetric flux, m^3/s
!         Q_CW(2,NWN) - aqueous volumetric flux, m^3/s
!         Q_CW(3,NWN) - gas volumetric flux, m^3/s
!         Q_CW(4,NWN) - nonaqueous-liquid volumetric flux, m^3/s
!
          IF( IT_CW(NCW).GT.0 ) THEN
!
!---        Well state #1  ---
!
!           SL = 1.0
!           SG+SN = 0.0
!
!           Aqueous species only,
!           mol/s = m^3 fluid/s * mol/m^3 fluid
!
            IF( ITS_CWX/100.EQ.1 ) THEN
#ifdef lis
              BUFFER = Q_CW(2,NWN)*VARC_CWX
              CALL LIS_VECTOR_SET_VALUE( LIS_ADD_VALUE,IROW,BUFFER,
     &          T_RHS_VEC,IERR )
#endif
#ifdef petsc
              BUFFER = Q_CW(2,NWN)*VARC_CWX
              IROW_P = IROW - 1
              CALL VecSetValues( T_RHS_VEC,1,IROW_P,BUFFER,ADD_VALUES,
     &          IERR )
#endif
!
!---        Well state #2  ---
!
!           SL < 1.0
!           SG+SN > 0.0
!
!           Aqueous, gas, and nonaqueous-liquid species,
!           mol/s = m^3 fluid/s * mol/m^3 fluid
!
            ELSEIF( ITS_CWX/100.EQ.2 ) THEN
#ifdef lis
              BUFFER = Q_CW(1,NWN)*VARC_CWX
              CALL LIS_VECTOR_SET_VALUE( LIS_ADD_VALUE,IROW,BUFFER,
     &          T_RHS_VEC,IERR )
#endif
#ifdef petsc
              BUFFER = Q_CW(1,NWN)*VARC_CWX
              IROW_P = IROW - 1
              CALL VecSetValues( T_RHS_VEC,1,IROW_P,BUFFER,ADD_VALUES,
     &          IERR )
#endif
!
!---        Well state #3  ---
!
!           SL = 0.0
!           SG+SN = 1.0
!
!           Gas and nonaqueous-liquid species only,
!           mol/s = m^3 fluid/s * mol/m^3 fluid
!            
            ELSEIF( ITS_CWX/100.EQ.3 ) THEN
#ifdef lis
              BUFFER = (Q_CW(3,NWN)+Q_CW(4,NWN))*VARC_CWX
              CALL LIS_VECTOR_SET_VALUE( LIS_ADD_VALUE,IROW,BUFFER,
     &          T_RHS_VEC,IERR )
#endif
#ifdef petsc
              BUFFER = (Q_CW(3,NWN)+Q_CW(4,NWN))*VARC_CWX
              IROW_P = IROW - 1
              CALL VecSetValues( T_RHS_VEC,1,IROW_P,BUFFER,ADD_VALUES,
     &          IERR )
#endif
            ENDIF
!
!---      Production well (volumetric fluxes are positive into well) ---
!
          ELSEIF( IT_CW(NCW).LT.0 ) THEN
!
!---        Solute produced via aqueous phase production  ---
!
            CLX = PORD(2,N)*SL(2,N)
            IF( CLX.GT.EPSL ) SORTX = SORTX + Q_CW(2,NWN)/CLX
!
!---        Solute produced via gas phase production  ---
!
            CGX = PORD(2,N)*SG(2,N)
            IF( CGX.GT.EPSL ) SORTX = SORTX + Q_CW(3,NWN)/CGX
!
!---        Solute produced via nonaqueous-liquid phase production  ---
!
            CNX = PORD(2,N)*SN(2,N)
            IF( CNX.GT.EPSL ) SORTX = SORTX + Q_CW(4,NWN)/CNX
          ENDIF
!
!---      Load Jacobian  ---
!
#ifdef lis
          ICOL = IXP(N)
          BUFFER = SORTX
          CALL LIS_MATRIX_SET_VALUE( LIS_ADD_VALUE,IROW,ICOL,BUFFER,
     &      T_MAT,IERR )
#endif
#ifdef petsc
          IROW_P = IROW - 1
          ICOL_P = IXP(N) - 1
          BUFFER = SORTX
          CALL MatSetValue( T_MAT,IROW_P,ICOL_P,BUFFER,ADD_VALUES,IERR )
#endif
        ENDDO L26
      ENDDO L21
#endif
!
!---  Reset subroutine character string ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of SORT_COUP_WELL group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE UPDT_COUP_WELL
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!
!     STOMPX-EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Update coupled-well pressure.  Injection wells are limited
!     by a high-pressure limit, and withdrawl wells are limited by a 
!     low-pressure limit.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 16 December 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE MPI
      USE GLB_PAR
      USE SOLTN
      USE JACOB
      USE GRID
      USE COUP_WELL
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/UPDT_COUP_WELL'
!
!---  Well equations located on last processor, broadcast updates
!     to coupled-well pressures to all processors ---
!
      IDX = NP-1
      IF( ID.EQ.IDX ) THEN
        DO NCW = 1,N_CW
#ifdef lis
          M = JM_CW(NCW) - NUKFO(IDX+1)
          DP_CW(NCW) = BLU(M)
#endif
#ifdef petsc
          M = NFCGC(ID+1)*ISVC + NCW
          DP_CW(NCW) = BLU(M)
#endif
        ENDDO
      ENDIF
      CALL MPI_BCAST( DP_CW,N_CW,MPI_REAL8,IDX,MPI_COMM_WORLD,IERR )
!
!---  Loop over coupled wells ---
!
      DO NCW = 1,N_CW
        DPX = MAX( 1.D-1*(P_CW(2,NCW)+PATM)/SQRT(REAL(NITER)),5.D+5 )
        DP_CWX = SIGN( MIN(ABS(DPX),ABS(DP_CW(NCW))),DP_CW(NCW) )
        P_CW(2,NCW) = P_CW(2,NCW) + DP_CWX
!
!---    Limit coupled-well pressure to upper limit for injection
!       wells or lower limit for withdrawl wells  ---
!
        IF( IT_CW(NCW).GT.0 ) THEN
          P_CW(2,NCW) = MIN( PL_CW(NCW),P_CW(2,NCW) )
        ELSEIF( IT_CW(NCW).LT.0 ) THEN
          P_CW(2,NCW) = MAX( PL_CW(NCW),P_CW(2,NCW) )
        ENDIF
      ENDDO
!
!---  Reset subroutine character string ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of UPDT_COUP_WELL group  ---
!
      RETURN
      END

