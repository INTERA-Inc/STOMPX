!----------------------Program-----------------------------------------!
!
      PROGRAM STOMP
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------------------------------------------------------!
!
!     STOMP: Subsurface Transport Over Multiple Phases
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     This engineering program numerically simulates the transport
!     of H2O, CO2, CH4, and petroleum components through multifluid
!     geologic media under non-isothermal conditions.
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, March 17, 2013
!
#ifdef lis
!
!----------------------Lis Modules-----------------------------------!
!
      USE STOMP_LIS_MODULE
#endif
#ifdef petsc
!
!----------------------PETSc Modules-----------------------------------!
!
      USE PETSC_STOMP
#endif
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE TRNSPT
      USE SOLTN
      USE REACT
      USE PORMED
      USE PARM_FRC
      USE OUTPU
      USE JACOB
      USE HYST
      USE GRID
      USE GLB_PAR
      USE GEO_MECH
      USE GEOM_FRC
      USE FILES
      USE COUP_WELL
      USE FDVT
      USE FDVS
      USE FDVP
      USE FDVGC
      USE DUAL_POR
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
#ifdef petsc
#include "include/finclude/petscsys.h"
#include "include/finclude/petscvec.h"
#include "include/finclude/petscvec.h90"
#include "include/finclude/petscmat.h"
#include "include/finclude/petscmat.h90"
#endif
#ifdef lis
#include "include/lisf.h"
#endif
!
!----------------------Type Declarations-------------------------------!
!
!      REAL*8, DIMENSION(5) :: FXC_CWX,FXCI_CWX,FXCO_CWX,DMC1X,DMC2X
      LOGICAL HALT,PLOT,RESTART
#ifdef petsc
      PetscErrorCode :: IERR
#endif
#ifdef lis
      LIS_INTEGER :: IERR
#endif
!
!----------------------Executable Lines--------------------------------!
!
!      FXE_CWX = 0.D+0
!      FXEI_CWX = 0.D+0
!      FXEO_CWX = 0.D+0
!      FXW_CWX = 0.D+0
!      FXWI_CWX = 0.D+0
!      FXWO_CWX = 0.D+0
!      DO IGC = 1,NGC+2
!        FXC_CWX(IGC) = 0.D+0
!        FXCI_CWX(IGC) = 0.D+0
!        FXCO_CWX(IGC) = 0.D+0
!      ENDDO
#if defined(intel) || defined(gnu)
!
!---  Initialize system clock ---
!
      CALL SYSTEM_CLOCK(ICOUNT1,ICRATE,ICMAX)
#endif
#ifdef petsc
!
!---  Initialize PETSc ---
!
      CALL PetscInitialize(PETSC_NULL_CHARACTER,IERR)
#endif
#ifdef lis
!
!---  Initialize Lis ---
!
      CALL lis_initialize(IERR)
#endif
!
!---  Read input file to determine memory requirements  ---
!
      CALL STEP
!
!---  Allocate memory  ---
!
      CALL ALLOC
#ifdef demo
!
!---  Number of active nodes exceeds demonstration limit  ---
!
      IF( LAN.GT.1000 ) THEN
        INDX = 3
        CHMSG = 'Number of Active Nodes > Demonstration Limit of 1000'
        CALL WRMSGS( INDX )
      ENDIF
#endif
!
!---  Number of grid cells exceeds binary file size limit  ---
!
      IF( ISLC(67).EQ.1 .AND. LFLD.GT.12000000 ) THEN
        INDX = 3
        CHMSG = 'Number of Grid Cells Yields Binary Files > 2.4 GB'
        CALL WRMSGS( INDX )
      ENDIF
      ISUB_LOG = 1
      SUB_LOG(1) = 'STOMP-EOR'
      ICODE = 43
!
!---  Intialize variables in common blocks and open files  ---
!
      CALL INTLZ
!
!---  Print banner on screen and output file  ---
!
      CALL BANNER
!
!---  Read user input and restart files  ---
!
      CALL RDINPT_EOR
!
!---  Create a node connection map  ---
!
      CALL CONNMAP
!
!---  Check for internal boundary surfaces and write connectivity
!     list file  --
!
      CALL CONNLST
!
!---  For geomechanics simulations create a finite-element node map  --
!
      IF( ISLC(50).NE.0 ) CALL CONNFEN
!
!---  For geomechanics simulations check and preprocess boundary
!     conditions, and set the reference volumetric stress from
!     the initial displacements stored in the restart file  ---
!
      IF( ISLC(50).NE.0 ) CALL CHK_GM
!
!---  Check thermodynamic and hydrologic initial states  ---
!
      CALL CHK_EOR
!
!---  Check thermodynamic and hydrologic fracture/fault
!     initial states  ---
!
      IF( ISLC(74).EQ.1 ) CALL CHK_FRC_EOR
!
!---  Write bin input files for parallel processing  ---
!
      IF( ISLC(67).EQ.1 ) THEN
        CALL INCRM_EOR
        CALL PROP_EOR
        IF( L_CW.EQ.1 ) THEN
          CALL CHK_COUP_WELL
          CALL WRCOUP_WELL
        ENDIF
!
!---    For geomechanics simulations compute Jacobian 
!       matrix pointers  --
!
        IF( ISLC(50).NE.0 ) CALL JCBP_GM_PPC
#ifdef ecke
!
!---    Sequence reaction equations  ---
!
        IF( ISLC(40).EQ.1 ) CALL SEQEQ
#endif
        CALL WRITE_BIN_EOR
        WRITE(IWR,'(A)') 'NOTE: Preprocessing for STOMPX-EOR'
        WRITE(ISC,'(A)') 'NOTE: Preprocessing for STOMPX-EOR'
!
!---    End parallel pre-processing unless output of the flow or
!       transport linear system is requested  ---
!
        IF( ISLC(34).EQ.0 ) THEN
          WRITE(IWR,'(/,A,/)') '---  End of STOMPX-EOR Preprocessing' //
     &      '  ---'
          WRITE(ISC,'(/,A,/)') '---  End of STOMPX-EOR Preprocessing' //
     &      '  ---'
          STOP
        ENDIF
      ENDIF
!
!---  For geomechanics set k iterate value of pore pressure  ---
!
      IF( ISLC(50).NE.0 ) THEN
        INDX = 2
        CALL PRESS_GM( INDX )
      ENDIF
#ifdef ecke
!
!---  Sequence reaction equations  ---
!
      IF( ISLC(40).EQ.1 ) CALL SEQEQ
#endif
!
!---  End of minimum miscibility simulation  ---
!
      IF( IEO.EQ.4 ) THEN
        INDX = 1
        CHMSG = 'Simulation Stopped:  Minimum Miscibility'
        CALL WRMSGS( INDX )
        GOTO 900
      ENDIF
#ifdef dual_porosity
!
!---  Compute primary variable increments for the matrix system  ---
!       
      CALL INCRM_EOR_M
!
!---  Initial hydrologic and thermodynamic properties on 
!     interior nodes for the matrix system  ---
!
      CALL PROP_EOR_M
!
!---  Load old time step arrays for the matrix system  ---
!
      CALL LDO_EOR_M
#endif
!
!---  Compute primary variable increments  ---
!       
      CALL INCRM_EOR
!
!---  Compute fracture/fault primary variable increments  ---
!
      IF( ISLC(74).EQ.1 ) CALL INCRM_FRC_EOR
!
!---  Initial hydrologic and thermodynamic properties on 
!     interior nodes and boundary surfaces  ---
!
      CALL PROP_EOR
      CALL BCP_EOR
!
!---  Initial hydrologic and thermodynamic properties for active
!     fracture/fault triangles  ---
!
      IF( ISLC(74).EQ.1 ) CALL PROP_FRC_EOR
!
!---  Load old time step arrays  ---
!
      CALL LDO_EOR
!
!---  Load old time step arrays for faults ---
!
      IF( ISLC(74).EQ.1 ) CALL LDO_FRC_EOR
!
!---  Define coupled-well nodes, check coupled-well trajectory,
!     initialize coupled-well pressure, and increment coupled-well
!     primary variables, and write well.dat file  ---
!
      IF( L_CW.EQ.1 ) THEN
        IF( ISLC(67).EQ.0 ) CALL CHK_COUP_WELL
        CALL INCRM_COUP_WELL
        CALL WRCOUP_WELL
      ENDIF
!
!---  Compute Jacobian matrix pointers  ---
!
      CALL JCBP
!
!---  For geomechanics simulations compute Jacobian matrix pointers  --
!
      IF( ISLC(50).NE.0 .AND. ISLC(67).EQ.0 ) CALL JCBP_GM
!
!---  Compute initial solute concentrations  ---
!
      CALL CISC_EOR
!
!---  Compute initial solute concentrations for active
!     fracture/fault triangles  ---
!
      IF( ISLC(74).EQ.1 ) CALL CISC_FRC_EOR
#ifdef ecke
!
!---  Reactive transport  ---
!
      IF( ISLC(40).EQ.1 ) THEN
!
!---    Convert initial reactive species concentrations to
!       node volume basis, mol/m^3  ---
!
        CALL FLHSP
!
!---    Temporarily store time stepping  ---
!
        DT_RST = DT
        DTI_RST = DTI
        TM_RST = TM
!
!---    Loop over number of conservation component species  ---
!
        DO NEQ = 1,NEQC
          NSL = NEQ + NSOLU
!
!---      Mobile conservation component fractions   ---
!
          CALL MOBCF( NEQ )
!
!---      Add immobile conservation component fractions   ---
!
          CALL IMOBCF( NEQ )
!
!---    End of conservation component species transport  ---
!
        ENDDO
!
!---    Loop over number of kinetic component species  ---
!
        DO NEQ = 1,NEQK
          NSL = NEQ + NEQC + NSOLU
! 
!---      Mobile kinetic component fractions   ---
!
          CALL MOBKF( NEQ )
! 
!---      Add immobile kinetic component fractions   ---
!
          CALL IMOBKF( NEQ )
!
!---    End of conservation component species transport  ---
!
        ENDDO
!
!---    Equilibrium-conservation-kinetic reaction chemistry   ---
!
        CMINX = CMIN
        IF( NSTEP.EQ.0 ) CMIN = 1.D-20
        CALL ECKECHEM
        CMIN = CMINX
!
!---    Reconstitute mineral species concentrations for initial
!       output  ---
!
        CALL RMNSP
!
!---    Reset time stepping  ---
!
        DT = DT_RST
        DTI = DTI_RST
        TM = TM_RST
      ENDIF
#endif
!
!---  Initialize SPLIB routines  ---
!
      IF( ILES.EQ.3 ) THEN
        INDX = -1
        CALL PSPLIB( 0,INDX )
      ENDIF
#ifdef lis
!
!---  Create Lis matrix, solver, and solution and problem vectors  ---
!
      IF( ILES.EQ.4 ) THEN
!
!---    Solver for coupled flow  ---
!
        INDX = 0
        CALL STOMP_LIS_CREATE(ISVC,F_KSP,F_MAT,F_RHS_VEC,F_SOL_VEC,INDX)
!
!---    Solver for solute/species transport  ---
!
#ifdef ecke
        NSL = NEQ + NSOLU
#else
        NSL = NSOLU
#endif
        IF( NSL.GT.0 ) THEN
          INDX = 1
          CALL STOMP_LIS_CREATE(0,T_KSP,T_MAT,T_RHS_VEC,T_SOL_VEC,INDX)
        ENDIF
!
!---    Solver for geomechanics  ---
!
        IF( ISLC(50).NE.0 ) THEN
          INDX = 2
          CALL STOMP_LIS_CREATE(0,G_KSP,G_MAT,G_RHS_VEC,G_SOL_VEC,INDX)
        ENDIF
      ENDIF
#endif
#ifdef petsc
!
!---  Initialize PETSc routines  ---
!
      IF( ILES.EQ.5 ) THEN
!
!---    Solver for coupled flow  ---
!
        INDX = 0
        CALL PETSC_SOLVER_INIT(ISVC,F_KSP,F_MAT,F_RHS_VEC,F_SOL_VEC,
     &    NLU,INDX)
!
!---    Solver for solute/species transport  ---
!
#ifdef ecke
        NSL = NEQ + NSOLU
#else
        NSL = NSOLU
#endif
        IF( NSL.GT.0 ) THEN
          INDX = 1
          CALL PETSC_SOLVER_INIT(0,T_KSP,T_MAT,T_RHS_VEC,T_SOL_VEC,
     &      NLUC,INDX)
        ENDIF
!
!---    Solver for geomechanics  ---
!
        IF( ISLC(50).NE.0 ) THEN
          INDX = 2
          CALL PETSC_SOLVER_INIT(0,G_KSP,G_MAT,G_RHS_VEC,G_SOL_VEC,
     &      NLU_GM,INDX)
        ENDIF
      ENDIF
#endif
!
!---  Initialize geomechanics  ---
!
      IF( ISLC(50).NE.0 ) THEN
!
!---    Reference state porothermoelastic geomechanics; first call
!       to STATIC_GM eliminates reference boundary conditions  ---
!
        IREF_GM = 1
        CALL STATIC_GM
!
!---    Load reference displacements at finite elment nodes  ---
!
        CALL LDDISP_GM
!
!---    Reference volumetric stresses at finite element centroids  ---
!
        IF( ISLC(50).LT.0 ) THEN
          INDX = 0
          CALL VOLSS_GM( INDX )
!
!---      Remove restart check for geomechanics options  ---
!
          ISLC(50) = ABS(ISLC(50))
        ENDIF
!
!---    Static porothermoelastic geomechanics  ---
!
        IREF_GM = 0
        CALL STATIC_GM
!
!---    Set k iterate value of pore pressure and volumetric stress
!
        INDX = 2
        CALL PRESS_GM( INDX )
        CALL VOLSS_GM( INDX )
      ENDIF
!
!---  Compute initial fluxes on non-boundary, boundary surfaces
!     for matrix and faults  ---
!
      ISVF = 1
      CALL FLUX_EOR
      ISVF = 2*ISVC+1
!
!---  Surface flux integrator for zero time step  ---
!
      DTX = DT
      DT = 0.D+0
      CALL SFIN
      DT = DTX
!
!---  New Time Step ---
!
  100 CONTINUE
#ifdef lis
!
!---  Create Lis matrix, solver, and solution and problem vectors
!     for coupled flow  ---
!
      IF( ILES.EQ.4 ) THEN
        INDX = 0
        CALL STOMP_LIS_CREATE(ISVC,F_KSP,F_MAT,F_RHS_VEC,F_SOL_VEC,INDX)
      ENDIF
#endif
!
!---  Reference node(s) output  ---
!
      IF( MOD( (NSTEP-NRST),IFQS ).EQ.0 .OR.
     &  MOD( (NSTEP-NRST),IFQO ).EQ.0 ) CALL REFNOD
#ifdef ecke
!
!---  Normalize mineral species concentrations after initial
!     output for normal simulations  ---
!
      IF( (NSTEP-NRST).EQ.0 ) CALL NMNSP
#endif
!
!---  Update porosity and permeability in response to geomechanical
!     stress  ---
!
      IF( ISLC(50).NE.0 ) THEN
        CALL PORSTY_GM
        CALL PERMRF_GM
      ENDIF
!
!---  Load old time step arrays  ---
!
      CALL LDO_EOR
!
!---  Load old time step arrays for faults ---
!
      IF( ISLC(74).EQ.1 ) CALL LDO_FRC_EOR
#ifdef dual_porosity
!
!---  Load old time step arrays for the matrix system  ---
!
      CALL LDO_EOR_M
#endif
!
!---  Load old time step arrays for the coupled-well model  ---
!
      IF( L_CW.EQ.1 ) THEN
        CALL LDO_COUP_WELL
      ENDIF
!
!---  Load old time step arrays for the volumetric stress
!     and pore pressure  ---
!
      IF( ISLC(50).NE.0 ) THEN
        INDX = 1
        CALL LD_GM( INDX )
      ENDIF
!
!---  End of initial conditions simulations  ---
!
      IF( IEO.EQ.3 ) THEN
        INDX = 1
        CHMSG = 'Simulation Stopped:  Initial Condition'
        CALL WRMSGS( INDX )
        GOTO 900
      ENDIF
!
!---  Stop simulation if simulation time exceeds limit  ---
!
      IF( ABS(TMMX-TM).LE.1.D-6 ) THEN
        INDX = 1
        CHMSG = 'Simulation Stopped:  Simulation Time Limit'
        CALL WRMSGS( INDX )
        GOTO 900
      ENDIF
!
!---  Stop simulation if file "stop_stomp" exists  ---
!
      INQUIRE( FILE="stop_stomp", EXIST=HALT )
      IF( HALT ) THEN
        OPEN( UNIT=19, FILE="stop_stomp" )
        CLOSE( UNIT=19, STATUS='DELETE' )
        INDX = 1
        CHMSG = 'Simulation Stopped:  User Interrupt'
        CALL WRMSGS( INDX )
        ISLC(18) = 0
        GOTO 900
      ENDIF
#if defined(intel) || defined(gnu)
!
!---  Stop simulation if system clock time is exceeded
!
      IF( CLKMX .GT. 1.D-6 ) THEN
        CALL SYSTEM_CLOCK(ICOUNT2)
        CLOCK_TIME = FLOAT(ICOUNT2-ICOUNT1)/FLOAT(ICRATE)
        IF( CLOCK_TIME.GT.CLKMX ) THEN
          INDX = 1
          CHMSG = 'Simulation Stopped:  Clock Time Limit'
          CALL WRMSGS( INDX )
          GOTO 900
        ENDIF
      ENDIF
#endif
!
!---  Generate plot file if file "plot_stomp" exists  ---
!
      INQUIRE( FILE="plot_stomp", EXIST=PLOT )
      IF( PLOT ) THEN
        OPEN( UNIT=19, FILE="plot_stomp" )
        CLOSE( UNIT=19, STATUS='DELETE' )
        CALL WRPLOT
        IF( ISLC(74).EQ.1 ) CALL WRPLOT_FRC
        IF( ISLC(18).LT.1 ) CALL WRRST
      ENDIF
!
!---  Generate restart file if file "restart_stomp" exists  ---
!
      INQUIRE( FILE="restart_stomp", EXIST=RESTART )
      IF( RESTART ) THEN
        OPEN( UNIT=19, FILE="restart_stomp" )
        CLOSE( UNIT=19, STATUS='DELETE' )
        CALL WRRST
      ENDIF
!
!---  Restart and plot file outputs  ---
!
      IF( ABS(TMPR-TM).LE.1.D-6 ) THEN
        CALL WRPLOT
        IF( ISLC(74).EQ.1 ) CALL WRPLOT_FRC
        IF( ISLC(18).LT.1 ) CALL WRRST
      ENDIF
!
!---  Compute the next time step and increment time step counter  ---
!
      DTSO = DT
      CALL TMSTEP
      IF( NSTEP.EQ.0 ) DTSO = DT
      NSTEP = NSTEP + 1
      IF( NSTEP-NRST.GT.MXSTEP ) THEN
        INDX = 1
        CHMSG = 'Simulation Stopped:  Time Step Limit'
        CALL WRMSGS( INDX )
        NSTEP = NSTEP - 1
        GOTO 900
      ENDIF
!
!---  Geomechanics, update properties dependent on changes in
!     mean stress after loading the old-time-step arrays  ---
!
      IF( ISLC(50).NE.0 ) THEN
        CALL PROP_EOR
      ENDIF
!
!---  No flow solution  ---
!
      IF( ISLC(47).EQ.1 ) THEN
        CALL BCP_EOR
        GOTO 600
      ENDIF
      NTSR = 0
!
!---  Top of sequential flow and transport and geomechanics  ---
!
      K_GM(1) = 0
      K_GM(2) = 0
  190 CONTINUE
      K_GM(1) = K_GM(1) + 1
!
!---  Newton-Raphson iteration restart  ---
!
  200 CONTINUE
      NITER = 0
!
!---  Newton-Raphson iteration start  ---
!
  300 CONTINUE
      NITER = NITER + 1
      K_GM(2) = K_GM(2) + 1
!
!---  Compute boundary saturation, relative permeability, and
!     thermodynamic properties  ---
!
      CALL BCP_EOR
!
!---  Compute coupled-well fluxes  ---
!
      IF( L_CW.EQ.1 ) THEN
        DO NCW = 1,N_CW
!
!---      Injection well  ---
!
          IF( IT_CW(NCW).GT.0 ) THEN
            CALL INJ_COUP_WELL( NCW )
!
!---      Production well  ---
!
          ELSE
            CALL PROD_COUP_WELL( NCW )
          ENDIF
        ENDDO
      ENDIF
#ifdef dual_porosity
!
!---  Compute inter-porosity transfer fluxes  ---
!
      CALL TRANSF_EOR
#endif
!
!---  Compute source contributions  ---
!
      CALL SORC_EOR
!
!---  Compute fault source contributions  ---
!
      IF( ISLC(74).EQ.1 ) CALL SORC_FRC_EOR
!
!---  Compute fluxes on non-boundary, boundary surfaces
!     for matrix and faults  ---
!
      CALL FLUX_EOR
!
!---  Zero Jacobian matrix and problem vector  ---
!
#ifdef petsc
      IF( ILES.EQ.5 ) CALL MatZeroEntries(F_MAT,IERR)
#endif
      INDX = 5
      CALL JCBZ( ISVC,MUC,MLC,MKC,INDX )
!
!---  Load Jacobian matrix for matrix, faults, and coupled wells  ---
!
      CALL JCB_EOR
!
!---  Linear equation solver  ---
!
      IF( ILES.EQ.1 ) THEN
        INDX = 0
        CALL BAND( ISVC,MUC,MLC,INDX )
      ELSEIF( ILES.EQ.3 ) THEN
        INDX = 0
        CALL PSPLIB( ISVC,INDX )
#ifdef lis
      ELSEIF( ILES.EQ.4 ) THEN
        INDX = 0
        CALL STOMP_LIS_SOLVE(ISVC,F_KSP,F_MAT,F_RHS_VEC,F_SOL_VEC,INDX)
#endif
#ifdef petsc
      ELSEIF( ILES.EQ.5 ) THEN
        CALL PETSC_PUT_RHS(BLU,F_RHS_VEC)
        CALL PETSC_SOLVE(F_KSP,F_MAT,F_RHS_VEC,F_SOL_VEC)
        CALL PETSC_GET_SOLUTION(BLU,F_SOL_VEC)
#endif
      ENDIF
!
!---  Update primary variables for coupled wells  ---
!
      IF( L_CW.EQ.1 ) THEN
        CALL UPDT_COUP_WELL
      ENDIF
!
!---  Update primary variables  ---
!
      CALL UPDT_EOR
!
!---  Update primary variables for faults ---
!
      IF( ISLC(74).NE.0 ) CALL UPDT_FRC_EOR
!
!---  Convergence check for couped wells  ---
!
      IF( L_CW.EQ.1 ) THEN
        CALL RSDL_COUP_WELL
      ENDIF
!
!---  Compute convergence from maximum relative residuals  ---
!
      CALL RSDL_EOR
!
!---  Compute convergence from max. relative residuals for faults  ---
!
      IF( ISLC(74).NE.0 ) CALL RSDL_FRC_EOR
#ifdef dual_porosity
!
!---  Compute primary variable increments, saturation,
!     relative permeability, porosity, tortuosity,
!     thermodynamic properties for interior nodes,
!     except immediately after a new time step, for the matrix
!     system  ---
!
      CALL INCRM_EOR_M
      CALL PROP_EOR_M
#endif
!
!---  Compute primary variable increments, saturation,
!     relative permeability, porosity, tortuosity,
!     thermodynamic properties for interior nodes,
!     except immediately after a new time step  ---
!
      CALL INCRM_EOR
      CALL PROP_EOR
!
!---  Compute primary variable increments, saturation,
!     relative permeability, porosity, tortuosity,
!     thermodynamic properties for fracture/fault triangles,
!     except immediately after a new time step  ---
!
      IF( ISLC(74).NE.0 ) THEN
        CALL INCRM_FRC_EOR
        CALL PROP_FRC_EOR
      ENDIF
!
!---  For geomechanics simulations alter permeability with
!     porosity  --
!
      IF( ISLC(50).NE.0 ) CALL PERMRF_GM
!
!---  Increment coupled-well primary variables  ---
!
      IF( L_CW.EQ.1 ) THEN
        CALL INCRM_COUP_WELL
      ENDIF
      IF( ISLC(39).EQ.1 .AND. NITER.GE.3 ) CALL FQOR_EOR
      GOTO( 200,300,600,900 ) ICNV
  600 CONTINUE
#ifdef lis
!
!---  Destroy Lis matrix, solver, and solution and problem vectors
!     for coupled flow  ---
!
      CALL STOMP_LIS_DESTROY(F_KSP,F_MAT,F_RHS_VEC,F_SOL_VEC)
#endif
!
!---  Solve geomechanics  ---
!
      IF( ISLC(50).NE.0 ) THEN
!
!---    Set k+1 iterate value of pore pressure  ---
!
        INDX = 3
        CALL PRESS_GM( INDX )
!
!---    Static porothermoelastic geomechanics  ---
!
        CALL STATIC_GM
!
!---    Convergence check for sequential coupled flow and transport
!       and geomechanics  ---
!
        CALL RSDL_GM
        IF( RSD_GM.GT.RSDM_GM(IEPD) ) THEN
!
!---      Load k level arrays for the volumetric stress
!         and pore pressure  ---
!
          INDX = 2
          CALL LD_GM( INDX )
!
!---      Update porosity and permeability for geomechical stress  ---
!
          CALL PORSTY_GM
          CALL PERMRF_GM
          GOTO 190
        ENDIF
      ENDIF
!
!---  Integrate coupled-equation sources ---
!
      CALL SORIC_EOR
!
!---  Update fluxes for transport solutions or flux integrations  ---
!
      ISVF = 1
      CALL FLUX_EOR
!
!---  Compute Local Courant Numbers  ---
!
      IF( ICRNT.EQ.1 ) CALL CRNTNB
      ISVF = 2*ISVC+1
!
!---  Beginning of transport equation solution  ---
!
      IF( IEQC.EQ.0 .AND. ISLC(40).EQ.0 ) GOTO 800
#ifdef lis
!
!---  Create Lis matrix, solver, and solution and problem vectors
!     for solute transport  ---
!
      IF( ILES.EQ.4 ) THEN
        INDX = 1
        CALL STOMP_LIS_CREATE(-1,T_KSP,T_MAT,T_RHS_VEC,T_SOL_VEC,INDX)
      ENDIF
#endif
!
!---  Loop over number of solutes  ---
!
      DO NSL = 1,NSOLU
!
!---  Courant number limiting  ---
!
        N_CRN(NSL) = 1
        IF( ISLC(17).NE.0 ) CALL CRN_LIM( NSL )
        DO NC = 1,N_CRN(NSL)
          IF( ISLC(17).NE.0 ) TM = MIN( TM+DT,TM_CRN )
!
!---      Compute solute mole fractions ---
!
          CALL SPRP_EOR( NSL )
!
!---      Solute transport ---
!
          CALL TPORT_EOR( NSL )
!
!---      Load old sub-time-step concentrations  ---
!
          IF( ISLC(17).NE.0 ) CALL UPDTCO( NSL)
!
!---    Bottom of sub-time step loop  ---
!
        ENDDO
!
!---    Courant number limiting, reset time stepping  ---
!
        IF( ISLC(17).NE.0 ) THEN
          DT = DT_CRN
          DTI = DTI_CRN
          TM = TM_CRN
        ENDIF
!
!---  End of transport equation solution  ---
!
      ENDDO
#ifdef radioactive
!
!---  Decay matrix, fracture, and borehole solutes via Bateman
!     chain decay solution  ---
!
      CALL CHAIN_DECAY
#endif
#ifdef reactive
!
!---  Solute reactive chemistry  ---
!
      CALL SRCHM
#endif
#ifdef ecke
!
!---  Reactive transport  ---
!
      IF( ISLC(40).EQ.1 ) THEN
        N_CRN(NSOLU+1) = 1
        IF( ISLC(17).NE.0 ) CALL CRN_LIM( NSOLU+1 )
!
!---    Courant-limiting sub-time step loop  ---
!
        DO 792 NCR = 1,N_CRN(NSOLU+1)
          IF( ISLC(17).NE.0 ) TM = MIN( TM+DT,TM_CRN )
!
!---    Temporarily store time stepping  ---
!
        DT_RST = DT
        DTI_RST = DTI
        TM_RST = TM
        TM = TM - DT
        N_RST = 1
  710   CONTINUE
!
!---    Zero linked sources  ---
!
        CALL ZLKSRC
!
!---    Sub-time step reduction limit exceeded  ---
!
        IF( N_RST.GT.16 ) THEN
          WRITE(ISC,'(A)') '          ---  ECKEChem ' // 
     &      'Sub-Time Step Reduction Limit Exceeded  ---'
          WRITE(IWR,'(A)') '          ---  ECKEChem ' // 
     &      'Sub-Time Step Reduction Limit Exceeded  ---'
          DT = DT_RST
          DTI = DTI_RST
          TM = TM_RST
          NSTEP = NSTEP-1
          TM = TM-DT
          DT = DTO
          CALL BCK_STP
          GOTO 900
        ENDIF
!
!---    Sub-time step loop  ---
!
        DO NC = 1,N_RST
          TM = TM + DT
!
!---      Loop over number of conservation component species  ---
!
          DO NEQ = 1,NEQC
            NSL = NEQ + NSOLU
!
!---        Skip transport for linked aqueous component   ---
!
            DO IGC = 1,NGC+2
            IF( ISPLK(14+NSPLK+IGC).EQ.NSL ) GOTO 720
            END DO
!
!---        Mobile conservation component fractions   ---
!
            CALL MOBCF( NEQ )
!
!---        Solute transport ---
!
            CALL TPORT_EOR( NSL )
!
!---        Add immobile conservation component fractions   ---
!
  720       CONTINUE
            CALL IMOBCF( NEQ )
!
!---      End of conservation component species transport  ---
!
          ENDDO
!
!---      Loop over number of kinetic component species  ---
!
          DO NEQ = 1,NEQK
            NSL = NEQ + NEQC + NSOLU
!
!---        Skip transport for linked aqueous CO2   ---
!
            DO IGC = 1,NGC+2
              IF( ISPLK(14+NSPLK+IGC).EQ.NSL ) GOTO 740
            END DO
! 
!---        Mobile kinetic component fractions   ---
!
            CALL MOBKF( NEQ )
!
!---        Solute transport ---
!
            CALL TPORT_EOR( NSL )
! 
!---        Add immobile kinetic component fractions   ---
!
  740       CONTINUE
            CALL IMOBKF( NEQ )
!
!---      End of conservation component species transport  ---
!
          ENDDO
!
!---      Equilibrium-conservation-kinetic reaction chemistry   ---
!
          CALL ECKECHEM
          IF( ECKE_ER ) GOTO 710
!
!---      Load old sub-time-step reactive species
!         concentrations and component species concentrations  ---
!
          IF( ISLC(17).NE.0 ) CALL UPDTCHEM
!
!---    Bottom of sub-time step loop  ---
!
        ENDDO
!
!---    Reset time stepping  ---
!
        IF( N_RST.GT.1 ) THEN
          DT = DT_RST
          DTI = DTI_RST
          TM = TM_RST
        ENDIF
  792   CONTINUE
!
!---    Courant number limiting, reset time stepping  ---
!
        IF( ISLC(17).NE.0 ) THEN
          DT = DT_CRN
          DTI = DTI_CRN
          TM = TM_CRN
        ENDIF
      ENDIF
#endif
#ifdef lis
!
!---  Destroy Lis matrix, solver, and solution and problem vectors
!     for solute transport  ---
!
      CALL STOMP_LIS_DESTROY(T_KSP,T_MAT,T_RHS_VEC,T_SOL_VEC)
#endif
  800 CONTINUE
!
!---  Surface flux integrator  ---
!
      CALL SFIN
!
!---  Proceed to new time step  ---
!
      GOTO 100
!
!---  Write plot file, restart file, close files, and
!     terminate simulation  ---
!
  900 CONTINUE
      CALL WRPLOT
      IF( ISLC(74).EQ.1 ) CALL WRPLOT_FRC
      IF( ISLC(18).LT.2 ) CALL WRRST
      WRITE(IWR,'(/,A)') '---  End of STOMP Simulation ---'
      WRITE(ISC,'(/,A)') '---  End of STOMP Simulation ---'
#ifdef lis
!
!---  Finalize Lis execution  ---
!
      CALL lis_finalize(IERR)
#endif
#ifdef petsc
!
!---  Finalize PETSc execution  ---
!
      CALL PETSC_SOLVER_DESTROY(F_KSP,F_MAT,F_RHS_VEC,F_SOL_VEC)
      IF( NSOLU.GT.0 ) THEN
        CALL PETSC_SOLVER_DESTROY(T_KSP,T_MAT,T_RHS_VEC,T_SOL_VEC)
      ENDIF
      CALL PetscFinalize(IERR)
#endif
      STOP
!
!---  End of STOMP program  ---
!
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE BCF_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Compute boundary surface fluxes.
!
!----------------------Authors-----------------------------------------!
!
!     Written by MD White, PNNL, 28 August, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE POINTE
      USE JACOB
      USE GRID
      USE GLB_PAR
      USE FLUXT
      USE FLUXS
      USE FLUXP
      USE FLUXN
      USE FLUXGC
      USE FDVP
      USE FDVN
      USE FDVG
      USE CONST
      USE BCVP
      USE BCV
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 BCX(LBCV)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//BCF_EOR'
!
!---  Zero boundary fluxes  ---
!
      DO 130 NB = 1,NBC
        N = IBCN(NB)
        NPX = NSX(N)
        NPY = NSY(N)
        NPZ = NSZ(N)
        NQX = NSX(N)+1
        NQY = NSY(N)+IFLD
        NQZ = NSZ(N)+IJFLD
        IF( IBCD(NB).EQ.-3 ) THEN
          DO 20 M = 1,ISVF
            WL(M,NPZ) = 0.D+0
            WG(M,NPZ) = 0.D+0
            WN(M,NPZ) = 0.D+0
            WLA(M,NPZ) = 0.D+0
            WLW(M,NPZ) = 0.D+0
            WGW(M,NPZ) = 0.D+0
            WDLA(M,NPZ) = 0.D+0
            WDLW(M,NPZ) = 0.D+0
            WDGW(M,NPZ) = 0.D+0
            WQ(M,NPZ) = 0.D+0
            WS(M,NPZ) = 0.D+0
            WDS(M,NPZ) = 0.D+0
            DO 10 IGC = 1,NGC+2
              WGC(IGC,M,NPZ) = 0.D+0
              WNC(IGC,M,NPZ) = 0.D+0
              WDGC(IGC,M,NPZ) = 0.D+0
              WDNC(IGC,M,NPZ) = 0.D+0
   10       CONTINUE
   20     CONTINUE
        ELSEIF( IBCD(NB).EQ.-2 ) THEN
          DO 40 M = 1,ISVF
            VL(M,NPY) = 0.D+0
            VG(M,NPY) = 0.D+0
            VN(M,NPY) = 0.D+0
            VLA(M,NPY) = 0.D+0
            VLW(M,NPY) = 0.D+0
            VGW(M,NPY) = 0.D+0
            VDLA(M,NPY) = 0.D+0
            VDLW(M,NPY) = 0.D+0
            VDGW(M,NPY) = 0.D+0
            VQ(M,NPY) = 0.D+0
            VS(M,NPY) = 0.D+0
            VDS(M,NPY) = 0.D+0
            DO 30 IGC = 1,NGC+2
              VGC(IGC,M,NPY) = 0.D+0
              VNC(IGC,M,NPY) = 0.D+0
              VDGC(IGC,M,NPY) = 0.D+0
              VDNC(IGC,M,NPY) = 0.D+0
   30       CONTINUE
   40     CONTINUE
        ELSEIF( IBCD(NB).EQ.-1 ) THEN
          DO 60 M = 1,ISVF
            UL(M,NPX) = 0.D+0
            UG(M,NPX) = 0.D+0
            UN(M,NPX) = 0.D+0
            ULA(M,NPX) = 0.D+0
            ULW(M,NPX) = 0.D+0
            UGW(M,NPX) = 0.D+0
            UDLA(M,NPX) = 0.D+0
            UDLW(M,NPX) = 0.D+0
            UDGW(M,NPX) = 0.D+0
            UQ(M,NPX) = 0.D+0
            US(M,NPX) = 0.D+0
            UDS(M,NPX) = 0.D+0
            DO 50 IGC = 1,NGC+2
              UGC(IGC,M,NPX) = 0.D+0
              UNC(IGC,M,NPX) = 0.D+0
              UDGC(IGC,M,NPX) = 0.D+0
              UDNC(IGC,M,NPX) = 0.D+0
   50       CONTINUE
   60     CONTINUE
        ELSEIF( IBCD(NB).EQ.1 ) THEN
          DO 80 M = 1,ISVF
            UL(M,NQX) = 0.D+0
            UG(M,NQX) = 0.D+0
            UN(M,NQX) = 0.D+0
            ULA(M,NQX) = 0.D+0
            ULW(M,NQX) = 0.D+0
            UGW(M,NQX) = 0.D+0
            UDLA(M,NQX) = 0.D+0
            UDLW(M,NQX) = 0.D+0
            UDGW(M,NQX) = 0.D+0
            UQ(M,NQX) = 0.D+0
            US(M,NQX) = 0.D+0
            UDS(M,NQX) = 0.D+0
            DO 70 IGC = 1,NGC+2
              UGC(IGC,M,NQX) = 0.D+0
              UNC(IGC,M,NQX) = 0.D+0
              UDGC(IGC,M,NQX) = 0.D+0
              UDNC(IGC,M,NQX) = 0.D+0
   70       CONTINUE
   80     CONTINUE
        ELSEIF( IBCD(NB).EQ.2 ) THEN
          DO 100 M = 1,ISVF
            VL(M,NQY) = 0.D+0
            VG(M,NQY) = 0.D+0
            VN(M,NQY) = 0.D+0
            VLA(M,NQY) = 0.D+0
            VLW(M,NQY) = 0.D+0
            VGW(M,NQY) = 0.D+0
            VDLA(M,NQY) = 0.D+0
            VDLW(M,NQY) = 0.D+0
            VDGW(M,NQY) = 0.D+0
            VQ(M,NQY) = 0.D+0
            VS(M,NQY) = 0.D+0
            VDS(M,NQY) = 0.D+0
            DO 90 IGC = 1,NGC+2
              VGC(IGC,M,NQY) = 0.D+0
              VNC(IGC,M,NQY) = 0.D+0
              VDGC(IGC,M,NQY) = 0.D+0
              VDNC(IGC,M,NQY) = 0.D+0
   90       CONTINUE
  100     CONTINUE
        ELSEIF( IBCD(NB).EQ.3 ) THEN
          DO 120 M = 1,ISVF
            WL(M,NQZ) = 0.D+0
            WG(M,NQZ) = 0.D+0
            WN(M,NQZ) = 0.D+0
            WLA(M,NQZ) = 0.D+0
            WLW(M,NQZ) = 0.D+0
            WGW(M,NQZ) = 0.D+0
            WDLA(M,NQZ) = 0.D+0
            WDLW(M,NQZ) = 0.D+0
            WDGW(M,NQZ) = 0.D+0
            WQ(M,NQZ) = 0.D+0
            WS(M,NQZ) = 0.D+0
            WDS(M,NQZ) = 0.D+0
            DO 110 IGC = 1,NGC+2
              WGC(IGC,M,NQZ) = 0.D+0
              WNC(IGC,M,NQZ) = 0.D+0
              WDGC(IGC,M,NQZ) = 0.D+0
              WDNC(IGC,M,NQZ) = 0.D+0
  110       CONTINUE
  120     CONTINUE
        ENDIF
  130 CONTINUE
!
!---  Loop over boundary conditions  ---
!
      DO 800 NB = 1,NBC
        TMZ = TM
        IF( NSTEP-NRST.EQ.0 ) TMZ = TMZ*(1.D+0+EPSL)+EPSL
        MB = IBCIN(NB)
        IF( IBCC(NB).EQ.1 ) TMZ = MOD( TM,BC(1,IBCM(NB),MB) )
        IF( TMZ.LE.BC(1,1,MB) ) GOTO 800
        IF( IBCM(NB).EQ.1 ) THEN
          DO 140 N = 1,LBCV
            BCX(N) = BC(N,1,MB)
  140     CONTINUE
        ELSE
          DO 160 M = 2,IBCM(NB)
            IF( TMZ.LE.BC(1,M,MB) ) THEN
             TDBC = (BC(1,M,MB)-BC(1,M-1,MB))
             DTBC = MIN( BC(1,M,MB)-TMZ,DT )
             TFBC = (TMZ-5.D-1*DTBC-BC(1,M-1,MB))/TDBC
             DO 150 N = 1,LBCV
               BCX(N) = BC(N,M-1,MB) + TFBC*(BC(N,M,MB)-BC(N,M-1,MB))
  150        CONTINUE
             GOTO 170
            ENDIF
  160     CONTINUE
          GOTO 800
        ENDIF
  170   CONTINUE
        N = IBCN(NB)
        I = ID(N)
        J = JD(N)
        K = KD(N)
        NPZ = NSZ(N)
        NPY = NSY(N)
        NPX = NSX(N)
        NQX = NPX+1
        NQY = NPY+IFLD
        NQZ = NPZ+IJFLD
        ITFX = MOD(IBCT(2,NB),10)
        ITGX = MOD(IBCT(2,NB),100)/10
        ITLX = MOD(IBCT(2,NB),1000)/100
        ITNX = MOD(IBCT(2,NB),10000)/1000
!
!---    Bottom boundary  ---
!
        IF( IBCD(NB).EQ.-3 ) THEN
!
!---      Fluid flow Neumann boundary  ---
!
          IF( ITFX.EQ.2 .OR. ITFX.EQ.7 .OR. ITFX.EQ.9 ) THEN
            IF( BCX(3).GT.0.D+0 ) THEN
              DO 200 M = 1,ISVF
                MP = MPOS(M)
                IF( ITGX.EQ.0 ) WG(M,NPZ) = SGB(MP,NB)*BCX(3)
                IF( ITLX.EQ.0 ) WL(M,NPZ) = SLB(MP,NB)*BCX(3)
                IF( ITNX.EQ.0 ) WN(M,NPZ) = SNB(MP,NB)*BCX(3)
  200         CONTINUE
            ELSE
              FMGX = RKG(2,N)/VISG(2,N)
              FMLX = RKL(3,2,N)/VISL(2,N)
              FMNX = RKN(2,N)/VISN(2,N)
              SFMX = FMGX + FMLX + FMNX 
              DO 202 M = 1,ISVF
                IF( ITGX.EQ.0 ) WG(M,NPZ) = BCX(3)*FMGX/SFMX
                IF( ITLX.EQ.0 ) WL(M,NPZ) = BCX(3)*FMLX/SFMX
                IF( ITNX.EQ.0 ) WN(M,NPZ) = BCX(3)*FMNX/SFMX
  202         CONTINUE
            ENDIF
            IF( ITLX.EQ.0 .AND. ISLC(45).EQ.0 ) CALL DFFLAB( N,NB )
            IF( ITLX.EQ.0 .AND. ISLC(32).EQ.0 ) CALL DFFLSB( N,NB )
            IF( ITLX.EQ.0 ) CALL DFFLWB( N,NB )
            DO 210 IGC = 1,NGC+2
              IF( IGC.EQ.1 ) THEN
!
!---            Iso-CO2 option  ---
!
                IF( ISLC(45).EQ.0 ) THEN
                  IF( ITGX.EQ.0 ) CALL DFFGCB( IGC,N,NB )
                  IF( ITNX.EQ.0 ) CALL DFFNCB( IGC,N,NB )
                ENDIF
              ELSEIF( IGC.EQ.2 ) THEN
!
!---            Iso-CH4 option  ---
!
                IF( ISLC(64).EQ.0 ) THEN
                  IF( ITGX.EQ.0 ) CALL DFFGCB( IGC,N,NB )
                  IF( ITNX.EQ.0 ) CALL DFFNCB( IGC,N,NB )
                ENDIF
              ELSE
                IF( ITGX.EQ.0 ) CALL DFFGCB( IGC,N,NB )
                IF( ITNX.EQ.0 ) CALL DFFNCB( IGC,N,NB )
              ENDIF
  210       CONTINUE
            IF( ITGX.EQ.0 ) CALL DFFGWB( N,NB )
!
!---      Fluid flow non-zero flux boundary  ---
!
          ELSEIF( ITFX.NE.3 ) THEN
            IF( ITGX.EQ.0 ) CALL DRCVGB( N,NB )
            IF( ITLX.EQ.0 ) CALL DRCVLB( N,NB )
            IF( ITNX.EQ.0 ) CALL DRCVNB( N,NB )
            IF( ITLX.EQ.0 .AND. ISLC(45).EQ.0 ) CALL DFFLAB( N,NB )
            IF( ITLX.EQ.0 .AND. ISLC(32).EQ.0 ) CALL DFFLSB( N,NB )
            IF( ITLX.EQ.0 ) CALL DFFLWB( N,NB )
            DO 220 IGC = 1,NGC+2
              IF( IGC.EQ.1 ) THEN
!
!---            Iso-CO2 option  ---
!
                IF( ISLC(45).EQ.0 ) THEN
                  IF( ITGX.EQ.0 ) CALL DFFGCB( IGC,N,NB )
                  IF( ITNX.EQ.0 ) CALL DFFNCB( IGC,N,NB )
                ENDIF
              ELSEIF( IGC.EQ.2 ) THEN
!
!---            Iso-CH4 option  ---
!
                IF( ISLC(64).EQ.0 ) THEN
                  IF( ITGX.EQ.0 ) CALL DFFGCB( IGC,N,NB )
                  IF( ITNX.EQ.0 ) CALL DFFNCB( IGC,N,NB )
                ENDIF
              ELSE
                IF( ITGX.EQ.0 ) CALL DFFGCB( IGC,N,NB )
                IF( ITNX.EQ.0 ) CALL DFFNCB( IGC,N,NB )
              ENDIF
  220       CONTINUE
            IF( ITGX.EQ.0 ) CALL DFFGWB( N,NB )
          ENDIF
!
!---      Nonisothermal simulations  ---
!
          IF( ISLC(30).EQ.0 )  THEN
!
!---        Energy Neumann  ---
!
            IF( IBCT(1,NB).EQ.2 ) THEN
              DO 230 M = 1,ISVF
                WQ(M,NPZ) = BCX(2)
  230         CONTINUE
!
!---        Energy outflow, inflow, or advective  ---
!
            ELSEIF( IBCT(1,NB).EQ.5 .OR. IBCT(1,NB).EQ.6 .OR.
     &         IBCT(1,NB).EQ.7 ) THEN
              CALL THLB_EOR( N,NB )
              CALL THGB_EOR( N,NB )
              CALL THNB_EOR( N,NB )
!
!---        Energy non-zero flux  ---
!
            ELSEIF( IBCT(1,NB).NE.3 ) THEN
              CALL THDB_EOR( N,NB )
              CALL THLB_EOR( N,NB )
              CALL THGB_EOR( N,NB )
              CALL THNB_EOR( N,NB )
            ENDIF
          ENDIF
!
!---    South boundary  ---
!
        ELSEIF( IBCD(NB).EQ.-2 ) THEN
!
!---      Fluid flow Neumann boundary  ---
!
          IF( ITFX.EQ.2 .OR. ITFX.EQ.7 .OR. ITFX.EQ.9 ) THEN
            IF( BCX(3).GT.0.D+0 ) THEN
              DO 300 M = 1,ISVF
                MP = MPOS(M)
                IF( ITGX.EQ.0 ) VG(M,NPY) = SGB(MP,NB)*BCX(3)
                IF( ITLX.EQ.0 ) VL(M,NPY) = SLB(MP,NB)*BCX(3)
                IF( ITNX.EQ.0 ) VN(M,NPY) = SNB(MP,NB)*BCX(3)
  300         CONTINUE
            ELSE
              FMGX = RKG(2,N)/VISG(2,N)
              FMLX = RKL(2,2,N)/VISL(2,N)
              FMNX = RKN(2,N)/VISN(2,N)
              SFMX = FMGX + FMLX + FMNX 
              DO 302 M = 1,ISVF
                IF( ITGX.EQ.0 ) VG(M,NPY) = BCX(3)*FMGX/SFMX
                IF( ITLX.EQ.0 ) VL(M,NPY) = BCX(3)*FMLX/SFMX
                IF( ITNX.EQ.0 ) VN(M,NPY) = BCX(3)*FMNX/SFMX
  302         CONTINUE
            ENDIF
            IF( ITLX.EQ.0 .AND. ISLC(45).EQ.0 ) CALL DFFLAS( N,NB )
            IF( ITLX.EQ.0 .AND. ISLC(32).EQ.0 ) CALL DFFLSS( N,NB )
            IF( ITLX.EQ.0 ) CALL DFFLWS( N,NB )
            DO 310 IGC = 1,NGC+2
              IF( IGC.EQ.1 ) THEN
!
!---            Iso-CO2 option  ---
!
                IF( ISLC(45).EQ.0 ) THEN
                  IF( ITGX.EQ.0 ) CALL DFFGCS( IGC,N,NB )
                  IF( ITNX.EQ.0 ) CALL DFFNCS( IGC,N,NB )
                ENDIF
              ELSEIF( IGC.EQ.2 ) THEN
!
!---            Iso-CH4 option  ---
!
                IF( ISLC(64).EQ.0 ) THEN
                  IF( ITGX.EQ.0 ) CALL DFFGCS( IGC,N,NB )
                  IF( ITNX.EQ.0 ) CALL DFFNCS( IGC,N,NB )
                ENDIF
              ELSE
                IF( ITGX.EQ.0 ) CALL DFFGCS( IGC,N,NB )
                IF( ITNX.EQ.0 ) CALL DFFNCS( IGC,N,NB )
              ENDIF
  310       CONTINUE
            IF( ITGX.EQ.0 ) CALL DFFGWS( N,NB )
!
!---      Fluid flow non-zero flux boundary  ---
!
          ELSEIF( ITFX.NE.3 ) THEN
            IF( ITGX.EQ.0 ) CALL DRCVGS( N,NB )
            IF( ITLX.EQ.0 ) CALL DRCVLS( N,NB )
            IF( ITNX.EQ.0 ) CALL DRCVNS( N,NB )
            IF( ITLX.EQ.0 .AND. ISLC(45).EQ.0 ) CALL DFFLAS( N,NB )
            IF( ITLX.EQ.0 .AND. ISLC(32).EQ.0 ) CALL DFFLSS( N,NB )
            IF( ITLX.EQ.0 ) CALL DFFLWS( N,NB )
            DO 320 IGC = 1,NGC+2
              IF( IGC.EQ.1 ) THEN
!
!---            Iso-CO2 option  ---
!
                IF( ISLC(45).EQ.0 ) THEN
                  IF( ITGX.EQ.0 ) CALL DFFGCS( IGC,N,NB )
                  IF( ITNX.EQ.0 ) CALL DFFNCS( IGC,N,NB )
                ENDIF
              ELSEIF( IGC.EQ.2 ) THEN
!
!---            Iso-CH4 option  ---
!
                IF( ISLC(64).EQ.0 ) THEN
                  IF( ITGX.EQ.0 ) CALL DFFGCS( IGC,N,NB )
                  IF( ITNX.EQ.0 ) CALL DFFNCS( IGC,N,NB )
                ENDIF
              ELSE
                IF( ITGX.EQ.0 ) CALL DFFGCS( IGC,N,NB )
                IF( ITNX.EQ.0 ) CALL DFFNCS( IGC,N,NB )
              ENDIF
  320       CONTINUE
            IF( ITGX.EQ.0 ) CALL DFFGWS( N,NB )
          ENDIF
!
!---      Nonisothermal simulations  ---
!
          IF( ISLC(30).EQ.0 )  THEN
!
!---        Energy Neumann  ---
!
            IF( IBCT(1,NB).EQ.2 ) THEN
              DO 330 M = 1,ISVF
                VQ(M,NPY) = BCX(2)
  330         CONTINUE
!
!---        Energy outflow, inflow, or advective  ---
!
            ELSEIF( IBCT(1,NB).EQ.5 .OR. IBCT(1,NB).EQ.6 .OR.
     &         IBCT(1,NB).EQ.7 ) THEN
              CALL THLS_EOR( N,NB )
              CALL THGS_EOR( N,NB )
              CALL THNS_EOR( N,NB )
!
!---        Energy non-zero flux  ---
!
            ELSEIF( IBCT(1,NB).NE.3 ) THEN
              CALL THDS_EOR( N,NB )
              CALL THLS_EOR( N,NB )
              CALL THGS_EOR( N,NB )
              CALL THNS_EOR( N,NB )
            ENDIF
          ENDIF
!
!---    West boundary  ---
!
        ELSEIF( IBCD(NB).EQ.-1 ) THEN
!
!---      Fluid flow Neumann boundary  ---
!
          IF( ITFX.EQ.2 .OR. ITFX.EQ.7 .OR. ITFX.EQ.9 ) THEN
            IF( BCX(3).GT.0.D+0 ) THEN
              DO 400 M = 1,ISVF
                MP = MPOS(M)
                IF( ITGX.EQ.0 ) UG(M,NPX) = SGB(MP,NB)*BCX(3)
                IF( ITLX.EQ.0 ) UL(M,NPX) = SLB(MP,NB)*BCX(3)
                IF( ITNX.EQ.0 ) UN(M,NPX) = SNB(MP,NB)*BCX(3)
  400         CONTINUE
            ELSE
              FMGX = RKG(2,N)/VISG(2,N)
              FMLX = RKL(1,2,N)/VISL(2,N)
              FMNX = RKN(2,N)/VISN(2,N)
              SFMX = FMGX + FMLX + FMNX 
              DO 402 M = 1,ISVF
                IF( ITGX.EQ.0 ) UG(M,NPX) = BCX(3)*FMGX/SFMX
                IF( ITLX.EQ.0 ) UL(M,NPX) = BCX(3)*FMLX/SFMX
                IF( ITNX.EQ.0 ) UN(M,NPX) = BCX(3)*FMNX/SFMX
  402         CONTINUE
            ENDIF
            IF( ITLX.EQ.0 .AND. ISLC(45).EQ.0 ) CALL DFFLAW( N,NB )
            IF( ITLX.EQ.0 .AND. ISLC(32).EQ.0 ) CALL DFFLSW( N,NB )
            IF( ITLX.EQ.0 ) CALL DFFLWW( N,NB )
            DO 410 IGC = 1,NGC+2
              IF( IGC.EQ.1 ) THEN
!
!---            Iso-CO2 option  ---
!
                IF( ISLC(45).EQ.0 ) THEN
                  IF( ITGX.EQ.0 ) CALL DFFGCW( IGC,N,NB )
                  IF( ITNX.EQ.0 ) CALL DFFNCW( IGC,N,NB )
                ENDIF
              ELSEIF( IGC.EQ.2 ) THEN
!
!---            Iso-CH4 option  ---
!
                IF( ISLC(64).EQ.0 ) THEN
                  IF( ITGX.EQ.0 ) CALL DFFGCW( IGC,N,NB )
                  IF( ITNX.EQ.0 ) CALL DFFNCW( IGC,N,NB )
                ENDIF
              ELSE
                IF( ITGX.EQ.0 ) CALL DFFGCW( IGC,N,NB )
                IF( ITNX.EQ.0 ) CALL DFFNCW( IGC,N,NB )
              ENDIF
  410       CONTINUE
            IF( ITGX.EQ.0 ) CALL DFFGWW( N,NB )
!
!---      Fluid flow non-zero flux boundary  ---
!
          ELSEIF( ITFX.NE.3 ) THEN
            IF( ITGX.EQ.0 ) CALL DRCVGW( N,NB )
            IF( ITLX.EQ.0 ) CALL DRCVLW( N,NB )
            IF( ITNX.EQ.0 ) CALL DRCVNW( N,NB )
            IF( ITLX.EQ.0 .AND. ISLC(45).EQ.0 ) CALL DFFLAW( N,NB )
            IF( ITLX.EQ.0 .AND. ISLC(32).EQ.0 ) CALL DFFLSW( N,NB )
            IF( ITLX.EQ.0 ) CALL DFFLWW( N,NB )
            DO 420 IGC = 1,NGC+2
              IF( IGC.EQ.1 ) THEN
!
!---            Iso-CO2 option  ---
!
                IF( ISLC(45).EQ.0 ) THEN
                  IF( ITGX.EQ.0 ) CALL DFFGCW( IGC,N,NB )
                  IF( ITNX.EQ.0 ) CALL DFFNCW( IGC,N,NB )
                ENDIF
              ELSEIF( IGC.EQ.2 ) THEN
!
!---            Iso-CH4 option  ---
!
                IF( ISLC(64).EQ.0 ) THEN
                  IF( ITGX.EQ.0 ) CALL DFFGCW( IGC,N,NB )
                  IF( ITNX.EQ.0 ) CALL DFFNCW( IGC,N,NB )
                ENDIF
              ELSE
                IF( ITGX.EQ.0 ) CALL DFFGCW( IGC,N,NB )
                IF( ITNX.EQ.0 ) CALL DFFNCW( IGC,N,NB )
              ENDIF
  420       CONTINUE
            IF( ITGX.EQ.0 ) CALL DFFGWW( N,NB )
          ENDIF
!
!---      Nonisothermal simulations  ---
!
          IF( ISLC(30).EQ.0 )  THEN
!
!---        Energy Neumann  ---
!
            IF( IBCT(1,NB).EQ.2 ) THEN
              DO 430 M = 1,ISVF
                UQ(M,NPX) = BCX(2)
  430         CONTINUE
!
!---        Energy outflow, inflow, or advective  ---
!
            ELSEIF( IBCT(1,NB).EQ.5 .OR. IBCT(1,NB).EQ.6 .OR.
     &         IBCT(1,NB).EQ.7 ) THEN
              CALL THLW_EOR( N,NB )
              CALL THGW_EOR( N,NB )
              CALL THNW_EOR( N,NB )
!
!---        Energy non-zero flux  ---
!
            ELSEIF( IBCT(1,NB).NE.3 ) THEN
              CALL THDW_EOR( N,NB )
              CALL THLW_EOR( N,NB )
              CALL THGW_EOR( N,NB )
              CALL THNW_EOR( N,NB )
            ENDIF
          ENDIF
!
!---    East boundary  ---
!
        ELSEIF( IBCD(NB).EQ.1 ) THEN
!
!---      Fluid flow Neumann boundary  ---
!
          IF( ITFX.EQ.2 .OR. ITFX.EQ.7 .OR. ITFX.EQ.9 ) THEN
            IF( BCX(3).LT.0.D+0 ) THEN
              DO 500 M = 1,ISVF
                MN = MNEG(M)
                IF( ITGX.EQ.0 ) UG(M,NQX) = SGB(MN,NB)*BCX(3)
                IF( ITLX.EQ.0 ) UL(M,NQX) = SLB(MN,NB)*BCX(3)
                IF( ITNX.EQ.0 ) UN(M,NQX) = SNB(MN,NB)*BCX(3)
  500         CONTINUE
            ELSE
              FMGX = RKG(2,N)/VISG(2,N)
              FMLX = RKL(1,2,N)/VISL(2,N)
              FMNX = RKN(2,N)/VISN(2,N)
              SFMX = FMGX + FMLX + FMNX 
              DO 502 M = 1,ISVF
                IF( ITGX.EQ.0 ) UG(M,NQX) = BCX(3)*FMGX/SFMX
                IF( ITLX.EQ.0 ) UL(M,NQX) = BCX(3)*FMLX/SFMX
                IF( ITNX.EQ.0 ) UN(M,NQX) = BCX(3)*FMNX/SFMX
  502         CONTINUE
            ENDIF
            IF( ITLX.EQ.0 .AND. ISLC(45).EQ.0 ) CALL DFFLAE( N,NB )
            IF( ITLX.EQ.0 .AND. ISLC(32).EQ.0 ) CALL DFFLSE( N,NB )
            IF( ITLX.EQ.0 ) CALL DFFLWE( N,NB )
            DO 510 IGC = 1,NGC+2
              IF( IGC.EQ.1 ) THEN
!
!---            Iso-CO2 option  ---
!
                IF( ISLC(45).EQ.0 ) THEN
                  IF( ITGX.EQ.0 ) CALL DFFGCE( IGC,N,NB )
                  IF( ITNX.EQ.0 ) CALL DFFNCE( IGC,N,NB )
                ENDIF
              ELSEIF( IGC.EQ.2 ) THEN
!
!---            Iso-CH4 option  ---
!
                IF( ISLC(64).EQ.0 ) THEN
                  IF( ITGX.EQ.0 ) CALL DFFGCE( IGC,N,NB )
                  IF( ITNX.EQ.0 ) CALL DFFNCE( IGC,N,NB )
                ENDIF
              ELSE
                IF( ITGX.EQ.0 ) CALL DFFGCE( IGC,N,NB )
                IF( ITNX.EQ.0 ) CALL DFFNCE( IGC,N,NB )
              ENDIF
  510       CONTINUE
            IF( ITGX.EQ.0 ) CALL DFFGWE( N,NB )
!
!---      Fluid flow non-zero flux boundary  ---
!
          ELSEIF( ITFX.NE.3 ) THEN
            IF( ITGX.EQ.0 ) CALL DRCVGE( N,NB )
            IF( ITLX.EQ.0 ) CALL DRCVLE( N,NB )
            IF( ITNX.EQ.0 ) CALL DRCVNE( N,NB )
            IF( ITLX.EQ.0 .AND. ISLC(45).EQ.0 ) CALL DFFLAE( N,NB )
            IF( ITLX.EQ.0 .AND. ISLC(32).EQ.0 ) CALL DFFLSE( N,NB )
            IF( ITLX.EQ.0 ) CALL DFFLWE( N,NB )
            DO 520 IGC = 1,NGC+2
              IF( IGC.EQ.1 ) THEN
!
!---            Iso-CO2 option  ---
!
                IF( ISLC(45).EQ.0 ) THEN
                  IF( ITGX.EQ.0 ) CALL DFFGCE( IGC,N,NB )
                  IF( ITNX.EQ.0 ) CALL DFFNCE( IGC,N,NB )
                ENDIF
              ELSEIF( IGC.EQ.2 ) THEN
!
!---            Iso-CH4 option  ---
!
                IF( ISLC(64).EQ.0 ) THEN
                  IF( ITGX.EQ.0 ) CALL DFFGCE( IGC,N,NB )
                  IF( ITNX.EQ.0 ) CALL DFFNCE( IGC,N,NB )
                ENDIF
              ELSE
                IF( ITGX.EQ.0 ) CALL DFFGCE( IGC,N,NB )
                IF( ITNX.EQ.0 ) CALL DFFNCE( IGC,N,NB )
              ENDIF
  520       CONTINUE
            IF( ITGX.EQ.0 ) CALL DFFGWE( N,NB )
          ENDIF
!
!---      Nonisothermal simulations  ---
!
          IF( ISLC(30).EQ.0 )  THEN
!
!---        Energy Neumann  ---
!
            IF( IBCT(1,NB).EQ.2 ) THEN
              DO 530 M = 1,ISVF
                UQ(M,NQX) = BCX(2)
  530         CONTINUE
!
!---        Energy outflow, inflow, or advective  ---
!
            ELSEIF( IBCT(1,NB).EQ.5 .OR. IBCT(1,NB).EQ.6 .OR.
     &         IBCT(1,NB).EQ.7 ) THEN
              CALL THLE_EOR( N,NB )
              CALL THGE_EOR( N,NB )
              CALL THNE_EOR( N,NB )
!
!---        Energy non-zero flux  ---
!
            ELSEIF( IBCT(1,NB).NE.3 ) THEN
              CALL THDE_EOR( N,NB )
              CALL THLE_EOR( N,NB )
              CALL THGE_EOR( N,NB )
              CALL THNE_EOR( N,NB )
            ENDIF
          ENDIF
!
!---    North boundary
!
        ELSEIF( IBCD(NB).EQ.2 ) THEN
!
!---      Fluid flow Neumann boundary  ---
!
          IF( ITFX.EQ.2 .OR. ITFX.EQ.7 .OR. ITFX.EQ.9 ) THEN
            IF( BCX(3).LT.0.D+0 ) THEN
              DO 600 M = 1,ISVF
                MN = MNEG(M)
                IF( ITGX.EQ.0 ) VG(M,NQY) = SGB(MN,NB)*BCX(3)
                IF( ITLX.EQ.0 ) VL(M,NQY) = SLB(MN,NB)*BCX(3)
                IF( ITNX.EQ.0 ) VN(M,NQY) = SNB(MN,NB)*BCX(3)
  600         CONTINUE
            ELSE
              FMGX = RKG(2,N)/VISG(2,N)
              FMLX = RKL(2,2,N)/VISL(2,N)
              FMNX = RKN(2,N)/VISN(2,N)
              SFMX = FMGX + FMLX + FMNX 
              DO 602 M = 1,ISVF
                IF( ITGX.EQ.0 ) VG(M,NQY) = BCX(3)*FMGX/SFMX
                IF( ITLX.EQ.0 ) VL(M,NQY) = BCX(3)*FMLX/SFMX
                IF( ITNX.EQ.0 ) VN(M,NQY) = BCX(3)*FMNX/SFMX
  602         CONTINUE
            ENDIF
            IF( ITLX.EQ.0 .AND. ISLC(45).EQ.0 ) CALL DFFLAN( N,NB )
            IF( ITLX.EQ.0 .AND. ISLC(32).EQ.0 ) CALL DFFLSN( N,NB )
            IF( ITLX.EQ.0 ) CALL DFFLWN( N,NB )
            DO 610 IGC = 1,NGC+2
              IF( IGC.EQ.1 ) THEN
!
!---            Iso-CO2 option  ---
!
                IF( ISLC(45).EQ.0 ) THEN
                  IF( ITGX.EQ.0 ) CALL DFFGCN( IGC,N,NB )
                  IF( ITNX.EQ.0 ) CALL DFFNCN( IGC,N,NB )
                ENDIF
              ELSEIF( IGC.EQ.2 ) THEN
!
!---            Iso-CH4 option  ---
!
                IF( ISLC(64).EQ.0 ) THEN
                  IF( ITGX.EQ.0 ) CALL DFFGCN( IGC,N,NB )
                  IF( ITNX.EQ.0 ) CALL DFFNCN( IGC,N,NB )
                ENDIF
              ELSE
                IF( ITGX.EQ.0 ) CALL DFFGCN( IGC,N,NB )
                IF( ITNX.EQ.0 ) CALL DFFNCN( IGC,N,NB )
              ENDIF
  610       CONTINUE
            IF( ITGX.EQ.0 ) CALL DFFGWN( N,NB )
!
!---      Fluid flow non-zero flux boundary  ---
!
          ELSEIF( ITFX.NE.3 ) THEN
            IF( ITGX.EQ.0 ) CALL DRCVGN( N,NB )
            IF( ITLX.EQ.0 ) CALL DRCVLN( N,NB )
            IF( ITNX.EQ.0 ) CALL DRCVNN( N,NB )
            IF( ITLX.EQ.0 .AND. ISLC(45).EQ.0 ) CALL DFFLAN( N,NB )
            IF( ITLX.EQ.0 .AND. ISLC(32).EQ.0 ) CALL DFFLSN( N,NB )
            IF( ITLX.EQ.0 ) CALL DFFLWN( N,NB )
            DO 620 IGC = 1,NGC+2
              IF( IGC.EQ.1 ) THEN
!
!---            Iso-CO2 option  ---
!
                IF( ISLC(45).EQ.0 ) THEN
                  IF( ITGX.EQ.0 ) CALL DFFGCN( IGC,N,NB )
                  IF( ITNX.EQ.0 ) CALL DFFNCN( IGC,N,NB )
                ENDIF
              ELSEIF( IGC.EQ.2 ) THEN
!
!---            Iso-CH4 option  ---
!
                IF( ISLC(64).EQ.0 ) THEN
                  IF( ITGX.EQ.0 ) CALL DFFGCN( IGC,N,NB )
                  IF( ITNX.EQ.0 ) CALL DFFNCN( IGC,N,NB )
                ENDIF
              ELSE
                IF( ITGX.EQ.0 ) CALL DFFGCN( IGC,N,NB )
                IF( ITNX.EQ.0 ) CALL DFFNCN( IGC,N,NB )
              ENDIF
  620       CONTINUE
            IF( ITGX.EQ.0 ) CALL DFFGWN( N,NB )
          ENDIF
!
!---      Nonisothermal simulations  ---
!
          IF( ISLC(30).EQ.0 )  THEN
!
!---        Energy Neumann  ---
!
            IF( IBCT(1,NB).EQ.2 ) THEN
              DO 630 M = 1,ISVF
                VQ(M,NQY) = BCX(2)
  630         CONTINUE
!
!---        Energy outflow, inflow, or advective  ---
!
            ELSEIF( IBCT(1,NB).EQ.5 .OR. IBCT(1,NB).EQ.6 .OR.
     &         IBCT(1,NB).EQ.7 ) THEN
              CALL THLN_EOR( N,NB )
              CALL THGN_EOR( N,NB )
              CALL THNN_EOR( N,NB )
!
!---        Energy non-zero flux  ---
!
            ELSEIF( IBCT(1,NB).NE.3 ) THEN
              CALL THDN_EOR( N,NB )
              CALL THLN_EOR( N,NB )
              CALL THGN_EOR( N,NB )
              CALL THNN_EOR( N,NB )
            ENDIF
          ENDIF
!
!---    Top boundary  ---
!
        ELSEIF( IBCD(NB).EQ.3 ) THEN
!
!---      Fluid flow Neumann boundary  ---
!
          IF( ITFX.EQ.2 .OR. ITFX.EQ.7 .OR. ITFX.EQ.9 ) THEN
            IF( BCX(3).GT.0.D+0 ) THEN
              DO 700 M = 1,ISVF
                MN = MNEG(M)
                IF( ITGX.EQ.0 ) WG(M,NQZ) = SGB(MN,NB)*BCX(3)
                IF( ITLX.EQ.0 ) WL(M,NQZ) = SLB(MN,NB)*BCX(3)
                IF( ITNX.EQ.0 ) WN(M,NQZ) = SNB(MN,NB)*BCX(3)
  700         CONTINUE
            ELSE
              FMGX = RKG(2,N)/VISG(2,N)
              FMLX = RKL(3,2,N)/VISL(2,N)
              FMNX = RKN(2,N)/VISN(2,N)
              SFMX = FMGX + FMLX + FMNX 
              DO 702 M = 1,ISVF
                IF( ITGX.EQ.0 ) WG(M,NQZ) = BCX(3)*FMGX/SFMX
                IF( ITLX.EQ.0 ) WL(M,NQZ) = BCX(3)*FMLX/SFMX
                IF( ITNX.EQ.0 ) WN(M,NQZ) = BCX(3)*FMNX/SFMX
  702         CONTINUE
            ENDIF
            IF( ITLX.EQ.0 .AND. ISLC(45).EQ.0 ) CALL DFFLAT( N,NB )
            IF( ITLX.EQ.0 .AND. ISLC(32).EQ.0 ) CALL DFFLST( N,NB )
            IF( ITLX.EQ.0 ) CALL DFFLWT( N,NB )
            DO 710 IGC = 1,NGC+2
              IF( IGC.EQ.1 ) THEN
!
!---            Iso-CO2 option  ---
!
                IF( ISLC(45).EQ.0 ) THEN
                  IF( ITGX.EQ.0 ) CALL DFFGCT( IGC,N,NB )
                  IF( ITNX.EQ.0 ) CALL DFFNCT( IGC,N,NB )
                ENDIF
              ELSEIF( IGC.EQ.2 ) THEN
!
!---            Iso-CH4 option  ---
!
                IF( ISLC(64).EQ.0 ) THEN
                  IF( ITGX.EQ.0 ) CALL DFFGCT( IGC,N,NB )
                  IF( ITNX.EQ.0 ) CALL DFFNCT( IGC,N,NB )
                ENDIF
              ELSE
                IF( ITGX.EQ.0 ) CALL DFFGCT( IGC,N,NB )
                IF( ITNX.EQ.0 ) CALL DFFNCT( IGC,N,NB )
              ENDIF
  710       CONTINUE
            IF( ITGX.EQ.0 ) CALL DFFGWT( N,NB )
!
!---      Fluid flow non-zero flux boundary  ---
!
          ELSEIF( ITFX.NE.3 ) THEN
            IF( ITGX.EQ.0 ) CALL DRCVGT( N,NB )
            IF( ITLX.EQ.0 ) CALL DRCVLT( N,NB )
            IF( ITNX.EQ.0 ) CALL DRCVNT( N,NB )
            IF( ITLX.EQ.0 .AND. ISLC(45).EQ.0 ) CALL DFFLAT( N,NB )
            IF( ITLX.EQ.0 .AND. ISLC(32).EQ.0 ) CALL DFFLST( N,NB )
            IF( ITLX.EQ.0 ) CALL DFFLWT( N,NB )
            DO 720 IGC = 1,NGC+2
              IF( IGC.EQ.1 ) THEN
!
!---            Iso-CO2 option  ---
!
                IF( ISLC(45).EQ.0 ) THEN
                  IF( ITGX.EQ.0 ) CALL DFFGCT( IGC,N,NB )
                  IF( ITNX.EQ.0 ) CALL DFFNCT( IGC,N,NB )
                ENDIF
              ELSEIF( IGC.EQ.2 ) THEN
!
!---            Iso-CH4 option  ---
!
                IF( ISLC(64).EQ.0 ) THEN
                  IF( ITGX.EQ.0 ) CALL DFFGCT( IGC,N,NB )
                  IF( ITNX.EQ.0 ) CALL DFFNCT( IGC,N,NB )
                ENDIF
              ELSE
                IF( ITGX.EQ.0 ) CALL DFFGCT( IGC,N,NB )
                IF( ITNX.EQ.0 ) CALL DFFNCT( IGC,N,NB )
              ENDIF
  720       CONTINUE
            IF( ITGX.EQ.0 ) CALL DFFGWT( N,NB )
          ENDIF
!
!---      Nonisothermal simulations  ---
!
          IF( ISLC(30).EQ.0 )  THEN
!
!---        Energy Neumann  ---
!
            IF( IBCT(1,NB).EQ.2 ) THEN
              DO 730 M = 1,ISVF
                WQ(M,NQZ) = BCX(2)
  730         CONTINUE
!
!---        Energy outflow, inflow, or advective  ---
!
            ELSEIF( IBCT(1,NB).EQ.5 .OR. IBCT(1,NB).EQ.6 .OR.
     &         IBCT(1,NB).EQ.7 ) THEN
              CALL THLT_EOR( N,NB )
              CALL THGT_EOR( N,NB )
              CALL THNT_EOR( N,NB )
!
!---        Energy non-zero flux  ---
!
            ELSEIF( IBCT(1,NB).NE.3 ) THEN
              CALL THDT_EOR( N,NB )
              CALL THLT_EOR( N,NB )
              CALL THGT_EOR( N,NB )
              CALL THNT_EOR( N,NB )
            ENDIF
          ENDIF
        ENDIF
  800 CONTINUE
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of BCF_EOR group
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE BCJ_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Modify the Jacobian matrix for boundary conditions
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, March 17, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GRID
      USE CONST
      USE BCV
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//BCJ_EOR'
!
!---  Loop over boundary conditions  ---
!
      DO 100 NB = 1,NBC
        TMZ = TM
        IF( NSTEP-NRST.EQ.0 ) TMZ = TMZ*(1.D+0+EPSL)+EPSL
        MB = IBCIN(NB)
        IF( IBCC(NB).EQ.1 ) TMZ = MOD( TM,BC(1,IBCM(NB),MB) )
        IF( TMZ.LE.BC(1,1,MB) ) GOTO 100
        IF( IBCM(NB).GT.1 .AND. TMZ.GT.BC(1,IBCM(NB),MB) ) GOTO 100
        N = IBCN(NB)
        IF( IXP(N).EQ.0 ) GOTO 100
        NPX = NSX(N)
        NPY = NSY(N)
        NPZ = NSZ(N)
        NQX = NPX + 1
        NQY = NPY + IFLD
        NQZ = NPZ + IJFLD
        ITFX = MOD(IBCT(2,NB),10)
        ITGX = MOD(IBCT(2,NB),100)/10
        ITLX = MOD(IBCT(2,NB),1000)/100
        ITNX = MOD(IBCT(2,NB),10000)/1000
!
!---    Bottom boundary  ---
!
        IF( IBCD(NB).EQ.-3 ) THEN
!
!---      Energy  ---
!
          IF( IBCT(1,NB).NE.3 ) THEN
            IF( ISLC(30).EQ.0 ) CALL JCBTB_EOR( N,NB,NPZ )
          ENDIF
!
!---      Fluid flow  ---
!
          IF( ITFX.NE.3 ) THEN
!
!---        Water mass  ---
!
            CALL JCBWB_EOR( N,NB,NPZ )
!
!---        Petroleum component mass  ---
!
            DO 10 IGC = 1,NGC+2
              IF( IGC.EQ.1 ) THEN
!
!---            Iso-CO2 option  ---
!
                IF( ISLC(45).EQ.0 ) CALL JCBCB_EOR( IGC,N,NB,NPZ )
              ELSEIF( IGC.EQ.2 ) THEN
!
!---            Iso-CH4 option  ---
!
                IF( ISLC(64).EQ.0 ) CALL JCBCB_EOR( IGC,N,NB,NPZ )
              ELSE
                CALL JCBCB_EOR( IGC,N,NB,NPZ )
              ENDIF
  10        CONTINUE
!
!---        Salt mass  ---
!
            IF( ISLC(32).EQ.0 ) CALL JCBSB_EOR( N,NB,NPZ )
          ENDIF
!
!---    South boundary  ---
!
        ELSEIF( IBCD(NB).EQ.-2 ) THEN
!
!---      Energy  ---
!
          IF( IBCT(1,NB).NE.3 ) THEN
            IF( ISLC(30).EQ.0 ) CALL JCBTS_EOR( N,NB,NPY )
          ENDIF
!
!---      Fluid flow  ---
!
          IF( ITFX.NE.3 ) THEN
!
!---        Water mass  ---
!
            CALL JCBWS_EOR( N,NB,NPY )
!
!---        Petroleum component mass  ---
!
            DO 20 IGC = 1,NGC+2
              IF( IGC.EQ.1 ) THEN
!
!---            Iso-CO2 option  ---
!
                IF( ISLC(45).EQ.0 ) CALL JCBCS_EOR( IGC,N,NB,NPY )
              ELSEIF( IGC.EQ.2 ) THEN
!
!---            Iso-CH4 option  ---
!
                IF( ISLC(64).EQ.0 ) CALL JCBCS_EOR( IGC,N,NB,NPY )
              ELSE
                CALL JCBCS_EOR( IGC,N,NB,NPY )
              ENDIF
  20        CONTINUE
!
!---        Salt mass  ---
!
            IF( ISLC(32).EQ.0 ) CALL JCBSS_EOR( N,NB,NPY )
          ENDIF
!
!---    West boundary  ---
!
        ELSEIF( IBCD(NB).EQ.-1 ) THEN
!
!---      Energy  ---
!
          IF( IBCT(1,NB).NE.3 ) THEN
            IF( ISLC(30).EQ.0 ) CALL JCBTW_EOR( N,NB,NPX )
          ENDIF
!
!---      Fluid flow  ---
!
          IF( ITFX.NE.3 ) THEN
!
!---        Water mass  ---
!
            CALL JCBWW_EOR( N,NB,NPX )
!
!---        Petroleum component mass  ---
!
            DO 30 IGC = 1,NGC+2
              IF( IGC.EQ.1 ) THEN
!
!---            Iso-CO2 option  ---
!
                IF( ISLC(45).EQ.0 ) CALL JCBCW_EOR( IGC,N,NB,NPX )
              ELSEIF( IGC.EQ.2 ) THEN
!
!---            Iso-CH4 option  ---
!
                IF( ISLC(64).EQ.0 ) CALL JCBCW_EOR( IGC,N,NB,NPX )
              ELSE
                CALL JCBCW_EOR( IGC,N,NB,NPX )
              ENDIF
  30        CONTINUE
!
!---        Salt mass  ---
!
            IF( ISLC(32).EQ.0 ) CALL JCBSW_EOR( N,NB,NPX )
          ENDIF
!
!---    East boundary  ---
!
        ELSEIF( IBCD(NB).EQ.1 ) THEN
!
!---      Energy  ---
!
          IF( IBCT(1,NB).NE.3 ) THEN
            IF( ISLC(30).EQ.0 ) CALL JCBTE_EOR( N,NB,NQX )
          ENDIF
!
!---      Fluid flow  ---
!
          IF( ITFX.NE.3 ) THEN
!
!---        Water mass  ---
!
            CALL JCBWE_EOR( N,NB,NQX )
!
!---        Petroleum component mass  ---
!
            DO 40 IGC = 1,NGC+2
              IF( IGC.EQ.1 ) THEN
!
!---            Iso-CO2 option  ---
!
                IF( ISLC(45).EQ.0 ) CALL JCBCE_EOR( IGC,N,NB,NQX )
              ELSEIF( IGC.EQ.2 ) THEN
!
!---            Iso-CH4 option  ---
!
                IF( ISLC(64).EQ.0 ) CALL JCBCE_EOR( IGC,N,NB,NQX )
              ELSE
                CALL JCBCE_EOR( IGC,N,NB,NQX )
              ENDIF
  40        CONTINUE
!
!---        Salt mass  ---
!
            IF( ISLC(32).EQ.0 ) CALL JCBSE_EOR( N,NB,NQX )
          ENDIF
!
!---    North boundary  ---
!
        ELSEIF( IBCD(NB).EQ.2 ) THEN
!
!---      Energy  ---
!
          IF( IBCT(1,NB).NE.3 ) THEN
            IF( ISLC(30).EQ.0 ) CALL JCBTN_EOR( N,NB,NQY )
          ENDIF
!
!---      Fluid flow  ---
!
          IF( ITFX.NE.3 ) THEN
!
!---        Water mass  ---
!
            CALL JCBWN_EOR( N,NB,NQY )
!
!---        Petroleum component mass  ---
!
            DO 50 IGC = 1,NGC+2
              IF( IGC.EQ.1 ) THEN
!
!---            Iso-CO2 option  ---
!
                IF( ISLC(45).EQ.0 ) CALL JCBCN_EOR( IGC,N,NB,NQY )
              ELSEIF( IGC.EQ.2 ) THEN
!
!---            Iso-CH4 option  ---
!
                IF( ISLC(64).EQ.0 ) CALL JCBCN_EOR( IGC,N,NB,NQY )
              ELSE
                CALL JCBCN_EOR( IGC,N,NB,NQY )
              ENDIF
  50        CONTINUE
!
!---        Salt mass  ---
!
            IF( ISLC(32).EQ.0 ) CALL JCBSN_EOR( N,NB,NQY )
          ENDIF
!
!---    Top boundary  ---
!
        ELSEIF( IBCD(NB).EQ.3 ) THEN
!
!---      Energy  ---
!
          IF( IBCT(1,NB).NE.3 ) THEN
            IF( ISLC(30).EQ.0 ) CALL JCBTT_EOR( N,NB,NQZ )
          ENDIF
!
!---      Fluid flow  ---
!
          IF( ITFX.NE.3 ) THEN
!
!---        Water mass  ---
!
            CALL JCBWT_EOR( N,NB,NQZ )
!
!---        Petroleum component mass  ---
!
            DO 60 IGC = 1,NGC+2
              IF( IGC.EQ.1 ) THEN
!
!---            Iso-CO2 option  ---
!
                IF( ISLC(45).EQ.0 ) CALL JCBCT_EOR( IGC,N,NB,NQZ )
              ELSEIF( IGC.EQ.2 ) THEN
!
!---            Iso-CH4 option  ---
!
                IF( ISLC(64).EQ.0 ) CALL JCBCT_EOR( IGC,N,NB,NQZ )
              ELSE
                CALL JCBCT_EOR( IGC,N,NB,NQZ )
              ENDIF
  60        CONTINUE
!
!---        Salt mass  ---
!
            IF( ISLC(32).EQ.0 ) CALL JCBST_EOR( N,NB,NQZ )
          ENDIF
        ENDIF
  100 CONTINUE
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of BCJ_EOR group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE BCP_BO
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Compute saturation, relative permeability and thermodynamic
!     properties for boundary surfaces for the black-oil option.
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, 20 May 2014
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE JACOB
      USE GRID
      USE GLB_PAR
      USE FDVP
      USE DUAL_POR
      USE CONST
      USE BCVS
      USE BCVP
      USE BCVN
      USE BCVGC
      USE BCVG
      USE BCV
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 BCX(LBCV)
      REAL*8 TMCX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//BCP_BO'
!
!---  Assign values for initial condition type boundary conditions  ---
!
      IF( NSTEP-NRST.LE.1 .AND. NITER.LE.1 ) THEN
       DO 50 NB = 1,NBC
        ITFX = MOD(IBCT(2,NB),10)
        IF( IBCT(1,NB).EQ.4 .OR. ITFX.EQ.4 ) THEN
          N = IBCN(NB)
          I = ID(N)
          J = JD(N)
          K = KD(N)
          I1 = I+1
          J1 = J+1
          K1 = K+1
          IF( IBCD(NB).EQ.-3 ) THEN
            DB = 0.5D+0*DZGF(N)
            GB = GRVZ(NSZ(N))*DB
          ELSEIF( IBCD(NB).EQ.-2 ) THEN
            DB = 0.5D+0*DYGF(N)*RP(ID(N))
            GB = GRVY(NSY(N))*DB
          ELSEIF( IBCD(NB).EQ.-1 ) THEN
            DB = 0.5D+0*DXGF(N)
            GB = GRVX(NSX(N))*DB
          ELSEIF( IBCD(NB).EQ.1 ) THEN
            DB = -0.5D+0*DXGF(N)
            GB = GRVX(NSX(N)+1)*DB
          ELSEIF( IBCD(NB).EQ.2 ) THEN
            DB = -0.5D+0*DYGF(N)*RP(ID(N))
            GB = GRVY(NSY(N)+IFLD)*DB
          ELSEIF( IBCD(NB).EQ.3 ) THEN
            DB = -0.5D+0*DZGF(N)
            GB = GRVZ(NSZ(N)+IJFLD)*DB
          ENDIF
        ENDIF
!
!---    Fluid flow initial conditions  ---
!
        IF( ITFX.EQ.4 ) THEN
          PLB(1,NB) = PL(2,N) + RHOL(2,N)*GB
          PGB(1,NB) = PG(2,N) + RHOG(2,N)*GB
          PNB(1,NB) = PN(2,N) + RHON(2,N)*GB
        ENDIF
   50  CONTINUE
      ENDIF
!
!---  Loop over boundary conditions  ---
!
      DO 400 NB = 1,NBC
        TMZ = TM
        IF( NSTEP-NRST.EQ.0 ) TMZ = TMZ*(1.D+0+EPSL)+EPSL
        MB = IBCIN(NB)
        IF( IBCC(NB).EQ.1 ) TMZ = MOD( TM,BC(1,IBCM(NB),MB) )
        IF( TMZ.LE.BC(1,1,MB) ) GOTO 400
        ITFX = MOD(IBCT(2,NB),10)
        ITGX = MOD(IBCT(2,NB),100)/10
        ITLX = MOD(IBCT(2,NB),1000)/100
        ITNX = MOD(IBCT(2,NB),10000)/1000
!
!---  Assign local boundary condition variables  ---
!
        IF( IBCM(NB).EQ.1 ) THEN
          DO 80 N = 1,LBCV
            BCX(N) = BC(N,1,MB)
   80     CONTINUE
        ELSE
          DO 100 M = 2,IBCM(NB)
            IF( TMZ.LE.BC(1,M,MB) ) THEN
             TDBC = (BC(1,M,MB)-BC(1,M-1,MB))
             DTBC = MIN( BC(1,M,MB)-TMZ,DT )
             TFBC = (TMZ-BC(1,M-1,MB))/TDBC
             DO 90 N = 1,LBCV
               BCX(N) = BC(N,M-1,MB) + TFBC*(BC(N,M,MB)-BC(N,M-1,MB))
   90        CONTINUE
!
!---         Fluid flow boundary  ---
!
             IF( ITFX.EQ.2 .OR. ITFX.EQ.7 .OR. ITFX.EQ.9 ) THEN
               BCX(3) = BCX(3)-5.D-1*DTBC*(BC(3,M,MB)-BC(3,M-1,MB))/TDBC
             ENDIF
             GOTO 110
            ENDIF
  100     CONTINUE
          GOTO 400
        ENDIF
  110   CONTINUE
!
!---    Initial condition boundary condition  ---
!
        IF( IBCT(1,NB).EQ.4 ) BCX(2) = TB(1,NB)
        IF( ITFX.EQ.4 ) 
     &    BCX(3) = MAX( PGB(1,NB),PLB(1,NB),PNB(1,NB) )
        N = IBCN(NB)
        N_DB = -NB
        IBD = ABS(IBCD(NB))
        IZN = IZ(N)
!
!---    Boundary Direction  ---
!
        I = ID(N)
        J = JD(N)
        K = KD(N)
        I1 = I+1
        J1 = J+1
        K1 = K+1
        IF( IBCD(NB).EQ.-3 ) THEN
          DB = 0.5D+0*DZGF(N)
          GB = GRVZ(NSZ(N))*DB
        ELSEIF( IBCD(NB).EQ.-2 ) THEN
          DB = 0.5D+0*DYGF(N)*RP(ID(N))
          GB = GRVY(NSY(N))*DB
        ELSEIF( IBCD(NB).EQ.-1 ) THEN
          DB = 0.5D+0*DXGF(N)
          GB = GRVX(NSX(N))*DB
        ELSEIF( IBCD(NB).EQ.1 ) THEN
          DB = -0.5D+0*DXGF(N)
          GB = GRVX(NSX(N)+1)*DB
        ELSEIF( IBCD(NB).EQ.2 ) THEN
          DB = -0.5D+0*DYGF(N)*RP(ID(N))
          GB = GRVY(NSY(N)+IFLD)*DB
        ELSEIF( IBCD(NB).EQ.3 ) THEN
          DB = -0.5D+0*DZGF(N)
          GB = GRVZ(NSZ(N)+IJFLD)*DB
        ENDIF
!
!---    Loop over secondary variable indices  ---
!
        DO 300 M = 2,ISVC+2
          TB(M,NB) = T(M,N)
          PLB(M,NB) = PL(M,N)
          PGB(M,NB) = PG(M,N)
          PNB(M,NB) = PN(M,N)
          PX = MAX( PLB(M,NB),PGB(M,NB),PNB(M,NB) ) + PATM
          TKX = TB(M,NB) + TABS
!
!---      Boundary condition state #1  ---
!
!         SL = 1.0
!         SG+SN = 0.0
!
!         Declared variables:
!
!         BCX(5) - aqueous salt relative saturation, or
!                  aqueous salt mass fraction
!
          IF( IBCT(3,NB).EQ.1 ) THEN
            SGB(M,NB) = 0.D+0
            SLB(M,NB) = 1.D+0
            SNB(M,NB) = 0.D+0
!
!---        Fluid Flow: Dirichlet, initial condition, Dirichlet-inflow,
!           Dirichlet-outflow, or hydraulic gradient  ---
!
            IF( ITFX.EQ.1 .OR. ITFX.EQ.4 .OR. ITFX.EQ.5 .OR.   
     &        ITFX.EQ.6 .OR. ITFX.EQ.8 ) THEN
              PLB(M,NB) = BCX(3)
            ENDIF
            PVAB(M,NB) = BCX(4)
            TMSX = BCX(5)
            PX = PL(M,NB) + PATM
            CALL BO_IC1( PX,RHOLB(M,NB),TMSX,TB(M,NB),XLSB(M,NB),
     &        XLWB(M,NB),YLSB(M,NB),IBCT(5,NB) )
!
!---        Porous-media porosity  ---
!
            CALL PORSTY( N,PX,PCMP(N),PORDB(M,NB),PORTB(M,NB) )
            PORDB(M,NB) = MAX( PORDB(M,NB),EPSL )
            PORTB(M,NB) = MAX( PORTB(M,NB),PORDB(M,NB) )
!
!---        Equilivalent continuum or dual porosity fracture and 
!           matrix saturations assuming thermodynamic equilibrium  ---
!
            IF( ISLC(11).NE.0 ) THEN
              CALL PORSTY_M( IZN,PX,PCMP(N),PORDB_MX,PORTB_MX )
              PORDB_MX = MAX( PORDB_MX,EPSL )
              PORTB_MX = MAX( PORTB_MX,PORDB_MX )
              EPORFX = PORDB(M,N)*FRAC_P(7,IZN)
              EPORMX = PORDB_MX*(1.D+0-FRAC_P(7,IZN))
              CALL CAP_EOR_EC( EPORFX,EPORMX,SGB(M,NB),SLB(M,NB),
     &          SNB(M,NB),SGB_FX,SLB_FX,SNB_FX,
     &          SGB_MX,SLB_MX,SNB_MX,CPGTX,CPNLX,IZN )
              IF( ISLC(11).EQ.1 ) THEN
                SGB(M,NB) = SGB_FX
                SLB(M,NB) = SLB_FX
                SNB(M,NB) = SNB_FX
              ENDIF
            ELSE
              CALL CAP_EOR( SGB(M,NB),SLB(M,NB),SNB(M,NB),
     &          CPGTX,CPNLX,IZN )
            ENDIF
            PNB(M,NB) = PLB(M,NB) + CPNLX
            PGB(M,NB) = MAX( PLB(M,NB),PNB(M,NB) ) + CPGTX
!
!---        Flash calculations  ---
!
            IZMCX = 0
            CALL BO_PC1( PORDB(M,NB),POSMBX,PVWB(M,NB),PX,
     &        RHOGB(M,NB),RHOLB(M,NB),RHONB(M,NB),SGB(M,NB),SLB(M,NB),
     &        SNB(M,NB),TMSX,TB(M,NB),VOL(N),XGCB(1,M,NB),
     &        XGWB(M,NB),XLSB(M,NB),XLWB(M,NB),XNCB(1,M,NB),YLSB(M,NB) )
!
!---      Boundary condition state #2  ---
!
!         SG >= 0.0
!         SL > 0.0
!         SN > 0.0
!
!         Declared variables:
!
!         BCX(4) - aqueous saturation
!         BCX(5) - aqueous salt relative saturation, or
!                  aqueous salt mass fraction
!         BCX(8) - gas saturation
!         BCX(9) - gas-oil ratio (m^3/m^3)
!
          ELSEIF( IBCT(3,NB).EQ.2 ) THEN
!
!---        Fluid Flow: Dirichlet, initial condition, Dirichlet-inflow,
!           Dirichlet-outflow, or hydraulic gradient  ---
!
            IF( ITFX.EQ.1 .OR. ITFX.EQ.4 .OR. ITFX.EQ.5 .OR.   
     &        ITFX.EQ.6 .OR. ITFX.EQ.8 ) THEN
              PX = BCX(3) + PATM
            ENDIF
            SLB(M,NB) = BCX(4)
            TMSX = BCX(5)
            SGB(M,NB) = BCX(8)
            POSMBX = BCX(9)
            SNB(M,NB) = MAX( 1.D+0-SLB(M,NB)-SGB(M,NB),0.D+0 )
            CALL BO_IC2( POSMBX,PX,RHOGB(M,NB),RHOLB(M,NB),RHONB(M,NB),
     &        SLB(M,NB),TMSX,TB(M,NB),XGCB(1,M,NB),XGWB(M,NB),
     &        XLSB(M,NB),XLWB(M,NB),XNCB(1,M,NB),YLSB(M,NB),
     &        IBCT(5,NB),IZN )
!
!---        Porous-media porosity  ---
!
            CALL PORSTY( N,PX,PCMP(N),PORDB(M,NB),PORTB(M,NB) )
            PORDB(M,NB) = MAX( PORDB(M,NB),EPSL )
            PORTB(M,NB) = MAX( PORTB(M,NB),PORDB(M,NB) )
!
!---        Equilivalent continuum or dual porosity fracture and 
!           matrix saturations assuming thermodynamic equilibrium  ---
!
            IF( ISLC(11).NE.0 ) THEN
              CALL PORSTY_M( IZN,PX,PCMP(N),PORDB_MX,PORTB_MX )
              PORDB_MX = MAX( PORDB_MX,EPSL )
              PORTB_MX = MAX( PORTB_MX,PORDB_MX )
              EPORFX = PORDB(M,N)*FRAC_P(7,IZN)
              EPORMX = PORDB_MX*(1.D+0-FRAC_P(7,IZN))
              CALL CAP_EOR_EC( EPORFX,EPORMX,SGB(M,NB),SLB(M,NB),
     &          SNB(M,NB),SGB_FX,SLB_FX,SNB_FX,
     &          SGB_MX,SLB_MX,SNB_MX,CPGTX,CPNLX,IZN )
              IF( ISLC(11).EQ.1 ) THEN
                SGB(M,NB) = SGB_FX
                SLB(M,NB) = SLB_FX
                SNB(M,NB) = SNB_FX
              ENDIF
            ELSE
              CALL CAP_EOR( SGB(M,NB),SLB(M,NB),SNB(M,NB),
     &          CPGTX,CPNLX,IZN )
            ENDIF
            IF( SGB(M,NB).LT.EPSL ) THEN
              IF( CPNLX.GE.0.D+0 ) THEN
                PNB(M,NB) = PX - PATM
                PLB(M,NB) = PNB(M,NB) - CPNLX
                PGB(M,NB) = PNB(M,NB) + CPGTX
              ELSE
                PLB(M,NB) = PX - PATM
                PNB(M,NB) = PLB(M,NB) + CPNLX
                PGB(M,NB) = PLB(M,NB) + CPGTX
              ENDIF
!
!---          Flash calculations  ---
!
              IZMCX = 0
              CALL BO_PC2( PORDB(M,NB),POSMBX,PVWB(M,NB),PX,
     &          RHOGB(M,NB),RHOLB(M,NB),RHONB(M,NB),SGB(M,NB),SLB(M,NB),
     &          SNB(M,NB),TMCX,TMSX,TB(M,NB),VOL(N),XGCB(1,M,NB),
     &          XGWB(M,NB),XLSB(M,NB),XLWB(M,NB),XNCB(1,M,NB),
     &          YLSB(M,NB),IZN )
            ELSE
              PGB(M,NB) = PX - PATM
              IF( CPNLX.GE.0.D+0 ) THEN
                PNB(M,NB) = PGB(M,NB) - CPGTX
                PLB(M,NB) = PNB(M,NB) - CPNLX
              ELSE
                PLB(M,NB) = PGB(M,NB) - CPGTX
                PNB(M,NB) = PLB(M,NB) + CPNLX
              ENDIF
!
!---          Flash calculations  ---
!
              IZMCX = 0
              CALL BO_PC3( PORDB(M,NB),POSMBX,PVWB(M,NB),PX,
     &          RHOGB(M,NB),RHOLB(M,NB),RHONB(M,NB),SGB(M,NB),SLB(M,NB),
     &          SNB(M,NB),TMCX,TMSX,TB(M,NB),VOL(N),XGCB(1,M,NB),
     &          XGWB(M,NB),XLSB(M,NB),XLWB(M,NB),XNCB(1,M,NB),
     &          YLSB(M,NB),IZN )
            ENDIF
!
!---      Boundary condition state #3  ---
!
!         SG >= 0.0
!         SL = 0.0
!         SN > 0.0
!
!         Declared variables:
!
!         BCX(4) - water vapor relative saturation
!         BCX(8) - gas saturation
!         BCX(9) - gas-oil ratio (m^3/m^3)
!        
          ELSEIF( IBCT(3,NB).EQ.3 ) THEN
!
!---        Fluid Flow: Dirichlet, initial condition, Dirichlet-inflow,
!           Dirichlet-outflow, or hydraulic gradient  ---
!
            IF( ITFX.EQ.1 .OR. ITFX.EQ.4 .OR. ITFX.EQ.5 .OR.   
     &        ITFX.EQ.6 .OR. ITFX.EQ.8 ) THEN
              PX = BCX(3) + PATM
            ENDIF
            SLB(M,NB) = 0.D+0
            YLSX = 0.D+0
            PVWX = BCX(4)
            SGB(M,NB) = BCX(8)
            POSMBX = BCX(9)
            SNB(M,NB) = MAX( 1.D+0-SGB(M,NB)-SLB(M,NB),0.D+0 )
            CALL BO_IC3( POSMBX,PVWX,PX,RHOGB(M,NB),RHONB(M,NB),
     &        TB(M,NB),XGCB(1,M,NB),XGWB(M,NB),XNCB(1,M,NB),YLSB(M,NB),
     &        IZN )
!
!---        Porous-media porosity  ---
!
            CALL PORSTY( N,PX,PCMP(N),PORDB(M,NB),PORTB(M,NB) )
            PORDB(M,NB) = MAX( PORDB(M,NB),EPSL )
            PORTB(M,NB) = MAX( PORTB(M,NB),PORDB(M,NB) )
!
!---        Equilivalent continuum or dual porosity fracture and 
!           matrix saturations assuming thermodynamic equilibrium  ---
!
            IF( ISLC(11).NE.0 ) THEN
              CALL PORSTY_M( IZN,PX,PCMP(N),PORDB_MX,PORTB_MX )
              PORDB_MX = MAX( PORDB_MX,EPSL )
              PORTB_MX = MAX( PORTB_MX,PORDB_MX )
              EPORFX = PORDB(M,N)*FRAC_P(7,IZN)
              EPORMX = PORDB_MX*(1.D+0-FRAC_P(7,IZN))
              CALL CAP_EOR_EC( EPORFX,EPORMX,SGB(M,NB),SLB(M,NB),
     &          SNB(M,NB),SGB_FX,SLB_FX,SNB_FX,
     &          SGB_MX,SLB_MX,SNB_MX,CPGTX,CPNLX,IZN )
              IF( ISLC(11).EQ.1 ) THEN
                SGB(M,NB) = SGB_FX
                SLB(M,NB) = SLB_FX
                SNB(M,NB) = SNB_FX
              ENDIF
            ELSE
              CALL CAP_EOR( SGB(M,NB),SLB(M,NB),SNB(M,NB),
     &          CPGTX,CPNLX,IZN )
            ENDIF
            IF( SGB(M,NB).LT.EPSL ) THEN
              IF( CPNLX.GE.0.D+0 ) THEN
                PNB(M,NB) = PX - PATM
                PLB(M,NB) = PNB(M,NB) - CPNLX
                PGB(M,NB) = PNB(M,NB) + CPGTX
              ELSE
                PLB(M,NB) = PX - PATM
                PNB(M,NB) = PLB(M,NB) + CPNLX
                PGB(M,NB) = PLB(M,NB) + CPGTX
              ENDIF
!
!---          Flash calculations  ---
!
              IZMCX = 0
              TMSX = 0.D+0
              CALL BO_PC4( PORDB(M,NB),POSMBX,PVWB(M,NB),PX,
     &          RHOGB(M,NB),RHOLB(M,NB),RHONB(M,NB),SGB(M,NB),SLB(M,NB),
     &          SNB(M,NB),TMCX,TMSX,TB(M,NB),VOL(N),XGCB(1,M,NB),
     &          XGWB(M,NB),XLSB(M,NB),XLWB(M,NB),XNCB(1,M,NB),
     &          YLSB(M,NB),IZN )
            ELSE
              PGB(M,NB) = PX - PATM
              IF( CPNLX.GE.0.D+0 ) THEN
                PNB(M,NB) = PGB(M,NB) - CPGTX
                PLB(M,NB) = PNB(M,NB) - CPNLX
              ELSE
                PLB(M,NB) = PGB(M,NB) - CPGTX
                PNB(M,NB) = PLB(M,NB) + CPNLX
              ENDIF
!
!---          Flash calculations  ---
!
              IZMCX = 0
              TMSX = 0.D+0
              CALL BO_PC5( PORDB(M,NB),POSMBX,PVWB(M,NB),PX,
     &          RHOGB(M,NB),RHOLB(M,NB),RHONB(M,NB),SGB(M,NB),SLB(M,NB),
     &          SNB(M,NB),TMCX,TMSX,TB(M,NB),VOL(N),XGCB(1,M,NB),
     &          XGWB(M,NB),XLSB(M,NB),XLWB(M,NB),XNCB(1,M,NB),
     &          YLSB(M,NB),IZN )
            ENDIF
          ENDIF
!
!---      Relative permeability  ---
!
#ifdef dual_porosity
          CALL RKG_EOR_F( RKGB(M,NB),SLB(M,NB),SNB(M,NB),IZN )
          CALL RKL_EOR_F( RKLB(1,M,NB),SLB(M,NB),IZN )
          CALL RKN_EOR_F( RKGB(M,NB),RKLB(1,M,NB),RKNB(M,NB),SGB(M,NB),
     &      SLB(M,NB),SNB(M,NB),IZN )
#else
          CALL RKG_EOR( RKGB(M,NB),SLB(M,NB),SNB(M,NB),IZN )
          CALL RKL_EOR( RKLB(1,M,NB),SLB(M,NB),IZN )
          CALL RKN_EOR( RKGB(M,NB),RKLB(1,M,NB),RKNB(M,NB),SGB(M,NB),
     &      SLB(M,NB),SNB(M,NB),IZN )
#endif
!
!---      Gas viscosity, Pa s  ---
!
          CALL BO_VISG( RHOGB(M,NB),VISGB(M,NB) )
!
!---      Aqueous viscosity, Pa s
!         concentration of CO2 in mol/kg,
!         concentration of salt in mol/kg  ---
!
          CMLAX = 0.D+0
          CMLSX = 1.D+3*XLSB(M,NB)*RHOLB(M,NB)/WTMS
          CALL VISC_L( CMLAX,CMLSX,PX,TB(M,NB),VISLB(M,NB) )
!
!---      Nonaqueous-liquid viscosity, Pa s  ---
!
          CALL BO_VISN( PX,POSMBX,TB(M,NB),VISNB(M,NB) )
!
!---      Salt aqueous diffusion coefficient  ---
!
          CALL DIFC_LS( DFLSB(M,NB),TB(M,NB),VISLB(M,NB),XLSB(M,NB) )
!
!---      Precipitated NaCl density, saturation, and enthalpy  ---
!
          CALL DENS_S( TB(M,NB),PX,RHOSPBX )
          CALL SOL_LS( TB(M,NB),XBSMX )
          CALL DENS_B( TB(M,NB),PX,XBSMX,RHOBX )
          SSB(M,NB) = MAX(YLSB(M,NB)-XBSMX,0.D+0)*RHOBX*SLB(M,NB)/
     &      RHOSPBX
!
!---      Change in porosity as a function of precipitated salt  ---
!
          PORDB(M,NB) = PORDB(M,NB)*(1.D+0-SSB(M,NB))
!
!---      Aqueous, gas, and nonaqueous-liquid tortuosity  ---
!
          IF( ISLC(3).EQ.1 ) CALL TORTU( IZN,SLB(M,NB),SGB(M,NB),
     &      SNB(M,NB),PORDB(M,NB),TORLB(M,NB),TORGB(M,NB),TORNB(M,NB) )
  300   CONTINUE
  400 CONTINUE
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of BCP_BO group
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE BCP_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Compute saturation, relative permeability and thermodynamic
!     properties for boundary surfaces.
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, March 17, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PORMED
      USE JACOB
      USE GRID
      USE GLB_PAR
      USE FDVT
      USE FDVP
      USE FDVGC
      USE DUAL_POR
      USE CONST
      USE BCVT
      USE BCVS
      USE BCVP
      USE BCVN
      USE BCVGC
      USE BCVG
      USE BCV
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 BCX(LBCV)
      REAL*8 TMCX(LNGC),FKX(LNGC)
!      REAL*8 RKLX(3)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//BCP_EOR'
!
!---  Black-oil option  ---
!
      IF( ISLC(68).EQ.0 ) THEN
        CALL BCP_BO
        ISUB_LOG = ISUB_LOG-1
        RETURN
      ENDIF
!
!---  Compositional option  ---
!
!
!---  K-factors computed from fugacity coefficients  ---
!
      IFK = 0
!
!---  Assign values for initial condition type boundary conditions  ---
!
      IF( NSTEP-NRST.LE.1 .AND. NITER.LE.1 ) THEN
       DO 50 NB = 1,NBC
        ITFX = MOD(IBCT(2,NB),10)
        IF( IBCT(1,NB).EQ.4 .OR. ITFX.EQ.4 ) THEN
          N = IBCN(NB)
          I = ID(N)
          J = JD(N)
          K = KD(N)
          I1 = I+1
          J1 = J+1
          K1 = K+1
          IF( IBCD(NB).EQ.-3 ) THEN
            DB = 0.5D+0*DZGF(N)
            GB = GRVZ(NSZ(N))*DB
          ELSEIF( IBCD(NB).EQ.-2 ) THEN
            DB = 0.5D+0*DYGF(N)*RP(ID(N))
            GB = GRVY(NSY(N))*DB
          ELSEIF( IBCD(NB).EQ.-1 ) THEN
            DB = 0.5D+0*DXGF(N)
            GB = GRVX(NSX(N))*DB
          ELSEIF( IBCD(NB).EQ.1 ) THEN
            DB = -0.5D+0*DXGF(N)
            GB = GRVX(NSX(N)+1)*DB
          ELSEIF( IBCD(NB).EQ.2 ) THEN
            DB = -0.5D+0*DYGF(N)*RP(ID(N))
            GB = GRVY(NSY(N)+IFLD)*DB
          ELSEIF( IBCD(NB).EQ.3 ) THEN
            DB = -0.5D+0*DZGF(N)
            GB = GRVZ(NSZ(N)+IJFLD)*DB
          ENDIF
        ENDIF
!
!---    Energy initial conditions  ---
!
        IF( IBCT(1,NB).EQ.4 ) TB(1,NB) = T(1,N)
!
!---    Fluid flow initial conditions  ---
!
        IF( ITFX.EQ.4 ) THEN
          PLB(1,NB) = PL(2,N) + RHOL(2,N)*GB
          PGB(1,NB) = PG(2,N) + RHOG(2,N)*GB
          PNB(1,NB) = PN(2,N) + RHON(2,N)*GB
        ENDIF
   50  CONTINUE
      ENDIF
!
!---  Loop over boundary conditions  ---
!
      DO 400 NB = 1,NBC
        TMZ = TM
        IF( NSTEP-NRST.EQ.0 ) TMZ = TMZ*(1.D+0+EPSL)+EPSL
        MB = IBCIN(NB)
        IF( IBCC(NB).EQ.1 ) TMZ = MOD( TM,BC(1,IBCM(NB),MB) )
        IF( TMZ.LE.BC(1,1,MB) ) GOTO 400
        ITFX = MOD(IBCT(2,NB),10)
        ITGX = MOD(IBCT(2,NB),100)/10
        ITLX = MOD(IBCT(2,NB),1000)/100
        ITNX = MOD(IBCT(2,NB),10000)/1000
!
!---  Assign local boundary condition variables  ---
!
        IF( IBCM(NB).EQ.1 ) THEN
          DO 80 N = 1,LBCV
            BCX(N) = BC(N,1,MB)
   80     CONTINUE
        ELSE
          DO 100 M = 2,IBCM(NB)
            IF( TMZ.LE.BC(1,M,MB) ) THEN
             TDBC = (BC(1,M,MB)-BC(1,M-1,MB))
             DTBC = MIN( BC(1,M,MB)-TMZ,DT )
             TFBC = (TMZ-BC(1,M-1,MB))/TDBC
             DO 90 N = 1,LBCV
               BCX(N) = BC(N,M-1,MB) + TFBC*(BC(N,M,MB)-BC(N,M-1,MB))
   90        CONTINUE
!
!---         Energy boundary  ---
!
             IF( IBCT(1,NB).EQ.2 ) THEN
               BCX(2) = BCX(2)-5.D-1*DTBC*(BC(2,M,MB)-BC(2,M-1,MB))/TDBC
             ENDIF
!
!---         Fluid flow boundary  ---
!
             IF( ITFX.EQ.2 .OR. ITFX.EQ.7 .OR. ITFX.EQ.9 ) THEN
               BCX(3) = BCX(3)-5.D-1*DTBC*(BC(3,M,MB)-BC(3,M-1,MB))/TDBC
             ENDIF
             GOTO 110
            ENDIF
  100     CONTINUE
          GOTO 400
        ENDIF
  110   CONTINUE
!
!---    Initial condition boundary condition  ---
!
        IF( IBCT(1,NB).EQ.4 ) BCX(2) = TB(1,NB)
        IF( ITFX.EQ.4 ) 
     &    BCX(3) = MAX( PGB(1,NB),PLB(1,NB),PNB(1,NB) )
        N = IBCN(NB)
        N_DB = -NB
        IBD = ABS(IBCD(NB))
        IZN = IZ(N)
!#ifdef ecke
!        POR0(1,N) = POR0(1,N)
!        POR0(2,N) = POR0(2,N)
!#endif
!
!---    Boundary Direction  ---
!
        I = ID(N)
        J = JD(N)
        K = KD(N)
        I1 = I+1
        J1 = J+1
        K1 = K+1
        IF( IBCD(NB).EQ.-3 ) THEN
          DB = 0.5D+0*DZGF(N)
          GB = GRVZ(NSZ(N))*DB
        ELSEIF( IBCD(NB).EQ.-2 ) THEN
          DB = 0.5D+0*DYGF(N)*RP(ID(N))
          GB = GRVY(NSY(N))*DB
        ELSEIF( IBCD(NB).EQ.-1 ) THEN
          DB = 0.5D+0*DXGF(N)
          GB = GRVX(NSX(N))*DB
        ELSEIF( IBCD(NB).EQ.1 ) THEN
          DB = -0.5D+0*DXGF(N)
          GB = GRVX(NSX(N)+1)*DB
        ELSEIF( IBCD(NB).EQ.2 ) THEN
          DB = -0.5D+0*DYGF(N)*RP(ID(N))
          GB = GRVY(NSY(N)+IFLD)*DB
        ELSEIF( IBCD(NB).EQ.3 ) THEN
          DB = -0.5D+0*DZGF(N)
          GB = GRVZ(NSZ(N)+IJFLD)*DB
        ENDIF
!
!---    Loop over secondary variable indices  ---
!
        DO 300 M = 2,ISVC+2
          TB(M,NB) = T(M,N)
          PLB(M,NB) = PL(M,N)
          PGB(M,NB) = PG(M,N)
          PNB(M,NB) = PN(M,N)
          PX = MAX( PLB(M,NB),PGB(M,NB),PNB(M,NB) ) + PATM
!
!---      Full flash calculation for unincremented index, otherwise use
!         previous beta and K-factors as initial guesses  ---
!
!          IF( M.EQ.2 ) THEN
            BETAX = -1.D+0
!          ELSE
!            BETAX = BETA2X
!            DO 120 IGC = 1,NGC+2
!              FKX(IGC) = FK2X(IGC)
!  120       CONTINUE
!          ENDIF
!
!---      Energy: Dirichlet, initial condition, inflow, or
!         advective only  ---
!
          IF( IBCT(1,NB).EQ.1 .OR. IBCT(1,NB).EQ.4
     &      .OR. IBCT(1,NB).EQ.5 .OR. IBCT(1,NB).EQ.7 ) THEN
            TB(M,NB) = BCX(2)
!
!---      Energy: Neumann  ---
!
          ELSEIF( IBCT(1,NB).EQ.2 ) THEN
            INDX = ABS( IBCD(NB) )
            THKP = MAX(1.D+0-PORD(M,N),0.D+0)*THKS(INDX,IZN) +
     &        PORD(M,N)*(THKL(M,N)*SL(M,N) +
     &        THKN(M,N)*SN(M,N) + THKG(M,N)*SG(M,N))
            TB(M,NB) = TB(M,NB) + BCX(2)*DB/THKP
!
!---      Energy: Geothermal Gradient  ---
!
          ELSEIF( IBCT(1,NB).EQ.8 ) THEN
            TB(M,NB) = BCX(2) + (ZPBC(NB)-BCX(8))*BCX(9)
          ENDIF
          TKX = TB(M,NB) + TABS
!
!---      Boundary condition state #1  ---
!
!         SL = 1.0
!         SG+SN = 0.0
!
!         Declared variables:
!
!         BCX(4) - aqueous CO2 relative saturation, or
!                  aqueous CO2 mass fraction
!         BCX(5) - aqueous salt relative saturation, or
!                  aqueous salt mass fraction
!
          NPHAZX = 0
          IF( IBCT(3,NB).EQ.1 ) THEN
            SGB(M,NB) = 0.D+0
            SLB(M,NB) = 1.D+0
            SNB(M,NB) = 0.D+0
!
!---        Fluid Flow: Dirichlet, initial condition, Dirichlet-inflow,
!           Dirichlet-outflow, or hydraulic gradient  ---
!
            IF( ITFX.EQ.1 .OR. ITFX.EQ.4 .OR. ITFX.EQ.5 .OR.   
     &        ITFX.EQ.6 .OR. ITFX.EQ.8 ) THEN
              PLB(M,NB) = BCX(3)
            ENDIF
            PVAB(M,NB) = BCX(4)
            TMSX = BCX(5)
            PX = PL(M,NB) + PATM
            CALL FLH_IC1( PX,PVAB(M,NB),RHOLB(M,NB),RHOMLB(M,NB),TMSX,
     &        TB(M,NB),XLAB(M,NB),XLSB(M,NB),XLWB(M,NB),
     &        XMLAB(M,NB),XMLSB(M,NB),XMLWB(M,NB),YLSB(M,NB),
     &        ZMCB(1,M,NB),IBCT(4,NB),IBCT(5,NB) )
!
!---        Porous-media porosity  ---
!
            CALL PORSTY( N,PX,PCMP(N),PORDB(M,NB),PORTB(M,NB) )
            PORDB(M,NB) = MAX( PORDB(M,NB),EPSL )
            PORTB(M,NB) = MAX( PORTB(M,NB),PORDB(M,NB) )
!
!---        Equilivalent continuum or dual porosity fracture and 
!           matrix saturations assuming thermodynamic equilibrium  ---
!
            IF( ISLC(11).NE.0 ) THEN
              CALL PORSTY_M( IZN,PX,PCMP(N),PORDB_MX,PORTB_MX )
              PORDB_MX = MAX( PORDB_MX,EPSL )
              PORTB_MX = MAX( PORTB_MX,PORDB_MX )
              EPORFX = PORDB(M,N)*FRAC_P(7,IZN)
              EPORMX = PORDB_MX*(1.D+0-FRAC_P(7,IZN))
              CALL CAP_EOR_EC( EPORFX,EPORMX,SGB(M,NB),SLB(M,NB),
     &          SNB(M,NB),SGB_FX,SLB_FX,SNB_FX,
     &          SGB_MX,SLB_MX,SNB_MX,CPGTX,CPNLX,IZN )
              IF( ISLC(11).EQ.1 ) THEN
                SGB(M,NB) = SGB_FX
                SLB(M,NB) = SLB_FX
                SNB(M,NB) = SNB_FX
              ENDIF
            ELSE
              CALL CAP_EOR( SGB(M,NB),SLB(M,NB),SNB(M,NB),
     &          CPGTX,CPNLX,IZN )
            ENDIF
            PNB(M,NB) = PLB(M,NB) + CPNLX
            PGB(M,NB) = MAX( PLB(M,NB),PNB(M,NB) ) + CPGTX
!
!---        Flash calculations  ---
!
            IZMCX = 0
            IBETAX = 0
            CALL FLH_PC1( BETAX,FKX,GNIFTX,PORDB(M,NB),PVAB(M,NB),
     &        PVWB(M,NB),PX,RHOGB(M,NB),RHOLB(M,NB),RHOMGB(M,NB),
     &        RHOMLB(M,NB),RHOMNB(M,NB),RHONB(M,NB),SGB(M,NB),SLB(M,NB),
     &        SNB(M,NB),TMCX,TMSX,TB(M,NB),VOL(N),XGCB(1,M,NB),
     &        XGWB(M,NB),XLAB(M,NB),XLSB(M,NB),XLWB(M,NB),XNCB(1,M,NB),
     &        XMGCB(1,M,NB),XMGWB(M,NB),XMLAB(M,NB),XMLSB(M,NB),
     &        XMLWB(M,NB),XMNCB(1,M,NB),YLSB(M,NB),ZGB(M,NB),
     &        ZMCB(1,M,NB),ZNB(M,NB),IBETAX,IZN,NPHAZX )
!
!---      Boundary condition state #2  ---
!
!         SL < 1.0
!         SG+SN > 0.0
!
!         Declared variables:
!
!         BCX(4) - aqueous saturation
!         BCX(5) - aqueous salt relative saturation, or
!                  aqueous salt mass fraction
!         BCX(8) - total mole fraction of petroleum components
!         BCX(10+NGC) - total mole fraction of petroleum comp.
!
          ELSEIF( IBCT(3,NB).EQ.2 ) THEN
!
!---        Fluid Flow: Dirichlet, initial condition, Dirichlet-inflow,
!           Dirichlet-outflow, or hydraulic gradient  ---
!
            IF( ITFX.EQ.1 .OR. ITFX.EQ.4 .OR. ITFX.EQ.5 .OR.   
     &        ITFX.EQ.6 .OR. ITFX.EQ.8 ) THEN
              PX = BCX(3) + PATM
            ENDIF
            SLB(M,NB) = BCX(4)
            TMSX = BCX(5)
            DO 200 IGC = 1,NGC+2
              JGC = IGC + 7
              ZMCB(IGC,M,NB) = BCX(JGC)
  200       CONTINUE
            CALL FLH_IC2( PX,RHOGB(M,NB),RHOMGB(M,NB),RHOLB(M,NB),
     &        RHOMLB(M,NB),RHONB(M,NB),RHOMNB(M,NB),SGB(M,NB),SLB(M,NB),
     &        SNB(M,NB),TMSX,TB(M,NB),XGCB(1,M,NB),
     &        XMGCB(1,M,NB),
     &        XGWB(M,NB),XMGWB(M,NB),XLAB(M,NB),XLSB(M,NB),
     &        XLWB(M,NB),XMLAB(M,NB),XMLSB(M,NB),XMLWB(M,NB),
     &        XNCB(1,M,NB),XMNCB(1,M,NB),YLSB(M,NB),
     &        ZGB(M,NB),ZMCB(1,M,NB),ZNB(M,NB),IBCT(5,NB),IZN,NPHAZX )
!
!---        Porous-media porosity  ---
!
            CALL PORSTY( N,PX,PCMP(N),PORDB(M,NB),PORTB(M,NB) )
            PORDB(M,NB) = MAX( PORDB(M,NB),EPSL )
            PORTB(M,NB) = MAX( PORTB(M,NB),PORDB(M,NB) )
!
!---        Equilivalent continuum or dual porosity fracture and 
!           matrix saturations assuming thermodynamic equilibrium  ---
!
            IF( ISLC(11).NE.0 ) THEN
              CALL PORSTY_M( IZN,PX,PCMP(N),PORDB_MX,PORTB_MX )
              PORDB_MX = MAX( PORDB_MX,EPSL )
              PORTB_MX = MAX( PORTB_MX,PORDB_MX )
              EPORFX = PORDB(M,N)*FRAC_P(7,IZN)
              EPORMX = PORDB_MX*(1.D+0-FRAC_P(7,IZN))
              CALL CAP_EOR_EC( EPORFX,EPORMX,SGB(M,NB),SLB(M,NB),
     &          SNB(M,NB),SGB_FX,SLB_FX,SNB_FX,
     &          SGB_MX,SLB_MX,SNB_MX,CPGTX,CPNLX,IZN )
              IF( ISLC(11).EQ.1 ) THEN
                SGB(M,NB) = SGB_FX
                SLB(M,NB) = SLB_FX
                SNB(M,NB) = SNB_FX
              ENDIF
            ELSE
              CALL CAP_EOR( SGB(M,NB),SLB(M,NB),SNB(M,NB),
     &          CPGTX,CPNLX,IZN )
            ENDIF
            IF( SGB(M,NB).LT.EPSL ) THEN
              IF( CPNLX.GE.0.D+0 ) THEN
                PNB(M,NB) = PX - PATM
                PLB(M,NB) = PNB(M,NB) - CPNLX
                PGB(M,NB) = PNB(M,NB) + CPGTX
              ELSE
                PLB(M,NB) = PX - PATM
                PNB(M,NB) = PLB(M,NB) + CPNLX
                PGB(M,NB) = PLB(M,NB) + CPGTX
              ENDIF
!
!---          Flash calculations  ---
!
              IZMCX = 0
              IBETAX = 0
              CALL FLH_PC2( BETAX,FKX,GNIFTX,PORDB(M,NB),PVAB(M,NB),
     &          PVWB(M,NB),PX,RHOGB(M,NB),RHOLB(M,NB),RHOMGB(M,NB),
     &          RHOMLB(M,NB),RHOMNB(M,NB),RHONB(M,NB),SGB(M,NB),
     &          SLB(M,NB),SNB(M,NB),TMCX,TMSX,TB(M,NB),VOL(N),
     &          XGCB(1,M,NB),XGWB(M,NB),XLAB(M,NB),XLSB(M,NB),
     &          XLWB(M,NB),XNCB(1,M,NB),XMGCB(1,M,NB),XMGWB(M,NB),
     &          XMLAB(M,NB),XMLSB(M,NB),XMLWB(M,NB),XMNCB(1,M,NB),
     &          YLSB(M,NB),ZGB(M,NB),ZMCB(1,M,NB),ZNB(M,NB),IBETAX,
     &          IZMCX,IZN,NPHAZX )
            ELSE
              PGB(M,NB) = PX - PATM
              IF( CPNLX.GE.0.D+0 ) THEN
                PNB(M,NB) = PGB(M,NB) - CPGTX
                PLB(M,NB) = PNB(M,NB) - CPNLX
              ELSE
                PLB(M,NB) = PGB(M,NB) - CPGTX
                PNB(M,NB) = PLB(M,NB) + CPNLX
              ENDIF
!
!---          Flash calculations  ---
!
              IZMCX = 0
              IBETAX = 0
              CALL FLH_PC3( BETAX,FKX,GNIFTX,PORDB(M,NB),PVAB(M,NB),
     &          PVWB(M,NB),PX,RHOGB(M,NB),RHOLB(M,NB),RHOMGB(M,NB),
     &          RHOMLB(M,NB),RHOMNB(M,NB),RHONB(M,NB),SGB(M,NB),
     &          SLB(M,NB),SNB(M,NB),TMCX,TMSX,TB(M,NB),VOL(N),
     &          XGCB(1,M,NB),XGWB(M,NB),XLAB(M,NB),XLSB(M,NB),
     &          XLWB(M,NB),XNCB(1,M,NB),XMGCB(1,M,NB),XMGWB(M,NB),
     &          XMLAB(M,NB),XMLSB(M,NB),XMLWB(M,NB),XMNCB(1,M,NB),
     &          YLSB(M,NB),ZGB(M,NB),ZMCB(1,M,NB),ZNB(M,NB),IBETAX,
     &          IZMCX,IZN,NPHAZX )
            ENDIF
!
!---      Boundary condition state #3  ---
!
!         SL = 0.0
!         SG+SN = 1.0
!
!         Declared variables:
!
!         BCX(4) - water vapor relative saturation
!         BCX(8+) - total mole fraction of petroleum components
!        
          ELSEIF( IBCT(3,NB).EQ.3 ) THEN
!
!---        Fluid Flow: Dirichlet, initial condition, Dirichlet-inflow,
!           Dirichlet-outflow, or hydraulic gradient  ---
!
            IF( ITFX.EQ.1 .OR. ITFX.EQ.4 .OR. ITFX.EQ.5 .OR.   
     &        ITFX.EQ.6 .OR. ITFX.EQ.8 ) THEN
              PX = BCX(3) + PATM
            ENDIF
            SLB(M,NB) = 0.D+0
            ZMCMX = 0.D+0
            YLSX = 0.D+0
            PVWX = BCX(4)
            DO 210 IGC = 1,NGC+2
              JGC = IGC + 7
              ZMCB(IGC,M,NB) = BCX(JGC)
  210       CONTINUE
            CALL FLH_IC3( PVWX,PX,RHOGB(M,NB),RHOMGB(M,NB),RHONB(M,NB),
     &        RHOMNB(M,NB),SGB(M,NB),SNB(M,NB),TB(M,NB),
     &        XGCB(1,M,NB),XGWB(M,NB),XMGCB(1,M,NB),XMGWB(M,NB),
     &        XNCB(1,M,NB),XMNCB(1,M,NB),YLSX,
     &        ZGB(M,NB),ZMCB(1,M,NB),ZNB(M,NB),IZN,NPHAZX )
!
!---        Porous-media porosity  ---
!
            CALL PORSTY( N,PX,PCMP(N),PORDB(M,NB),PORTB(M,NB) )
            PORDB(M,NB) = MAX( PORDB(M,NB),EPSL )
            PORTB(M,NB) = MAX( PORTB(M,NB),PORDB(M,NB) )
!
!---        Equilivalent continuum or dual porosity fracture and 
!           matrix saturations assuming thermodynamic equilibrium  ---
!
            IF( ISLC(11).NE.0 ) THEN
              CALL PORSTY_M( IZN,PX,PCMP(N),PORDB_MX,PORTB_MX )
              PORDB_MX = MAX( PORDB_MX,EPSL )
              PORTB_MX = MAX( PORTB_MX,PORDB_MX )
              EPORFX = PORDB(M,N)*FRAC_P(7,IZN)
              EPORMX = PORDB_MX*(1.D+0-FRAC_P(7,IZN))
              CALL CAP_EOR_EC( EPORFX,EPORMX,SGB(M,NB),SLB(M,NB),
     &          SNB(M,NB),SGB_FX,SLB_FX,SNB_FX,
     &          SGB_MX,SLB_MX,SNB_MX,CPGTX,CPNLX,IZN )
              IF( ISLC(11).EQ.1 ) THEN
                SGB(M,NB) = SGB_FX
                SLB(M,NB) = SLB_FX
                SNB(M,NB) = SNB_FX
              ENDIF
            ELSE
              CALL CAP_EOR( SGB(M,NB),SLB(M,NB),SNB(M,NB),
     &          CPGTX,CPNLX,IZN )
            ENDIF
            IF( SGB(M,NB).LT.EPSL ) THEN
              IF( CPNLX.GE.0.D+0 ) THEN
                PNB(M,NB) = PX - PATM
                PLB(M,NB) = PNB(M,NB) - CPNLX
                PGB(M,NB) = PNB(M,NB) + CPGTX
              ELSE
                PLB(M,NB) = PX - PATM
                PNB(M,NB) = PLB(M,NB) + CPNLX
                PGB(M,NB) = PLB(M,NB) + CPGTX
              ENDIF
!
!---          Flash calculations  ---
!
              IZMCX = 0
              IBETAX = 0
              TMSX = 0.D+0
              CALL FLH_PC4( BETAX,FKX,GNIFTX,PORDB(M,NB),PVAB(M,NB),
     &          PVWB(M,NB),PX,RHOGB(M,NB),RHOLB(M,NB),RHOMGB(M,NB),
     &          RHOMLB(M,NB),RHOMNB(M,NB),RHONB(M,NB),SGB(M,NB),
     &          SLB(M,NB),SNB(M,NB),TMCX,TMSX,TB(M,NB),VOL(N),
     &          XGCB(1,M,NB),XGWB(M,NB),XLAB(M,NB),XLSB(M,NB),
     &          XLWB(M,NB),XNCB(1,M,NB),XMGCB(1,M,NB),XMGWB(M,NB),
     &          XMLAB(M,NB),XMLSB(M,NB),XMLWB(M,NB),XMNCB(1,M,NB),
     &          YLSB(M,NB),ZGB(M,NB),ZMCB(1,M,NB),ZNB(M,NB),IBETAX,
     &          IZMCX,IZN,NPHAZX )
            ELSE
              PGB(M,NB) = PX - PATM
              IF( CPNLX.GE.0.D+0 ) THEN
                PNB(M,NB) = PGB(M,NB) - CPGTX
                PLB(M,NB) = PNB(M,NB) - CPNLX
              ELSE
                PLB(M,NB) = PGB(M,NB) - CPGTX
                PNB(M,NB) = PLB(M,NB) + CPNLX
              ENDIF
!
!---          Flash calculations  ---
!
              IZMCX = 0
              TMSX = 0.D+0
              CALL FLH_PC5( BETAX,FKX,GNIFTX,PORDB(M,NB),PVAB(M,NB),
     &          PVWB(M,NB),PX,RHOGB(M,NB),RHOLB(M,NB),RHOMGB(M,NB),
     &          RHOMLB(M,NB),RHOMNB(M,NB),RHONB(M,NB),SGB(M,NB),
     &          SLB(M,NB),SNB(M,NB),TMCX,TMSX,TB(M,NB),VOL(N),
     &          XGCB(1,M,NB),XGWB(M,NB),XLAB(M,NB),XLSB(M,NB),
     &          XMGCB(1,M,NB),XMGWB(M,NB),XMLAB(M,NB),XMLSB(M,NB),
     &          XLWB(M,NB),XNCB(1,M,NB),XMLWB(M,NB),XMNCB(1,M,NB),
     &          YLSB(M,NB),ZGB(M,NB),ZMCB(1,M,NB),ZNB(M,NB),IBETAX,
     &          IZMCX,IZN,NPHAZX )
            ENDIF
          ENDIF
!
!---      Relative permeability  ---
!
#ifdef dual_porosity
          CALL RKG_EOR_F( RKGB(M,NB),SLB(M,NB),SNB(M,NB),IZN )
          CALL RKL_EOR_F( RKLB(1,M,NB),SLB(M,NB),IZN )
          CALL RKN_EOR_F( RKGB(M,NB),RKLB(1,M,NB),RKNB(M,NB),SGB(M,NB),
     &      SLB(M,NB),SNB(M,NB),IZN )
#else
          CALL RKG_EOR( RKGB(M,NB),SLB(M,NB),SNB(M,NB),IZN )
          CALL RKL_EOR( RKLB(1,M,NB),SLB(M,NB),IZN )
          CALL RKN_EOR( RKGB(M,NB),RKLB(1,M,NB),RKNB(M,NB),SGB(M,NB),
     &      SLB(M,NB),SNB(M,NB),IZN )
#endif
!!
!!---      Interfacial tension weighting of gas and nonaqueous-liquid
!!         relative permeability  ---
!!
!          IF( SNB(M,NB).GT.0.D+0 .AND. SGB(M,NB).GT.0.D+0 ) THEN
!            RKFX = 1.D+0 - EXP(-2.D+0*GNIFTX)
!            SGX = 0.D+0
!            RKGX = 0.D+0
!            SNX = SGB(M,NB) + SNB(M,NB)
!            SLX = SLB(M,NB)
!            CALL RKL_EOR( RKLX(1),SLX,IZN )
!            CALL RKN_EOR( RKGX,RKLX(1),RKNX,SGX,SLX,SNX,IZN )
!            RKGB(M,NB) = RKFX*RKGB(M,NB) + (1.D+0-RKFX)*RKNX
!            RKNB(M,NB) = RKFX*RKNB(M,NB) + (1.D+0-RKFX)*RKNX
!          ENDIF
!
!---      Gas viscosity, Pa s  ---
!
          CALL VISC_G( RHOMGB(M,NB),TB(M,NB),VISGB(M,NB),XMGCB(1,M,NB),
     &      XMGWB(M,NB) )
!
!---      Aqueous viscosity, Pa s
!         concentration of CO2 in mol/kg,
!         concentration of salt in mol/kg  ---
!
          CMLAX = 1.D+3*XMLAB(M,NB)*RHOMLB(M,NB)/RHOLB(M,NB)
          CMLSX = 1.D+3*XMLSB(M,NB)*RHOMLB(M,NB)/RHOLB(M,NB)
          CALL VISC_L( CMLAX,CMLSX,PX,TB(M,NB),VISLB(M,NB) )
!
!---      Nonaqueous-liquid viscosity, Pa s  ---
!
          CALL VISC_N( RHOMNB(M,NB),TB(M,NB),VISNB(M,NB),XMNCB(1,M,NB) )
!
!---      Component gas diffusion coefficients  ---
!
          CALL DIFC_G( DFGCB(1,M,NB),DFGWB(M,NB),PX,TB(M,NB),
     &      XMGCB(1,M,NB),XMGWB(M,NB) )
!
!---      CO2 aqueous diffusion coefficient  ---
!
          CALL DIFC_LA( DFLAB(M,NB),TB(M,NB),VISLB(M,NB) )
!
!---      Salt aqueous diffusion coefficient  ---
!
          CALL DIFC_LS( DFLSB(M,NB),TB(M,NB),VISLB(M,NB),XLSB(M,NB) )
!
!---      Petroleum component nonaqueous-liquid diffusion 
!         coefficients  ---
!
          CALL DIFC_N( DFNCB(1,M,NB),TB(M,NB),VISNB(M,NB) )
!
!---      Gas thermal conductivity, W/m K  ---
!
          CALL THK_G( PX,TB(M,NB),THKGB(M,NB),XMGCB(1,M,NB),
     &      XMGWB(M,NB) )
!
!---      Aqueous thermal conductivity  ---
!
          CALL THK_W( PX,TB(M,NB),THKLWX )
          CALL THK_B( TB(M,NB),XLSB(M,NB),THKLWX,THKLB(M,NB) )
!
!---      Nonaqueous thermal conductivity, W/m K  ---
!
          CALL THK_N( PX,TB(M,NB),THKNB(M,NB),XMNCB(1,M,NB) )
!
!---      Gas enthalpy and internal energy, W/kg  ---
!
          CALL ENTH_G( HGB(M,NB),HGAB(M,NB),HGWB(M,NB),PX,TB(M,NB),
     &      RHOGB(M,NB),UEGB(M,NB),XGCB(1,M,NB),XGWB(M,NB),
     &      XMGCB(1,M,NB),ZGB(M,NB) )
!
!---      Nonaqueous-liquid enthalpy and internal energy  ---
!
          CALL ENTH_N( HNB(M,NB),HNAX,PX,TB(M,NB),RHONB(M,NB),
     &      UENBX,XNCB(1,M,NB),XMNCB(1,M,NB),ZNB(M,NB) )
!
!---      Pure water liquid enthalpy  ---
!
          CALL SP_W( TB(M,NB),PSWX )
          PEX = MAX( PSWX,PX )
          ISRX = 1
          CALL ENTH_W( TB(M,NB),PEX,HLWB(M,NB),HGWX,ISRX )
!
!---      Brine enthalpy  ---
!
          CALL ENTH_B( TB(M,NB),XLSB(M,NB),HLWB(M,NB),HBX )
!
!---      Dissolved CO2 contribution  ---
!
          SGX = (BETAX/RHOMGB(M,NB))/
     &      (BETAX/RHOMGB(M,NB) + (1.D+0-BETAX)/RHOMNB(M,NB))
          IF( SGX.LT.1.D-12 ) SGX = 0.D+0
          SNX = 1.D+0 - SGX
          FGAX = SGX*RHOGB(M,NB)*XGCB(1,M,NB)
          FNAX = SNX*RHONB(M,NB)*XNCB(1,M,NB)
          IF( (FGAX+FNAX)/EPSL.LT.EPSL ) THEN
            HAX = 0.D+0
          ELSE
            HAX = (HGAB(M,NB)*FGAX + HNAX*FNAX)/(FGAX + FNAX)
          ENDIF
!
!---      Aqueous enthalpy and internal energy  ---
!
          CALL ENTH_L( HAX,HBX,HLB(M,NB),TB(M,NB),XLAB(M,NB),
     &      XLSB(M,NB) )
!
!---      Precipitated NaCl density, saturation, and enthalpy  ---
!
          CALL DENS_S( TB(M,NB),PX,RHOSPBX )
          CALL SOL_LS( TB(M,NB),XBSMX )
          CALL DENS_B( TB(M,NB),PX,XBSMX,RHOBX )
          SSB(M,NB) = MAX(YLSB(M,NB)-XBSMX,0.D+0)*RHOBX*SLB(M,NB)/
     &      RHOSPBX
!
!---      Change in porosity as a function of precipitated salt  ---
!
          PORDB(M,NB) = PORDB(M,NB)*(1.D+0-SSB(M,NB))
!
!---      Aqueous, gas, and nonaqueous-liquid tortuosity  ---
!
          IF( ISLC(3).EQ.1 ) CALL TORTU( IZN,SLB(M,NB),SGB(M,NB),
     &      SNB(M,NB),PORDB(M,NB),TORLB(M,NB),TORGB(M,NB),TORNB(M,NB) )
!
!---      Switch for full flash calculation, otherwise use
!         previous beta and K-factors as initial guess  ---
!
!          IF( M.EQ.2 ) THEN
!            BETA2X = BETAX
!            DO 290 IGC = 1,NGC+2
!              FK2X(IGC) = FKX(IGC)
!  290       CONTINUE
!          ENDIF
  300   CONTINUE
  400 CONTINUE
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of BCP_EOR group
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE CAP_EOR( SGX,SLX,SNX,CPGTX,CPNLX,IZN )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Compute the gas to total-liquid capillary pressure,
!     and aqueous to nonaqueous-liquid capillary pressure, given
!     the gas saturation, aqueous saturation, nonaqueous-liquid
!     saturation and contact angle.
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, July 17, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PORMED
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//CAP_EOR'
!
!---  van Genuchten saturation function
!
      IF( ISCHR(IZN).EQ.1 ) THEN
!
!---    Dual porosity model  ---
!
        IF( ISLC(11).EQ.1 ) THEN
          CALL CAP_FRAC( SGX,SLX,SNX,CPGTX,CPNLX,IZN )
!
!---      Conventional model  ---
!
        ELSE
          CALL CAP_VG( SGX,SLX,SNX,CPGTX,CPNLX,IZN )
        ENDIF
!
!---  Brooks and Corey saturation function  ---
!
      ELSEIF( ISCHR(IZN).EQ.2 ) THEN
!
!---    Dual porosity model  ---
!
        IF( ISLC(11).EQ.1 ) THEN
          CALL CAP_FRAC( SGX,SLX,SNX,CPGTX,CPNLX,IZN )
!
!---      Conventional model  ---
!
        ELSE
          CALL CAP_BC( SGX,SLX,SNX,CPGTX,CPNLX,IZN )
        ENDIF
!
!---  Zero capillary pressure saturation function  ---
!
      ELSEIF( ISCHR(IZN).EQ.3 ) THEN
        CPGTX = 0.D+0
        CPNLX = 0.D+0
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of CAP_EOR group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE CAP_EOR_EC( EPORFX,EPORMX,SGX,SLX,SNX,SGFX,SLFX,
     &  SNFX,SGMX,SLMX,SNMX,CPGTX,CPNLX,IZN )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Compute the gas to total-liquid capillary pressure,
!     and aqueous to nonaqueous-liquid capillary pressure, given
!     the gas saturation, aqueous saturation, nonaqueous-liquid
!     saturation and contact angle for the equivalent continuum
!     model
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, 19 December 2015
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PORMED
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//CAP_EOR_EC'
!
!---  van Genuchten saturation function
!
      IF( ISCHR(IZN).EQ.1 ) THEN
        CALL CAP_VG( SGX,SLX,SNX,CPGTX,CPNLX,IZN )
        CALL SPF_FRAC( SGFX,SLFX,SNFX,CPGTX,CPNLX,IZN )
        SLMX = (SLX*(EPORFX+EPORMX)-SLFX*EPORFX)/EPORMX
        SNMX = (SNX*(EPORFX+EPORMX)-SNFX*EPORFX)/EPORMX
        SGMX = 1.D+0 - SLMX - SNMX
!
!---  Brooks and Corey saturation function  ---
!
      ELSEIF( ISCHR(IZN).EQ.2 ) THEN
        CALL CAP_BC( SGX,SLX,SNX,CPGTX,CPNLX,IZN )
        CALL SPF_FRAC( SGFX,SLFX,SNFX,CPGTX,CPNLX,IZN )
        SLMX = (SLX*(EPORFX+EPORMX)-SLFX*EPORFX)/EPORMX
        SNMX = (SNX*(EPORFX+EPORMX)-SNFX*EPORFX)/EPORMX
        SGMX = 1.D+0 - SLMX - SNMX
!
!---  Zero capillary pressure saturation function  ---
!
      ELSEIF( ISCHR(IZN).EQ.3 ) THEN
        SLMX = SLX
        SLFX = SLX
        SNMX = SNX
        SNFX = SNX
        SGMX = SGX
        SGFX = SGX
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of CAP_EOR_EC group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE CHK_BO
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Check the thermodynamic and hydrologic states declared through
!     user inputs.
!
!     IC_OPT(1,N) initial condition state option
!     IC_OPT(2,N) 0 gas-oil ratio not specified
!     IC_OPT(2,N) 1 gas-oil ratio specified
!     IC_OPT(3,N) 0 aqueous saturation not specified
!     IC_OPT(3,N) 1 aqueous saturation specified
!     IC_OPT(4,N) 0 gas saturation not specified
!     IC_OPT(4,N) 1 gas saturation specified
!     IC_OPT(7,N) gas aqueous concentration option
!     IC_OPT(8,N) salt aqueous concentration option
!     IC_OPT(9,N) 0 temperature not specified
!     IC_OPT(9,N) 1 temperature specified
!     IC_OPT(10,N) 0 pressure not specified
!     IC_OPT(10,N) 1 pressure specified
!     IC_OPT(11,N) 0 relative saturation of water vapor not specified
!     IC_OPT(11,N) 1 relative saturation of water vapor specified
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, March 17, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE TRNSPT
      USE SOLTN
      USE PORMED
      USE JACOB
      USE HYST
      USE GRID
      USE GLB_PAR
      USE FDVS
      USE FDVP
      USE FDVH
      USE FDVGC
      USE DUAL_POR
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//CHK_BO'
!
!---  Check initial temperature, aqueous pressure, gas pressure,
!     and aqueous saturation  ---
!
      DO 20 N = 1,NFBN
        N_DB = N
        IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) GOTO 20
        IF( T(2,N).GT.374.14D+0 ) THEN
          INDX = 16
          IMSG = N
          RLMSG = T(2,N)
          CHMSG = 'Out of Range Initial Temperature(C) @ Node'
          CALL WRMSGS( INDX )
        ENDIF
        IF( PSO(2,N).GT.8.D+8-PATM ) THEN
          INDX = 16
          IMSG = N
          CHMSG = 'Out of Range Initial System ' //
     &      'Pressure(Pa) @ Node'
          RLMSG = PSO(2,N)+PATM
          CALL WRMSGS( INDX )
        ENDIF
   20 CONTINUE
!
!---  Webb saturation and capillary pressure matching points  ---
!
      DO 120 N = 1,NFBN
        IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) GOTO 120
        N_DB = N
        IZN = IZ(N)
        IF( ISM(IZN).EQ.0 ) CYCLE
!
!---    Aqueous saturation matching point assigned for rock/soil  ---
!
        IF( SCHR(7,IZN).GT.0.D+0 ) CYCLE
!
!---    van Genuchten moisture retension function  ---
!
        IF( ISCHR(IZN).EQ.1 ) THEN
          CNX = MAX( SCHR(3,IZN),SMALL )
          IF( SCHR(14,IZN).LE.ZERO ) THEN
            IF( IRPL(IZN).EQ.2 ) THEN
              CMX = 1.D+0 - 2.D+0/CNX
            ELSE
              CMX = 1.D+0 - 1.D+0/CNX
            ENDIF
          ELSE
            CMX = SCHR(14,IZN)
          ENDIF
          SLRX = SCHR(4,IZN)
          SNRX = SCHR(5,IZN)
          THETAX = MIN( MAX( SCHR(6,IZN),0.D+0 ),GPI )
          ALPHAX = SCHR(1,IZN)
          CMX = SCHR(14,IZN)
!
!---      Aqueous matching points ---
!
          ESLRX = 5.D-1*SLRX*(1.D+0+COS(THETAX))
          SRX = ESLRX
          CALL WEBB_VG( ALPHAX,CMX,CNX,HMPX,SMPX,SRX )
          SCHR(7,IZN) = SMPX
          SCHR(8,IZN) = HMPX
!
!---      Total-liquid matching points ---
!
          ESNRX = 5.D-1*SNRX*(1.D+0-COS(THETAX))
          SRX = ESNRX
          CALL WEBB_VG( ALPHAX,CMX,CNX,HMPX,SMPX,SRX )
          SCHR(9,IZN) = SMPX
          SCHR(10,IZN) = HMPX
!
!---      Total-liquid matching points ---
!
          ESLRX = 5.D-1*SLRX*(1.D+0+COS(THETAX))
          ESNRX = 5.D-1*SNRX*(1.D+0-COS(THETAX))
          SRX = ESLRX + ESNRX
          CALL WEBB_VG( ALPHAX,CMX,CNX,HMPX,SMPX,SRX )
          SCHR(11,IZN) = SMPX
          SCHR(12,IZN) = HMPX
!
!---    Brooks and Corey moisture retension function  ---
!
        ELSEIF( ISCHR(IZN).EQ.2 ) THEN
          SLRX = SCHR(4,IZN)
          SNRX = SCHR(5,IZN)
          THETAX = MIN( MAX( SCHR(6,IZN),0.D+0 ),GPI )
          PSIX = SCHR(2,IZN)
          CLX = SCHR(3,IZN)
!
!---      Aqueous matching points ---
!
          ESLRX = 5.D-1*SLRX*(1.D+0+COS(THETAX))
          SRX = ESLRX
          CALL WEBB_BC( CLX,HMPX,PSIX,SMPX,SRX )
          SCHR(7,IZN) = SMPX
          SCHR(8,IZN) = HMPX
!
!---      Total-liquid matching points ---
!
          ESNRX = 5.D-1*SNRX*(1.D+0-COS(THETAX))
          SRX = ESNRX
          CALL WEBB_BC( CLX,HMPX,PSIX,SMPX,SRX )
          SCHR(9,IZN) = SMPX
          SCHR(10,IZN) = HMPX
!
!---      Total-liquid matching points ---
!
          ESLRX = 5.D-1*SLRX*(1.D+0+COS(THETAX))
          ESNRX = 5.D-1*SNRX*(1.D+0-COS(THETAX))
          SRX = ESLRX + ESNRX
          CALL WEBB_BC( CLX,HMPX,PSIX,SMPX,SRX )
          SCHR(11,IZN) = SMPX
          SCHR(12,IZN) = HMPX
        ENDIF
  120 CONTINUE
!
!---  Skip flash calculations for restart simulations  ---
!
      IF( IEO.EQ.2 ) GOTO 400
!
!---    Establish reference pressure for soil compressibility  ---
!
      DO 200 N = 1,NFBN
        IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) GOTO 200
        TCMP(N) = T(2,N)
        IZN = IZ(N)
        IF( CMP(3,IZN).GT.PATM ) THEN
          PCMP(N) = CMP(3,IZN)
        ELSEIF( ISLC(61).EQ.0 ) THEN
          PCMP(N) = PSO(2,N)+PATM
        ENDIF
  200 CONTINUE
!
!---  Convert initial conditions through flash calculations  ---
!
      DO 300 N = 1,NFBN
        IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) GOTO 300
        IZN = IZ(N)
        N_DB = N
!
!---    Initial condition state not declared  ---
!
        IF( IC_OPT(1,N).LT.1 .OR. IC_OPT(1,N).GT.5 ) THEN
          INDX = 7
          IMSG = N_DB
          CHMSG = 'Specification Error: ' //
     &      'Unspecified Initial Condition State: Node'
          CALL WRMSGS( INDX )
        ENDIF
!
!---    Salt concentration undeclared  ---
!
        IF( IC_OPT(8,N).EQ.0 ) IC_OPT(8,N) = 3
!
!---    Initial condition state #1
!
!       SL = 1.0
!       SG+SN = 0.0
!       Aqueuous saturated
!
!       Declared variables:
!
!       T - temperature, C
!       PSO - pressure, Pa
!       TMS - aqueous salt relative saturation, or
!             aqueous salt mass fraction
!
        IF( IC_OPT(1,N).EQ.1 ) THEN
!
!---      Gas-oil ratio specified  ---
!
          IF( IC_OPT(2,N).NE.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 1: ' //
     &        'Gas-Oil Ratio Specified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Aqueous saturation specified  ---
!
          IF( IC_OPT(3,N).NE.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 1: ' //
     &        'Aqueous Saturation Specified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Gas saturation specified  ---
!
          IF( IC_OPT(4,N).NE.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 1: ' //
     &        'Gas Saturation Specified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Temperature unspecified  ---
!
          IF( IC_OPT(9,N).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 1: ' //
     &        'Temperature Unspecified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Pressure unspecified  ---
!
          IF( IC_OPT(10,N).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 1: ' //
     &        'Pressure Unspecified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Relative saturation of water vapor specified  ---
!
          IF( IC_OPT(4,N).NE.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 1: ' //
     &        'Relative Saturation of Water Vapor Specified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Flash calculation for initial condition #1  ---
!
          SG(2,N) = 0.D+0
          SL(2,N) = 1.D+0
          SN(2,N) = 0.D+0
          PX = PSO(2,N) + PATM
          N_DB = N
          CALL BO_IC1( PX,RHOL(2,N),TMS(2,N),T(2,N),XLS(2,N),XLW(2,N),
     &      YLS(2,N),IC_OPT(8,N) )
!
!---      Porous-media porosity  ---
!
          CALL PORSTY( N,PX,PCMP(N),PORD(2,N),PORT(2,N) )
          PORD(2,N) = MAX( PORD(2,N),EPSL )
          PORT(2,N) = MAX( PORT(2,N),PORD(2,N) )
!
!---      Equilivalent continuum or dual porosity fracture and 
!         matrix saturations assuming thermodynamic equilibrium  ---
!
          IF( ISLC(11).NE.0 ) THEN
            CALL PORSTY_M( IZN,PX,PCMP(N),PORD_M(2,N),PORT_M(2,N) )
            PORD_M(2,N) = MAX( PORD_M(2,N),EPSL )
            PORT_M(2,N) = MAX( PORT_M(2,N),PORD_M(2,N) )
            VOL_M(N) = VOL(N)*(1.D+0-FRAC_P(7,IZN))
            VOL(N) = VOL(N)*FRAC_P(7,IZN)
            EPORFX = PORD(2,N)*FRAC_P(7,IZN)
            EPORMX = PORD_M(2,N)*(1.D+0-FRAC_P(7,IZN))
            CALL CAP_EOR_EC( EPORFX,EPORMX,SG(2,N),SL(2,N),SN(2,N),
     &        SG_F(2,N),SL_F(2,N),SN_F(2,N),SG_M(2,N),SL_M(2,N),
     &        SN_M(2,N),CPGTX,CPNLX,IZN )
            IF( ISLC(11).EQ.1 ) THEN
              SG(2,N) = SG_F(2,N)
              SL(2,N) = SL_F(2,N)
              SN(2,N) = SN_F(2,N)
            ENDIF
          ELSE
            CALL CAP_EOR( SG(2,N),SL(2,N),SN(2,N),CPGTX,CPNLX,IZN )
          ENDIF
!
!---      Phase pressure from phase capillary pressures and system
!         pressure  ---
!
          PG(2,N) = PSO(2,N)
          PTX = PG(2,N) - CPGTX
          IF( CPNLX.GT.0.D+0 ) THEN
            PN(2,N) = PTX
            PL(2,N) = PN(2,N) - CPNLX
          ELSE
            PL(2,N) = PTX
            PN(2,N) = PL(2,N) + CPNLX
          ENDIF
!
!---      Phase condition  ---
!
          NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 1
!
!---    Initial condition state #2
!
!       SL+SN = 1.0
!       SG = 0.0
!       Aqueous and nonaqueous liquid saturated
!
!       Declared variables:
!
!       T - temperature, C
!       PSO - pressure, Pa
!       SL - aqueous saturation
!       POSM - gas-oil ratio
!       TMS - aqueous salt relative saturation, or
!             aqueous salt mass fraction
!
        ELSEIF( IC_OPT(1,N).EQ.2 ) THEN
!
!---      Gas-oil ratio unspecified  ---
!
          IF( IC_OPT(2,N).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 2: ' //
     &        'Gas-Oil Ratio Unspecified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Aqueous saturation unspecified  ---
!
          IF( IC_OPT(3,N).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 2: ' //
     &        'Aqueous Saturation Unspecified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Gas saturation specified  ---
!
          IF( IC_OPT(4,N).NE.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 2: ' //
     &        'Gas Saturation Specified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Temperature unspecified  ---
!
          IF( IC_OPT(9,N).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 2: ' //
     &        'Temperature Unspecified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Pressure unspecified  ---
!
          IF( IC_OPT(10,N).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 2: ' //
     &        'Pressure Unspecified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Relative saturation of water vapor specified  ---
!
          IF( IC_OPT(4,N).NE.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 2: ' //
     &        'Relative Saturation of Water Vapor Specified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Check for pressure below bubble-point pressure  ---
!
          PX = PSO(2,N) + PATM
          CALL BO_BP( PBPX,POSM(2,N),T(2,N) )
          IF( PX.LT.PBPX ) THEN
            INDX = 17
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 2: ' //
     &        'Pressure Less Than Bubble-Point '
            RLMSG = PBPX
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Flash calculation for initial condition #2  ---
!
          N_DB = N
          SN(2,N) = 1.D+0 - SL(2,N)
          SG(2,N) = 0.D+0
          CALL BO_IC2( POSM(2,N),PX,RHOG(2,N),RHOL(2,N),RHON(2,N),
     &      SL(2,N),TMS(2,N),T(2,N),XGC(1,2,N),XGW(2,N),
     &      XLS(2,N),XLW(2,N),XNC(1,2,N),YLS(2,N),IC_OPT(8,N),IZ(N) )
!
!---      Porous-media porosity  ---
!
          CALL PORSTY( N,PX,PCMP(N),PORD(2,N),PORT(2,N) )
          PORD(2,N) = MAX( PORD(2,N),EPSL )
          PORT(2,N) = MAX( PORT(2,N),PORD(2,N) )
!
!---      Equilivalent continuum or dual porosity fracture and 
!         matrix saturations assuming thermodynamic equilibrium  ---
!
          IF( ISLC(11).NE.0 ) THEN
            CALL PORSTY_M( IZN,PX,PCMP(N),PORD_M(2,N),PORT_M(2,N) )
            PORD_M(2,N) = MAX( PORD_M(2,N),EPSL )
            PORT_M(2,N) = MAX( PORT_M(2,N),PORD_M(2,N) )
            VOL_M(N) = VOL(N)*(1.D+0-FRAC_P(7,IZN))
            VOL(N) = VOL(N)*FRAC_P(7,IZN)
            EPORFX = PORD(2,N)*FRAC_P(7,IZN)
            EPORMX = PORD_M(2,N)*(1.D+0-FRAC_P(7,IZN))
            CALL CAP_EOR_EC( EPORFX,EPORMX,SG(2,N),SL(2,N),SN(2,N),
     &        SG_F(2,N),SL_F(2,N),SN_F(2,N),SG_M(2,N),SL_M(2,N),
     &        SN_M(2,N),CPGTX,CPNLX,IZN )
            IF( ISLC(11).EQ.1 ) THEN
              SG(2,N) = SG_F(2,N)
              SL(2,N) = SL_F(2,N)
              SN(2,N) = SN_F(2,N)
            ENDIF
          ELSE
            CALL CAP_EOR( SG(2,N),SL(2,N),SN(2,N),CPGTX,CPNLX,IZN )
          ENDIF
!
!---      Phase pressure from phase capillary pressures and system
!         pressure  ---
!
          PG(2,N) = PSO(2,N)
          PTX = PG(2,N) - CPGTX
          IF( CPNLX.GT.0.D+0 ) THEN
            PN(2,N) = PTX
            PL(2,N) = PN(2,N) - CPNLX
          ELSE
            PL(2,N) = PTX
            PN(2,N) = PL(2,N) + CPNLX
          ENDIF
!
!---      Phase condition  ---
!
          NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 2
!
!---    Initial condition state #3
!
!       SL > 0.0
!       SG > 0.0
!       Three-phase
!
!       Declared variables:
!
!       T - temperature, C
!       PSO - pressure, Pa
!       SL - aqueous saturation
!       SG - gas saturation
!       TMS - aqueous salt relative saturation, or
!             aqueous salt mass fraction
!
        ELSEIF( IC_OPT(1,N).EQ.3 ) THEN
!
!---      Gas-oil ratio specified  ---
!
          IF( IC_OPT(2,N).NE.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 3: ' //
     &        'Gas-Oil Ratio Specified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Aqueous saturation unspecified  ---
!
          IF( IC_OPT(3,N).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 3: ' //
     &        'Aqueous Saturation Unspecified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Gas saturation unspecified  ---
!
          IF( IC_OPT(4,N).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 3: ' //
     &        'Gas Saturation Unspecified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Temperature unspecified  ---
!
          IF( IC_OPT(9,N).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 3: ' //
     &        'Temperature Unspecified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Pressure unspecified  ---
!
          IF( IC_OPT(10,N).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 3: ' //
     &        'Pressure Unspecified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Relative saturation of water vapor specified  ---
!
          IF( IC_OPT(4,N).NE.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 3: ' //
     &        'Relative Saturation of Water Vapor Specified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Check for pressure above bubble-point pressure  ---
!
          PX = PSO(2,N) + PATM
          IF( PX.GT.GCPP(28,2) ) THEN
            INDX = 17
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 3: ' //
     &        'Pressure Greater Than Bubble-Point '
            RLMSG = PBPX
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Flash calculation for initial condition #3  ---
!
          N_DB = N
          SN(2,N) = 1.D+0 - SL(2,N) - SG(2,N)
          CALL BO_IC2( POSM(2,N),PX,RHOG(2,N),RHOL(2,N),RHON(2,N),
     &      SL(2,N),TMS(2,N),T(2,N),XGC(1,2,N),XGW(2,N),
     &      XLS(2,N),XLW(2,N),XNC(1,2,N),YLS(2,N),IC_OPT(8,N),IZ(N) )
!
!---      Porous-media porosity  ---
!
          CALL PORSTY( N,PX,PCMP(N),PORD(2,N),PORT(2,N) )
          PORD(2,N) = MAX( PORD(2,N),EPSL )
          PORT(2,N) = MAX( PORT(2,N),PORD(2,N) )
!
!---      Equilivalent continuum or dual porosity fracture and 
!         matrix saturations assuming thermodynamic equilibrium  ---
!
          IF( ISLC(11).NE.0 ) THEN
            CALL PORSTY_M( IZN,PX,PCMP(N),PORD_M(2,N),PORT_M(2,N) )
            PORD_M(2,N) = MAX( PORD_M(2,N),EPSL )
            PORT_M(2,N) = MAX( PORT_M(2,N),PORD_M(2,N) )
            VOL_M(N) = VOL(N)*(1.D+0-FRAC_P(7,IZN))
            VOL(N) = VOL(N)*FRAC_P(7,IZN)
            EPORFX = PORD(2,N)*FRAC_P(7,IZN)
            EPORMX = PORD_M(2,N)*(1.D+0-FRAC_P(7,IZN))
            CALL CAP_EOR_EC( EPORFX,EPORMX,SG(2,N),SL(2,N),SN(2,N),
     &        SG_F(2,N),SL_F(2,N),SN_F(2,N),SG_M(2,N),SL_M(2,N),
     &        SN_M(2,N),CPGTX,CPNLX,IZN )
            IF( ISLC(11).EQ.1 ) THEN
              SG(2,N) = SG_F(2,N)
              SL(2,N) = SL_F(2,N)
              SN(2,N) = SN_F(2,N)
            ENDIF
          ELSE
            CALL CAP_EOR( SG(2,N),SL(2,N),SN(2,N),CPGTX,CPNLX,IZN )
          ENDIF
!
!---      Phase pressure from phase capillary pressures and system
!         pressure  ---
!
          PG(2,N) = PSO(2,N)
          PTX = PG(2,N) - CPGTX
          IF( CPNLX.GT.0.D+0 ) THEN
            PN(2,N) = PTX
            PL(2,N) = PN(2,N) - CPNLX
          ELSE
            PL(2,N) = PTX
            PN(2,N) = PL(2,N) + CPNLX
          ENDIF
!
!---      Phase condition  ---
!
          NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 3
!
!---    Initial condition state #4
!
!       SG = 0.0
!       SL = 0.0
!       SN = 1.0
!       Nonaqueous liquid saturated
!
!       Declared variables:
!
!       T - temperature, C
!       PSO - pressure, Pa
!       POSM - gas-oil ratio
!       PVW - relative saturation of water vapor
!
        ELSEIF( IC_OPT(1,N).EQ.4 ) THEN
!
!---      Gas-oil ratio unspecified  ---
!
          IF( IC_OPT(2,N).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 4: ' //
     &        'Gas-Oil Ratio Unspecified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Aqueous saturation specified  ---
!
          IF( IC_OPT(3,N).NE.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 4: ' //
     &        'Aqueous Saturation Specified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Gas saturation specified  ---
!
          IF( IC_OPT(4,N).NE.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 4: ' //
     &        'Gas Saturation Specified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Temperature unspecified  ---
!
          IF( IC_OPT(9,N).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 4: ' //
     &        'Temperature Unspecified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Pressure unspecified  ---
!
          IF( IC_OPT(10,N).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 4: ' //
     &        'Pressure Unspecified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Relative saturation of water vapor unspecified  ---
!
          IF( IC_OPT(4,N).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 4: ' //
     &        'Relative Saturation of Water Vapor Unspecified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Check for pressure below bubble-point pressure  ---
!
          PX = PSO(2,N) + PATM
          CALL BO_BP( PBPX,POSM(2,N),T(2,N) )
          IF( PX.LT.PBPX ) THEN
            INDX = 17
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 4: ' //
     &        'Pressure Less Than Bubble-Point '
            RLMSG = PBPX
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Flash calculation for initial condition #4  ---
!
          PX = PSO(2,N) + PATM
          TMS(2,N) = YLS(2,N)
          IF( TMS(2,N).GT.0.D+0 ) THEN
            CALL SOL_LS( T(2,N),YLS(2,N) )
          ELSE
            YLS(2,N) = 0.D+0
          ENDIF
          SG(2,N) = 0.D+0
          SL(2,N) = 0.D+0
          SN(2,N) = 1.D+0
          N_DB = N
          CALL BO_IC3( POSM(2,N),PVW(2,N),PX,RHOG(2,N),RHON(2,N),
     &      T(2,N),XGC(1,2,N),XGW(2,N),XNC(1,2,N),YLS(2,N),IZN )
!
!---      Porous-media porosity  ---
!
          CALL PORSTY( N,PX,PCMP(N),PORD(2,N),PORT(2,N) )
          PORD(2,N) = MAX( PORD(2,N),EPSL )
          PORT(2,N) = MAX( PORT(2,N),PORD(2,N) )
!
!---      Equilivalent continuum or dual porosity fracture and 
!         matrix saturations assuming thermodynamic equilibrium  ---
!
          IF( ISLC(11).NE.0 ) THEN
            CALL PORSTY_M( IZN,PX,PCMP(N),PORD_M(2,N),PORT_M(2,N) )
            PORD_M(2,N) = MAX( PORD_M(2,N),EPSL )
            PORT_M(2,N) = MAX( PORT_M(2,N),PORD_M(2,N) )
            VOL_M(N) = VOL(N)*(1.D+0-FRAC_P(7,IZN))
            VOL(N) = VOL(N)*FRAC_P(7,IZN)
            EPORFX = PORD(2,N)*FRAC_P(7,IZN)
            EPORMX = PORD_M(2,N)*(1.D+0-FRAC_P(7,IZN))
            CALL CAP_EOR_EC( EPORFX,EPORMX,SG(2,N),SL(2,N),SN(2,N),
     &        SG_F(2,N),SL_F(2,N),SN_F(2,N),SG_M(2,N),SL_M(2,N),
     &        SN_M(2,N),CPGTX,CPNLX,IZN )
            IF( ISLC(11).EQ.1 ) THEN
              SG(2,N) = SG_F(2,N)
              SL(2,N) = SL_F(2,N)
              SN(2,N) = SN_F(2,N)
            ENDIF
          ELSE
            CALL CAP_EOR( SG(2,N),SL(2,N),SN(2,N),CPGTX,CPNLX,IZN )
          ENDIF
!
!---      Phase pressure from phase capillary pressures and system
!         pressure  ---
!
          PG(2,N) = PSO(2,N)
          PTX = PG(2,N) - CPGTX
          IF( CPNLX.GT.0.D+0 ) THEN
            PN(2,N) = PTX
            PL(2,N) = PN(2,N) - CPNLX
          ELSE
            PL(2,N) = PTX
            PN(2,N) = PL(2,N) + CPNLX
          ENDIF
!
!---      Phase condition  ---
!
          NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 4
!
!---    Initial condition state #5
!
!       SG > 0.0
!       SL = 0.0
!       SN > 0.0
!       Nonaqueous liquid and gas saturated
!
!       Declared variables:
!
!       T - temperature, C
!       PSO - pressure, Pa
!       SG - gas saturation
!       PVW - relative saturation of water vapor
!
        ELSEIF( IC_OPT(1,N).EQ.5 ) THEN
!
!---      Gas-oil ratio specified  ---
!
          IF( IC_OPT(2,N).NE.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 5: ' //
     &        'Gas-Oil Ratio Specified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Aqueous saturation specified  ---
!
          IF( IC_OPT(3,N).NE.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 5: ' //
     &        'Aqueous Saturation Specified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Gas saturation unspecified  ---
!
          IF( IC_OPT(4,N).NE.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 5: ' //
     &        'Gas Saturation Unspecified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Temperature unspecified  ---
!
          IF( IC_OPT(9,N).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 5: ' //
     &        'Temperature Unspecified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Pressure unspecified  ---
!
          IF( IC_OPT(10,N).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 5: ' //
     &        'Pressure Unspecified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Relative saturation of water vapor unspecified  ---
!
          IF( IC_OPT(4,N).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 5: ' //
     &        'Relative Saturation of Water Vapor Unspecified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Check for pressure above bubble-point pressure  ---
!
          PX = PSO(2,N) + PATM
          CALL BO_BP( PBPX,POSM(2,N),T(2,N) )
          IF( PX.GT.PBPX ) THEN
            INDX = 17
            CHMSG = 'Specification Error: ' //
     &        'Black-Oil Initial Condition State 5: ' //
     &        'Pressure Greater Than Bubble-Point '
            RLMSG = PBPX
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Flash calculation for initial condition #5  ---
!
          PX = PSO(2,N) + PATM
          TMS(2,N) = YLS(2,N)
          IF( TMS(2,N).GT.0.D+0 ) THEN
            CALL SOL_LS( T(2,N),YLS(2,N) )
          ELSE
            YLS(2,N) = 0.D+0
          ENDIF
          SL(2,N) = 0.D+0
          SN(2,N) = 1.D+0 - SG(2,N)
          N_DB = N
          CALL BO_IC3( POSM(2,N),PVW(2,N),PX,RHOG(2,N),RHON(2,N),
     &      T(2,N),XGC(1,2,N),XGW(2,N),XNC(1,2,N),YLS(2,N),IZN )
!
!---      Porous-media porosity  ---
!
          CALL PORSTY( N,PX,PCMP(N),PORD(2,N),PORT(2,N) )
          PORD(2,N) = MAX( PORD(2,N),EPSL )
          PORT(2,N) = MAX( PORT(2,N),PORD(2,N) )
!
!---      Equilivalent continuum or dual porosity fracture and 
!         matrix saturations assuming thermodynamic equilibrium  ---
!
          IF( ISLC(11).NE.0 ) THEN
            CALL PORSTY_M( IZN,PX,PCMP(N),PORD_M(2,N),PORT_M(2,N) )
            PORD_M(2,N) = MAX( PORD_M(2,N),EPSL )
            PORT_M(2,N) = MAX( PORT_M(2,N),PORD_M(2,N) )
            VOL_M(N) = VOL(N)*(1.D+0-FRAC_P(7,IZN))
            VOL(N) = VOL(N)*FRAC_P(7,IZN)
            EPORFX = PORD(2,N)*FRAC_P(7,IZN)
            EPORMX = PORD_M(2,N)*(1.D+0-FRAC_P(7,IZN))
            CALL CAP_EOR_EC( EPORFX,EPORMX,SG(2,N),SL(2,N),SN(2,N),
     &        SG_F(2,N),SL_F(2,N),SN_F(2,N),SG_M(2,N),SL_M(2,N),
     &        SN_M(2,N),CPGTX,CPNLX,IZN )
            IF( ISLC(11).EQ.1 ) THEN
              SG(2,N) = SG_F(2,N)
              SL(2,N) = SL_F(2,N)
              SN(2,N) = SN_F(2,N)
            ENDIF
          ELSE
            CALL CAP_EOR( SG(2,N),SL(2,N),SN(2,N),CPGTX,CPNLX,IZN )
          ENDIF
!
!---      Phase pressure from phase capillary pressures and system
!         pressure  ---
!
          PG(2,N) = PSO(2,N)
          PTX = PG(2,N) - CPGTX
          IF( CPNLX.GT.0.D+0 ) THEN
            PN(2,N) = PTX
            PL(2,N) = PN(2,N) - CPNLX
          ELSE
            PL(2,N) = PTX
            PN(2,N) = PL(2,N) + CPNLX
          ENDIF
!
!---      Phase condition  ---
!
          NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 5
        ENDIF
  300 CONTINUE
  400 CONTINUE
!
!---  Initializations for normal and restart simulations  ---
!
      DO 500 N = 1,NFBN
        IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) GOTO 500
        IZN = IZ(N)
        N_DB = N
!
!---    Porous-media porosity  ---
!
        PX = PSO(2,N) + PATM
        CALL PORSTY( N,PX,PCMP(N),PORD(2,N),PORT(2,N) )
        PORD(2,N) = MAX( PORD(2,N),EPSL )
        PORT(2,N) = MAX( PORT(2,N),PORD(2,N) )
!
!---    Petroleum component total mass  ---
!
        TMC(1,2,N) = PORD(2,N)*VOL(N)*(XLA(2,N)*RHOL(2,N)*SL(2,N) +
     &    XGC(1,2,N)*RHOG(2,N)*SG(2,N) + XNC(1,2,N)*RHON(2,N)*SN(2,N))
        DO 410 IGC = 2,NGC+2
          TMC(IGC,2,N) = PORD(2,N)*VOL(N)*
     &      (XGC(IGC,2,N)*RHOG(2,N)*SG(2,N)
     &      + XNC(IGC,2,N)*RHON(2,N)*SN(2,N))
  410   CONTINUE
!
!---    Initialize old-time-step values  ---
!
        T(1,N) = T(2,N)
        PL(1,N) = PL(2,N)
        PG(1,N) = PG(2,N)
        PN(1,N) = PN(2,N)
        PSO(1,N) = PSO(2,N)
        DO 420 IGC = 1,NGC+2
          ZMC(IGC,1,N) = ZMC(IGC,2,N)
  420   CONTINUE
        SG(1,N) = SG(2,N)
        SL(1,N) = SL(2,N)
        SN(1,N) = SN(2,N)
        YLS(1,N) = YLS(2,N)
        PORD(1,N) = PORD(2,N)
        NPHAZ(1,N) = NPHAZ(2,N)
!
!---    Assign dissolved-salt mass fractions,
!       isobrine option  ---
!
        IF( ISLC(32).EQ.1 ) THEN
          DO 430 M = 3,ISVC+2
            XLS(M,N) = XLS(2,N)
            YLS(M,N) = YLS(2,N)
  430     CONTINUE
        ENDIF
  500 CONTINUE
#ifdef dual_porosity
!
!---  Equilibrate matrix and fracture for normal simulations
!     with the dual porosity model  ---
!
      IF( IEO.NE.2 ) THEN
        DO N = 1,NFBN
          IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) CYCLE
          DO IGC = 1,NGC+2
            ZMC_M(IGC,2,N) = ZMC(IGC,2,N)
            XGC_M(IGC,2,N) = XGC(IGC,2,N)
            XNC_M(IGC,2,N) = XNC(IGC,2,N)
          ENDDO
          XLA_M(2,N) = XLA(2,N)
          RHOG_M(2,N) = RHOG(2,N)
          RHOL_M(2,N) = RHOL(2,N)
          RHON_M(2,N) = RHON(2,N)
          T_M(2,N) = T(2,N)
          PL_M(2,N) = PL(2,N)
          PG_M(2,N) = PG(2,N)
          PN_M(2,N) = PN(2,N)
          PSO_M(2,N) = PSO(2,N)
          XLS_M(2,N) = XLS(2,N)
          YLS_M(2,N) = YLS(2,N)
          NPHAZ_M(2,N) = NPHAZ(2,N)
!
!---      Matrix petroleum component total mass  ---
!
          TMC_M(1,2,N) = PORD_M(2,N)*VOL_M(N)*(XLA_M(2,N)*RHOL_M(2,N)*
     &      SL_M(2,N) + XGC_M(1,2,N)*RHOG_M(2,N)*SG_M(2,N) + 
     &      XNC_M(1,2,N)*RHON_M(2,N)*SN_M(2,N))
          DO IGC = 2,NGC+2
            TMC_M(IGC,2,N) = PORD_M(2,N)*VOL_M(N)*
     &        (XGC_M(IGC,2,N)*RHOG_M(2,N)*SG_M(2,N)
     &        + XNC_M(IGC,2,N)*RHON_M(2,N)*SN_M(2,N))
          ENDDO
!
!---      Initialize old-time-step values  ---
!
          T_M(1,N) = T_M(2,N)
          PL_M(1,N) = PL_M(2,N)
          PG_M(1,N) = PG_M(2,N)
          PN_M(1,N) = PN_M(2,N)
          PSO_M(1,N) = PSO_M(2,N)
          DO IGC = 1,NGC+2
            ZMC_M(IGC,1,N) = ZMC_M(IGC,2,N)
          ENDDO
          SG_M(1,N) = SG_M(2,N)
          SL_M(1,N) = SL_M(2,N)
          SN_M(1,N) = SN_M(2,N)
          YLS_M(1,N) = YLS_M(2,N)
          PORD_M(1,N) = PORD_M(2,N)
          NPHAZ_M(1,N) = NPHAZ_M(2,N)
!
!---      Assign dissolved-salt mass fractions,
!         isobrine option  ---
!
          IF( ISLC(32).EQ.1 ) THEN
            DO M = 3,ISVC+2
              XLS_M(M,N) = XLS_M(2,N)
              YLS_M(M,N) = YLS_M(2,N)
            ENDDO
          ENDIF
        ENDDO
      ENDIF
#endif
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of CHK_BO group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE CHK_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Check the thermodynamic and hydrologic states declared through
!     user inputs.
!
!     IC_OPT(1,N) initial condition state option
!     IC_OPT(2,N) 0 total nonaqueous saturation not specified
!     IC_OPT(2,N) 1 total nonaqueous saturation specified
!     IC_OPT(3,N) 0 aqueous saturation not specified
!     IC_OPT(3,N) 1 aqueous saturation specified
!     IC_OPT(4,N) 0 gas mass fraction not specified
!     IC_OPT(4,N) 1 gas mass fraction specified
!     IC_OPT(5,N) 0 nonaqueous liquid mass fraction not specified
!     IC_OPT(5,N) 1 nonaqueous liquid mass fraction specified
!     IC_OPT(6,N) 0 total component mass fraction not specified
!     IC_OPT(6,N) 1 total component mass fraction specified
!     IC_OPT(7,N) CO2 aqueous concentration option
!     IC_OPT(8,N) salt concentration option
!     IC_OPT(9,N) 0 temperature not specified
!     IC_OPT(9,N) 1 temperature specified
!     IC_OPT(10,N) 0 pressure not specified
!     IC_OPT(10,N) 1 pressure specified
!     IC_OPT(11,N) 0 gas mole fraction not specified
!     IC_OPT(11,N) 1 gas mole fraction specified
!     IC_OPT(12,N) 0 nonaqueous liquid mole fraction not specified
!     IC_OPT(12,N) 1 nonaqueous liquid mole fraction specified
!     IC_OPT(13,N) 0 total component mole fraction not specified
!     IC_OPT(13,N) 1 total component mole fraction specified
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, March 17, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE TRNSPT
      USE SOLTN
      USE PORMED
      USE JACOB
      USE HYST
      USE GRID
      USE GLB_PAR
      USE FDVS
      USE FDVP
      USE FDVH
      USE FDVGC
      USE DUAL_POR
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//CHK_EOR'
#ifdef dual_porosity
!
!---  Assign fracture permeability to conventional permeability
!     parameters and shift matrix permeability parameters  ---
!
      DO IROCK = 1,NROCK
        POR(3,IROCK) = POR(1,IROCK)*(1.D+0-FRAC_P(7,IROCK))
        POR(4,IROCK) = POR(2,IROCK)*(1.D+0-FRAC_P(7,IROCK))
        POR(1,IROCK) = FRAC_P(8,IROCK)*FRAC_P(7,IROCK)
        POR(2,IROCK) = FRAC_P(8,IROCK)*FRAC_P(7,IROCK)
        PERM(4,IROCK) = PERM(1,IROCK)
        PERM(5,IROCK) = PERM(2,IROCK)
        PERM(6,IROCK) = PERM(3,IROCK)
        PERM(1,IROCK) = FRAC_P(9,IROCK)
        PERM(2,IROCK) = FRAC_P(10,IROCK)
        PERM(3,IROCK) = FRAC_P(11,IROCK)
      ENDDO
#endif
!
!---  Black-oil option  ---
!
      IF( ISLC(68).EQ.0 ) THEN
        CALL CHK_BO
        ISUB_LOG = ISUB_LOG-1
        RETURN
      ENDIF
!
!---  Compositional option  ---
!
!
!---  K-factors computed from fugacity coefficients  ---
!
      IFK = 0     
!
!---  Check initial temperature, aqueous pressure, gas pressure,
!     and aqueous saturation  ---
!
      DO 20 N = 1,NFBN
        N_DB = N
        IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) GOTO 20
        IF( T(2,N).GT.374.14D+0 ) THEN
          INDX = 16
          IMSG = N
          RLMSG = T(2,N)
          CHMSG = 'Out of Range Initial Temperature(C) @ Node'
          CALL WRMSGS( INDX )
        ENDIF
        IF( PSO(2,N).GT.8.D+8-PATM ) THEN
          INDX = 16
          IMSG = N
          CHMSG = 'Out of Range Initial System ' //
     &      'Pressure(Pa) @ Node'
          RLMSG = PSO(2,N)+PATM
          CALL WRMSGS( INDX )
        ENDIF
   20 CONTINUE
!
!---  Minimum miscibility pressure simulation  ---
!
      IF( IEO.EQ.4 ) THEN
        DO 100 N = 1,NFBN
          IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) GOTO 100
          N_DB = N
          IF( IC_OPT(1,N).EQ.1 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Initial Condition State 1 + ' //
     &        'Minimum Miscibility Pressure Simulation Specified'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Initial mole fractions from specified mass fractions and
!         verify mole fraction summation  ---
!
          IF( IC_OPT(6,N).NE.0 ) IOPTX = -1
          IF( IC_OPT(13,N).NE.0 ) IOPTX = 1
          N_DB = N
          CALL INIT_FRAC( ZMC(1,2,N),IOPTX )
          PX = PSO(2,N) + PATM
          CALL FLH_MMP( PX,T(2,N),ZMC(1,2,N) )
!#ifdef ecke
!!
!!---    Load reactive transport total and diffusive porosity  ---
!!
!        POR0(1,N) = POR(1,IZ(N))
!        POR0(2,N) = POR(2,IZ(N))
!        POR0(3,N) = POR(1,IZ(N))
!#endif
  100   CONTINUE
        ISUB_LOG = ISUB_LOG-1
        RETURN
      ENDIF
!
!---  Webb saturation and capillary pressure matching points  ---
!
      DO 120 N = 1,NFBN
        IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) GOTO 120
        N_DB = N
        IZN = IZ(N)
        IF( ISM(IZN).EQ.0 ) CYCLE
!
!---    Aqueous saturation matching point assigned for rock/soil  ---
!
        IF( SCHR(7,IZN).GT.0.D+0 ) CYCLE
!
!---    van Genuchten moisture retension function  ---
!
        IF( ISCHR(IZN).EQ.1 ) THEN
          CNX = MAX( SCHR(3,IZN),SMALL )
          IF( SCHR(14,IZN).LE.ZERO ) THEN
            IF( IRPL(IZN).EQ.2 ) THEN
              CMX = 1.D+0 - 2.D+0/CNX
            ELSE
              CMX = 1.D+0 - 1.D+0/CNX
            ENDIF
          ELSE
            CMX = SCHR(14,IZN)
          ENDIF
          SLRX = SCHR(4,IZN)
          SNRX = SCHR(5,IZN)
          THETAX = MIN( MAX( SCHR(6,IZN),0.D+0 ),GPI )
          ALPHAX = SCHR(1,IZN)
          CMX = SCHR(14,IZN)
!
!---      Aqueous matching points ---
!
          ESLRX = 5.D-1*SLRX*(1.D+0+COS(THETAX))
          SRX = ESLRX
          CALL WEBB_VG( ALPHAX,CMX,CNX,HMPX,SMPX,SRX )
          SCHR(7,IZN) = SMPX
          SCHR(8,IZN) = HMPX
!
!---      Total-liquid matching points ---
!
          ESNRX = 5.D-1*SNRX*(1.D+0-COS(THETAX))
          SRX = ESNRX
          CALL WEBB_VG( ALPHAX,CMX,CNX,HMPX,SMPX,SRX )
          SCHR(9,IZN) = SMPX
          SCHR(10,IZN) = HMPX
!
!---      Total-liquid matching points ---
!
          ESLRX = 5.D-1*SLRX*(1.D+0+COS(THETAX))
          ESNRX = 5.D-1*SNRX*(1.D+0-COS(THETAX))
          SRX = ESLRX + ESNRX
          CALL WEBB_VG( ALPHAX,CMX,CNX,HMPX,SMPX,SRX )
          SCHR(11,IZN) = SMPX
          SCHR(12,IZN) = HMPX
!
!---    Brooks and Corey moisture retension function  ---
!
        ELSEIF( ISCHR(IZN).EQ.2 ) THEN
          SLRX = SCHR(4,IZN)
          SNRX = SCHR(5,IZN)
          THETAX = MIN( MAX( SCHR(6,IZN),0.D+0 ),GPI )
          PSIX = SCHR(2,IZN)
          CLX = SCHR(3,IZN)
!
!---      Aqueous matching points ---
!
          ESLRX = 5.D-1*SLRX*(1.D+0+COS(THETAX))
          SRX = ESLRX
          CALL WEBB_BC( CLX,HMPX,PSIX,SMPX,SRX )
          SCHR(7,IZN) = SMPX
          SCHR(8,IZN) = HMPX
!
!---      Total-liquid matching points ---
!
          ESNRX = 5.D-1*SNRX*(1.D+0-COS(THETAX))
          SRX = ESNRX
          CALL WEBB_BC( CLX,HMPX,PSIX,SMPX,SRX )
          SCHR(9,IZN) = SMPX
          SCHR(10,IZN) = HMPX
!
!---      Total-liquid matching points ---
!
          ESLRX = 5.D-1*SLRX*(1.D+0+COS(THETAX))
          ESNRX = 5.D-1*SNRX*(1.D+0-COS(THETAX))
          SRX = ESLRX + ESNRX
          CALL WEBB_BC( CLX,HMPX,PSIX,SMPX,SRX )
          SCHR(11,IZN) = SMPX
          SCHR(12,IZN) = HMPX
        ENDIF
  120 CONTINUE
!
!---  Skip flash calculations for restart simulations  ---
!
      IF( IEO.EQ.2 ) GOTO 400
!
!---    Establish reference pressure for soil compressibility  ---
!
      DO 200 N = 1,NFBN
        IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) GOTO 200
        IZN = IZ(N)
        IF( CMP(3,IZN).GT.PATM ) THEN
          PCMP(N) = CMP(3,IZN)
        ELSEIF( ISLC(61).EQ.0 ) THEN
          PCMP(N) = PSO(2,N)+PATM
        ENDIF
  200 CONTINUE
!
!---  Summation of petroleum component indices  ---
!
      NC = 0
      DO 210 IGC = 1,NGC+2
        NC = NC + IGC
  210 CONTINUE
!
!---  Convert initial conditions through flash calculations  ---
!
      DO 300 N = 1,NFBN
        IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) GOTO 300
        IZN = IZ(N)
        N_DB = N
!
!---    Initial condition state not declared  ---
!
        IF( IC_OPT(1,N).LT.1 .OR. IC_OPT(1,N).GT.3 ) THEN
          INDX = 7
          IMSG = N_DB
          CHMSG = 'Specification Error: ' //
     &      'Unspecified Initial Condition State: Node'
          CALL WRMSGS( INDX )
        ENDIF
!
!---    Salt concentration undeclared, set as mass fraction  ---
!
        IF( IC_OPT(8,N).EQ.0 ) IC_OPT(8,N) = 3
!
!---    Initial condition state #1
!
!       SL = 1.0
!       SG+SN = 0.0
!       Aqueuous saturated
!
!       Declared variables:
!
!       T - temperature, C
!       PL - aqueous pressure, Pa
!       PVA - aqueous CO2 relative saturation, or
!             aqueous CO2 mass fraction
!       TMS - aqueous salt relative saturation, or
!           aqueous salt mass fraction
!
        IF( IC_OPT(1,N).EQ.1 ) THEN
!
!---      Total nonaqueous saturation specified  ---
!
          IF( IC_OPT(2,N).NE.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Initial Condition State 1: ' //
     &        'Total Nonaqueous Saturation Specified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Aqueous saturation specified  ---
!
          IF( IC_OPT(3,N).NE.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Initial Condition State 1: ' //
     &        'Aqueous Saturation Specified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Gas component mass fraction or
!         gas component mole fraction specified  ---
!
          IF( IC_OPT(4,N).NE.0 .OR. IC_OPT(11,N).NE.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Initial Condition State 1: ' //
     &        'Gas Component Mass or Mole Fraction Specified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Nonaqueous-liquid component mass fraction or
!         Nonaqueous-liquid component mole fraction specified  ---
!
          IF( IC_OPT(5,N).NE.0 .OR. IC_OPT(12,N).NE.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Initial Condition State 1: Nonaqueous-Liquid ' //
     &        'Component Mass or Mole Fraction Specified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Total component mass fraction or
!         Total component mole fraction specified  ---
!
          IF( IC_OPT(6,N).NE.0 .OR. IC_OPT(13,N).NE.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Initial Condition State 1: Total ' //
     &        'Component Mass or Mole Fraction Specified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Temperature unspecified  ---
!
          IF( IC_OPT(9,N).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Initial Condition State 1: ' //
     &        'Temperature Unspecified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Pressure unspecified  ---
!
          IF( IC_OPT(10,N).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Initial Condition State 1: ' //
     &        'Pressure Unspecified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Aqueous CO2 conc. unspecified, set as mass fraction  ---
!
          IF( IC_OPT(7,N).EQ.0 ) IC_OPT(7,N) = 3
!
!---      Flash calculation for initial condition #1  ---
!
          SG(2,N) = 0.D+0
          SL(2,N) = 1.D+0
          SN(2,N) = 0.D+0
          PX = PSO(2,N) + PATM
          N_DB = N
          CALL FLH_IC1( PX,PVA(2,N),RHOL(2,N),RHOML(2,N),TMS(2,N),
     &      T(2,N),XLA(2,N),XLS(2,N),XLW(2,N),XMLA(2,N),XMLS(2,N),
     &      XMLW(2,N),YLS(2,N),ZMC(1,2,N),IC_OPT(7,N),IC_OPT(8,N) )
!
!---      Equilivalent continuum or dual porosity fracture and 
!         matrix saturations assuming thermodynamic equilibrium  ---
!
          IF( ISLC(11).NE.0 ) THEN
            CALL PORSTY( N,PX,PCMP(N),PORD(2,N),PORT(2,N) )
            PORD(2,N) = MAX( PORD(2,N),EPSL )
            PORT(2,N) = MAX( PORT(2,N),PORD(2,N) )
            CALL PORSTY_M( IZN,PX,PCMP(N),PORD_M(2,N),PORT_M(2,N) )
            PORD_M(2,N) = MAX( PORD_M(2,N),EPSL )
            PORT_M(2,N) = MAX( PORT_M(2,N),PORD_M(2,N) )
            VOL_M(N) = VOL(N)*(1.D+0-FRAC_P(7,IZN))
            VOL(N) = VOL(N)*FRAC_P(7,IZN)
            EPORFX = PORD(2,N)*FRAC_P(7,IZN)
            EPORMX = PORD_M(2,N)*(1.D+0-FRAC_P(7,IZN))
            CALL CAP_EOR_EC( EPORFX,EPORMX,SG(2,N),SL(2,N),SN(2,N),
     &        SG_F(2,N),SL_F(2,N),SN_F(2,N),SG_M(2,N),SL_M(2,N),
     &        SN_M(2,N),CPGTX,CPNLX,IZN )
            IF( ISLC(11).EQ.1 ) THEN
              SG(2,N) = SG_F(2,N)
              SL(2,N) = SL_F(2,N)
              SN(2,N) = SN_F(2,N)
            ENDIF
          ELSE
            CALL CAP_EOR( SG(2,N),SL(2,N),SN(2,N),CPGTX,CPNLX,IZN )
          ENDIF
!
!---      Phase pressure from phase capillary pressures and system
!         pressure  ---
!
          PG(2,N) = PSO(2,N)
          PTX = PG(2,N) - CPGTX
          IF( CPNLX.GT.0.D+0 ) THEN
            PN(2,N) = PTX
            PL(2,N) = PN(2,N) - CPNLX
          ELSE
            PL(2,N) = PTX
            PN(2,N) = PL(2,N) + CPNLX
          ENDIF
          NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 1
!
!---    Initial condition state #2
!
!       SL < 1.0
!       SG+SN > 0.0
!       Three-phase (total petroleum components)
!
!       Declared variables:
!
!       T - temperature, C
!       PG - total nonaqueous pressure, absolute Pa
!       SG - total nonaqueous saturation
!       or SL - aqueous saturation
!       ZMC - total mole fraction of petroleum components, or
!             total mass fraction of petroleum components
!       TMS - aqueous salt relative saturation, or
!           aqueous salt mass fraction
!
        ELSEIF( IC_OPT(1,N).EQ.2 ) THEN
!
!---      Total nonaqueous saturation unspecified  ---
!
          IF( IC_OPT(2,N).EQ.0 ) THEN
!
!---      Aqueous saturation unspecified  ---
!
            IF( IC_OPT(3,N).EQ.0 ) THEN
              INDX = 4
              CHMSG = 'Specification Error: ' //
     &          'Initial Condition State 2: Both Aqueous ' //
     &          'and Total Nonaqueous Saturation Unspecified.'
              CALL WRMSGS( INDX )
            ENDIF
!
!---      Total nonaqueous saturation specified  ---
!
          ELSE
!
!---        Aqueous saturation specified  ---
!
            IF( IC_OPT(3,N).NE.0 ) THEN
              INDX = 4
              CHMSG = 'Specification Error: ' //
     &          'Initial Condition State 2: Both Aqueous ' //
     &          'and Total Nonaqueous Saturation Specified.'
              CALL WRMSGS( INDX )
            ENDIF
          ENDIF
!
!---      Gas component mass fraction or
!         gas component mole fraction specified  ---
!
          IF( IC_OPT(4,N).NE.0 .OR. IC_OPT(11,N).NE.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Initial Condition State 2: ' //
     &        'Gas Component Mass or Mole Fraction Specified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Nonaqueous-liquid component mass fraction or
!         nonaqueous-liquid component mole fraction specified  ---
!
          IF( IC_OPT(5,N).NE.0 .OR. IC_OPT(12,N).NE.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Initial Condition State 2: Nonaqueous-Liquid ' //
     &        'Component Mass or Mole Fraction Specified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Total component mass fraction unspecified  ---
!
          IF( IC_OPT(6,N).EQ.0 ) THEN
!
!---        Total component mole fraction unspecified  ---
!
            IF( IC_OPT(13,N).EQ.0 ) THEN
              INDX = 4
              CHMSG = 'Specification Error: ' //
     &          'Initial Condition State 2: ' //
     &          'Neither Mass nor Mole Fractions' //
     &          'of Total Components Specified.'
              CALL WRMSGS( INDX )
            ENDIF
!
!---      Total component mass fraction specified  ---
!
          ELSE
!
!---        Total component mole fraction specified  ---
!
            IF( IC_OPT(13,N).NE.0 ) THEN
              INDX = 4
              CHMSG = 'Specification Error: ' //
     &          'Initial Condition State 2: ' //
     &          'Both Mass nor Mole Fractions' //
     &          'of Total Components Specified.'
              CALL WRMSGS( INDX )
            ENDIF
          ENDIF
!
!---      Temperature unspecified  ---
!
          IF( IC_OPT(9,N).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Initial Condition State 2: ' //
     &        'Temperature Unspecified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Pressure unspecified  ---
!
          IF( IC_OPT(10,N).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Initial Condition State 2: ' //
     &        'Pressure Unspecified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Initial total nonaqueous saturation specified  ---
!
          IF( IC_OPT(2,N).NE.0 ) SL(2,N) = 1.D+0-SN(2,N)
!
!---      Initial mole fractions from specified mass fractions and
!         verify mole fraction summation  ---
!
          IF( IC_OPT(6,N).NE.0 ) IOPTX = -1
          IF( IC_OPT(13,N).NE.0 ) IOPTX = 1
          N_DB = N
          CALL INIT_FRAC( ZMC(1,2,N),IOPTX )
!
!---      Flash calculation for initial condition #2  ---
!
          PX = PSO(2,N) + PATM
          N_DB = N
          CALL FLH_IC2( PX,RHOG(2,N),RHOMG(2,N),RHOL(2,N),RHOML(2,N),
     &      RHON(2,N),RHOMN(2,N),SG(2,N),SL(2,N),SN(2,N),TMS(2,N),
     &      T(2,N),XGC(1,2,N),XMGC(1,2,N),XGW(2,N),XMGW(2,N),XLA(2,N),
     &      XLS(2,N),XLW(2,N),XMLA(2,N),XMLS(2,N),XMLW(2,N),
     &      XNC(1,2,N),XMNC(1,2,N),YLS(2,N),
     &      ZG(2,N),ZMC(1,2,N),ZN(2,N),IC_OPT(8,N),IZ(N),NPHAZ(2,N) )
!
!---      Equilivalent continuum or dual porosity fracture and 
!         matrix saturations assuming thermodynamic equilibrium  ---
!
          IF( ISLC(11).NE.0 ) THEN
            CALL PORSTY( N,PX,PCMP(N),PORD(2,N),PORT(2,N) )
            PORD(2,N) = MAX( PORD(2,N),EPSL )
            PORT(2,N) = MAX( PORT(2,N),PORD(2,N) )
            CALL PORSTY_M( IZN,PX,PCMP(N),PORD_M(2,N),PORT_M(2,N) )
            PORD_M(2,N) = MAX( PORD_M(2,N),EPSL )
            PORT_M(2,N) = MAX( PORT_M(2,N),PORD_M(2,N) )
            VOL_M(N) = VOL(N)*(1.D+0-FRAC_P(7,IZN))
            VOL(N) = VOL(N)*FRAC_P(7,IZN)
            EPORFX = PORD(2,N)*FRAC_P(7,IZN)
            EPORMX = PORD_M(2,N)*(1.D+0-FRAC_P(7,IZN))
            CALL CAP_EOR_EC( EPORFX,EPORMX,SG(2,N),SL(2,N),SN(2,N),
     &        SG_F(2,N),SL_F(2,N),SN_F(2,N),SG_M(2,N),SL_M(2,N),
     &        SN_M(2,N),CPGTX,CPNLX,IZN )
            IF( ISLC(11).EQ.1 ) THEN
              SG(2,N) = SG_F(2,N)
              SL(2,N) = SL_F(2,N)
              SN(2,N) = SN_F(2,N)
            ENDIF
          ELSE
            CALL CAP_EOR( SG(2,N),SL(2,N),SN(2,N),CPGTX,CPNLX,IZN )
          ENDIF
!
!---      Phase pressure from phase capillary pressures and system
!         pressure  ---
!
          PG(2,N) = PSO(2,N)
          PTX = PG(2,N) - CPGTX
          IF( CPNLX.GT.0.D+0 ) THEN
            PN(2,N) = PTX
            PL(2,N) = PN(2,N) - CPNLX
          ELSE
            PL(2,N) = PTX
            PN(2,N) = PL(2,N) + CPNLX
          ENDIF
!
!---      Phase condition  ---
!
          IF( SG(2,N).LT.EPSL ) THEN
            NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 2
          ELSE
            PG(2,N) = PX - PATM
            NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 3
          ENDIF
!
!---    Initial condition state #3
!
!       SL = 0.0
!       SG+SN = 1.0
!       Nonaqueous gas and liquid saturated (total petroleum components)
!
!       Declared variables:
!
!       T - temperature, C
!       PG - gas pressure, Pa
!       ZMC - total mole fraction of petroleum components
!       or ZMC - total mass fraction of petroleum components
!       YLS - total salt mass, kg
!
        ELSEIF( IC_OPT(1,N).EQ.3 ) THEN
!
!---      Total nonaqueous saturation specified  ---
!
          IF( IC_OPT(2,N).NE.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Initial Condition State 3: ' //
     &        'Total Nonaqueous Saturation Specified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Aqueous saturation specified  ---
!
          IF( IC_OPT(3,N).NE.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Initial Condition State 3: ' //
     &        'Aqueous Saturation Specified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Gas component mass fraction or
!         gas component mole fraction specified  ---
!
          IF( IC_OPT(4,N).NE.0 .OR. IC_OPT(11,N).NE.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Initial Condition State 3: ' //
     &        'Gas Component Mass or Mole Fraction Specified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Nonaqueous-liquid component mass fraction or
!         nonaqueous-liquid component mole fraction specified  ---
!
          IF( IC_OPT(5,N).NE.0 .OR. IC_OPT(12,N).NE.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Initial Condition State 3: Nonaqueous-Liquid ' //
     &        'Component Mass or Mole Fraction Specified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Total component mass fraction unspecified  ---
!
          IF( IC_OPT(6,N).EQ.0 ) THEN
!
!---        Total component mole fraction unspecified  ---
!
            IF( IC_OPT(13,N).EQ.0 ) THEN
              INDX = 4
              CHMSG = 'Specification Error: ' //
     &          'Initial Condition State 3: ' //
     &          'Neither Mass nor Mole Fractions' //
     &          'of Total Components Specified.'
              CALL WRMSGS( INDX )
            ENDIF
!
!---      Total component mass fraction specified  ---
!
          ELSE
!
!---        Total component mole fraction specified  ---
!
            IF( IC_OPT(13,N).NE.0 ) THEN
              INDX = 4
              CHMSG = 'Specification Error: ' //
     &          'Initial Condition State 3: ' //
     &          'Both Mass nor Mole Fractions' //
     &          'of Total Components Specified.'
              CALL WRMSGS( INDX )
            ENDIF
          ENDIF
!
!---      Temperature unspecified  ---
!
          IF( IC_OPT(9,N).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Initial Condition State 3: ' //
     &        'Temperature Unspecified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Pressure unspecified  ---
!
          IF( IC_OPT(10,N).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Specification Error: ' //
     &        'Initial Condition State 3: ' //
     &        'Pressure Unspecified.'
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Initial mole fractions from specified mass fractions and
!         verify mole fraction summation  ---
!
          IF( IC_OPT(6,N).NE.0 ) IOPTX = -1
          IF( IC_OPT(13,N).NE.0 ) IOPTX = 1
          N_DB = N
          CALL INIT_FRAC( ZMC(1,2,N),IOPTX )
!
!---      Flash calculation for initial condition #3  ---
!
          PX = PSO(2,N) + PATM
          TMS(2,N) = YLS(2,N)
          IF( TMS(2,N).GT.0.D+0 ) THEN
            CALL SOL_LS( T(2,N),YLS(2,N) )
          ELSE
            YLS(2,N) = 0.D+0
          ENDIF
          N_DB = N
          CALL FLH_IC3( PVW(2,N),PX,RHOG(2,N),RHOMG(2,N),RHON(2,N),
     &      RHOMN(2,N),SG(2,N),SN(2,N),T(2,N),XGC(1,2,N),XGW(2,N),
     &      XMGC(1,2,N),XMGW(2,N),XNC(1,2,N),XMNC(1,2,N),YLS(2,N),
     &      ZG(2,N),ZMC(1,2,N),ZN(2,N),IZN,NPHAZ(2,N) )
!
!---      Equilivalent continuum or dual porosity fracture and 
!         matrix saturations assuming thermodynamic equilibrium  ---
!
          IF( ISLC(11).NE.0 ) THEN
            CALL PORSTY( N,PX,PCMP(N),PORD(2,N),PORT(2,N) )
            PORD(2,N) = MAX( PORD(2,N),EPSL )
            PORT(2,N) = MAX( PORT(2,N),PORD(2,N) )
            CALL PORSTY_M( IZN,PX,PCMP(N),PORD_M(2,N),PORT_M(2,N) )
            PORD_M(2,N) = MAX( PORD_M(2,N),EPSL )
            PORT_M(2,N) = MAX( PORT_M(2,N),PORD_M(2,N) )
            VOL_M(N) = VOL(N)*(1.D+0-FRAC_P(7,IZN))
            VOL(N) = VOL(N)*FRAC_P(7,IZN)
            EPORFX = PORD(2,N)*FRAC_P(7,IZN)
            EPORMX = PORD_M(2,N)*(1.D+0-FRAC_P(7,IZN))
            CALL CAP_EOR_EC( EPORFX,EPORMX,SG(2,N),SL(2,N),SN(2,N),
     &        SG_F(2,N),SL_F(2,N),SN_F(2,N),SG_M(2,N),SL_M(2,N),
     &        SN_M(2,N),CPGTX,CPNLX,IZN )
            IF( ISLC(11).EQ.1 ) THEN
              SG(2,N) = SG_F(2,N)
              SL(2,N) = SL_F(2,N)
              SN(2,N) = SN_F(2,N)
            ENDIF
          ELSE
            CALL CAP_EOR( SG(2,N),SL(2,N),SN(2,N),CPGTX,CPNLX,IZN )
          ENDIF
!
!---      Phase pressure from phase capillary pressures and system
!         pressure  ---
!
          PG(2,N) = PSO(2,N)
          PTX = PG(2,N) - CPGTX
          IF( CPNLX.GT.0.D+0 ) THEN
            PN(2,N) = PTX
            PL(2,N) = PN(2,N) - CPNLX
          ELSE
            PL(2,N) = PTX
            PN(2,N) = PL(2,N) + CPNLX
          ENDIF
          IF( SG(2,N).LT.EPSL ) THEN
            NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 4
          ELSE
            NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 5
          ENDIF
        ENDIF
  300 CONTINUE
  400 CONTINUE
!
!---  Initializations for normal and restart simulations  ---
!
      DO 500 N = 1,NFBN
        IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) GOTO 500
        IZN = IZ(N)
        N_DB = N
!
!---    Porous-media porosity  ---
!
        PX = PSO(2,N) + PATM
!#ifdef ecke
!        POR0(1,N) = POR0(1,N)
!        POR0(2,N) = POR0(2,N)
!#endif
        CALL PORSTY( N,PX,PCMP(N),PORD(2,N),PORT(2,N) )
        PORD(2,N) = MAX( PORD(2,N),EPSL )
        PORT(2,N) = MAX( PORT(2,N),PORD(2,N) )
!
!---    Petroleum component total mass non-restart simulations  ---
!
        IF( IEO.NE.2 ) THEN
          TMC(1,2,N) = PORD(2,N)*VOL(N)*(XLA(2,N)*RHOL(2,N)*SL(2,N) +
     &      XGC(1,2,N)*RHOG(2,N)*SG(2,N) + XNC(1,2,N)*RHON(2,N)*SN(2,N))
          DO IGC = 2,NGC+2
            TMC(IGC,2,N) = PORD(2,N)*VOL(N)*
     &        (XGC(IGC,2,N)*RHOG(2,N)*SG(2,N)
     &        + XNC(IGC,2,N)*RHON(2,N)*SN(2,N))
          ENDDO
        ENDIF
!
!---    Initialize old-time-step values  ---
!
        T(1,N) = T(2,N)
        PL(1,N) = PL(2,N)
        PG(1,N) = PG(2,N)
        PN(1,N) = PN(2,N)
        PSO(1,N) = PSO(2,N)
        DO 420 IGC = 1,NGC+2
          ZMC(IGC,1,N) = ZMC(IGC,2,N)
  420   CONTINUE
        SG(1,N) = SG(2,N)
        SL(1,N) = SL(2,N)
        SN(1,N) = SN(2,N)
        YLS(1,N) = YLS(2,N)
        PORD(1,N) = PORD(2,N)
        NPHAZ(1,N) = NPHAZ(2,N)
!
!---    Assign dissolved-salt mass fractions,
!       isobrine option  ---
!
        IF( ISLC(32).EQ.1 ) THEN
          DO 430 M = 3,ISVC+2
            XLS(M,N) = XLS(2,N)
            YLS(M,N) = YLS(2,N)
  430     CONTINUE
        ENDIF
  500 CONTINUE
#ifdef dual_porosity
!
!---  Equilibrate matrix and fracture for normal simulations
!     with the dual porosity model  ---
!
      IF( IEO.NE.2 ) THEN
        DO N = 1,NFBN
          IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) CYCLE
          DO IGC = 1,NGC+2
            ZMC_M(IGC,2,N) = ZMC(IGC,2,N)
            XGC_M(IGC,2,N) = XGC(IGC,2,N)
            XNC_M(IGC,2,N) = XNC(IGC,2,N)
          ENDDO
          XLA_M(2,N) = XLA(2,N)
          RHOG_M(2,N) = RHOG(2,N)
          RHOL_M(2,N) = RHOL(2,N)
          RHON_M(2,N) = RHON(2,N)
          T_M(2,N) = T(2,N)
          PL_M(2,N) = PL(2,N)
          PG_M(2,N) = PG(2,N)
          PN_M(2,N) = PN(2,N)
          PSO_M(2,N) = PSO(2,N)
          XLS_M(2,N) = XLS(2,N)
          YLS_M(2,N) = YLS(2,N)
          NPHAZ_M(2,N) = NPHAZ(2,N)
!
!---      Matrix petroleum component total mass  ---
!
          TMC_M(1,2,N) = PORD_M(2,N)*VOL_M(N)*(XLA_M(2,N)*RHOL_M(2,N)*
     &      SL_M(2,N) + XGC_M(1,2,N)*RHOG_M(2,N)*SG_M(2,N) + 
     &      XNC_M(1,2,N)*RHON_M(2,N)*SN_M(2,N))
          DO IGC = 2,NGC+2
            TMC_M(IGC,2,N) = PORD_M(2,N)*VOL_M(N)*
     &        (XGC_M(IGC,2,N)*RHOG_M(2,N)*SG_M(2,N)
     &        + XNC_M(IGC,2,N)*RHON_M(2,N)*SN_M(2,N))
          ENDDO
!
!---      Initialize old-time-step values  ---
!
          T_M(1,N) = T_M(2,N)
          PL_M(1,N) = PL_M(2,N)
          PG_M(1,N) = PG_M(2,N)
          PN_M(1,N) = PN_M(2,N)
          PSO_M(1,N) = PSO_M(2,N)
          DO IGC = 1,NGC+2
            ZMC_M(IGC,1,N) = ZMC_M(IGC,2,N)
          ENDDO
          SG_M(1,N) = SG_M(2,N)
          SL_M(1,N) = SL_M(2,N)
          SN_M(1,N) = SN_M(2,N)
          YLS_M(1,N) = YLS_M(2,N)
          PORD_M(1,N) = PORD_M(2,N)
          NPHAZ_M(1,N) = NPHAZ_M(2,N)
!
!---      Assign dissolved-salt mass fractions,
!         isobrine option  ---
!
          IF( ISLC(32).EQ.1 ) THEN
            DO M = 3,ISVC+2
              XLS_M(M,N) = XLS_M(2,N)
              YLS_M(M,N) = YLS_M(2,N)
            ENDDO
          ENDIF
        ENDDO
      ENDIF
#endif
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of CHK_EOR group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE CISC_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Compute initial solute concentrations.
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, March 17, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE TRNSPT
      USE SOLTN
      USE PORMED
      USE GRID
      USE GLB_PAR
      USE FDVP
      USE CONST
      USE BCV
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      IF( IEQC.EQ.0 ) RETURN
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//CISC_EOR'
      DO 140 NSL = 1,NSOLU
        DO 110 N = 1,NFBN
          N_DB = N
          IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) GOTO 110
          IZN = IZ(N)
          IF( IPCL(NSL).EQ.2 ) THEN
            XVS = SL(2,N)*RHOS(IZN)*PCSL(1,IZN,NSL)*(1.D+0-PORT(2,N))
          ELSE
            XVS = RHOS(IZN)*PCSL(1,IZN,NSL)*(1.D+0-PORT(2,N))
          ENDIF
          XVG = SG(2,N)*PORD(2,N)
          XVL = SL(2,N)*PORD(2,N)
          XVN = SN(2,N)*PORD(2,N)
!
!---      Constant gas-aqueous partition coefficient  ---
!
          IF( IPCGL(NSL).EQ.0 ) THEN
            PCGLX = PCGL(1,NSL)
!
!---      Temperature dependent gas-aqueous partition coefficient  ---
!
          ELSEIF( IPCGL(NSL).EQ.1 ) THEN
            TK = T(2,N)+TABS
            PCGLX = EXP( PCGL(1,NSL) + PCGL(2,NSL)/TK
     &        + PCGL(3,NSL)*LOG(TK) + PCGL(4,NSL)*TK
     &        + PCGL(5,NSL)*TK**2 )
!
!---      Water-vapor equilibrium gas-aqueous partition coefficient  ---
!
          ELSEIF( IPCGL(NSL).EQ.2 ) THEN
            PCGLX = RHOG(2,N)*XGW(2,N)/(RHOL(2,N)*XLW(2,N))
          ENDIF
          PCGLX = MAX( PCGLX,1.D-20 )
          PCGLX = MIN( PCGLX,1.D+20 )
!
!---      Phase-volumetric concentration ratios  ---
!
          IF( ICT(N,NSL).EQ.2 ) THEN
            C(N,NSL) = C(N,NSL)*(XVS + XVL + XVN/PCLN(1,NSL) +XVG*PCGLX)
          ELSEIF( ICT(N,NSL).EQ.3 ) THEN
            C(N,NSL) = C(N,NSL)*((XVS + XVL + XVN)/PCGLX + XVG)
          ELSEIF( ICT(N,NSL).EQ.4 ) THEN
            C(N,NSL) = C(N,NSL)*((XVS +XVL +XVG*PCGLX)*PCLN(1,NSL) +XVN)
          ENDIF
  110   CONTINUE
!
!---  Assign boundary solute concentrations for initial condition
!     type boundary conditions  ---
!
        DO 130 NB = 1,NBC
          IF( IBCT(NSL+LUK,NB).EQ.12 ) THEN
            N = IBCN(NB)
            CBO(NB,NSL) = C(N,NSL)
          ENDIF
  130   CONTINUE
  140 CONTINUE
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of CISC_EOR group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DFINA_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Reset temporarily inactive nodes.
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, March 17, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GRID
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//DFINA_EOR'
      IF( ICNV.EQ.3 ) THEN
        DO 100 N = 1,NFBN
          IXP(N) = ABS(IXP(N))
  100   CONTINUE
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of DFINA_EOR group
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE FLUX_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Matrix and fault fluxes.
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, 17 April 2020.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//FLUX_EOR'
!
!---  Aqueous volumetric flux (non-boundary surfaces)  ---
!
      CALL DRCVL
!
!---  Gas volumetric flux (non-boundary surfaces)  ---
!
      CALL DRCVG
!
!---  Nonaqueous liquid volumetric flux (non-boundary surfaces)  ---
!
      CALL DRCVN
!
!---  Petroleum component diffusive flux through gas 
!     (non-boundary surfaces)  ---
!
      DO IGC = 1,NGC+2
        IF( IGC.EQ.1 ) THEN
!
!---      Iso-CO2 option  ---
!
          IF( ISLC(45).EQ.0 ) CALL DFFGC(IGC)
        ELSEIF( IGC.EQ.2 ) THEN
!
!---      Iso-CH4 option  ---
!
          IF( ISLC(64).EQ.0 ) CALL DFFGC(IGC)
        ELSE
          CALL DFFGC(IGC)
        ENDIF
      ENDDO
!
!---  Water diffusive flux through gas (non-boundary surfaces)  ---
!
      CALL DFFGW
!
!---  Mobile CO2 diffusive flux through aqueous (non-boundary surfaces)
!     inactive for iso-CO2 option  ---
!
      IF( ISLC(45).EQ.0 .AND. ISLC(68).NE.0 ) CALL DFFLA
!
!---  Salt diffusive flux through aqueous (non-boundary surfaces)
!     inactive for iso-brine option  ---
!
      IF( ISLC(32).EQ.0 ) CALL DFFLS
!
!---  Water diffusive flux through aqueous (non-boundary surfaces)
!     (last in aqueous diffusion order as molar H2O diffusion
!     in aqueous phase equal to minus the sum of the
!     molar diffusion of salt, N2, CH4, and CO2)  ---
!
      CALL DFFLW
!
!---  Petroleum component diffusive flux through nonaqueous liquid 
!     (non-boundary surfaces)  ---
!
      DO IGC = 1,NGC+2
        IF( IGC.EQ.1 ) THEN
!
!---      Iso-CO2 option  ---
!
          IF( ISLC(45).EQ.0 ) CALL DFFNC(IGC)
        ELSEIF( IGC.EQ.2 ) THEN
!
!---      Iso-CH4 option  ---
!
          IF( ISLC(64).EQ.0 ) CALL DFFNC(IGC)
        ELSE
          CALL DFFNC(IGC)
        ENDIF
      ENDDO
!
!---  Isothermal option  ---
!
      IF( ISLC(30).EQ.0 ) THEN
!
!---    Thermal diffusive flux (non-boundary surfaces)  ---
!
        CALL THD_EOR
!
!---    Thermal advective flux for aqueous (non-boundary surfaces)  ---
!
        CALL THL_EOR
!
!---    Thermal advective flux for gas (non-boundary surfaces)  ---
!
        CALL THG_EOR
!
!---    Thermal advective flux for nonaqueous liquid
!       (non-boundary surfaces)  ---
!
        CALL THN_EOR
      ENDIF
!
!---  Volumetric fluxes, component diffusive fluxes, and thermal
!     fluxes (boundary surfaces)  ---
!
      CALL BCF_EOR
!
!---  Fault fluxes  ---
!
      IF( ISLC(74).EQ.1 ) THEN
        CALL DRCVL_FRC_EOR
        CALL DRCVG_FRC_EOR
        CALL DRCVN_FRC_EOR
!
!---    Petroleum component diffusive flux through gas 
!       for faults  ---
!
        DO IGC = 1,NGC+2
          IF( IGC.EQ.1 ) THEN
!
!---        Iso-CO2 option  ---
!
            IF( ISLC(45).EQ.0 ) CALL DFFGC_FRC_EOR(IGC)
          ELSEIF( IGC.EQ.2 ) THEN
!
!---        Iso-CH4 option  ---
!
            IF( ISLC(64).EQ.0 ) CALL DFFGC_FRC_EOR(IGC)
          ELSE
            CALL DFFGC_FRC_EOR(IGC)
          ENDIF
        ENDDO
!
!---    Water diffusive flux through gas for faults  ---
!
        CALL DFFGW_FRC_EOR
!
!---    Mobile CO2 diffusive flux through aqueous for faults
!       inactive for iso-CO2 option  ---
!
        IF( ISLC(45).EQ.0 .AND. ISLC(68).NE.0 ) CALL DFFLA_FRC_EOR
!
!---    Salt diffusive flux through aqueous for faults
!       inactive for iso-brine option  ---
!
        IF( ISLC(32).EQ.0 ) CALL DFFLS_FRC_EOR
!
!---    Water diffusive flux through aqueous for faults
!       (last in aqueous diffusion order as molar H2O diffusion
!       in aqueous phase equal to minus the sum of the
!       molar diffusion of salt, N2, CH4, and CO2)  ---
!
        CALL DFFLW_FRC_EOR
!
!---    Petroleum component diffusive flux through nonaqueous liquid 
!       for faults  ---
!
        DO IGC = 1,NGC+2
          IF( IGC.EQ.1 ) THEN
!
!---        Iso-CO2 option  ---
!
            IF( ISLC(45).EQ.0 ) CALL DFFNC_FRC_EOR(IGC)
          ELSEIF( IGC.EQ.2 ) THEN
!
!---        Iso-CH4 option  ---
!
            IF( ISLC(64).EQ.0 ) CALL DFFNC_FRC_EOR(IGC)
          ELSE
            CALL DFFNC_FRC_EOR(IGC)
          ENDIF
        ENDDO
!
!---    Isothermal option  ---
!
        IF( ISLC(30).EQ.0 ) THEN
!
!---      Thermal diffusive flux for faults  ---
!
          CALL THD_FRC_EOR
!
!---      Thermal advective flux for aqueous for faults  ---
!
          CALL THL_FRC_EOR
!
!---      Thermal advective flux for gas for faults  ---
!
          CALL THG_FRC_EOR
!
!---      Thermal advective flux for nonaqueous liquid
!         for faults  ---
!
          CALL THN_FRC_EOR
        ENDIF
!
!---    Water, petroleum-component, salt, and energy flux between
!       fault triangle and matrix grid cell  ---
!
        CALL TRNS_FRC_EOR
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of FLUX_EOR group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE FQOR_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Compute first quartile of matrix and fault residuals
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, 8 October 2021
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PARM_FRC
      USE JACOB
      USE COUP_WELL
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 RSDOX(ISVC)
!
!----------------------Executable Lines--------------------------------!
!
      IF( ICNV.EQ.1 .OR. ICNV.EQ.4 ) RETURN
      ICNVX = ICNV
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//FQOR_EOR'
!
!---  Initialize ordered matrix residuals  ---
!
      DO M = 1,ISVC
        RSDOX(M) = 1.D+12
      ENDDO
!
!---  First quartile of matrix residuals  ---
!
      RSDCX = 0.D+0
      DO M2 = 1,ISVC
        IF( M2.GT.1 ) RSDCX = RSDOX(M2-1)
        DO M1 = 1,ISVC
          IF( RSD(M1).GT.RSDCX ) RSDOX(M2) = MIN( RSD(M1),RSDOX(M2) )
        ENDDO
      ENDDO
      KX = INT(2.5D-1*(ISVC+1))
      ALPHAX = 2.5D-1*REAL(ISVC+1) - REAL(KX)
      RSDQX = RSDOX(KX) + ALPHAX*(RSDOX(KX+1)-RSDOX(KX)) 
!
!---  Initialize ordered fault residuals  ---
!
      DO M = 1,ISVC
        RSDOX(M) = 1.D+12
      ENDDO
!
!---  First quartile of fault residuals  ---
!
      RSDCX = 0.D+0
      DO M2 = 1,ISVC
        IF( M2.GT.1 ) RSDCX = RSDOX(M2-1)
        DO M1 = 1,ISVC
          IF( RSD_FRC(M1).GT.RSDCX ) RSDOX(M2) = 
     &      MIN( RSD_FRC(M1),RSDOX(M2) )
        ENDDO
      ENDDO
      KX = INT(2.5D-1*(ISVC+1))
      ALPHAX = 2.5D-1*REAL(ISVC+1) - REAL(KX)
      RSDQ_FRCX = RSDOX(KX) + ALPHAX*(RSDOX(KX+1)-RSDOX(KX)) 
!
!---  Converged solution when first quartile matrix and fracture
!     residuals and coupled-well residuals below residual limit  ---
!
      IF( RSDQX.LE.RSDMX .AND. RSDQ_FRCX.LE.RSDMX .AND. 
     &  1.D-1*RSD_CW.LE.RSDMX ) ICNV = 3
      IF( ICNVX.EQ.2 .AND. ICNV.EQ.3 ) 
     &  PRINT *,'  --- First Quartile Convergence  ---'      
!
!---  Converged solution when average matrix and fracture
!     residuals and coupled-well residuals below residual limit  ---
!
      RSDX = 0.D+0
      DO M = 1,ISVC
        RSDX = MAX( RSDAVG(M),RSDX )
      ENDDO
      RSD_FRCX = 0.D+0
      DO M = 1,ISVC
        RSD_FRCX = MAX( RSDAVG_FRC(M),RSD_FRCX )
      ENDDO
      IF( RSDX.LE.RSDMX .AND. RSD_FRCX.LE.RSDMX .AND. 
     &  1.D-1*RSD_CW.LE.RSDMX ) ICNV = 3
      IF( ICNVX.EQ.2 .AND. ICNV.EQ.3 ) 
     &  PRINT *,'  --- Average Residual Convergence  ---'      
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of FQOR_EOR group
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE INCRM_BO
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Compute primary variable increments.
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, 20 May 2014
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE JACOB
      USE HYST
      USE GRID
      USE GLB_PAR
      USE FDVS
      USE FDVP
      USE FDVGC
      USE DUAL_POR
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//INCRM_BO'
      TOLX = 2.5D-2
!
!---  Phase options, compute phase condition   ---
!
      DO 100 N = 1,NFBN
        IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) GOTO 100
        N_DB = N
!
!---    Absolute temperature  ---
!
        TKX = T(2,N)+TABS
!
!---    Phase condition #1  ---
!
!       SL = 1.0
!       SG+SN = 0.0
!       Aqueuous saturated
!
!       water mass - aqueous (system) pressure, Pa gauge - PL,PSO
!       gas mass - total gas mass - TMC(1,2,N)
!       oil mass - total oil mass - TMC(2,2,N)
!       salt mass - total salt brine mass fraction - YLS
!
        IF( MOD(NPHAZ(2,N),10).EQ.1 ) THEN
!
!---      System pressure  ---
!
          PX = PSO(2,N) + PATM
!
!---      Maximum solubility of salt in pure water  ---
!
          CALL SOL_LS( T(2,N),XBSMX )
!
!---      Salt mass fraction in brine  ---
!
          XBSX = MIN( YLS(2,N),XBSMX )
          CALL SP_B( T(2,N),XBSX,PSBX )
!
!---      Maximum solubility of CO2 in aqueous phase  ---
!
          PVAX = 0.D+0
          CALL EQUIL( T(2,N),PX,PVAX,XBSX,XLAX,XLSX,XLWX )
!
!---      Solubility of CO2 in aqueous phase  ---
!
          CALL EQUIL( T(2,N),PX,PVA(2,N),XBSX,XLA(2,N),XLS(2,N),
     &      XLW(2,N) )
!
!---      Brine density  ---
!
          CALL DENS_B( T(2,N),PX,XBSX,RHOBX )
!
!---      Aqueous density  ---
!
          CALL DENS_L( T(2,N),RHOBX,XLA(2,N),RHOL(2,N) )
!
!---      Aqueous mass  ---
!
          TMLX = RHOL(2,N)*PORD(2,N)*VOL(N)
!
!---      Gas + oil mass  ---
!
          TMGOX = TMC(1,2,N) + TMC(2,2,N)
!
!---      Gas + oil mass execeeds 1.e-5 of the
!         aqueous phase mass, transition to phase condition #2 or #3 ---
!
          IF( TMGOX.GT.(1.D-5*TMLX) ) THEN
            CALL SP_B( T(2,N),XBSX,PSBX )
            CALL VPL( PSBX,PVBX,SLX,T(2,N),IZ(N) )
!
!---        Bubble-point pressure, assuming all gas is dissolved  ---
!
            RHOGX = 1.225D+0*GCPP(37,1)
            VGX = TMC(1,2,N)/RHOGX
            RHOOX = 1.D+3*GCPP(37,2)
            VOX = TMC(2,2,N)/RHOOX
            POSMX = VGX/VOX
            CALL BO_BP( PBPX,POSMX,T(2,N) )
!
!---        Pressure above bubble-point pressure  ---
!
            IF( PX.GT.PBPX ) THEN
              SN(2,N) = 1.D-4
              SL(2,N) = 1.D+0 - SN(2,N)
              SG(2,N) = 0.D+0
              POSM(2,N) = POSMX
              NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 2
!
!---        Pressure below bubble-point pressure  ---
!
            ELSE
              CALL BO_GOR( PX,POSM(2,N),T(2,N) )
              CALL BO_EQ_GAS( PX,PVBX,RHOG(2,N),T(2,N),XGC(1,2,N),
     &          XGW(2,N) )
              CALL BO_EQ_OIL( RHON(2,N),PX,POSM(2,N),T(2,N),XNC(1,2,N) )
              SGNX = 1.D-4
              SG(2,N) = SGNX*RHON(2,N)*(TMC(1,2,N)*XNC(2,2,N) - 
     &          TMC(2,2,N) + TMC(2,2,N)*XNC(2,2,N))/
     &          (RHON(2,N)*TMC(1,2,N)*XNC(2,2,N) - RHON(2,N)*TMC(2,2,N)
     &          + RHON(2,N)*TMC(2,2,N)*XNC(2,2,N) + 
     &          RHOG(2,N)*TMC(2,2,N)*XGC(1,2,N))
              SN(2,N) = SGNX - SG(2,N)
              SL(2,N) = 1.D+0-SGNX
              NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 3
            ENDIF
          ENDIF
!
!---      Phase pressure from phase capillary pressures and system
!         pressure  ---
!
          PG(2,N) = PSO(2,N)
          PTX = PG(2,N) - CPGTX
          IF( CPNLX.GT.0.D+0 ) THEN
            PN(2,N) = PTX
            PL(2,N) = PN(2,N) - CPNLX
          ELSE
            PL(2,N) = PTX
            PN(2,N) = PL(2,N) + CPNLX
          ENDIF
!
!---    Phase condition #2  ---
!
!       SG = 0.0
!       SL > 0.0
!       SN > 0.0
!       Aqueous and nonaqueous liquid saturated
!
!       water mass - aqueous saturation, SL
!       gas mass - gas to oil ratio, POSM
!       oil mass - nonaqueous (system) pressure, Pa gauge - PN,PSO
!       salt mass - total salt brine mass fraction - YLS
!
        ELSEIF( MOD(NPHAZ(2,N),10).EQ.2 ) THEN
          PX = PSO(2,N) + PATM
!
!---      Maximum solubility of salt in pure water  ---
!
          CALL SOL_LS( T(2,N),XBSMX )
!
!---      Salt mass fraction in brine  ---
!
          XBSX = MIN( YLS(2,N),XBSMX )
!
!---      Nonaqueous flash calculation  ---
!
          CALL SP_B( T(2,N),XBSX,PSBX )
          CALL VPL( PSBX,PVBX,SL(2,N),T(2,N),IZ(N) )
!
!---      Bubble-point pressure as a function of gas to oil ratio
!         (m^3/m^3) and temperature (C)  ---
!
          CALL BO_BP( PBPX,POSM(2,N),T(2,N) )
!
!---      Pressure below bubble-point pressure  ---
!
          IF( PX.LT.(PBPX-TOLX*GCPP(38,2)) ) THEN
            SG(2,N) = 1.D-4
            SN(2,N) = SN(2,N)*(1.D+0-SG(2,N))/(SN(2,N)+SL(2,N))
            SL(2,N) = 1.D+0-SG(2,N)-SN(2,N)
!
!---      Pressure above bubble-point pressure  ---
!
          ELSE
            SG(2,N) = 0.D+0
            SN(2,N) = 1.D+0-SL(2,N)
          ENDIF
!
!---      Phase capillary pressures from phase saturations  ---
!
          IF( ISLC(11).EQ.2 ) THEN
            CALL PORSTY( IZ(N),PX,PCMP(N),PORD(2,N),PORT(2,N) )
            PORD(2,N) = MAX( PORD(2,N),EPSL )
            PORT(2,N) = MAX( PORT(2,N),PORD(2,N) )
            CALL PORSTY_M( IZ(N),PX,PCMP(N),PORD_M(2,N),PORT_M(2,N) )
            PORD_M(2,N) = MAX( PORD_M(2,N),EPSL )
            PORT_M(2,N) = MAX( PORT_M(2,N),PORD_M(2,N) )
            EPORFX = PORD(2,N)*FRAC_P(7,IZ(N))
            EPORMX = PORD_M(2,N)*(1.D+0-FRAC_P(7,IZ(N)))
            CALL CAP_EOR_EC( EPORFX,EPORMX,SG(2,N),SL(2,N),SN(2,N),
     &        SG_F(2,N),SL_F(2,N),SN_F(2,N),SG_M(2,N),SL_M(2,N),
     &        SN_M(2,N),CPGTX,CPNLX,IZ(N) )
          ELSE
            CALL CAP_EOR( SG(2,N),SL(2,N),SN(2,N),CPGTX,CPNLX,IZ(N) )
          ENDIF
!
!---      Nonaqueous phases disappears, transition to 
!         phase condition #1, conserving aqueous pressure  ---
!
          IF( (SG(2,N)+SN(2,N)).LT.EPSL ) THEN
            NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 1
!
!---      Aqueous phases disappear, transition to 
!         phase condition #4  ---
!
          ELSEIF( (SG(2,N)+SL(2,N)).LT.EPSL ) THEN
            NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 4
!
!---      Aqueous phase disappears and gas phase appears, transition to 
!         phase condition #5  ---
!
          ELSEIF( SL(2,N).LT.EPSL .AND. SG(2,N).GT.EPSL ) THEN
            NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 5
!
!---      Gas phase appears, transition to phase condition #3  ---
!
          ELSEIF( SG(2,N).GT.EPSL ) THEN
            NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 3
!
!---      No transition from phase condition #2  ---
!
          ELSE
            NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 2
          ENDIF
!
!---      Phase pressure from phase capillary pressures and system
!         pressure  ---
!
          PG(2,N) = PSO(2,N)
          PTX = PG(2,N) - CPGTX
          IF( CPNLX.GT.0.D+0 ) THEN
            PN(2,N) = PTX
            PL(2,N) = PN(2,N) - CPNLX
          ELSE
            PL(2,N) = PTX
            PN(2,N) = PL(2,N) + CPNLX
          ENDIF
!
!---    Phase condition #3  ---
!
!       SG > 0.0
!       SL > 0.0
!       SN > 0.0
!       Three-phase
!
!       water mass - aqueous saturation, SL
!       gas mass - gas saturation, SG
!       oil mass - gas (system) pressure, Pa gauge - PG,PSO
!       salt mass - total salt brine mass fraction - YLS
!
        ELSEIF( MOD(NPHAZ(2,N),10).EQ.3 ) THEN
          PX = PSO(2,N) + PATM
!
!---      Maximum solubility of salt in pure water  ---
!
          CALL SOL_LS( T(2,N),XBSMX )
!
!---      Salt mass fraction in brine  ---
!
          XBSX = MIN( YLS(2,N),XBSMX )
!
!---      Nonaqueous flash calculation  ---
!
          CALL SP_B( T(2,N),XBSX,PSBX )
          CALL VPL( PSBX,PVBX,SL(2,N),T(2,N),IZ(N) )
!
!---      Aqueous disappears  ---
!
          IF( SL(2,N).LT.EPSL ) SL(2,N) = 0.D+0
!
!---      Gas disappears  ---
!
          IF( SG(2,N).LT.EPSL ) THEN
            CALL BO_GOR( PX,POSM(2,N),T(2,N) )
            SG(2,N) = 0.D+0
          ENDIF
!
!---      Nonaqueous-liquid  ---
!
          SN(2,N) = 1.D+0-SL(2,N)-SG(2,N)
!
!---      Capillary pressure from saturations  ---
!
          IF( ISLC(11).EQ.2 ) THEN
            CALL PORSTY( IZ(N),PX,PCMP(N),PORD(2,N),PORT(2,N) )
            PORD(2,N) = MAX( PORD(2,N),EPSL )
            PORT(2,N) = MAX( PORT(2,N),PORD(2,N) )
            CALL PORSTY_M( IZ(N),PX,PCMP(N),PORD_M(2,N),PORT_M(2,N) )
            PORD_M(2,N) = MAX( PORD_M(2,N),EPSL )
            PORT_M(2,N) = MAX( PORT_M(2,N),PORD_M(2,N) )
            EPORFX = PORD(2,N)*FRAC_P(7,IZ(N))
            EPORMX = PORD_M(2,N)*(1.D+0-FRAC_P(7,IZ(N)))
            CALL CAP_EOR_EC( EPORFX,EPORMX,SG(2,N),SL(2,N),SN(2,N),
     &        SG_F(2,N),SL_F(2,N),SN_F(2,N),SG_M(2,N),SL_M(2,N),
     &        SN_M(2,N),CPGTX,CPNLX,IZ(N) )
          ELSE
            CALL CAP_EOR( SG(2,N),SL(2,N),SN(2,N),CPGTX,CPNLX,IZ(N) )
          ENDIF
!
!---      Nonaqueous phases disappears, transition to 
!         phase condition #1  ---
!
          IF( (SG(2,N)+SN(2,N)).LT.EPSL ) THEN
            NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 1
!
!---      Gas and aqueous phases disappear, transition to 
!         phase condition #4  ---
!
          ELSEIF( (SG(2,N)+SL(2,N)).LT.EPSL ) THEN
            NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 4
!
!---      Aqueous phase disappears, transition to 
!         phase condition #5  ---
!
          ELSEIF( SL(2,N).LT.EPSL .AND. SG(2,N).GT.EPSL ) THEN
            NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 5
!
!---      Gas phase disappears, transition to phase condition #2  ---
!
          ELSEIF( SG(2,N).LT.EPSL ) THEN
            NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 2
!
!---      No transition from phase condition #3  ---
!
          ELSE
            NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 3
          ENDIF
!
!---      Phase pressure from phase capillary pressures and system
!         pressure  ---
!
          PG(2,N) = PSO(2,N)
          PTX = PG(2,N) - CPGTX
          IF( CPNLX.GT.0.D+0 ) THEN
            PN(2,N) = PTX
            PL(2,N) = PN(2,N) - CPNLX
          ELSE
            PL(2,N) = PTX
            PN(2,N) = PL(2,N) + CPNLX
          ENDIF
!
!---    Phase condition #4  ---
!
!       SG = 0.0
!       SL = 0.0
!       SN = 1.0
!       Nonaqueous liquid saturated
!
!       water mass - aqueous saturation, SL
!       gas mass - gas to oil ratio, POSM
!       oil mass - nonaqueous (system) pressure, Pa gauge - PN,PSO
!       salt mass - total salt mass - TMS(2,N)
!
        ELSEIF( MOD(NPHAZ(2,N),10).EQ.4 ) THEN
          PX = PSO(2,N) + PATM
!
!---      Maximum solubility of salt in pure water  ---
!
          CALL SOL_LS( T(2,N),XBSMX )
!
!---      Salt mass fraction in brine  ---
!
          XBSX = MIN( YLS(2,N),XBSMX )
!
!---      Nonaqueous flash calculation  ---
!
          CALL SP_B( T(2,N),XBSX,PSBX )
          CALL VPL( PSBX,PVBX,SL(2,N),T(2,N),IZ(N) )
!
!---      Bubble-point pressure as a function of gas to oil ratio
!         (m^3/m^3) and temperature (C)  ---
!
          CALL BO_BP( PBPX,POSM(2,N),T(2,N) )
!
!---      Pressure below bubble-point pressure  ---
!
          IF( PX.LT.(PBPX-TOLX*GCPP(38,2)) ) THEN
            SG(2,N) = 1.D-4
            SN(2,N) = SN(2,N)*(1.D+0-SG(2,N))/(SN(2,N)+SL(2,N))
            SL(2,N) = 1.D+0-SG(2,N)-SN(2,N)
!
!---      Pressure above bubble-point pressure  ---
!
          ELSE
            SG(2,N) = 0.D+0
            SN(2,N) = 1.D+0-SL(2,N)
          ENDIF
!
!---      Aqueous phase appears, transition to 
!         phase condition #2 or #3  ---
!
          IF( SL(2,N).GT.1.D-6 ) THEN
!
!---        Gas phase appears, transition to phase condition #3  ---
!
            IF( SG(2,N).GT.EPSL ) THEN
              NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 3
!
!---        No gas phase, transition to phase condition #2  ---
!
            ELSE
              NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 2
            ENDIF
!
!---      Gas phase appears, transition to phase condition #5  ---
!
          ELSEIF( SG(2,N).GT.EPSL ) THEN
            NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 5
!
!---      No transition from phase condition #4  ---
!
          ELSE
            NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 4
          ENDIF
!
!---      Phase pressure from phase capillary pressures and system
!         pressure  ---
!
          PG(2,N) = PSO(2,N)
          PTX = PG(2,N) - CPGTX
          IF( CPNLX.GT.0.D+0 ) THEN
            PN(2,N) = PTX
            PL(2,N) = PN(2,N) - CPNLX
          ELSE
            PL(2,N) = PTX
            PN(2,N) = PL(2,N) + CPNLX
          ENDIF
!
!---    Phase condition #5  ---
!
!       SG > 0.0
!       SL = 0.0
!       SN > 0.0
!       Nonaqueous liquid and gas saturated
!
!       water mass - aqueous saturation, SL
!       gas mass - gas saturation, SG
!       oil mass - gas (system) pressure, Pa gauge - PG,PSO
!       salt mass - total salt mass - TMS(2,N)
!
        ELSEIF( MOD(NPHAZ(2,N),10).EQ.5 ) THEN
          PX = PG(2,N) + PATM
!
!---      Maximum solubility of salt in pure water  ---
!
          CALL SOL_LS( T(2,N),XBSMX )
!
!---      Salt mass fraction in brine  ---
!
          XBSX = MIN( YLS(2,N),XBSMX )
!
!---      Nonaqueous flash calculation  ---
!
          CALL SP_B( T(2,N),XBSX,PSBX )
          CALL VPL( PSBX,PVBX,SL(2,N),T(2,N),IZ(N) )
!
!---      Aqueous disappears  ---
!
          IF( SL(2,N).LT.EPSL ) SL(2,N) = 0.D+0
!
!---      Gas disappears  ---
!
          IF( SG(2,N).LT.EPSL ) THEN
            CALL BO_GOR( PX,POSM(2,N),T(2,N) )
            SG(2,N) = 0.D+0
          ENDIF
!
!---      Nonaqueous-liquid  ---
!
          SN(2,N) = 1.D+0-SL(2,N)-SG(2,N)
!
!---      Capillary pressure from saturations  ---
!
          IF( ISLC(11).EQ.2 ) THEN
            CALL PORSTY( IZ(N),PX,PCMP(N),PORD(2,N),PORT(2,N) )
            PORD(2,N) = MAX( PORD(2,N),EPSL )
            PORT(2,N) = MAX( PORT(2,N),PORD(2,N) )
            CALL PORSTY_M( IZ(N),PX,PCMP(N),PORD_M(2,N),PORT_M(2,N) )
            PORD_M(2,N) = MAX( PORD_M(2,N),EPSL )
            PORT_M(2,N) = MAX( PORT_M(2,N),PORD_M(2,N) )
            EPORFX = PORD(2,N)*FRAC_P(7,IZ(N))
            EPORMX = PORD_M(2,N)*(1.D+0-FRAC_P(7,IZ(N)))
            CALL CAP_EOR_EC( EPORFX,EPORMX,SG(2,N),SL(2,N),SN(2,N),
     &        SG_F(2,N),SL_F(2,N),SN_F(2,N),SG_M(2,N),SL_M(2,N),
     &        SN_M(2,N),CPGTX,CPNLX,IZ(N) )
          ELSE
            CALL CAP_EOR( SG(2,N),SL(2,N),SN(2,N),CPGTX,CPNLX,IZ(N) )
          ENDIF
!
!---      Aqueous phase appears, transition to 
!         phase condition #2 or #3  ---
!
          IF( SL(2,N).GT.1.D-6 ) THEN
!
!---        Gas phase disappears, transition to phase condition #2,
!           conserving nonaqueous-liquid pressure  ---
!
            IF( SG(2,N).LT.EPSL ) THEN
              NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 2
!
!---        Gas phase remains, transition to phase condition #3,
!           conserving gas pressure  ---
!
            ELSE
              NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 3
            ENDIF
!
!---      Gas phase disappears, transition to phase condition #4, 
!         conserving nonaqueous-liquid pressure  ---
!
          ELSEIF( SG(2,N).LT.EPSL ) THEN
            NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 4
!
!---      No transition from phase condition #5  ---
!
          ELSE
            NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 5
          ENDIF
!
!---      Phase pressure from phase capillary pressures and system
!         pressure  ---
!
          PG(2,N) = PSO(2,N)
          PTX = PG(2,N) - CPGTX
          IF( CPNLX.GT.0.D+0 ) THEN
            PN(2,N) = PTX
            PL(2,N) = PN(2,N) - CPNLX
          ELSE
            PL(2,N) = PTX
            PN(2,N) = PL(2,N) + CPNLX
          ENDIF
        ENDIF
  100 CONTINUE
!
!--- Compute increments  ---
!
      DO 300 N = 1,NFBN
        IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) GOTO 300
        IZN = IZ(N)
        N_DB = N
!
!---    Phase condition #1  ---
!
!       SL = 1.0
!       SG+SN = 0.0
!       Aqueuous saturated
!
!       water mass - aqueous (system) pressure, Pa gauge - PL,PSO
!       gas mass - total gas mass - TMC(1,2,N)
!       oil mass - total oil mass - TMC(2,2,N)
!       salt mass - total salt brine mass fraction - YLS
!
        IF( MOD(NPHAZ(2,N),10).EQ.1 ) THEN
!
!---      Water mass (system pressure), increment  ---
!
          DNR(IEQW,N) = MAX( 1.D-1,1.D-7*(PL(2,N)+PATM) )
!
!---      Gas mass (total gas mass), increment  ---
!
          DNR(IEQGC(1),N) = MAX( 1.D-7,1.D-7*TMC(1,2,N) )
!
!---      Oil mass (total oil mass), increment  ---
!
          DNR(IEQGC(2),N) = MAX( 1.D-7,1.D-7*TMC(2,2,N) )
!
!---      Salt mass (total salt brine mass fraction), increment  ---
!
          IF( ISLC(32).EQ.0 ) THEN
            CALL SOL_LS( T(2,N),XLSMX )
            XLSX = MIN( YLS(2,N),XLSMX )
            DNR(IEQS,N) = 1.D-7*XLSMX
          ENDIF
!
!---    Phase condition #2  ---
!
!       SG = 0.0
!       SL > 0.0
!       SN > 0.0
!       Aqueous and nonaqueous liquid saturated
!
!       water mass - aqueous saturation, SL
!       gas mass - gas to oil ratio, POSM
!       oil mass - nonaqueous (system) pressure, Pa gauge - PN,PSO
!       salt mass - total salt brine mass fraction - YLS
!
        ELSEIF( MOD(NPHAZ(2,N),10).EQ.2 ) THEN
!
!---      Water mass (aqueous saturation), increment or decrement  ---
!
          DNR(IEQW,N) = SIGN( 1.D-6,5.D-1-SL(2,N) )
!
!---      Gas mass (gas to oil ratio) increment  ---
!
          DNR(IEQGC(1),N) = 1.D-6
!
!---      Oil mass (nonaqueous (system) pressure) increment   ---
!
          DNR(IEQGC(2),N) = MAX( 1.D-1,1.D-7*(PN(2,N)+PATM) )
!
!---      Salt mass (total salt brine mass fraction), increment  ---
!
          IF( ISLC(32).EQ.0 ) THEN
            CALL SOL_LS( T(2,N),XLSMX )
            XLSX = MIN( YLS(2,N),XLSMX )
            DNR(IEQS,N) = 1.D-7*XLSMX
          ENDIF
!
!---    Phase condition #3  ---
!
!       SG > 0.0
!       SL > 0.0
!       SN > 0.0
!       Three-phase
!
!       water mass - aqueous saturation, SL
!       gas mass - gas saturation, SG
!       oil mass - gas (system) pressure, Pa gauge - PG,PSO
!       salt mass - total salt brine mass fraction - YLS
!
        ELSEIF( MOD(NPHAZ(2,N),10).EQ.3 ) THEN
!
!---      Water mass (aqueous saturation), increment or decrement  ---
!
          DNR(IEQW,N) = SIGN( 1.D-6,5.D-1-SL(2,N) )
!
!---      Gas mass (gas (system) pressure) increment  ---
!
          DNR(IEQGC(1),N) = SIGN( 1.D-6,5.D-1-SG(2,N) )
!
!---      Oil mass (nonaqueous-liquid saturation) increment  ---
!
          DNR(IEQGC(2),N) = -MAX( 1.D-1,1.D-7*(PG(2,N)+PATM) )
!
!---      Salt mass (total salt brine mass fraction)  ---
!
          IF( ISLC(32).EQ.0 ) THEN
            CALL SOL_LS( T(2,N),XLSMX )
            XLSX = MIN( YLS(2,N),XLSMX )
            DNR(IEQS,N) = 1.D-7*XLSMX
          ENDIF
!
!---    Phase condition #4  ---
!
!       SG = 0.0
!       SL = 0.0
!       SN = 1.0
!       Nonaqueous liquid saturated
!
!       water mass - aqueous saturation, SL
!       gas mass - gas to oil ratio, POSM
!       oil mass - nonaqueous (system) pressure, Pa gauge - PN,PSO
!       salt mass - total salt mass - TMS(2,N)
!
        ELSEIF( MOD(NPHAZ(2,N),10).EQ.4 ) THEN
!
!---      Water mass (aqueous saturation), increment or decrement  ---
!
          DNR(IEQW,N) = SIGN( 1.D-6,5.D-1-SL(2,N) )
!
!---      Gas mass (gas to oil ratio) increment  ---
!
          DNR(IEQGC(1),N) = 1.D-6
!
!---      Oil mass (nonaqueous (system) pressure) increment  ---
!
          DNR(IEQGC(2),N) = MAX( 1.D-1,1.D-7*(PN(2,N)+PATM) )
!
!---      Salt mass (total salt mass), increment  ---
!
          IF( ISLC(32).EQ.0 ) THEN
            DNR(IEQS,N) = 1.D-7
          ENDIF
!
!---    Phase condition #5  ---
!
!       SG > 0.0
!       SL = 0.0
!       SN > 0.0
!       Nonaqueous liquid and gas saturated
!
!       water mass - aqueous saturation, SL
!       gas mass - gas saturation, SG
!       oil mass - gas (system) pressure, Pa gauge - PG,PSO
!       salt mass - total salt mass - TMS(2,N)
!
        ELSEIF( MOD(NPHAZ(2,N),10).EQ.5 ) THEN
!
!---      Water mass (aqueous saturation), increment or decrement  ---
!
          DNR(IEQW,N) = SIGN( 1.D-6,5.D-1-SL(2,N) )
!
!---      Gas mass (gas (system) pressure) increment  ---
!
          DNR(IEQGC(1),N) = SIGN( 1.D-6,5.D-1-SG(2,N) )
!
!---      Oil mass (nonaqueous-liquid saturation) increment  ---
!
          DNR(IEQGC(2),N) = -MAX( 1.D-1,1.D-7*(PG(2,N)+PATM) )
!
!---      Salt mass (total salt mass)  ---
!
          IF( ISLC(32).EQ.0 ) THEN
            DNR(IEQS,N) = 1.D-7
          ENDIF
        ENDIF
!
!---    Increment the primary variables  ---
!
        DO 280 M = 3,ISVC+2
          T(M,N) = T(2,N)
          PG(M,N) = PG(2,N)
          PL(M,N) = PL(2,N)
          PN(M,N) = PN(2,N)
          POSM(M,N) = POSM(2,N)
          PSO(M,N) = PSO(2,N)
          PVA(M,N) = PVA(2,N)
          PVW(M,N) = PVW(2,N)
          SG(M,N) = SG(2,N)
          SL(M,N) = SL(2,N)
          SN(M,N) = SN(2,N)
          TMS(M,N) = TMS(2,N)
          YLS(M,N) = YLS(2,N)
          DO 200 IGC = 1,NGC+2
            TMC(IGC,M,N) = TMC(IGC,2,N)
  200     CONTINUE
!
!---      Phase condition #1  ---
!
!         SL = 1.0
!         SG+SN = 0.0
!         Aqueuous saturated
!
!         water mass - aqueous (system) pressure, Pa gauge - PL,PSO
!         gas mass - total gas mass - TMC(1,2,N)
!         oil mass - total oil mass - TMC(2,2,N)
!         salt mass - total salt brine mass fraction - YLS
!
          IF( MOD(NPHAZ(2,N),10).EQ.1 ) THEN
            IF( M.EQ.IEQW+2 ) THEN
              PSO(M,N) = PSO(M,N) + DNR(IEQW,N)
            ELSEIF( M.EQ.IEQGC(1)+2 ) THEN
              TMC(1,M,N) = TMC(1,M,N) + DNR(IEQGC(1),N)
            ELSEIF( M.EQ.IEQGC(2)+2 ) THEN
              TMC(2,M,N) = TMC(2,M,N) + DNR(IEQGC(2),N)
            ELSEIF( M.EQ.IEQS+2 .AND. ISLC(32).EQ.0 ) THEN
              YLS(M,N) = YLS(M,N) + DNR(IEQS,N)
            ENDIF
!
!---      Phase condition #2  ---
!
!         SG = 0.0
!         SL > 0.0
!         SN > 0.0
!         Aqueous and nonaqueous liquid saturated
!
!         water mass - aqueous saturation, SL
!         gas mass - gas to oil ratio, POSM
!         oil mass - nonaqueous (system) pressure, Pa gauge - PN,PSO
!         salt mass - total salt brine mass fraction - YLS
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.2 ) THEN
            IF( M.EQ.IEQW+2 ) THEN
              SL(M,N) = SL(M,N) + DNR(IEQW,N)
            ELSEIF( M.EQ.IEQGC(1)+2 ) THEN
              POSM(M,N) = POSM(M,N) + DNR(IEQGC(1),N)
            ELSEIF( M.EQ.IEQGC(2)+2 ) THEN
              PSO(M,N) = PSO(M,N) + DNR(IEQGC(2),N)
            ELSEIF( M.EQ.IEQS+2 .AND. ISLC(32).EQ.0 ) THEN
              YLS(M,N) = YLS(M,N) + DNR(IEQS,N)
            ENDIF
!
!---      Phase condition #3  ---
!
!         SG > 0.0
!         SL > 0.0
!         SN > 0.0
!         Three-phase
!
!         water mass - aqueous saturation, SL
!         gas mass - gas saturation, SG
!         oil mass - gas (system) pressure, Pa gauge - PG,PSO
!         salt mass - total salt brine mass fraction - YLS
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.3 ) THEN
            IF( M.EQ.IEQW+2 ) THEN
              SL(M,N) = SL(M,N) + DNR(IEQW,N)
            ELSEIF( M.EQ.IEQGC(1)+2 ) THEN
              SG(M,N) = SG(M,N) + DNR(IEQGC(1),N)
            ELSEIF( M.EQ.IEQGC(2)+2 ) THEN
              PSO(M,N) = PSO(M,N) + DNR(IEQGC(2),N)
            ELSEIF( M.EQ.IEQS+2 .AND. ISLC(32).EQ.0 ) THEN
              YLS(M,N) = YLS(M,N) + DNR(IEQS,N)
            ENDIF
!
!---      Phase condition #4  ---
!
!         SG = 0.0
!         SL = 0.0
!         SN = 1.0
!         Nonaqueous liquid saturated
!
!         water mass - aqueous saturation, SL
!         gas mass - gas to oil ratio, POSM
!         oil mass - nonaqueous (system) pressure, Pa gauge - PN,PSO
!         salt mass - total salt mass - TMS(2,N)
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.4 ) THEN
            IF( M.EQ.IEQW+2 ) THEN
              SL(M,N) = SL(M,N) + DNR(IEQW,N)
            ELSEIF( M.EQ.IEQGC(1)+2 ) THEN
              POSM(M,N) = POSM(M,N) + DNR(IEQGC(1),N)
            ELSEIF( M.EQ.IEQGC(2)+2 ) THEN
              PSO(M,N) = PSO(M,N) + DNR(IEQGC(2),N)
            ELSEIF( M.EQ.IEQS+2 .AND. ISLC(32).EQ.0 ) THEN
              TMS(M,N) = TMS(M,N) + DNR(IEQS,N)
            ENDIF
!
!---    Phase condition #5  ---
!
!       SG > 0.0
!       SL = 0.0
!       SN > 0.0
!       Nonaqueous liquid and gas saturated
!
!       water mass - aqueous saturation, SL
!       gas mass - gas saturation, SG
!       oil mass - gas (system) pressure, Pa gauge - PG,PSO
!       salt mass - total salt mass - TMS(2,N)
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.5 ) THEN
            IF( M.EQ.IEQW+2 ) THEN
              SL(M,N) = SL(M,N) + DNR(IEQW,N)
            ELSEIF( M.EQ.IEQGC(1)+2 ) THEN
              SG(M,N) = SG(M,N) + DNR(IEQGC(1),N)
            ELSEIF( M.EQ.IEQGC(2)+2 ) THEN
              PSO(M,N) = PSO(M,N) + DNR(IEQGC(2),N)
            ELSEIF( M.EQ.IEQS+2 .AND. ISLC(32).EQ.0 ) THEN
              TMS(M,N) = TMS(M,N) + DNR(IEQS,N)
            ENDIF
          ENDIF
  280   CONTINUE
  300 CONTINUE
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of INCRM_BO group
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE INCRM_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Compute primary variable increments.
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, July 11, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE JACOB
      USE HYST
      USE GRID
      USE GLB_PAR
      USE FDVS
      USE FDVP
      USE FDVGC
      USE DUAL_POR
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 FKX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//INCRM_EOR'
!
!---  Black-oil option  ---
!
      IF( ISLC(68).EQ.0 ) THEN
        CALL INCRM_BO
        ISUB_LOG = ISUB_LOG-1
        RETURN
      ENDIF
!
!---  Compositional option  ---
!
      DO 100 N = 1,NFBN
        IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) GOTO 100
        N_DB = N
!
!---    K-factors fixed at second iterate values  ---
!
        IF( NITER.GT.2 ) THEN
          IFK = 1
          DO IGC = 1,NGC+2
            FKX(IGC) = FK(IGC,N)
          ENDDO
!
!---    K-factors computed from fugacity coefficients  ---
!
        ELSE
          IFK = 0
        ENDIF
!
!---    Absolute temperature  ---
!
        TKX = T(2,N)+TABS
!
!---    Phase condition #1  ---
!
!       SL = 1.0, SG+SN = 0.0
!
!       energy - temperature, C - T
!       water mass - aqueous (system) pressure, Pa gauge - PL,PSO
!       CO2 mass - CO2 vapor pressure - PVA
!       CH4 mass - total CH4 mass - TMC
!       petroleum component mass - total petroleum component mass - TMC
!       salt mass - total salt brine mass fraction - YLS
!
        IF( MOD(NPHAZ(2,N),10).EQ.1 ) THEN
!
!---      System pressure  ---
!
          PX = PSO(2,N) + PATM
!
!---      Maximum solubility of salt in pure water  ---
!
          CALL SOL_LS( T(2,N),XBSMX )
!
!---      Salt mass fraction in brine  ---
!
          XBSX = MIN( YLS(2,N),XBSMX )
          CALL SP_B( T(2,N),XBSX,PSBX )
!
!---      Maximum solubility of CO2 in aqueous phase  ---
!
          PVAX = PX - PSBX
          CALL EQUIL( T(2,N),PX,PVAX,XBSX,XLAX,XLSX,XLWX )
!
!---      Solubility of CO2 in aqueous phase  ---
!
          CALL EQUIL( T(2,N),PX,PVA(2,N),XBSX,XLA(2,N),XLS(2,N),
     &      XLW(2,N) )
!
!---      Brine density  ---
!
          CALL DENS_B( T(2,N),PX,XBSX,RHOBX )
!
!---      Aqueous density  ---
!
          CALL DENS_L( T(2,N),RHOBX,XLA(2,N),RHOL(2,N) )
!
!---      Total mass of CO2  ---
!
          TMC(1,2,N) = XLA(2,N)*RHOL(2,N)*PORD(2,N)*VOL(N)
!
!---      Non-CO2 petroleum mass and total petroleum molar mass  ---
!
          STMCX = -TMC(1,2,N)
          STMMCX = 0.D+0
          DO 10 IGC = 1,NGC+2
            STMCX = STMCX + TMC(IGC,2,N)
            STMMCX = STMMCX + TMC(IGC,2,N)/GCPP(1,IGC)
   10     CONTINUE
          IF( STMMCX.GT.EPSL ) THEN
            ZMCMX = 0.D+0
            DO 12 IGC = 1,NGC+2
              ZMC(IGC,2,N) = TMC(IGC,2,N)/GCPP(1,IGC)/STMMCX
              IF( ZMC(IGC,2,N).GT.ZMCMX ) THEN
                IZMC(N) = IGC
                ZMCMX = ZMC(IGC,2,N)
              ENDIF
   12       CONTINUE
          ELSE
            ZMC(1,2,N) = 1.D+0
            IZMC(N) = 1
            DO 14 IGC = 2,NGC+2
              ZMC(IGC,2,N) = 0.D+0
   14       CONTINUE
          ENDIF
!
!---      Aqueous mass  ---
!
          TMLX = RHOL(2,N)*PORD(2,N)*VOL(N)
!
!---      Mixture critical properties ---
!
          CALL CRIT_PROP( PAFX,PCRX,TBPX,TCRX,VMCRX,ZMC(1,2,N),ZCRX )
!
!---      Mixture vapor pressure (Pa), Riedel equation ---
!
          TRX = TKX/TCRX
          TBRX = TKX/TBPX
          PSI_BX = -3.5D+1 + 3.6D+1/TBRX + 4.2D+1*LOG(TBRX) - TBRX**6
          ALPHA_CX = (3.15D-1*PSI_BX + LOG(PCRX/PATM))/
     &      (8.38D-2*PSI_BX - LOG(TBRX))
          QX = 8.38D-2*(3.758D+0 - ALPHA_CX)
          AX = -3.5D+1*QX
          BX = -3.6D+1*QX
          CX = 4.2D+1*QX + ALPHA_CX
          DX = -QX
          PVPX = PATM*EXP( AX - BX/TRX + CX*LOG(TRX) + DX*(TRX**6) )
!
!---      Air concentration from vapor pressure  ---
!
          CASX = PVPX/(RCU*TKX)
!
!---      Carbon number from air concentration from Eastcott et al.  ---
!
          CNX = -(LOG10(CASX) - 4.35D+0)/5.7D-1
!
!---      Aqueous solubility (mol/cm^3) as a function of carbon 
!         number for aromatics from Eastcott et al.  ---
!
          CLSX = 1.D+1**(1.88D+0 - 2.4D-1*CNX)
!
!---      Aqueous concentration of organics (mol/cm^3)  ---
!
          CLCX = 1.D-3*STMMCX/(PORD(2,N)*VOL(N))
!
!---      CO2 concentration in aqueous phase exceeds solubility limit
!         or total petroleum component mass execeeds solubility limit,
!         transition to phase condition #2 or #3 ---
!
          IF( XLA(2,N).GT.XLAX .OR. CLCX.GT.CLSX ) THEN
            CALL SP_B( T(2,N),XBSX,PSBX )
            CALL VPL( PSBX,PVBX,SLX,T(2,N),IZ(N) )
            PVX = PX - PVBX
            IBETAX = 0
            BETAX = -1.D+0
            GNIFTX = 0.D+0
            CALL FLH_NA( BETAX,FKX,GNIFTX,PVX,PVBX,RHOMG(2,N),
     &        RHOMN(2,N),SGX,SNX,T(2,N),XMGC(1,2,N),XMGW(2,N),
     &        XMNC(1,2,N),ZGX,ZMC(1,2,N),ZNX,IBETAX,NPHAZ(2,N) )
            SGNX = 1.D-4
            SL(2,N) = 1.D+0-SGNX
            SG(2,N) = (1.D+0-SL(2,N))*SGX
            SN(2,N) = (1.D+0-SL(2,N))*SNX
            AST(N) = SGX/(SGX+SNX+SMALL)
            IF( ISLC(11).EQ.2 ) THEN
              CALL PORSTY( IZ(N),PX,PCMP(N),PORD(2,N),PORT(2,N) )
              PORD(2,N) = MAX( PORD(2,N),EPSL )
              PORT(2,N) = MAX( PORT(2,N),PORD(2,N) )
              CALL PORSTY_M( IZ(N),PX,PCMP(N),PORD_M(2,N),PORT_M(2,N) )
              PORD_M(2,N) = MAX( PORD_M(2,N),EPSL )
              PORT_M(2,N) = MAX( PORT_M(2,N),PORD_M(2,N) )
              EPORFX = PORD(2,N)*FRAC_P(7,IZ(N))
              EPORMX = PORD_M(2,N)*(1.D+0-FRAC_P(7,IZ(N)))
              CALL CAP_EOR_EC( EPORFX,EPORMX,SG(2,N),SL(2,N),SN(2,N),
     &          SG_F(2,N),SL_F(2,N),SN_F(2,N),SG_M(2,N),SL_M(2,N),
     &          SN_M(2,N),CPGTX,CPNLX,IZ(N) )
            ELSE
              CALL CAP_EOR( SG(2,N),SL(2,N),SN(2,N),CPGTX,CPNLX,IZ(N) )
            ENDIF
            IF( SG(2,N).LT.EPSL ) THEN
              NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 2
            ELSE
              NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 3
            ENDIF
          ELSE
            CPGTX = 0.D+0
            CPNLX = 0.D+0
          ENDIF
!
!---      Phase pressure from phase capillary pressures and system
!         pressure  ---
!
          PG(2,N) = PSO(2,N)
          PTX = PG(2,N) - CPGTX
          IF( CPNLX.GT.0.D+0 ) THEN
            PN(2,N) = PTX
            PL(2,N) = PN(2,N) - CPNLX
          ELSE
            PL(2,N) = PTX
            PN(2,N) = PL(2,N) + CPNLX
          ENDIF
!
!---    Phase condition #2  ---
!
!       SL < 1.0, ST > 0.0, SG = 0.0
!
!       energy - temperature, C - T
!       water mass - aqueous saturation, SL
!       CO2 mass
!         if( ZMC(1,2,N) > max( ZMC(J,2,N) ) J /= 1
!           - nonaqueous (system) pressure, Pa gauge - PN,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(1,2,N)
!         endif
!       CH4 mass
!         if( ZMC(2,2,N) > max( ZMC(J,2,N) ) J /= 2
!           - nonaqueous (system) pressure, Pa gauge - PN,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(2,2,N)
!         endif
!       petroleum component mass
!         if( ZMC(I,2,N) > max( ZMC(J,2,N) ) J /= I
!           - nonaqueous (system) pressure, Pa gauge - PN,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(I,2,N)
!         endif
!       salt mass - total salt brine mass fraction - YLS
!
        ELSEIF( MOD(NPHAZ(2,N),10).EQ.2 ) THEN
          PX = PSO(2,N) + PATM
!
!---      Maximum solubility of salt in pure water  ---
!
          CALL SOL_LS( T(2,N),XBSMX )
!
!---      Salt mass fraction in brine  ---
!
          XBSX = MIN( YLS(2,N),XBSMX )
!
!---      Nonaqueous flash calculation  ---
!
          CALL SP_B( T(2,N),XBSX,PSBX )
          CALL VPL( PSBX,PVBX,SL(2,N),T(2,N),IZ(N) )
          PVX = PX - PVBX
          IBETAX = 0
          BETAX = -1.D+0
          GNIFTX = 0.D+0
          CALL FLH_NA( BETAX,FKX,GNIFTX,PVX,PVBX,RHOMG(2,N),
     &      RHOMN(2,N),SGX,SNX,T(2,N),XMGC(1,2,N),XMGW(2,N),
     &      XMNC(1,2,N),ZGX,ZMC(1,2,N),ZNX,IBETAX,NPHAZ(2,N) )
!          IF( NITER.GE.2 ) THEN
!            SGX = AST(N)
!            SNX = 1.D+0 - AST(N)
!          ELSE
!            AST(N) = SGX/(SNX+SGX+SMALL)
!          ENDIF
          SG(2,N) = (1.D+0-SL(2,N))*SGX
          SN(2,N) = (1.D+0-SL(2,N))*SNX
          IF( ISLC(11).EQ.2 ) THEN
            CALL PORSTY( IZ(N),PX,PCMP(N),PORD(2,N),PORT(2,N) )
            PORD(2,N) = MAX( PORD(2,N),EPSL )
            PORT(2,N) = MAX( PORT(2,N),PORD(2,N) )
            CALL PORSTY_M( IZ(N),PX,PCMP(N),PORD_M(2,N),PORT_M(2,N) )
            PORD_M(2,N) = MAX( PORD_M(2,N),EPSL )
            PORT_M(2,N) = MAX( PORT_M(2,N),PORD_M(2,N) )
            EPORFX = PORD(2,N)*FRAC_P(7,IZ(N))
            EPORMX = PORD_M(2,N)*(1.D+0-FRAC_P(7,IZ(N)))
            CALL CAP_EOR_EC( EPORFX,EPORMX,SG(2,N),SL(2,N),SN(2,N),
     &        SG_F(2,N),SL_F(2,N),SN_F(2,N),SG_M(2,N),SL_M(2,N),
     &        SN_M(2,N),CPGTX,CPNLX,IZ(N) )
          ELSE
            CALL CAP_EOR( SG(2,N),SL(2,N),SN(2,N),CPGTX,CPNLX,IZ(N) )
          ENDIF
!
!---      Assign maximum concentration of petroleum component  ---
!
          ZMCMX = 0.D+0
          DO IGC = 1,NGC+2
            IF( ZMC(IGC,2,N).GT.ZMCMX ) THEN
              IZMC(N) = IGC
              ZMCMX = ZMC(IGC,2,N)
            ENDIF
          ENDDO
!
!---      Nonaqueous phases disappears, transition to 
!         phase condition #1, conserving aqueous pressure  ---
!
          IF( (SG(2,N)+SN(2,N)).LT.1.D-3 ) THEN
            NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 1
!
!---      Aqueous phases disappear, transition to 
!         phase condition #4  ---
!
          ELSEIF( (SG(2,N)+SL(2,N)).LT.EPSL ) THEN
            NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 4
!
!---      Aqueous phase disappears and gas phase appears, transition to 
!         phase condition #5  ---
!
          ELSEIF( SL(2,N).LT.EPSL .AND. SG(2,N).GT.EPSL ) THEN
            NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 5
!
!---      Gas phase appears, transition to phase condition #3  ---
!
          ELSEIF( SG(2,N).GT.EPSL ) THEN
            NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 3
!
!---      No transition from phase condition #2  ---
!
          ELSE
            NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 2
          ENDIF
!
!---      Phase pressure from phase capillary pressures and system
!         pressure  ---
!
          PG(2,N) = PSO(2,N)
          PTX = PG(2,N) - CPGTX
          IF( CPNLX.GT.0.D+0 ) THEN
            PN(2,N) = PTX
            PL(2,N) = PN(2,N) - CPNLX
          ELSE
            PL(2,N) = PTX
            PN(2,N) = PL(2,N) + CPNLX
          ENDIF
!
!---    Phase condition #3  ---
!
!       SL < 1.0, ST >= 0.0, SG > 0.0
!
!       energy - temperature, C - T
!       water mass - aqueous saturation, SL
!       CO2 mass
!         if( ZMC(1,2,N) > max( ZMC(J,2,N) ) J /= 1
!           - gas (system) pressure, Pa gauge - PG,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(1,2,N)
!         endif
!       CH4 mass
!         if( ZMC(2,2,N) > max( ZMC(J,2,N) ) J /= 2
!           - gas (system) pressure, Pa gauge - PG,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(2,2,N)
!         endif
!       petroleum component mass
!         if( ZMC(I,2,N) > max( ZMC(J,2,N) ) J /= I
!           - gas (system) pressure, Pa gauge - PG,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(I,2,N)
!         endif
!       salt mass - total salt brine mass fraction - YLS
!
        ELSEIF( MOD(NPHAZ(2,N),10).EQ.3 ) THEN
          PX = PSO(2,N) + PATM
!
!---      Maximum solubility of salt in pure water  ---
!
          CALL SOL_LS( T(2,N),XBSMX )
!
!---      Salt mass fraction in brine  ---
!
          XBSX = MIN( YLS(2,N),XBSMX )
!
!---      Nonaqueous flash calculation  ---
!
          CALL SP_B( T(2,N),XBSX,PSBX )
          CALL VPL( PSBX,PVBX,SL(2,N),T(2,N),IZ(N) )
          PVX = PX - PVBX
          IBETAX = 0
          BETAX = -1.D+0
          GNIFTX = 0.D+0
          CALL FLH_NA( BETAX,FKX,GNIFTX,PVX,PVBX,RHOMG(2,N),RHOMN(2,N),
     &      SGX,SNX,T(2,N),XMGC(1,2,N),XMGW(2,N),XMNC(1,2,N),
     &      ZGX,ZMC(1,2,N),ZNX,IBETAX,NPHAZ(2,N) )
!          IF( NITER.GE.2 ) THEN
!            SGX = AST(N)
!            SNX = 1.D+0 - AST(N)
!          ELSE
!            AST(N) = SGX/(SNX+SGX+SMALL)
!          ENDIF
          SG(2,N) = (1.D+0-SL(2,N))*SGX
          SN(2,N) = (1.D+0-SL(2,N))*SNX
          IF( ISLC(11).EQ.2 ) THEN
            CALL PORSTY( IZ(N),PX,PCMP(N),PORD(2,N),PORT(2,N) )
            PORD(2,N) = MAX( PORD(2,N),EPSL )
            PORT(2,N) = MAX( PORT(2,N),PORD(2,N) )
            CALL PORSTY_M( IZ(N),PX,PCMP(N),PORD_M(2,N),PORT_M(2,N) )
            PORD_M(2,N) = MAX( PORD_M(2,N),EPSL )
            PORT_M(2,N) = MAX( PORT_M(2,N),PORD_M(2,N) )
            EPORFX = PORD(2,N)*FRAC_P(7,IZ(N))
            EPORMX = PORD_M(2,N)*(1.D+0-FRAC_P(7,IZ(N)))
            CALL CAP_EOR_EC( EPORFX,EPORMX,SG(2,N),SL(2,N),SN(2,N),
     &        SG_F(2,N),SL_F(2,N),SN_F(2,N),SG_M(2,N),SL_M(2,N),
     &        SN_M(2,N),CPGTX,CPNLX,IZ(N) )
          ELSE
            CALL CAP_EOR( SG(2,N),SL(2,N),SN(2,N),CPGTX,CPNLX,IZ(N) )
          ENDIF
!
!---      Assign maximum concentration of petroleum component  ---
!
          ZMCMX = 0.D+0
          DO IGC = 1,NGC+2
            IF( ZMC(IGC,2,N).GT.ZMCMX ) THEN
              IZMC(N) = IGC
              ZMCMX = ZMC(IGC,2,N)
            ENDIF
          ENDDO
!
!---      Nonaqueous phases disappears, transition to 
!         phase condition #1  ---
!
          IF( (SG(2,N)+SN(2,N)).LT.1.D-3 ) THEN
            NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 1
!
!---      Gas and aqueous phases disappear, transition to 
!         phase condition #4  ---
!
          ELSEIF( (SG(2,N)+SL(2,N)).LT.EPSL ) THEN
            NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 4
!
!---      Aqueous phase disappears, transition to 
!         phase condition #5  ---
!
          ELSEIF( SL(2,N).LT.EPSL .AND. SG(2,N).GT.EPSL ) THEN
            NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 5
!
!---      Gas phase disappears, transition to phase condition #2  ---
!
          ELSEIF( SG(2,N).LT.EPSL ) THEN
            NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 2
!
!---      No transition from phase condition #3  ---
!
          ELSE
            NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 3
          ENDIF
!
!---      Phase pressure from phase capillary pressures and system
!         pressure  ---
!
          PG(2,N) = PSO(2,N)
          PTX = PG(2,N) - CPGTX
          IF( CPNLX.GT.0.D+0 ) THEN
            PN(2,N) = PTX
            PL(2,N) = PN(2,N) - CPNLX
          ELSE
            PL(2,N) = PTX
            PN(2,N) = PL(2,N) + CPNLX
          ENDIF
!
!---    Phase condition #4  ---
!
!       SL = 0.0, ST = 1.0, SG = 0.0
!
!       energy - temperature, C - T
!       water mass - aqueous saturation, SL
!       CO2 mass
!         if( ZMC(1,2,N) > max( ZMC(J,2,N) ) J /= 1
!           - nonaqueous (system) pressure, Pa gauge - PN,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(1,2,N)
!         endif
!       CH4 mass
!         if( ZMC(2,2,N) > max( ZMC(J,2,N) ) J /= 2
!           - nonaqueous (system) pressure, Pa gauge - PN,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(2,2,N)
!         endif
!       petroleum component mass
!         if( ZMC(I,2,N) > max( ZMC(J,2,N) ) J /= I
!           - nonaqueous (system) pressure, Pa gauge - PN,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(I,2,N)
!         endif
!       salt mass - total salt mass - TMS(2,N)
!
        ELSEIF( MOD(NPHAZ(2,N),10).EQ.4 ) THEN
          PX = PSO(2,N) + PATM
!
!---      Maximum solubility of salt in pure water  ---
!
          CALL SOL_LS( T(2,N),XBSMX )
!
!---      Salt mass fraction in brine  ---
!
          XBSX = MIN( YLS(2,N),XBSMX )
!
!---      Nonaqueous flash calculation  ---
!
          CALL SP_B( T(2,N),XBSX,PSBX )
          CALL VPL( PSBX,PVBX,SL(2,N),T(2,N),IZ(N) )
          PVX = PX - PVBX
          IBETAX = 0
          BETAX = -1.D+0
          GNIFTX = 0.D+0
          CALL FLH_NA( BETAX,FKX,GNIFTX,PVX,PVBX,RHOMG(2,N),RHOMN(2,N),
     &      SGX,SNX,T(2,N),XMGC(1,2,N),XMGW(2,N),XMNC(1,2,N),
     &      ZGX,ZMC(1,2,N),ZNX,IBETAX,NPHAZ(2,N) )
          SG(2,N) = (1.D+0-SL(2,N))*SGX
!          IF( NITER.GE.2 ) THEN
!            SGX = AST(N)
!            SNX = 1.D+0 - AST(N)
!          ELSE
!            AST(N) = SGX/(SNX+SGX+SMALL)
!          ENDIF
          SN(2,N) = (1.D+0-SL(2,N))*SNX
          IF( ISLC(11).EQ.2 ) THEN
            CALL PORSTY( IZ(N),PX,PCMP(N),PORD(2,N),PORT(2,N) )
            PORD(2,N) = MAX( PORD(2,N),EPSL )
            PORT(2,N) = MAX( PORT(2,N),PORD(2,N) )
            CALL PORSTY_M( IZ(N),PX,PCMP(N),PORD_M(2,N),PORT_M(2,N) )
            PORD_M(2,N) = MAX( PORD_M(2,N),EPSL )
            PORT_M(2,N) = MAX( PORT_M(2,N),PORD_M(2,N) )
            EPORFX = PORD(2,N)*FRAC_P(7,IZ(N))
            EPORMX = PORD_M(2,N)*(1.D+0-FRAC_P(7,IZ(N)))
            CALL CAP_EOR_EC( EPORFX,EPORMX,SG(2,N),SL(2,N),SN(2,N),
     &        SG_F(2,N),SL_F(2,N),SN_F(2,N),SG_M(2,N),SL_M(2,N),
     &        SN_M(2,N),CPGTX,CPNLX,IZ(N) )
          ELSE
            CALL CAP_EOR( SG(2,N),SL(2,N),SN(2,N),CPGTX,CPNLX,IZ(N) )
          ENDIF
!
!---      Assign maximum concentration of petroleum component  ---
!
          ZMCMX = 0.D+0
          DO IGC = 1,NGC+2
            IF( ZMC(IGC,2,N).GT.ZMCMX ) THEN
              IZMC(N) = IGC
              ZMCMX = ZMC(IGC,2,N)
            ENDIF
          ENDDO
!
!---      Aqueous phase appears, transition to 
!         phase condition #2 or #3  ---
!
          IF( SL(2,N).GT.1.D-6 ) THEN
!
!---        Gas phase appears, transition to phase condition #3  ---
!
            IF( SG(2,N).GT.EPSL ) THEN
              NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 3
!
!---        No gas phase, transition to phase condition #2  ---
!
            ELSE
              NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 2
            ENDIF
!
!---      Gas phase appears, transition to phase condition #5  ---
!
          ELSEIF( SG(2,N).GT.EPSL ) THEN
            NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 5
!
!---      No transition from phase condition #4  ---
!
          ELSE
            NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 4
          ENDIF
!
!---      Phase pressure from phase capillary pressures and system
!         pressure  ---
!
          PG(2,N) = PSO(2,N)
          PTX = PG(2,N) - CPGTX
          IF( CPNLX.GT.0.D+0 ) THEN
            PN(2,N) = PTX
            PL(2,N) = PN(2,N) - CPNLX
          ELSE
            PL(2,N) = PTX
            PN(2,N) = PL(2,N) + CPNLX
          ENDIF
!
!---    Phase condition #5  ---
!
!       SL = 0.0, ST >= 0.0, SG > 0.0
!
!       energy - temperature, C - T
!       water mass - aqueous saturation, SL
!       CO2 mass
!         if( ZMC(1,2,N) > max( ZMC(J,2,N) ) J /= 1
!           - gas (system) pressure, Pa gauge - PG,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(1,2,N)
!         endif
!       CH4 mass
!         if( ZMC(2,2,N) > max( ZMC(J,2,N) ) J /= 2
!           - gas (system) pressure, Pa gauge - PG,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(2,2,N)
!         endif
!       petroleum component mass
!         if( ZMC(I,2,N) > max( ZMC(J,2,N) ) J /= I
!           - gas (system) pressure, Pa gauge - PG,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(I,2,N)
!         endif
!       salt mass - total salt mass - TMS(2,N)
!
        ELSEIF( MOD(NPHAZ(2,N),10).EQ.5 ) THEN
          PX = PG(2,N) + PATM
!
!---      Maximum solubility of salt in pure water  ---
!
          CALL SOL_LS( T(2,N),XBSMX )
!
!---      Salt mass fraction in brine  ---
!
          XBSX = MIN( YLS(2,N),XBSMX )
!
!---      Nonaqueous flash calculation  ---
!
          CALL SP_B( T(2,N),XBSX,PSBX )
          CALL VPL( PSBX,PVBX,SL(2,N),T(2,N),IZ(N) )
          PVX = PX - PVBX
          IBETAX = 0
          BETAX = -1.D+0
          GNIFTX = 0.D+0
          CALL FLH_NA( BETAX,FKX,GNIFTX,PVX,PVBX,RHOMG(2,N),RHOMN(2,N),
     &      SGX,SNX,T(2,N),XMGC(1,2,N),XMGW(2,N),XMNC(1,2,N),
     &      ZGX,ZMC(1,2,N),ZNX,IBETAX,NPHAZ(2,N) )
!          IF( NITER.GE.2 ) THEN
!            SGX = AST(N)
!            SNX = 1.D+0 - AST(N)
!          ELSE
!            AST(N) = SGX/(SNX+SGX+SMALL)
!          ENDIF
          SG(2,N) = (1.D+0-SL(2,N))*SGX
          SN(2,N) = (1.D+0-SL(2,N))*SNX
          IF( ISLC(11).EQ.2 ) THEN
            CALL PORSTY( IZ(N),PX,PCMP(N),PORD(2,N),PORT(2,N) )
            PORD(2,N) = MAX( PORD(2,N),EPSL )
            PORT(2,N) = MAX( PORT(2,N),PORD(2,N) )
            CALL PORSTY_M( IZ(N),PX,PCMP(N),PORD_M(2,N),PORT_M(2,N) )
            PORD_M(2,N) = MAX( PORD_M(2,N),EPSL )
            PORT_M(2,N) = MAX( PORT_M(2,N),PORD_M(2,N) )
            EPORFX = PORD(2,N)*FRAC_P(7,IZ(N))
            EPORMX = PORD_M(2,N)*(1.D+0-FRAC_P(7,IZ(N)))
            CALL CAP_EOR_EC( EPORFX,EPORMX,SG(2,N),SL(2,N),SN(2,N),
     &        SG_F(2,N),SL_F(2,N),SN_F(2,N),SG_M(2,N),SL_M(2,N),
     &        SN_M(2,N),CPGTX,CPNLX,IZ(N) )
          ELSE
            CALL CAP_EOR( SG(2,N),SL(2,N),SN(2,N),CPGTX,CPNLX,IZ(N) )
          ENDIF
!
!---      Assign maximum concentration of petroleum component  ---
!
          ZMCMX = 0.D+0
          DO IGC = 1,NGC+2
            IF( ZMC(IGC,2,N).GT.ZMCMX ) THEN
              IZMC(N) = IGC
              ZMCMX = ZMC(IGC,2,N)
            ENDIF
          ENDDO
!
!---      Aqueous phase appears, transition to 
!         phase condition #2 or #3  ---
!
          IF( SL(2,N).GT.1.D-6 ) THEN
!
!---        Gas phase disappears, transition to phase condition #2,
!           conserving nonaqueous-liquid pressure  ---
!
            IF( SG(2,N).LT.EPSL ) THEN
              NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 2
!
!---        Gas phase remains, transition to phase condition #3,
!           conserving gas pressure  ---
!
            ELSE
              NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 3
            ENDIF
!
!---      Gas phase disappears, transition to phase condition #4, 
!         conserving nonaqueous-liquid pressure  ---
!
          ELSEIF( SG(2,N).LT.EPSL ) THEN
            NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 4
!
!---      No transition from phase condition #5  ---
!
          ELSE
            NPHAZ(2,N) = 10*(NPHAZ(2,N)/10) + 5
          ENDIF
!
!---      Phase pressure from phase capillary pressures and system
!         pressure  ---
!
          PG(2,N) = PSO(2,N)
          PTX = PG(2,N) - CPGTX
          IF( CPNLX.GT.0.D+0 ) THEN
            PN(2,N) = PTX
            PL(2,N) = PN(2,N) - CPNLX
          ELSE
            PL(2,N) = PTX
            PN(2,N) = PL(2,N) + CPNLX
          ENDIF
        ENDIF
  100 CONTINUE
!
!--- Compute increments  ---
!
      DO 300 N = 1,NFBN
        IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) GOTO 300
        IZN = IZ(N)
        N_DB = N
!
!---    Absolute temperature  ---
!
        TKX = T(2,N)+TABS
!
!---    Phase condition #1  ---
!
!       SL = 1.0, SG+SN = 0.0
!
!       energy - temperature, C - T
!       water mass - aqueous (system) pressure, Pa gauge - PL,PSO
!       CO2 mass - CO2 vapor pressure - PVA
!       CH4 mass - total CH4 mass - TMC
!       petroleum component mass - total petroleum component mass - TMC
!       salt mass - total salt brine mass fraction - YLS
!
        IF( MOD(NPHAZ(2,N),10).EQ.1 ) THEN
!
!---      Energy (temperature), increment  ---
!
          IF( ISLC(30).EQ.0 ) DNR(IEQT,N) = -1.D-7
!
!---      Water mass (system pressure), increment  ---
!
          DNR(IEQW,N) = MAX( 1.D-1,1.D-7*(PL(2,N)+PATM) )
!
!---      CO2 mass (CO2 vapor pressure), increment  ---
!
          IF( ISLC(45).EQ.0 ) DNR(IEQGC(1),N) = 1.D-2
!!
!!---      Aqueous mass  ---
!!
!          TMLX = RHOL(2,N)*PORD(2,N)*VOL(N)
!!
!!---      CH4 mass (total CH4 mass), increment  ---
!!
!          IF( ISLC(64).EQ.0 ) 
!     &      DNR(IEQGC(2),N) = MAX( 1.D-7*TMLX,1.D-6 )
!!
!!---      Petroleum component mass (total petroleum component mass),
!!         increment  ---
!!
!          DO 112 IGC = 3,NGC+2
!            DNR(IEQGC(IGC),N) = MAX( 1.D-7*TMLX,1.D-6 )
!  112     CONTINUE
!
!---      CH4 mass (total CH4 mass), increment  ---
!
          IF( ISLC(64).EQ.0 ) 
     &      DNR(IEQGC(2),N) = MAX( 1.D-7,1.D-7*TMC(2,2,N) )
!
!---      Petroleum component mass (total petroleum component mass),
!         increment  ---
!
          DO 112 IGC = 3,NGC+2
            DNR(IEQGC(IGC),N) = MAX( 1.D-7,1.D-7*TMC(IGC,2,N) )
  112     CONTINUE
!
!---      Salt mass (total salt brine mass fraction), increment  ---
!
          IF( ISLC(32).EQ.0 ) THEN
            CALL SOL_LS( T(2,N),XLSMX )
            XLSX = MIN( YLS(2,N),XLSMX )
            DNR(IEQS,N) = 1.D-7*XLSMX
          ENDIF
!
!---    Phase condition #2  ---
!
!       SL < 1.0, ST > 0.0, SG = 0.0
!
!       energy - temperature, C - T
!       water mass - aqueous saturation, SL
!       CO2 mass
!         if( ZMC(1,2,N) > max( ZMC(J,2,N) ) J /= 1
!           - nonaqueous (system) pressure, Pa gauge - PN,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(1,2,N)
!         endif
!       CH4 mass
!         if( ZMC(2,2,N) > max( ZMC(J,2,N) ) J /= 2
!           - nonaqueous (system) pressure, Pa gauge - PN,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(2,2,N)
!         endif
!       petroleum component mass
!         if( ZMC(I,2,N) > max( ZMC(J,2,N) ) J /= I
!           - nonaqueous (system) pressure, Pa gauge - PN,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(I,2,N)
!         endif
!       salt mass - total salt brine mass fraction - YLS
!
        ELSEIF( MOD(NPHAZ(2,N),10).EQ.2 ) THEN
!
!---      Energy (temperature), increment  ---
!
          IF( ISLC(30).EQ.0 ) DNR(IEQT,N) = -1.D-7
!
!---      Water mass (aqueous saturation), increment or decrement  ---
!
!          IF( SL(2,N).GT.5.D-1 ) THEN
            NPHAZ(2,N) = MOD( NPHAZ(2,N),100) + 100
            DNR(IEQW,N) = MAX( 1.D-1,1.D-7*PSO(2,N) )
!          ELSE
!            NPHAZ(2,N) = MOD( NPHAZ(2,N),100 )
!            DNR(IEQW,N) = SIGN( 1.D-6,5.D-1-SL(2,N) )
!          ENDIF
!
!---      CO2 mass increment  ---
!
          IF( ISLC(45).EQ.0 ) THEN
!
!---        System pressure, increment  ---
!
            IF( IZMC(N).EQ.1 ) THEN
              IF( NPHAZ(2,N).GT.100 ) THEN
                DNR(IEQGC(1),N) = SIGN( 1.D-6,5.D-1-SL(2,N) )
              ELSE
                DNR(IEQGC(1),N) = MAX( 1.D-1,1.D-7*(PN(2,N)+PATM) )
              ENDIF
!
!---        Nonaqueous mole fraction, increment  ---
!
            ELSE
!
!---          Decrease mole fraction of volatile components,
!             and increase mole fraction of non-volatile components  ---
!
              IF( ZMC(1,2,N).GT.9.D-1 ) THEN
                DNR(IEQGC(1),N) = -MAX( 1.D-6*ZMC(1,2,N),1.D-9 )
              ELSE
                DNR(IEQGC(1),N) = MAX( 1.D-6*ZMC(1,2,N),1.D-9 )
              ENDIF
            ENDIF
          ENDIF
!
!---      CH4 mass increment  ---
!
          IF( ISLC(64).EQ.0 ) THEN
!
!---        System pressure, increment  ---
!
            IF( IZMC(N).EQ.2 ) THEN
              IF( NPHAZ(2,N).GT.100 ) THEN
                DNR(IEQGC(2),N) = SIGN( 1.D-6,5.D-1-SL(2,N) )
              ELSE
                DNR(IEQGC(2),N) = MAX( 1.D-1,1.D-7*(PN(2,N)+PATM) )
              ENDIF            
!
!---        Nonaqueous mole fraction, increment  ---
!
            ELSE
!
!---          Decrease mole fraction of volatile components,
!             and increase mole fraction of non-volatile components  ---
!
              IF( ZMC(2,2,N).GT.9.D-1 ) THEN
                DNR(IEQGC(2),N) = -MAX( 1.D-6*ZMC(2,2,N),1.D-9 )
              ELSE
                DNR(IEQGC(2),N) = MAX( 1.D-6*ZMC(2,2,N),1.D-9 )
              ENDIF
            ENDIF
          ENDIF
!
!---      Petroleum component mass (total petroleum component mass),
!         increment  ---
!
          DO 122 IGC = 3,NGC+2
!
!---        System pressure, increment  ---
!
            IF( IZMC(N).EQ.IGC ) THEN
              IF( NPHAZ(2,N).GT.100 ) THEN
                DNR(IEQGC(IGC),N) = SIGN( 1.D-6,5.D-1-SL(2,N) )
              ELSE
                DNR(IEQGC(IGC),N) = MAX( 1.D-1,1.D-7*(PN(2,N)+PATM) )
              ENDIF            
!
!---        Nonaqueous mole fraction, increment  ---
!
            ELSE
!
!---          Decrease mole fraction of volatile components,
!             and increase mole fraction of non-volatile components  ---
!
              IF( ZMC(IGC,2,N).GT.9.D-1 ) THEN
                DNR(IEQGC(IGC),N) = -MAX( 1.D-6*ZMC(IGC,2,N),1.D-9 )
              ELSE
                DNR(IEQGC(IGC),N) = MAX( 1.D-6*ZMC(IGC,2,N),1.D-9 )
              ENDIF
            ENDIF
  122     CONTINUE
!
!---      Salt mass (total salt brine mass fraction), increment  ---
!
          IF( ISLC(32).EQ.0 ) THEN
            CALL SOL_LS( T(2,N),XLSMX )
            XLSX = MIN( YLS(2,N),XLSMX )
            DNR(IEQS,N) = 1.D-7*XLSMX
          ENDIF
!
!---    Phase condition #3  ---
!
!       SL < 1.0, ST > 0.0, SG > 0.0
!
!       energy - temperature, C - T
!       water mass - aqueous saturation, SL
!       CO2 mass
!         if( ZMC(1,2,N) > max( ZMC(J,2,N) ) J /= 1
!           - gas (system) pressure, Pa gauge - PG,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(1,2,N)
!         endif
!       CH4 mass
!         if( ZMC(2,2,N) > max( ZMC(J,2,N) ) J /= 2
!           - gas (system) pressure, Pa gauge - PG,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(2,2,N)
!         endif
!       petroleum component mass
!         if( ZMC(I,2,N) > max( ZMC(J,2,N) ) J /= I
!           - gas (system) pressure, Pa gauge - PG,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(I,2,N)
!         endif
!       salt mass - total salt brine mass fraction - YLS
!
        ELSEIF( MOD(NPHAZ(2,N),10).EQ.3 ) THEN
!
!---      Energy (temperature), increment  ---
!
          IF( ISLC(30).EQ.0 ) DNR(IEQT,N) = 1.D-7
!
!---      Water mass (aqueous saturation), increment or decrement  ---
!
!          IF( SL(2,N).GT.5.D-1 ) THEN
            NPHAZ(2,N) = MOD( NPHAZ(2,N),100) + 100
            DNR(IEQW,N) = MAX( 1.D-1,1.D-7*PSO(2,N) )
!          ELSE
!            NPHAZ(2,N) = MOD( NPHAZ(2,N),100 )
!            DNR(IEQW,N) = SIGN( 1.D-6,5.D-1-SL(2,N) )
!          ENDIF
!
!---      CO2 mass increment  ---
!
          IF( ISLC(45).EQ.0 ) THEN
!
!---        System pressure, increment  ---
!
            IF( IZMC(N).EQ.1 ) THEN
              IF( NPHAZ(2,N).GT.100 ) THEN
                DNR(IEQGC(1),N) = SIGN( 1.D-6,5.D-1-SL(2,N) )
              ELSE
                DNR(IEQGC(1),N) = -MAX( 1.D-1,1.D-5*(PG(2,N)+PATM) )
              ENDIF
!
!---        Nonaqueous mole fraction, increment  ---
!
            ELSE
!
!---          Increase mole fraction of volatile components,
!             and decrease mole fraction of non-volatile components  ---
!
              IF( ZMC(1,2,N).GT.9.D-1 ) THEN
                DNR(IEQGC(1),N) = -MAX( 1.D-6*ZMC(1,2,N),1.D-9 )
              ELSE
                DNR(IEQGC(1),N) = MAX( 1.D-6*ZMC(1,2,N),1.D-9 )
              ENDIF
            ENDIF
          ENDIF
!
!---      CH4 mass increment  ---
!
          IF( ISLC(64).EQ.0 ) THEN
!
!---        System pressure, increment  ---
!
            IF( IZMC(N).EQ.2 ) THEN
              IF( NPHAZ(2,N).GT.100 ) THEN
                DNR(IEQGC(2),N) = SIGN( 1.D-6,5.D-1-SL(2,N) )
              ELSE
                DNR(IEQGC(2),N) = -MAX( 1.D-1,1.D-5*(PG(2,N)+PATM) )
              ENDIF
!
!---        Nonaqueous mole fraction, increment  ---
!
            ELSE
!
!---          Increase mole fraction of volatile components,
!             and decrease mole fraction of non-volatile components  ---
!
              IF( ZMC(2,2,N).GT.9.D-1 ) THEN
                DNR(IEQGC(2),N) = -MAX( 1.D-6*ZMC(2,2,N),1.D-9 )
              ELSE
                DNR(IEQGC(2),N) = MAX( 1.D-6*ZMC(2,2,N),1.D-9 )
              ENDIF
            ENDIF
          ENDIF
!
!---      Petroleum component mass (total petroleum component mass),
!         increment  ---
!
          DO 132 IGC = 3,NGC+2
!
!---        System pressure, increment  ---
!
            IF( IZMC(N).EQ.IGC ) THEN
              IF( NPHAZ(2,N).GT.100 ) THEN
                DNR(IEQGC(IGC),N) = SIGN( 1.D-6,5.D-1-SL(2,N) )
              ELSE
                DNR(IEQGC(IGC),N) = -MAX( 1.D-1,1.D-5*(PG(2,N)+PATM) )
              ENDIF
!
!---        Nonaqueous mole fraction, increment  ---
!
            ELSE
!
!---          Increase mole fraction of volatile components,
!             and decrease mole fraction of non-volatile components  ---
!
              IF( ZMC(IGC,2,N).GT.9.D-1 ) THEN
                DNR(IEQGC(IGC),N) = -MAX( 1.D-6*ZMC(IGC,2,N),1.D-9 )
              ELSE
                DNR(IEQGC(IGC),N) = MAX( 1.D-6*ZMC(IGC,2,N),1.D-9 )
              ENDIF
            ENDIF
  132     CONTINUE
!
!---      Salt mass (total salt brine mass fraction)  ---
!
          IF( ISLC(32).EQ.0 ) THEN
            CALL SOL_LS( T(2,N),XLSMX )
            XLSX = MIN( YLS(2,N),XLSMX )
            DNR(IEQS,N) = 1.D-7*XLSMX
          ENDIF
!
!---    Phase condition #4  ---
!
!       SL = 0.0, ST = 1.0, SG = 0.0
!
!       energy - temperature, C - T
!       water mass - aqueous saturation, SL
!       CO2 mass
!         if( ZMC(1,2,N) > max( ZMC(J,2,N) ) J /= 1
!           - nonaqueous (system) pressure, Pa gauge - PN,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(1,2,N)
!         endif
!       CH4 mass
!         if( ZMC(2,2,N) > max( ZMC(J,2,N) ) J /= 2
!           - nonaqueous (system) pressure, Pa gauge - PN,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(2,2,N)
!         endif
!       petroleum component mass
!         if( ZMC(I,2,N) > max( ZMC(J,2,N) ) J /= I
!           - nonaqueous (system) pressure, Pa gauge - PN,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(I,2,N)
!         endif
!       salt mass - total salt mass - TMS(2,N)
!
        ELSEIF( MOD(NPHAZ(2,N),10).EQ.4 ) THEN
!
!---      Energy (temperature), increment  ---
!
          IF( ISLC(30).EQ.0 ) DNR(IEQT,N) = -1.D-7
!
!---      Water mass (aqueous saturation), increment or decrement  ---
!
!          IF( SL(2,N).GT.5.D-1 ) THEN
            NPHAZ(2,N) = MOD( NPHAZ(2,N),100) + 100
            DNR(IEQW,N) = MAX( 1.D-1,1.D-7*PSO(2,N) )
!          ELSE
!            NPHAZ(2,N) = MOD( NPHAZ(2,N),100 )
!            DNR(IEQW,N) = SIGN( 1.D-6,5.D-1-SL(2,N) )
!          ENDIF
!
!---      CO2 mass increment  ---
!
          IF( ISLC(45).EQ.0 ) THEN
!
!---        System pressure, increment  ---
!
            IF( IZMC(N).EQ.1 ) THEN
              IF( NPHAZ(2,N).GT.100 ) THEN
                DNR(IEQGC(1),N) = SIGN( 1.D-6,5.D-1-SL(2,N) )
              ELSE
                DNR(IEQGC(1),N) = MAX( 1.D-1,1.D-7*(PN(2,N)+PATM) )
              ENDIF
!
!---        Nonaqueous mole fraction, increment  ---
!
            ELSE
!
!---          Decrease mole fraction of volatile components,
!             and increase mole fraction of non-volatile components  ---
!
              IF( ZMC(1,2,N).GT.9.D-1 ) THEN
                DNR(IEQGC(1),N) = -MAX( 1.D-6*ZMC(1,2,N),1.D-9 )
              ELSE
                DNR(IEQGC(1),N) = MAX( 1.D-6*ZMC(1,2,N),1.D-9 )
              ENDIF
            ENDIF
          ENDIF
!
!---      CH4 mass increment  ---
!
          IF( ISLC(64).EQ.0 ) THEN
!
!---        System pressure, increment  ---
!
            IF( IZMC(N).EQ.2 ) THEN
              IF( NPHAZ(2,N).GT.100 ) THEN
                DNR(IEQGC(2),N) = SIGN( 1.D-6,5.D-1-SL(2,N) )
              ELSE
                DNR(IEQGC(2),N) = MAX( 1.D-1,1.D-7*(PN(2,N)+PATM) )
              ENDIF
!
!---        Nonaqueous mole fraction, increment  ---
!
            ELSE
!
!---          Decrease mole fraction of volatile components,
!             and increase mole fraction of non-volatile components  ---
!
              IF( ZMC(2,2,N).GT.9.D-1 ) THEN
                DNR(IEQGC(2),N) = -MAX( 1.D-6*ZMC(2,2,N),1.D-9 )
              ELSE
                DNR(IEQGC(2),N) = MAX( 1.D-6*ZMC(2,2,N),1.D-9 )
              ENDIF
            ENDIF
          ENDIF
!
!---      Petroleum component mass (total petroleum component mass),
!         increment  ---
!
          DO 142 IGC = 3,NGC+2
!
!---        System pressure, increment  ---
!
            IF( IZMC(N).EQ.IGC ) THEN
              IF( NPHAZ(2,N).GT.100 ) THEN
                DNR(IEQGC(IGC),N) = SIGN( 1.D-6,5.D-1-SL(2,N) )
              ELSE
                DNR(IEQGC(IGC),N) = MAX( 1.D-1,1.D-7*(PN(2,N)+PATM) )
              ENDIF
!
!---        Nonaqueous mole fraction, increment  ---
!
            ELSE
!
!---          Decrease mole fraction of volatile components,
!             and increase mole fraction of non-volatile components  ---
!
              IF( ZMC(IGC,2,N).GT.9.D-1 ) THEN
                DNR(IEQGC(IGC),N) = -MAX( 1.D-6*ZMC(IGC,2,N),1.D-9 )
              ELSE
                DNR(IEQGC(IGC),N) = MAX( 1.D-6*ZMC(IGC,2,N),1.D-9 )
              ENDIF
            ENDIF
  142     CONTINUE
!
!---      Salt mass (total salt mass), increment  ---
!
          IF( ISLC(32).EQ.0 ) THEN
            DNR(IEQS,N) = 1.D-7
          ENDIF
!
!---    Phase condition #5  ---
!
!       SL = 0.0, ST >= 0.0, SG > 0.0
!
!       energy - temperature, C - T
!       water mass - aqueous saturation, SL
!       CO2 mass
!         if( ZMC(1,2,N) > max( ZMC(J,2,N) ) J /= 1
!           - gas (system) pressure, Pa gauge - PG,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(1,2,N)
!         endif
!       CH4 mass
!         if( ZMC(2,2,N) > max( ZMC(J,2,N) ) J /= 2
!           - gas (system) pressure, Pa gauge - PG,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(2,2,N)
!         endif
!       petroleum component mass
!         if( ZMC(I,2,N) > max( ZMC(J,2,N) ) J /= I
!           - gas (system) pressure, Pa gauge - PG,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(I,2,N)
!         endif
!       salt mass - total salt mass - TMS(2,N)
!
        ELSEIF( MOD(NPHAZ(2,N),10).EQ.5 ) THEN
!
!---      Energy (temperature), increment  ---
!
          IF( ISLC(30).EQ.0 ) DNR(IEQT,N) = -1.D-7
!
!---      Water mass (aqueous saturation), increment or decrement  ---
!
!          IF( SL(2,N).GT.5.D-1 ) THEN
            NPHAZ(2,N) = MOD( NPHAZ(2,N),100) + 100
            DNR(IEQW,N) = MAX( 1.D-1,1.D-7*PSO(2,N) )
!          ELSE
!            NPHAZ(2,N) = MOD( NPHAZ(2,N),100 )
!            DNR(IEQW,N) = SIGN( 1.D-6,5.D-1-SL(2,N) )
!          ENDIF
!
!---      CO2 mass increment  ---
!
          IF( ISLC(45).EQ.0 ) THEN
!
!---        System pressure, increment  ---
!
            IF( IZMC(N).EQ.1 ) THEN
              IF( NPHAZ(2,N).GT.100 ) THEN
                DNR(IEQGC(1),N) = SIGN( 1.D-6,5.D-1-SL(2,N) )
              ELSE
                DNR(IEQGC(1),N) = -MAX( 1.D-1,1.D-7*(PG(2,N)+PATM) )
              ENDIF
!
!---        Nonaqueous mole fraction, increment  ---
!
            ELSE
!
!---          Increase mole fraction of volatile components,
!             and decrease mole fraction of non-volatile components  ---
!
              IF( ZMC(1,2,N).GT.9.D-1 ) THEN
                DNR(IEQGC(1),N) = -MAX( 1.D-6*ZMC(1,2,N),1.D-9 )
              ELSE
                DNR(IEQGC(1),N) = MAX( 1.D-6*ZMC(1,2,N),1.D-9 )
              ENDIF
            ENDIF
          ENDIF
!
!---      CH4 mass increment  ---
!
          IF( ISLC(64).EQ.0 ) THEN
!
!---        System pressure, increment  ---
!
            IF( IZMC(N).EQ.2 ) THEN
              IF( NPHAZ(2,N).GT.100 ) THEN
                DNR(IEQGC(2),N) = SIGN( 1.D-6,5.D-1-SL(2,N) )
              ELSE
                DNR(IEQGC(2),N) = -MAX( 1.D-1,1.D-7*(PG(2,N)+PATM) )
              ENDIF
!
!---        Nonaqueous mole fraction, increment  ---
!
            ELSE
 !
!---          Increase mole fraction of volatile components,
!             and decrease mole fraction of non-volatile components  ---
!
              IF( ZMC(2,2,N).GT.9.D-1 ) THEN
                DNR(IEQGC(2),N) = -MAX( 1.D-6*ZMC(2,2,N),1.D-9 )
              ELSE
                DNR(IEQGC(2),N) = MAX( 1.D-6*ZMC(2,2,N),1.D-9 )
              ENDIF
            ENDIF
          ENDIF
!
!---      Petroleum component mass (total petroleum component mass),
!         increment  ---
!
          DO 152 IGC = 3,NGC+2
!
!---        System pressure, increment  ---
!
            IF( IZMC(N).EQ.IGC ) THEN
              IF( NPHAZ(2,N).GT.100 ) THEN
                DNR(IEQGC(IGC),N) = SIGN( 1.D-6,5.D-1-SL(2,N) )
              ELSE
                DNR(IEQGC(IGC),N) = -MAX( 1.D-1,1.D-7*(PG(2,N)+PATM) )
              ENDIF
!
!---        Nonaqueous mole fraction, increment  ---
!
            ELSE
!
!---          Increase mole fraction of volatile components,
!             and decrease mole fraction of non-volatile components  ---
!
              IF( ZMC(IGC,2,N).GT.9.D-1 ) THEN
                DNR(IEQGC(IGC),N) = -MAX( 1.D-6*ZMC(IGC,2,N),1.D-9 )
              ELSE
                DNR(IEQGC(IGC),N) = MAX( 1.D-6*ZMC(IGC,2,N),1.D-9 )
              ENDIF
            ENDIF
  152     CONTINUE
!
!---      Salt mass (total salt mass)  ---
!
          IF( ISLC(32).EQ.0 ) THEN
            DNR(IEQS,N) = 1.D-7
          ENDIF
        ENDIF
!
!---    Increment the primary variables  ---
!
        DO 280 M = 3,ISVC+2
          T(M,N) = T(2,N)
          PG(M,N) = PG(2,N)
          PL(M,N) = PL(2,N)
          PN(M,N) = PN(2,N)
          PSO(M,N) = PSO(2,N)
          PVA(M,N) = PVA(2,N)
          PVW(M,N) = PVW(2,N)
          SL(M,N) = SL(2,N)
          TMS(M,N) = TMS(2,N)
          YLS(M,N) = YLS(2,N)
          DO 200 IGC = 1,NGC+2
            TMC(IGC,M,N) = TMC(IGC,2,N)
            ZMC(IGC,M,N) = ZMC(IGC,2,N)
  200     CONTINUE
!
!---      Phase condition #1  ---
!
!         SL = 1.0, SG+SN = 0.0
!
!         energy - temperature, C - T
!         water mass - aqueous (system) pressure, Pa gauge - PL,PSO
!         CO2 mass - CO2 vapor pressure - PVA
!         CH4 mass - total CH4 mass - TMC
!         petroleum component mass - total petroleum comp. mass - TMC
!         salt mass - total salt brine mass fraction - YLS
!
          IF( MOD(NPHAZ(2,N),10).EQ.1 ) THEN
            IF( M.EQ.IEQT+2 .AND. ISLC(30).EQ.0 ) THEN
              T(M,N) = T(M,N) + DNR(IEQT,N)
            ELSEIF( M.EQ.IEQW+2 ) THEN
              PSO(M,N) = PSO(M,N) + DNR(IEQW,N)
            ELSEIF( M.EQ.IEQGC(1)+2 .AND. ISLC(45).EQ.0 ) THEN
              PVA(M,N) = PVA(M,N) + DNR(IEQGC(1),N)
            ELSEIF( M.EQ.IEQGC(2)+2 .AND. ISLC(64).EQ.0 ) THEN
              TMC(2,M,N) = TMC(2,M,N) + DNR(IEQGC(2),N)
            ELSEIF( M.EQ.IEQS+2 .AND. ISLC(32).EQ.0 ) THEN
              YLS(M,N) = YLS(M,N) + DNR(IEQS,N)
            ELSE
              DO 210 IGC = 3,NGC+2
                IF( M.EQ.IEQGC(IGC)+2 ) THEN
                  TMC(IGC,M,N) = TMC(IGC,M,N) + DNR(IEQGC(IGC),N)
                ENDIF
  210         CONTINUE
            ENDIF
!
!---      Phase condition #2  ---
!
!         SL < 1.0, ST > 0.0, SG = 0.0
!
!         energy - temperature, C - T
!         water mass - aqueous saturation, SL
!         CO2 mass
!           if( ZMC(1,2,N) > max( ZMC(J,2,N) ) J /= 1
!             - nonaqueous (system) pressure, Pa gauge - PN,PSO
!           else
!             - nonaqueous mole fraction of CO2 - ZMC(1,2,N)
!           endif
!         CH4 mass
!           if( ZMC(2,2,N) > max( ZMC(J,2,N) ) J /= 2
!             - nonaqueous (system) pressure, Pa gauge - PN,PSO
!           else
!             - nonaqueous mole fraction of CO2 - ZMC(2,2,N)
!           endif
!         petroleum component mass
!           if( ZMC(I,2,N) > max( ZMC(J,2,N) ) J /= I
!             - nonaqueous (system) pressure, Pa gauge - PN,PSO
!           else
!             - nonaqueous mole fraction of CO2 - ZMC(I,2,N)
!           endif
!         salt mass - total salt brine mass fraction - YLS
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.2 ) THEN
            IF( M.EQ.IEQT+2 .AND. ISLC(30).EQ.0 ) THEN
              T(M,N) = T(M,N) + DNR(IEQT,N)
            ELSEIF( M.EQ.IEQW+2 ) THEN
              IF( NPHAZ(2,N).GT.100 ) THEN
                PSO(M,N) = PSO(M,N) + DNR(IEQW,N)
              ELSE
                SL(M,N) = SL(M,N) + DNR(IEQW,N)
              ENDIF
            ELSEIF( M.EQ.IEQGC(1)+2 .AND. ISLC(45).EQ.0 ) THEN
              IF( IZMC(N).EQ.1 ) THEN
                IF( NPHAZ(2,N).GT.100 ) THEN
                  SL(M,N) = SL(M,N) + DNR(IEQGC(1),N)
                ELSE
                  PSO(M,N) = PSO(M,N) + DNR(IEQGC(1),N)
                ENDIF
              ELSE
                ZMC(1,M,N) = ZMC(1,M,N) + DNR(IEQGC(1),N)
              ENDIF
            ELSEIF( M.EQ.IEQGC(2)+2 .AND. ISLC(64).EQ.0 ) THEN
              IF( IZMC(N).EQ.2 ) THEN
                IF( NPHAZ(2,N).GT.100 ) THEN
                  SL(M,N) = SL(M,N) + DNR(IEQGC(2),N)
                ELSE
                  PSO(M,N) = PSO(M,N) + DNR(IEQGC(2),N)
                ENDIF
              ELSE
                ZMC(2,M,N) = ZMC(2,M,N) + DNR(IEQGC(2),N)
              ENDIF
            ELSEIF( M.EQ.IEQS+2 .AND. ISLC(32).EQ.0 ) THEN
              YLS(M,N) = YLS(M,N) + DNR(IEQS,N)
            ELSE
              DO IGC = 3,NGC+2
                IF( M.EQ.IEQGC(IGC)+2 ) THEN
                  IF( IZMC(N).EQ.IGC ) THEN
                    IF( NPHAZ(2,N).GT.100 ) THEN
                      SL(M,N) = SL(M,N) + DNR(IEQGC(IGC),N)
                    ELSE
                      PSO(M,N) = PSO(M,N) + DNR(IEQGC(IGC),N)
                    ENDIF
                  ELSE
                    ZMC(IGC,M,N) = ZMC(IGC,M,N) + DNR(IEQGC(IGC),N)
                  ENDIF
                ENDIF
              ENDDO
            ENDIF
!
!---      Phase condition #3  ---
!
!         SL < 1.0, ST > 0.0, SG > 0.0
!
!         energy - temperature, C - T
!         water mass - aqueous saturation, SL
!         CO2 mass
!           if( ZMC(1,2,N) > max( ZMC(J,2,N) ) J /= 1
!             - gas (system) pressure, Pa gauge - PG,PSO
!           else
!             - nonaqueous mole fraction of CO2 - ZMC(1,2,N)
!           endif
!         CH4 mass
!           if( ZMC(2,2,N) > max( ZMC(J,2,N) ) J /= 2
!             - gas (system) pressure, Pa gauge - PG,PSO
!           else
!             - nonaqueous mole fraction of CO2 - ZMC(2,2,N)
!           endif
!         petroleum component mass
!           if( ZMC(I,2,N) > max( ZMC(J,2,N) ) J /= I
!             - gas (system) pressure, Pa gauge - PG,PSO
!           else
!             - nonaqueous mole fraction of CO2 - ZMC(I,2,N)
!           endif
!         salt mass - total salt brine mass fraction - YLS
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.3 ) THEN
            IF( M.EQ.IEQT+2 .AND. ISLC(30).EQ.0 ) THEN
              T(M,N) = T(M,N) + DNR(IEQT,N)
            ELSEIF( M.EQ.IEQW+2 ) THEN
              IF( NPHAZ(2,N).GT.100 ) THEN
                PSO(M,N) = PSO(M,N) + DNR(IEQW,N)
              ELSE
                SL(M,N) = SL(M,N) + DNR(IEQW,N)
              ENDIF
            ELSEIF( M.EQ.IEQGC(1)+2 .AND. ISLC(45).EQ.0 ) THEN
              IF( IZMC(N).EQ.1 ) THEN
                IF( NPHAZ(2,N).GT.100 ) THEN
                  SL(M,N) = SL(M,N) + DNR(IEQGC(1),N)
                ELSE
                  PSO(M,N) = PSO(M,N) + DNR(IEQGC(1),N)
                ENDIF
              ELSE
                ZMC(1,M,N) = ZMC(1,M,N) + DNR(IEQGC(1),N)
              ENDIF
            ELSEIF( M.EQ.IEQGC(2)+2 .AND. ISLC(64).EQ.0 ) THEN
              IF( IZMC(N).EQ.2 ) THEN
                IF( NPHAZ(2,N).GT.100 ) THEN
                  SL(M,N) = SL(M,N) + DNR(IEQGC(2),N)
                ELSE
                  PSO(M,N) = PSO(M,N) + DNR(IEQGC(2),N)
                ENDIF
              ELSE
                ZMC(2,M,N) = ZMC(2,M,N) + DNR(IEQGC(2),N)
              ENDIF
            ELSEIF( M.EQ.IEQS+2 .AND. ISLC(32).EQ.0 ) THEN
              YLS(M,N) = YLS(M,N) + DNR(IEQS,N)
            ELSE
              DO 230 IGC = 3,NGC+2
                IF( M.EQ.IEQGC(IGC)+2 ) THEN
                  IF( IZMC(N).EQ.IGC ) THEN
                    IF( NPHAZ(2,N).GT.100 ) THEN
                      SL(M,N) = SL(M,N) + DNR(IEQGC(IGC),N)
                    ELSE
                      PSO(M,N) = PSO(M,N) + DNR(IEQGC(IGC),N)
                    ENDIF
                  ELSE
                    ZMC(IGC,M,N) = ZMC(IGC,M,N) + DNR(IEQGC(IGC),N)
                  ENDIF
                ENDIF
  230         CONTINUE
            ENDIF
!
!---      Phase condition #4  ---
!
!         SL = 0.0, ST = 1.0, SG = 0.0
!
!         energy - temperature, C - T
!         water mass - aqueous saturation, SL
!         CO2 mass
!           if( ZMC(1,2,N) > max( ZMC(J,2,N) ) J /= 1
!             - nonaqueous (system) pressure, Pa gauge - PN,PSO
!           else
!             - nonaqueous mole fraction of CO2 - ZMC(1,2,N)
!           endif
!         CH4 mass
!           if( ZMC(2,2,N) > max( ZMC(J,2,N) ) J /= 2
!             - nonaqueous (system) pressure, Pa gauge - PN,PSO
!           else
!             - nonaqueous mole fraction of CO2 - ZMC(2,2,N)
!           endif
!         petroleum component mass
!           if( ZMC(I,2,N) > max( ZMC(J,2,N) ) J /= I
!             - nonaqueous (system) pressure, Pa gauge - PN,PSO
!           else
!             - nonaqueous mole fraction of CO2 - ZMC(I,2,N)
!           endif
!         salt mass - total salt mass - TMS(2,N)
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.4 ) THEN
            IF( M.EQ.IEQT+2 .AND. ISLC(30).EQ.0 ) THEN
              T(M,N) = T(M,N) + DNR(IEQT,N)
            ELSEIF( M.EQ.IEQW+2 ) THEN
              IF( NPHAZ(2,N).GT.100 ) THEN
                PSO(M,N) = PSO(M,N) + DNR(IEQW,N)
              ELSE
                SL(M,N) = SL(M,N) + DNR(IEQW,N)
              ENDIF
            ELSEIF( M.EQ.IEQGC(1)+2 .AND. ISLC(45).EQ.0 ) THEN
              IF( IZMC(N).EQ.1 ) THEN
                IF( NPHAZ(2,N).GT.100 ) THEN
                  SL(M,N) = SL(M,N) + DNR(IEQGC(1),N)
                ELSE
                  PSO(M,N) = PSO(M,N) + DNR(IEQGC(1),N)
                ENDIF
              ELSE
                ZMC(1,M,N) = ZMC(1,M,N) + DNR(IEQGC(1),N)
              ENDIF
            ELSEIF( M.EQ.IEQGC(2)+2 .AND. ISLC(64).EQ.0 ) THEN
              IF( IZMC(N).EQ.2 ) THEN
                IF( NPHAZ(2,N).GT.100 ) THEN
                  SL(M,N) = SL(M,N) + DNR(IEQGC(2),N)
                ELSE
                  PSO(M,N) = PSO(M,N) + DNR(IEQGC(2),N)
                ENDIF
              ELSE
                ZMC(2,M,N) = ZMC(2,M,N) + DNR(IEQGC(2),N)
              ENDIF
            ELSEIF( M.EQ.IEQS+2 .AND. ISLC(32).EQ.0 ) THEN
              TMS(M,N) = TMS(M,N) + DNR(IEQS,N)
            ELSE
              DO 240 IGC = 3,NGC+2
                IF( M.EQ.IEQGC(IGC)+2 ) THEN
                  IF( IZMC(N).EQ.IGC ) THEN
                    IF( NPHAZ(2,N).GT.100 ) THEN
                      SL(M,N) = SL(M,N) + DNR(IEQGC(IGC),N)
                    ELSE
                      PSO(M,N) = PSO(M,N) + DNR(IEQGC(IGC),N)
                    ENDIF
                  ELSE
                    ZMC(IGC,M,N) = ZMC(IGC,M,N) + DNR(IEQGC(IGC),N)
                  ENDIF
                ENDIF
  240         CONTINUE
            ENDIF
!
!---      Phase condition #5  ---
!
!         SL = 0.0, ST >= 0.0, SG > 0.0
!
!         energy - temperature, C - T
!         water mass - aqueous saturation, SL
!         CO2 mass
!           if( ZMC(1,2,N) > max( ZMC(J,2,N) ) J /= 1
!             - gas (system) pressure, Pa gauge - PG,PSO
!           else
!             - nonaqueous mole fraction of CO2 - ZMC(1,2,N)
!           endif
!         CH4 mass
!           if( ZMC(2,2,N) > max( ZMC(J,2,N) ) J /= 2
!             - gas (system) pressure, Pa gauge - PG,PSO
!           else
!             - nonaqueous mole fraction of CO2 - ZMC(2,2,N)
!           endif
!         petroleum component mass
!           if( ZMC(I,2,N) > max( ZMC(J,2,N) ) J /= I
!             - gas (system) pressure, Pa gauge - PG,PSO
!           else
!             - nonaqueous mole fraction of CO2 - ZMC(I,2,N)
!           endif
!         salt mass - total salt mass - TMS(2,N)
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.5 ) THEN
            IF( M.EQ.IEQT+2 .AND. ISLC(30).EQ.0 ) THEN
              T(M,N) = T(M,N) + DNR(IEQT,N)
            ELSEIF( M.EQ.IEQW+2 ) THEN
              IF( NPHAZ(2,N).GT.100 ) THEN
                PSO(M,N) = PSO(M,N) + DNR(IEQW,N)
              ELSE
                SL(M,N) = SL(M,N) + DNR(IEQW,N)
              ENDIF
            ELSEIF( M.EQ.IEQGC(1)+2 .AND. ISLC(45).EQ.0 ) THEN
              IF( IZMC(N).EQ.1 ) THEN
                IF( NPHAZ(2,N).GT.100 ) THEN
                  SL(M,N) = SL(M,N) + DNR(IEQGC(1),N)
                ELSE
                  PSO(M,N) = PSO(M,N) + DNR(IEQGC(1),N)
                ENDIF
              ELSE
                ZMC(1,M,N) = ZMC(1,M,N) + DNR(IEQGC(1),N)
              ENDIF
            ELSEIF( M.EQ.IEQGC(2)+2 .AND. ISLC(64).EQ.0 ) THEN
              IF( IZMC(N).EQ.2 ) THEN
                IF( NPHAZ(2,N).GT.100 ) THEN
                  SL(M,N) = SL(M,N) + DNR(IEQGC(2),N)
                ELSE
                  PSO(M,N) = PSO(M,N) + DNR(IEQGC(2),N)
                ENDIF
              ELSE
                ZMC(2,M,N) = ZMC(2,M,N) + DNR(IEQGC(2),N)
              ENDIF
            ELSEIF( M.EQ.IEQS+2 .AND. ISLC(32).EQ.0 ) THEN
              TMS(M,N) = TMS(M,N) + DNR(IEQS,N)
            ELSE
              DO 250 IGC = 3,NGC+2
                IF( M.EQ.IEQGC(IGC)+2 ) THEN
                  IF( IZMC(N).EQ.IGC ) THEN
                    IF( NPHAZ(2,N).GT.100 ) THEN
                      SL(M,N) = SL(M,N) + DNR(IEQGC(IGC),N)
                    ELSE
                      PSO(M,N) = PSO(M,N) + DNR(IEQGC(IGC),N)
                    ENDIF
                  ELSE
                    ZMC(IGC,M,N) = ZMC(IGC,M,N) + DNR(IEQGC(IGC),N)
                  ENDIF
                ENDIF
  250         CONTINUE
            ENDIF
          ENDIF
  280   CONTINUE
  300 CONTINUE
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of INCRM_EOR group
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE JCB_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Load Jacobian matrix for matrix, faults and coupled-wells.
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, 17 April 2020.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//JCB_EOR'
!
!---  Load Jacobian matrix for the energy equation
!     (zero flux boundary)  ---
!
      IF( ISLC(30).EQ.0 ) CALL JCBT_EOR
!
!---  Load Jacobian matrix for the water equation
!     (zero flux boundary)  ---
!
      CALL JCBW_EOR
!
!---  Load Jacobian matrix for the petroleum component equation
!     (zero flux boundary)  ---
!
      DO IGC = 1,NGC+2
        IF( IGC.EQ.1 ) THEN
!
!---      Iso-CO2 option  ---
!
          IF( ISLC(45).EQ.0 ) CALL JCBC_EOR( IGC )
        ELSEIF( IGC.EQ.2 ) THEN
!
!---      Iso-CH4 option  ---
!
          IF( ISLC(64).EQ.0 ) CALL JCBC_EOR( IGC )
        ELSE
          CALL JCBC_EOR( IGC )
        ENDIF
      ENDDO
!
!---  Load Jacobian matrix for the salt equation
!     (zero flux boundary), isobrine option  ---
!
      IF( ISLC(32).EQ.0 ) CALL JCBS_EOR
#ifdef dual_porosity
!
!---  Load Jacobian matrix for the energy equation
!     for the matrix system  ---
!
      IF( ISLC(30).EQ.0 ) CALL JCBT_EOR_M
!
!---  Load Jacobian matrix for the water equation
!     for the matrix system  ---
!
      CALL JCBW_EOR_M
!
!---  Load Jacobian matrix for the petroleum component equation
!     for the matrix system  ---
!
      DO IGC = 1,NGC+2
        IF( IGC.EQ.1 ) THEN
!
!---      Iso-CO2 option  ---
!
          IF( ISLC(45).EQ.0 ) CALL JCBC_EOR_M( IGC )
        ELSEIF( IGC.EQ.2 ) THEN
!
!---      Iso-CH4 option  ---
!
          IF( ISLC(64).EQ.0 ) CALL JCBC_EOR_M( IGC )
        ELSE
          CALL JCBC_EOR_M( IGC )
        ENDIF
      ENDDO
!
!---  Load Jacobian matrix for the salt equation
!     for the matrix system, isobrine option  ---
!
      IF( ISLC(32).EQ.0 ) CALL JCBS_EOR_M
#endif
!
!---  Modify the Jacobian matrix for boundary conditions  ---
!
      CALL BCJ_EOR
!
!---  Faults  ---
!
      IF( ISLC(74).EQ.1 ) THEN
!
!---    Load Jacobian matrix for the energy equation for faults  ---
!
        IF( ISLC(30).EQ.0 ) CALL JCBT_FRC_EOR
!
!---    Modify Jacobian matrix for matrix grid cells and 
!       fault triangles for transfer of energy
!       between matrix grid cells and fault triangles  ---
!
        IF( ISLC(30).EQ.0 ) CALL JCBT_MF_EOR
!
!---    Load Jacobian matrix for the water equation for faults  ---
!
        CALL JCBW_FRC_EOR
!
!---    Modify Jacobian matrix for matrix grid cells and 
!       fracture triangles for transfer of water
!       mass between matrix grid cells and fault triangles  ---
!
        CALL JCBW_MF_EOR
!
!---    Load Jacobian matrix for the petroleum component equation
!       for faults, and modify Jacobian matrix for matrix grid cells and 
!       fracture triangles for transfer of petroleum components
!       mass between matrix grid cells and fault triangles  ---
!
        DO IGC = 1,NGC+2
          IF( IGC.EQ.1 ) THEN
!
!---        Iso-CO2 option  ---
!
            IF( ISLC(45).EQ.0 ) THEN
              CALL JCBC_FRC_EOR( IGC )
              CALL JCBC_MF_EOR( IGC )
            ENDIF
          ELSEIF( IGC.EQ.2 ) THEN
!
!---        Iso-CH4 option  ---
!
            IF( ISLC(64).EQ.0 ) THEN
              CALL JCBC_FRC_EOR( IGC )
              CALL JCBC_MF_EOR( IGC )
            ENDIF
          ELSE
            CALL JCBC_FRC_EOR( IGC )
            CALL JCBC_MF_EOR( IGC )
          ENDIF
        ENDDO
!
!---    Load Jacobian matrix for the salt equation
!       for faults, isobrine option  ---
!
        IF( ISLC(32).EQ.0 ) CALL JCBS_FRC_EOR
!
!---    Modify Jacobian matrix for matrix grid cells and 
!       fault triangles for transfer of salt
!       mass between matrix grid cells and fault triangles  ---
!
        IF( ISLC(32).EQ.0 ) CALL JCBS_MF_EOR
      ENDIF
!
!---  Modify Jacobian matrix for coupled-well equations  ---
!
      IF( L_CW.EQ.1 ) THEN
        CALL JCB_COUP_WELL
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of JCB_EOR group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE LDO_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Load the current time step values into the old time step
!     variables.
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, March 17, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE TRNSPT
      USE SOLTN
      USE REACT
      USE HYST
      USE GRID
      USE FDVT
      USE FDVS
      USE FDVP
      USE FDVN
      USE FDVGC
      USE FDVG
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//LDO_EOR'
!
!---  Assign old time step values  ---
!
      DO 100 N = 1,NFBN
        IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) GOTO 100
        DO 10 IGC = 1,NGC+2
          DFGC(IGC,1,N) = DFGC(IGC,2,N)
          DFNC(IGC,1,N) = DFNC(IGC,2,N)
          TMC(IGC,1,N) = TMC(IGC,2,N)
          XGC(IGC,1,N) = XGC(IGC,2,N)
          XMGC(IGC,1,N) = XMGC(IGC,2,N)
          XLC(IGC,1,N) = XLC(IGC,2,N)
          XMLC(IGC,1,N) = XMLC(IGC,2,N)
          XMNC(IGC,1,N) = XMNC(IGC,2,N)
          XNC(IGC,1,N) = XNC(IGC,2,N)
          ZMC(IGC,1,N) = ZMC(IGC,2,N)
   10   CONTINUE
        ASLMIN(1,N) = MIN( ASL(N),ASLMIN(2,N) )
        ASLMIN(2,N) = ASLMIN(1,N)
        DO M = 1,6
          BETA(M,N) = 0.D+0
        ENDDO
        IBETA(N) = 0
        DFGW(1,N) = DFGW(2,N)
        DFLA(1,N) = DFLA(2,N)
        DFLS(1,N) = DFLS(2,N)
        GNIFT(1,N) = GNIFT(2,N)
!
!---    Isothermal option  ---
!
        IF( ISLC(30).EQ.0 ) THEN
          HG(1,N) = HG(2,N)
          HGA(1,N) = HGA(2,N)
          HGW(1,N) = HGW(2,N)
          HL(1,N) = HL(2,N)
          HLW(1,N) = HLW(2,N)
          HN(1,N) = HN(2,N)
          HSP(1,N) = HSP(2,N)
          UEG(1,N) = UEG(2,N)
          UEL(1,N) = UEL(2,N)
          UEN(1,N) = UEN(2,N)
          THKG(1,N) = THKG(2,N)
          THKL(1,N) = THKL(2,N)
          THKN(1,N) = THKN(2,N)
        ENDIF
        NPHAZ(1,N) = NPHAZ(2,N)
        PERMRF(1,N) = PERMRF(2,N)
        PG(1,N) = PG(2,N)
        PL(1,N) = PL(2,N)
        PN(1,N) = PN(2,N)
        POSM(1,N) = POSM(2,N)
        PSO(1,N) = PSO(2,N)
        PORD(1,N) = PORD(2,N)
        PORT(1,N) = PORT(2,N)
        PVA(1,N) = PVA(2,N)
        PVW(1,N) = PVW(2,N)
        RHOG(1,N) = RHOG(2,N)
        RHOL(1,N) = RHOL(2,N)
        RHOMG(1,N) = RHOMG(2,N)
        RHOML(1,N) = RHOML(2,N)
        RHOMN(1,N) = RHOMN(2,N)
        RHON(1,N) = RHON(2,N)
        RHOSP(1,N) = RHOSP(2,N)
        RKG(1,N) = RKG(2,N)
        RKL(1,1,N) = RKL(1,2,N)
        RKL(2,1,N) = RKL(2,2,N)
        RKL(3,1,N) = RKL(3,2,N)
        RKN(1,N) = RKN(2,N)
        SG(1,N) = SG(2,N)
        SL(1,N) = SL(2,N)
        SN(1,N) = SN(2,N)
        SS(1,N) = SS(2,N)
        T(1,N) = T(2,N)
        TMS(1,N) = TMS(2,N)
        TORG(1,N) = TORG(2,N)
        TORL(1,N) = TORL(2,N)
        TORN(1,N) = TORN(2,N)
        VISG(1,N) = VISG(2,N)
        VISL(1,N) = VISL(2,N)
        VISN(1,N) = VISN(2,N)
        XGW(1,N) = XGW(2,N)
        XLA(1,N) = XLA(2,N)
        XLS(1,N) = XLS(2,N)
        XLW(1,N) = XLW(2,N)
        XMGW(1,N) = XMGW(2,N)
        XMLA(1,N) = XMLA(2,N)
        XMLS(1,N) = XMLS(2,N)
        XMLW(1,N) = XMLW(2,N)
        YLS(1,N) = YLS(2,N)
        ZG(1,N) = ZG(2,N)
        ZN(1,N) = ZN(2,N)
        IBETA(N) = 0
        DO 90 NSL = 1,NSOLU
          CO(N,NSL) = C(N,NSL)
   90   CONTINUE
#ifdef ecke
        IF( ISLC(40).EQ.1 ) THEN
          DO 92 NEQ = 1,NEQC+NEQK
            NSL = NEQ + NSOLU 
            CO(N,NSL) = C(N,NSL)
   92     CONTINUE
          DO 94 NSP = 1,NSPR
            SP_CO(N,NSP) = SP_C(N,NSP)
   94     CONTINUE
        ENDIF
#endif
  100 CONTINUE
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of LDO_EOR group
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE PROP_BO
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Compute hydrologic, thermodynamic and physical properties
!     for the black-oil option
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, 20 May 2014
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE JACOB
      USE HYST
      USE GRID
      USE FDVS
      USE FDVP
      USE FDVN
      USE FDVGC
      USE FDVG
      USE DUAL_POR
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//PROP_BO'
      DO 200 N = 1,NFBN
        IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) GOTO 200
        IZN = IZ(N)
        N_DB = N
!
!---    Loop over increment indices  ---
!
        DO 100 M = 2,ISVC+2
          TKX = T(M,N) + TABS
!
!---      Phase condition #1  ---
!
!         SL = 1.0, SG+SN = 0.0
!
!         energy - temperature, C - T
!         water mass - aqueous (system) pressure, Pa gauge - PL,PSO
!         CO2 mass - CO2 vapor pressure - PVA
!         CH4 mass - total CH4 mass - TMC
!         petroleum component mass - total petroleum comp. mass - TMC
!         salt mass - total salt brine mass fraction - YLS
!
          IF( MOD(NPHAZ(2,N),10).EQ.1 ) THEN
!
!---        System pressure, absolute  ---
!
            PX = PSO(M,N) + PATM
!
!---        Porous-media porosity  ---
!
            CALL PORSTY( N,PX,PCMP(N),PORD(M,N),PORT(M,N) )
            PORD(M,N) = MAX( PORD(M,N),EPSL )
            PORT(M,N) = MAX( PORT(M,N),PORD(M,N) )
!
!---        Flash calculations  ---
!
            CALL BO_PC1( PORD(M,N),POSM(M,N),PVW(M,N),PX,RHOG(M,N),
     &        RHOL(M,N),RHON(M,N),SG(M,N),SL(M,N),SN(M,N),
     &        TMS(M,N),T(M,N),VOL(N),XGC(1,M,N),XGW(M,N),
     &        XLS(M,N),XLW(M,N),XNC(1,M,N),YLS(M,N) )
!
!---        Phase capillary pressure from phase saturations  ---
!
            IF( ISLC(11).EQ.2 ) THEN
              CALL PORSTY_M( IZN,PX,PCMP(N),PORD_M(M,N),PORT_M(M,N) )
              PORD_M(M,N) = MAX( PORD_M(M,N),EPSL )
              PORT_M(M,N) = MAX( PORT_M(M,N),PORD_M(M,N) )
              VOL_M(N) = VOL(N)*(1.D+0-FRAC_P(7,IZN))
              VOL(N) = VOL(N)*FRAC_P(7,IZN)
              EPORFX = PORD(M,N)*FRAC_P(7,IZN)
              EPORMX = PORD_M(M,N)*(1.D+0-FRAC_P(7,IZN))
              CALL CAP_EOR_EC( EPORFX,EPORMX,SG(M,N),SL(M,N),SN(M,N),
     &          SG_F(M,N),SL_F(M,N),SN_F(M,N),SG_M(M,N),SL_M(M,N),
     &          SN_M(M,N),CPGTX,CPNLX,IZN )
            ELSE
              CALL CAP_EOR( SG(M,N),SL(M,N),SN(M,N),CPGTX,CPNLX,IZN )
            ENDIF
!
!---        Phase pressure from phase capillary pressures and system
!           pressure  ---
!
            PG(M,N) = PSO(M,N)
            PTX = PG(M,N) - CPGTX
            IF( CPNLX.GT.0.D+0 ) THEN
              PN(M,N) = PTX
              PL(M,N) = PN(M,N) - CPNLX
            ELSE
              PL(M,N) = PTX
              PN(M,N) = PL(M,N) + CPNLX
            ENDIF
!
!---      Phase condition #2  ---
!
!         SG = 0.0
!         SL > 0.0
!         SN > 0.0
!         Aqueous and nonaqueous liquid saturated
!
!         water mass - aqueous saturation, SL
!         gas mass - gas to oil ratio, POSM
!         oil mass - nonaqueous (system) pressure, Pa gauge - PN,PSO
!         salt mass - total salt brine mass fraction - YLS
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.2 ) THEN
!
!---        System pressure, absolute  ---
!
            PX = PSO(M,N) + PATM
!
!---        Porous-media porosity  ---
!
            CALL PORSTY( N,PX,PCMP(N),PORD(M,N),PORT(M,N) )
            PORD(M,N) = MAX( PORD(M,N),EPSL )
            PORT(M,N) = MAX( PORT(M,N),PORD(M,N) )
!
!---        Flash calculations  ---
!
            CALL BO_PC2( PORD(M,N),POSM(M,N),PVW(M,N),PX,RHOG(M,N),
     &        RHOL(M,N),RHON(M,N),SG(M,N),SL(M,N),SN(M,N),
     &        TMC(1,M,N),TMS(M,N),T(M,N),VOL(N),XGC(1,M,N),XGW(M,N),
     &        XLS(M,N),XLW(M,N),XNC(1,M,N),YLS(M,N),IZN )
!
!---        Phase capillary pressure from phase saturations  ---
!
            IF( ISLC(11).EQ.2 ) THEN
              CALL PORSTY_M( IZN,PX,PCMP(N),PORD_M(M,N),PORT_M(M,N) )
              PORD_M(M,N) = MAX( PORD_M(M,N),EPSL )
              PORT_M(M,N) = MAX( PORT_M(M,N),PORD_M(M,N) )
              VOL_M(N) = VOL(N)*(1.D+0-FRAC_P(7,IZN))
              VOL(N) = VOL(N)*FRAC_P(7,IZN)
              EPORFX = PORD(M,N)*FRAC_P(7,IZN)
              EPORMX = PORD_M(M,N)*(1.D+0-FRAC_P(7,IZN))
              CALL CAP_EOR_EC( EPORFX,EPORMX,SG(M,N),SL(M,N),SN(M,N),
     &          SG_F(M,N),SL_F(M,N),SN_F(M,N),SG_M(M,N),SL_M(M,N),
     &          SN_M(M,N),CPGTX,CPNLX,IZN )
            ELSE
              CALL CAP_EOR( SG(M,N),SL(M,N),SN(M,N),CPGTX,CPNLX,IZN )
            ENDIF
!
!---        Phase pressure from phase capillary pressures and system
!           pressure  ---
!
            PG(M,N) = PSO(M,N)
            PTX = PG(M,N) - CPGTX
            IF( CPNLX.GT.0.D+0 ) THEN
              PN(M,N) = PTX
              PL(M,N) = PN(M,N) - CPNLX
            ELSE
              PL(M,N) = PTX
              PN(M,N) = PL(M,N) + CPNLX
            ENDIF
!
!---      Phase condition #3  ---
!
!         SG > 0.0
!         SL > 0.0
!         SN > 0.0
!         Three-phase
!
!         water mass - aqueous saturation, SL
!         gas mass - gas saturation, SG
!         oil mass - gas (system) pressure, Pa gauge - PG,PSO
!         salt mass - total salt brine mass fraction - YLS
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.3 ) THEN
!
!---        System pressure, absolute  ---
!
            PX = PSO(M,N) + PATM
!
!---        Porous-media porosity  ---
!
            CALL PORSTY( N,PX,PCMP(N),PORD(M,N),PORT(M,N) )
            PORD(M,N) = MAX( PORD(M,N),EPSL )
            PORT(M,N) = MAX( PORT(M,N),PORD(M,N) )
!
!---        Flash calculations  ---
!
            CALL BO_PC3( PORD(M,N),POSM(M,N),PVW(M,N),PX,RHOG(M,N),
     &        RHOL(M,N),RHON(M,N),SG(M,N),SL(M,N),SN(M,N),
     &        TMC(1,M,N),TMS(M,N),T(M,N),VOL(N),XGC(1,M,N),XGW(M,N),
     &        XLS(M,N),XLW(M,N),XNC(1,M,N),YLS(M,N),IZN )
!
!---        Phase capillary pressure from phase saturations  ---
!
            IF( ISLC(11).EQ.2 ) THEN
              CALL PORSTY_M( IZN,PX,PCMP(N),PORD_M(M,N),PORT_M(M,N) )
              PORD_M(M,N) = MAX( PORD_M(M,N),EPSL )
              PORT_M(M,N) = MAX( PORT_M(M,N),PORD_M(M,N) )
              VOL_M(N) = VOL(N)*(1.D+0-FRAC_P(7,IZN))
              VOL(N) = VOL(N)*FRAC_P(7,IZN)
              EPORFX = PORD(M,N)*FRAC_P(7,IZN)
              EPORMX = PORD_M(M,N)*(1.D+0-FRAC_P(7,IZN))
              CALL CAP_EOR_EC( EPORFX,EPORMX,SG(M,N),SL(M,N),SN(M,N),
     &          SG_F(M,N),SL_F(M,N),SN_F(M,N),SG_M(M,N),SL_M(M,N),
     &          SN_M(M,N),CPGTX,CPNLX,IZN )
            ELSE
              CALL CAP_EOR( SG(M,N),SL(M,N),SN(M,N),CPGTX,CPNLX,IZN )
            ENDIF
!
!---        Phase pressure from phase capillary pressures and system
!           pressure  ---
!
            PG(M,N) = PSO(M,N)
            PTX = PG(M,N) - CPGTX
            IF( CPNLX.GT.0.D+0 ) THEN
              PN(M,N) = PTX
              PL(M,N) = PN(M,N) - CPNLX
            ELSE
              PL(M,N) = PTX
              PN(M,N) = PL(M,N) + CPNLX
            ENDIF
!
!---      Phase condition #4  ---
!
!         SG = 0.0
!         SL = 0.0
!         SN = 1.0
!         Nonaqueous liquid saturated
!
!         water mass - aqueous saturation, SL
!         gas mass - gas to oil ratio, POSM
!         oil mass - nonaqueous (system) pressure, Pa gauge - PN,PSO
!         salt mass - total salt mass - TMS(2,N)
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.4 ) THEN
!
!---        System pressure, absolute  ---
!
            PX = PSO(M,N) + PATM
!
!---        Porous-media porosity  ---
!
            CALL PORSTY( N,PX,PCMP(N),PORD(M,N),PORT(M,N) )
            PORD(M,N) = MAX( PORD(M,N),EPSL )
            PORT(M,N) = MAX( PORT(M,N),PORD(M,N) )
!
!---        Flash calculations  ---
!
            CALL BO_PC4( PORD(M,N),POSM(M,N),PVW(M,N),PX,RHOG(M,N),
     &        RHOL(M,N),RHON(M,N),SG(M,N),SL(M,N),SN(M,N),
     &        TMC(1,M,N),TMS(M,N),T(M,N),VOL(N),XGC(1,M,N),XGW(M,N),
     &        XLS(M,N),XLW(M,N),XNC(1,M,N),YLS(M,N),IZN )
!
!---        Phase capillary pressure from phase saturations  ---
!
            IF( ISLC(11).EQ.2 ) THEN
              CALL PORSTY_M( IZN,PX,PCMP(N),PORD_M(M,N),PORT_M(M,N) )
              PORD_M(M,N) = MAX( PORD_M(M,N),EPSL )
              PORT_M(M,N) = MAX( PORT_M(M,N),PORD_M(M,N) )
              VOL_M(N) = VOL(N)*(1.D+0-FRAC_P(7,IZN))
              VOL(N) = VOL(N)*FRAC_P(7,IZN)
              EPORFX = PORD(M,N)*FRAC_P(7,IZN)
              EPORMX = PORD_M(M,N)*(1.D+0-FRAC_P(7,IZN))
              CALL CAP_EOR_EC( EPORFX,EPORMX,SG(M,N),SL(M,N),SN(M,N),
     &          SG_F(M,N),SL_F(M,N),SN_F(M,N),SG_M(M,N),SL_M(M,N),
     &          SN_M(M,N),CPGTX,CPNLX,IZN )
            ELSE
              CALL CAP_EOR( SG(M,N),SL(M,N),SN(M,N),CPGTX,CPNLX,IZN )
            ENDIF
!
!---        Phase pressure from phase capillary pressures and system
!           pressure  ---
!
            PG(M,N) = PSO(M,N)
            PTX = PG(M,N) - CPGTX
            IF( CPNLX.GT.0.D+0 ) THEN
              PN(M,N) = PTX
              PL(M,N) = PN(M,N) - CPNLX
            ELSE
              PL(M,N) = PTX
              PN(M,N) = PL(M,N) + CPNLX
            ENDIF
!
!---      Phase condition #5  ---
!
!         SG > 0.0
!         SL = 0.0
!         SN > 0.0
!         Nonaqueous liquid and gas saturated
!
!         water mass - aqueous saturation, SL
!         gas mass - gas saturation, SG
!         oil mass - gas (system) pressure, Pa gauge - PG,PSO
!         salt mass - total salt mass - TMS(2,N)
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.5 ) THEN
!
!---        System pressure, absolute  ---
!
            PX = PSO(M,N) + PATM
!
!---        Porous-media porosity  ---
!
            CALL PORSTY( N,PX,PCMP(N),PORD(M,N),PORT(M,N) )
            PORD(M,N) = MAX( PORD(M,N),EPSL )
            PORT(M,N) = MAX( PORT(M,N),PORD(M,N) )
!
!---        Flash calculations  ---
!
            CALL BO_PC5( PORD(M,N),POSM(M,N),PVW(M,N),PX,RHOG(M,N),
     &        RHOL(M,N),RHON(M,N),SG(M,N),SL(M,N),SN(M,N),
     &        TMC(1,M,N),TMS(M,N),T(M,N),VOL(N),XGC(1,M,N),XGW(M,N),
     &        XLS(M,N),XLW(M,N),XNC(1,M,N),YLS(M,N),IZN )
!
!---        Phase capillary pressure from phase saturations  ---
!
            IF( ISLC(11).EQ.2 ) THEN
              CALL PORSTY_M( IZN,PX,PCMP(N),PORD_M(M,N),PORT_M(M,N) )
              PORD_M(M,N) = MAX( PORD_M(M,N),EPSL )
              PORT_M(M,N) = MAX( PORT_M(M,N),PORD_M(M,N) )
              VOL_M(N) = VOL(N)*(1.D+0-FRAC_P(7,IZN))
              VOL(N) = VOL(N)*FRAC_P(7,IZN)
              EPORFX = PORD(M,N)*FRAC_P(7,IZN)
              EPORMX = PORD_M(M,N)*(1.D+0-FRAC_P(7,IZN))
              CALL CAP_EOR_EC( EPORFX,EPORMX,SG(M,N),SL(M,N),SN(M,N),
     &          SG_F(M,N),SL_F(M,N),SN_F(M,N),SG_M(M,N),SL_M(M,N),
     &          SN_M(M,N),CPGTX,CPNLX,IZN )
            ELSE
              CALL CAP_EOR( SG(M,N),SL(M,N),SN(M,N),CPGTX,CPNLX,IZN )
            ENDIF
!
!---        Phase pressure from phase capillary pressures and system
!           pressure  ---
!
            PG(M,N) = PSO(M,N)
            PTX = PG(M,N) - CPGTX
            IF( CPNLX.GT.0.D+0 ) THEN
              PN(M,N) = PTX
              PL(M,N) = PN(M,N) - CPNLX
            ELSE
              PL(M,N) = PTX
              PN(M,N) = PL(M,N) + CPNLX
            ENDIF
          ENDIF
!
!---      Relative permeability  ---
!
#ifdef dual_porosity
          CALL RKG_EOR_F( RKG(M,N),SL(M,N),SN(M,N),IZN )
          CALL RKL_EOR_F( RKL(1,M,N),SL(M,N),IZN )
          CALL RKN_EOR_F( RKG(M,N),RKL(1,M,N),RKN(M,N),SG(M,N),
     &      SL(M,N),SN(M,N),IZN )
#else
          CALL RKG_EOR( RKG(M,N),SL(M,N),SN(M,N),IZN )
          CALL RKL_EOR( RKL(1,M,N),SL(M,N),IZN )
          CALL RKN_EOR( RKG(M,N),RKL(1,M,N),RKN(M,N),SG(M,N),
     &      SL(M,N),SN(M,N),IZN )
#endif
!
!---      Gas viscosity, Pa s  ---
!
          CALL BO_VISG( RHOG(M,N),VISG(M,N) )
!
!---      Aqueous viscosity, Pa s
!         concentration of CO2 in mol/kg,
!         concentration of salt in mol/kg  ---
!
          CMLAX = 0.D+0
          CMLSX = 1.D+3*XLS(M,N)*RHOL(M,N)/WTMS
          CALL VISC_L( CMLAX,CMLSX,PX,T(M,N),VISL(M,N) )
!
!---      Nonaqueous-liquid viscosity, Pa s  ---
!
          CALL BO_VISN( PX,POSM(M,N),T(M,N),VISN(M,N) )
!
!---      Salt aqueous diffusion coefficient  ---
!
          CALL DIFC_LS( DFLS(M,N),T(M,N),VISL(M,N),XLS(M,N) )
!
!---      Precipitated NaCl density, saturation, and enthalpy  ---
!
          CALL DENS_S( T(M,N),PX,RHOSP(M,N) )
          CALL SOL_LS( T(M,N),XBSMX )
          CALL DENS_B( T(M,N),PX,XBSMX,RHOBX )
          SS(M,N) = MAX(YLS(M,N)-XBSMX,0.D+0)*RHOBX*SL(M,N)/RHOSP(M,N)
!
!---      Kozney-Carmen permeability reduction  ---
!
          PORDX = PORD(M,N)*(1.D+0-SS(M,N))
          PERMRF(M,N) = ((PORDX**3)/(1.D+0+PORDX))/
     &      ((PORD(M,N)**3)/(1.D+0+PORD(M,N)))
!
!---      Change in porosity as a function of precipitated salt  ---
!
          PORD(M,N) = PORD(M,N)*(1.D+0-SS(M,N))
!
!---      Aqueous, gas, and nonaqueous-liquid tortuosity  ---
!
          IF( ISLC(3).EQ.1 ) CALL TORTU( IZN,SL(M,N),SG(M,N),SN(M,N),
     &      PORD(M,N),TORL(M,N),TORG(M,N),TORN(M,N) )
  100   CONTINUE
  200 CONTINUE
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of PROP_BO group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE PROP_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Compute hydrologic, thermodynamic and physical properties.
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, March 17, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PORMED
      USE JACOB
      USE HYST
      USE GRID
      USE GLB_PAR
      USE FDVT
      USE FDVS
      USE FDVP
      USE FDVN
      USE FDVGC
      USE FDVG
      USE DUAL_POR
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 FKX(LNGC)
!     REAL*8 RKLX(3)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//PROP_EOR'
!
!---  Black-oil option  ---
!
      IF( ISLC(68).EQ.0 ) THEN
        CALL PROP_BO
        ISUB_LOG = ISUB_LOG-1
        RETURN
      ENDIF
!
!---  Compositional option  ---
!
      DO 200 N = 1,NFBN
        IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) GOTO 200
        IZN = IZ(N)
        N_DB = N
!#ifdef ecke
!        POR0(1,N) = POR0(1,N)
!        POR0(2,N) = POR0(2,N)
!#endif
!
!---    K-factors fixed at second iterate values  ---
!
        IF( NITER.GT.2 ) THEN
          IFK = 1
!
!---    K-factors computed from fugacity coefficients  ---
!
        ELSE
          IFK = 0
        ENDIF
!
!---    Schema for fixing beta  ---
!
        IBETAX = 0
        IF( NITER.GT.7 ) THEN
          DBETA1X = BETA(2,N)-BETA(1,N)
          DBETA2X = BETA(3,N)-BETA(2,N)
          ABETAX = 0.D+0
          DO M = 1,3
            ABETAX = ABETAX + BETA(M,N)
          ENDDO
          ABETAX = ABETAX/3.D+0
          SBETAX = 0.D+0
          DO M = 1,3
            SBETAX = SBETAX + (BETA(M,N)-ABETAX)**2
          ENDDO
          SBETAX = SQRT( SBETAX/3.D+0 )
!
!---      Beta previously fixed  ---
!
          IF( IBETA(N).EQ.1 ) THEN
            IBETAX = 1
            BETAX = BETA(3,N)
!
!---      Small variance in beta  ---
!
          ELSEIF( SBETAX.LT.1.D-4 ) THEN
            BETAX = ABETAX
            IBETA(N) = 1
            IBETAX = 1
!
!---      Beta oscillating  ---
!
          ELSEIF( (DBETA1X*DBETA2X).LT.0.D+0 .AND. 
     &      (DBETA1X+DBETA2X).LT.1.D-4 ) THEN
            BETAX = 5.D-1*(BETA(3,N)+BETA(2,N))
            IBETA(N) = 1
            IBETAX = 1
!
!---      Gas-nonaqueous liquid interfacial tension oscillating  ---
!
          ELSEIF( (BETA(4,N)*BETA(5,N)*BETA(6,N)).LT.EPSL .AND.
     &      (BETA(4,N)+BETA(5,N)+BETA(6,N)).GT.EPSL ) THEN
            BETAX = 0.D+0
            IBETAX = 0
            DO M = 1,3
              IF( BETA(M+3,N).GT.0.D+0 ) THEN
                BETAX = BETAX + BETA(M,N)
                IBETAX = IBETAX + 1
              ENDIF
            ENDDO
            BETAX = BETAX/REAL(IBETAX)
            IBETA(N) = 1
            IBETAX = 1
          ENDIF
        ENDIF
!
!---    Loop over increment indices  ---
!
        DO 100 M = 2,ISVC+2
          IF( ISLC(79).EQ.1 .AND. M.GE.2 ) EXIT
          TKX = T(M,N) + TABS
!
!---      K-factors fixed at third iterate values  ---
!
          IF( IFK.EQ.1 ) THEN
            DO 10 IGC = 1,NGC+2
              FKX(IGC) = FK(IGC,N)
   10       CONTINUE
          ENDIF
!
!---      Phase condition #1  ---
!
!         SL = 1.0, SG+SN = 0.0
!
!         energy - temperature, C - T
!         water mass - aqueous (system) pressure, Pa gauge - PL,PSO
!         CO2 mass - CO2 vapor pressure - PVA
!         CH4 mass - total CH4 mass - TMC
!         petroleum component mass - total petroleum comp. mass - TMC
!         salt mass - total salt brine mass fraction - YLS
!
          IF( MOD(NPHAZ(2,N),10).EQ.1 ) THEN
!
!---        System pressure, absolute  ---
!
            PX = PSO(M,N) + PATM
!
!---        Porous-media porosity  ---
!
            CALL PORSTY( N,PX,PCMP(N),PORD(M,N),PORT(M,N) )
            PORD(M,N) = MAX( PORD(M,N),EPSL )
            PORT(M,N) = MAX( PORT(M,N),PORD(M,N) )
!
!---        Flash calculations  ---
!
            CALL FLH_PC1( BETAX,FKX,GNIFT(M,N),PORD(M,N),PVA(M,N),
     &        PVW(M,N),PX,RHOG(M,N),RHOL(M,N),RHOMG(M,N),RHOML(M,N),
     &        RHOMN(M,N),RHON(M,N),SGX,SLX,SNX,TMC(1,M,N),
     &        TMS(M,N),T(M,N),VOL(N),XGC(1,M,N),XGW(M,N),XLA(M,N),
     &        XLS(M,N),XLW(M,N),XNC(1,M,N),XMGC(1,M,N),XMGW(M,N),
     &        XMLA(M,N),XMLS(M,N),XMLW(M,N),XMNC(1,M,N),YLS(M,N),
     &        ZG(M,N),ZMC(1,M,N),ZN(M,N),IBETAX,IZN,NPHAZ(2,N) )
            SL(M,N) = 1.D+0
            SG(M,N) = 0.D+0
            SN(M,N) = 0.D+0
!
!---        Phase capillary pressure from phase saturations  ---
!
            IF( ISLC(11).EQ.2 ) THEN
              CALL PORSTY_M( IZN,PX,PCMP(N),PORD_M(M,N),PORT_M(M,N) )
              PORD_M(M,N) = MAX( PORD_M(M,N),EPSL )
              PORT_M(M,N) = MAX( PORT_M(M,N),PORD_M(M,N) )
              VOL_M(N) = VOL(N)*(1.D+0-FRAC_P(7,IZN))
              VOL(N) = VOL(N)*FRAC_P(7,IZN)
              EPORFX = PORD(M,N)*FRAC_P(7,IZN)
              EPORMX = PORD_M(M,N)*(1.D+0-FRAC_P(7,IZN))
              CALL CAP_EOR_EC( EPORFX,EPORMX,SG(M,N),SL(M,N),SN(M,N),
     &          SG_F(M,N),SL_F(M,N),SN_F(M,N),SG_M(M,N),SL_M(M,N),
     &          SN_M(M,N),CPGTX,CPNLX,IZN )
            ELSE
              CALL CAP_EOR( SG(M,N),SL(M,N),SN(M,N),CPGTX,CPNLX,IZN )
            ENDIF
!
!---        Phase pressure from phase capillary pressures and system
!           pressure  ---
!
            PG(M,N) = PSO(M,N)
            PTX = PG(M,N) - CPGTX
            IF( CPNLX.GT.0.D+0 ) THEN
              PN(M,N) = PTX
              PL(M,N) = PN(M,N) - CPNLX
            ELSE
              PL(M,N) = PTX
              PN(M,N) = PL(M,N) + CPNLX
            ENDIF
!
!---      Phase condition #2  ---
!
!         SL < 1.0, ST > 0.0, SG = 0.0
!
!         energy - temperature, C - T
!         water mass - aqueous saturation, SL
!         CO2 mass
!           if( ZMC(1,2,N) > max( ZMC(J,2,N) ) J /= 1
!             - nonaqueous (system) pressure, Pa gauge - PN,PSO
!           else
!             - nonaqueous mole fraction of CO2 - ZMC(1,2,N)
!           endif
!         CH4 mass
!           if( ZMC(2,2,N) > max( ZMC(J,2,N) ) J /= 2
!             - nonaqueous (system) pressure, Pa gauge - PN,PSO
!           else
!             - nonaqueous mole fraction of CO2 - ZMC(2,2,N)
!           endif
!         petroleum component mass
!           if( ZMC(I,2,N) > max( ZMC(J,2,N) ) J /= I
!             - nonaqueous (system) pressure, Pa gauge - PN,PSO
!           else
!             - nonaqueous mole fraction of CO2 - ZMC(I,2,N)
!           endif
!         salt mass - total salt brine mass fraction - YLS
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.2 ) THEN
!
!---        System pressure, absolute  ---
!
            PX = PSO(M,N) + PATM
!
!---        Porous-media porosity  ---
!
            CALL PORSTY( N,PX,PCMP(N),PORD(M,N),PORT(M,N) )
            PORD(M,N) = MAX( PORD(M,N),EPSL )
            PORT(M,N) = MAX( PORT(M,N),PORD(M,N) )
!
!---        Flash calculations  ---
!
            CALL FLH_PC2( BETAX,FKX,GNIFT(M,N),PORD(M,N),PVA(M,N),
     &        PVW(M,N),PX,RHOG(M,N),RHOL(M,N),RHOMG(M,N),RHOML(M,N),
     &        RHOMN(M,N),RHON(M,N),SG(M,N),SL(M,N),SN(M,N),TMC(1,M,N),
     &        TMS(M,N),T(M,N),VOL(N),XGC(1,M,N),XGW(M,N),XLA(M,N),
     &        XLS(M,N),XLW(M,N),XNC(1,M,N),XMGC(1,M,N),XMGW(M,N),
     &        XMLA(M,N),XMLS(M,N),XMLW(M,N),XMNC(1,M,N),YLS(M,N),
     &        ZG(M,N),ZMC(1,M,N),ZN(M,N),IBETAX,IZMC(N),IZN,NPHAZ(2,N) )
!            IF( NITER.GE.2 ) THEN
!              SG(M,N) = AST(N)*(1.D+0-SL(M,N))
!              SN(M,N) = (1.D+0-AST(N))*(1.D+0-SL(M,N))
!            ENDIF
!
!---        Phase capillary pressure from phase saturations  ---
!
            IF( ISLC(11).EQ.2 ) THEN
              CALL PORSTY_M( IZN,PX,PCMP(N),PORD_M(M,N),PORT_M(M,N) )
              PORD_M(M,N) = MAX( PORD_M(M,N),EPSL )
              PORT_M(M,N) = MAX( PORT_M(M,N),PORD_M(M,N) )
              VOL_M(N) = VOL(N)*(1.D+0-FRAC_P(7,IZN))
              VOL(N) = VOL(N)*FRAC_P(7,IZN)
              EPORFX = PORD(M,N)*FRAC_P(7,IZN)
              EPORMX = PORD_M(M,N)*(1.D+0-FRAC_P(7,IZN))
              CALL CAP_EOR_EC( EPORFX,EPORMX,SG(M,N),SL(M,N),SN(M,N),
     &          SG_F(M,N),SL_F(M,N),SN_F(M,N),SG_M(M,N),SL_M(M,N),
     &          SN_M(M,N),CPGTX,CPNLX,IZN )
            ELSE
              CALL CAP_EOR( SG(M,N),SL(M,N),SN(M,N),CPGTX,CPNLX,IZN )
            ENDIF
!
!---        Phase pressure from phase capillary pressures and system
!           pressure  ---
!
            PG(M,N) = PSO(M,N)
            PTX = PG(M,N) - CPGTX
            IF( CPNLX.GT.0.D+0 ) THEN
              PN(M,N) = PTX
              PL(M,N) = PN(M,N) - CPNLX
            ELSE
              PL(M,N) = PTX
              PN(M,N) = PL(M,N) + CPNLX
            ENDIF
!
!---      Phase condition #3  ---
!
!         SL < 1.0, ST > 0.0, SG > 0.0
!
!         energy - temperature, C - T
!         water mass - aqueous saturation, SL
!         CO2 mass
!           if( ZMC(1,2,N) > max( ZMC(J,2,N) ) J /= 1
!             - gas (system) pressure, Pa gauge - PG,PSO
!           else
!             - nonaqueous mole fraction of CO2 - ZMC(1,2,N)
!           endif
!         CH4 mass
!           if( ZMC(2,2,N) > max( ZMC(J,2,N) ) J /= 2
!             - gas (system) pressure, Pa gauge - PG,PSO
!           else
!             - nonaqueous mole fraction of CO2 - ZMC(2,2,N)
!           endif
!         petroleum component mass
!           if( ZMC(I,2,N) > max( ZMC(J,2,N) ) J /= I
!             - gas (system) pressure, Pa gauge - PG,PSO
!           else
!             - nonaqueous mole fraction of CO2 - ZMC(I,2,N)
!           endif
!         salt mass - total salt brine mass fraction - YLS
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.3 ) THEN
!
!---        System pressure, absolute  ---
!
            PX = PSO(M,N) + PATM
!
!---        Porous-media porosity  ---
!
            CALL PORSTY( N,PX,PCMP(N),PORD(M,N),PORT(M,N) )
            PORD(M,N) = MAX( PORD(M,N),EPSL )
            PORT(M,N) = MAX( PORT(M,N),PORD(M,N) )
!
!---        Flash calculations  ---
!
            CALL FLH_PC3( BETAX,FKX,GNIFT(M,N),PORD(M,N),PVA(M,N),
     &        PVW(M,N),PX,RHOG(M,N),RHOL(M,N),RHOMG(M,N),RHOML(M,N),
     &        RHOMN(M,N),RHON(M,N),SG(M,N),SL(M,N),SN(M,N),TMC(1,M,N),
     &        TMS(M,N),T(M,N),VOL(N),XGC(1,M,N),XGW(M,N),XLA(M,N),
     &        XLS(M,N),XLW(M,N),XNC(1,M,N),XMGC(1,M,N),XMGW(M,N),
     &        XMLA(M,N),XMLS(M,N),XMLW(M,N),XMNC(1,M,N),YLS(M,N),
     &        ZG(M,N),ZMC(1,M,N),ZN(M,N),IBETAX,IZMC(N),IZN,NPHAZ(2,N) )
!            IF( NITER.GE.2 ) THEN
!              SG(M,N) = AST(N)*(1.D+0-SL(M,N))
!              SN(M,N) = (1.D+0-AST(N))*(1.D+0-SL(M,N))
!            ENDIF
!
!---        Phase capillary pressure from phase saturations  ---
!
            IF( ISLC(11).EQ.2 ) THEN
              CALL PORSTY_M( IZN,PX,PCMP(N),PORD_M(M,N),PORT_M(M,N) )
              PORD_M(M,N) = MAX( PORD_M(M,N),EPSL )
              PORT_M(M,N) = MAX( PORT_M(M,N),PORD_M(M,N) )
              VOL_M(N) = VOL(N)*(1.D+0-FRAC_P(7,IZN))
              VOL(N) = VOL(N)*FRAC_P(7,IZN)
              EPORFX = PORD(M,N)*FRAC_P(7,IZN)
              EPORMX = PORD_M(M,N)*(1.D+0-FRAC_P(7,IZN))
              CALL CAP_EOR_EC( EPORFX,EPORMX,SG(M,N),SL(M,N),SN(M,N),
     &          SG_F(M,N),SL_F(M,N),SN_F(M,N),SG_M(M,N),SL_M(M,N),
     &          SN_M(M,N),CPGTX,CPNLX,IZN )
            ELSE
              CALL CAP_EOR( SG(M,N),SL(M,N),SN(M,N),CPGTX,CPNLX,IZN )
            ENDIF
!
!---        Phase pressure from phase capillary pressures and system
!           pressure  ---
!
            PG(M,N) = PSO(M,N)
            PTX = PG(M,N) - CPGTX
            IF( CPNLX.GT.0.D+0 ) THEN
              PN(M,N) = PTX
              PL(M,N) = PN(M,N) - CPNLX
            ELSE
              PL(M,N) = PTX
              PN(M,N) = PL(M,N) + CPNLX
            ENDIF
!
!---      Phase condition #4  ---
!
!         SL = 0.0, ST = 1.0, SG = 0.0
!
!         energy - temperature, C - T
!         water mass - aqueous saturation, SL
!         CO2 mass
!           if( ZMC(1,2,N) > max( ZMC(J,2,N) ) J /= 1
!             - nonaqueous (system) pressure, Pa gauge - PN,PSO
!           else
!             - nonaqueous mole fraction of CO2 - ZMC(1,2,N)
!           endif
!         CH4 mass
!           if( ZMC(2,2,N) > max( ZMC(J,2,N) ) J /= 2
!             - nonaqueous (system) pressure, Pa gauge - PN,PSO
!           else
!             - nonaqueous mole fraction of CO2 - ZMC(2,2,N)
!           endif
!         petroleum component mass
!           if( ZMC(I,2,N) > max( ZMC(J,2,N) ) J /= I
!             - nonaqueous (system) pressure, Pa gauge - PN,PSO
!           else
!             - nonaqueous mole fraction of CO2 - ZMC(I,2,N)
!           endif
!         salt mass - total salt mass - TMS(2,N)
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.4 ) THEN
!
!---        System pressure, absolute  ---
!
            PX = PSO(M,N) + PATM
!
!---        Porous-media porosity  ---
!
            CALL PORSTY( N,PX,PCMP(N),PORD(M,N),PORT(M,N) )
            PORD(M,N) = MAX( PORD(M,N),EPSL )
            PORT(M,N) = MAX( PORT(M,N),PORD(M,N) )
!
!---        Flash calculations  ---
!
            CALL FLH_PC4( BETAX,FKX,GNIFT(M,N),PORD(M,N),PVA(M,N),
     &        PVW(M,N),PX,RHOG(M,N),RHOL(M,N),RHOMG(M,N),RHOML(M,N),
     &        RHOMN(M,N),RHON(M,N),SG(M,N),SL(M,N),SN(M,N),TMC(1,M,N),
     &        TMS(M,N),T(M,N),VOL(N),XGC(1,M,N),XGW(M,N),XLA(M,N),
     &        XLS(M,N),XLW(M,N),XNC(1,M,N),XMGC(1,M,N),XMGW(M,N),
     &        XMLA(M,N),XMLS(M,N),XMLW(M,N),XMNC(1,M,N),YLS(M,N),
     &        ZG(M,N),ZMC(1,M,N),ZN(M,N),IBETAX,IZMC(N),IZN,NPHAZ(2,N) )
!            IF( NITER.GE.2 ) THEN
!              SG(M,N) = AST(N)*(1.D+0-SL(M,N))
!              SN(M,N) = (1.D+0-AST(N))*(1.D+0-SL(M,N))
!            ENDIF
!
!---        Phase capillary pressure from phase saturations  ---
!
            IF( ISLC(11).EQ.2 ) THEN
              CALL PORSTY_M( IZN,PX,PCMP(N),PORD_M(M,N),PORT_M(M,N) )
              PORD_M(M,N) = MAX( PORD_M(M,N),EPSL )
              PORT_M(M,N) = MAX( PORT_M(M,N),PORD_M(M,N) )
              VOL_M(N) = VOL(N)*(1.D+0-FRAC_P(7,IZN))
              VOL(N) = VOL(N)*FRAC_P(7,IZN)
              EPORFX = PORD(M,N)*FRAC_P(7,IZN)
              EPORMX = PORD_M(M,N)*(1.D+0-FRAC_P(7,IZN))
              CALL CAP_EOR_EC( EPORFX,EPORMX,SG(M,N),SL(M,N),SN(M,N),
     &          SG_F(M,N),SL_F(M,N),SN_F(M,N),SG_M(M,N),SL_M(M,N),
     &          SN_M(M,N),CPGTX,CPNLX,IZN )
            ELSE
              CALL CAP_EOR( SG(M,N),SL(M,N),SN(M,N),CPGTX,CPNLX,IZN )
            ENDIF
!
!---        Phase pressure from phase capillary pressures and system
!           pressure  ---
!
            PG(M,N) = PSO(M,N)
            PTX = PG(M,N) - CPGTX
            IF( CPNLX.GT.0.D+0 ) THEN
              PN(M,N) = PTX
              PL(M,N) = PN(M,N) - CPNLX
            ELSE
              PL(M,N) = PTX
              PN(M,N) = PL(M,N) + CPNLX
            ENDIF
!
!---      Phase condition #5  ---
!
!         SL = 0.0, ST >= 0.0, SG > 0.0
!
!         energy - temperature, C - T
!         water mass - aqueous saturation, SL
!         CO2 mass
!           if( ZMC(1,2,N) > max( ZMC(J,2,N) ) J /= 1
!             - gas (system) pressure, Pa gauge - PG,PSO
!           else
!             - nonaqueous mole fraction of CO2 - ZMC(1,2,N)
!           endif
!         CH4 mass
!           if( ZMC(2,2,N) > max( ZMC(J,2,N) ) J /= 2
!             - gas (system) pressure, Pa gauge - PG,PSO
!           else
!             - nonaqueous mole fraction of CO2 - ZMC(2,2,N)
!           endif
!         petroleum component mass
!           if( ZMC(I,2,N) > max( ZMC(J,2,N) ) J /= I
!             - gas (system) pressure, Pa gauge - PG,PSO
!           else
!             - nonaqueous mole fraction of CO2 - ZMC(I,2,N)
!           endif
!         salt mass - total salt mass - TMS(2,N)
!
          ELSEIF( MOD(NPHAZ(2,N),10).EQ.5 ) THEN
!
!---        System pressure, absolute  ---
!
            PX = PSO(M,N) + PATM
!
!---        Porous-media porosity  ---
!
            CALL PORSTY( N,PX,PCMP(N),PORD(M,N),PORT(M,N) )
            PORD(M,N) = MAX( PORD(M,N),EPSL )
            PORT(M,N) = MAX( PORT(M,N),PORD(M,N) )
!
!---        Flash calculations  ---
!
            CALL FLH_PC5( BETAX,FKX,GNIFT(M,N),PORD(M,N),PVA(M,N),
     &        PVW(M,N),PX,RHOG(M,N),RHOL(M,N),RHOMG(M,N),RHOML(M,N),
     &        RHOMN(M,N),RHON(M,N),SG(M,N),SL(M,N),SN(M,N),TMC(1,M,N),
     &        TMS(M,N),T(M,N),VOL(N),XGC(1,M,N),XGW(M,N),XLA(M,N),
     &        XLS(M,N),XLW(M,N),XNC(1,M,N),XMGC(1,M,N),XMGW(M,N),
     &        XMLA(M,N),XMLS(M,N),XMLW(M,N),XMNC(1,M,N),YLS(M,N),
     &        ZG(M,N),ZMC(1,M,N),ZN(M,N),IBETAX,IZMC(N),IZN,NPHAZ(2,N) )
!            IF( NITER.GE.2 ) THEN
!              SG(M,N) = AST(N)*(1.D+0-SL(M,N))
!              SN(M,N) = (1.D+0-AST(N))*(1.D+0-SL(M,N))
!            ENDIF
!
!---        Phase capillary pressure from phase saturations  ---
!
            IF( ISLC(11).EQ.2 ) THEN
              CALL PORSTY_M( IZN,PX,PCMP(N),PORD_M(M,N),PORT_M(M,N) )
              PORD_M(M,N) = MAX( PORD_M(M,N),EPSL )
              PORT_M(M,N) = MAX( PORT_M(M,N),PORD_M(M,N) )
              VOL_M(N) = VOL(N)*(1.D+0-FRAC_P(7,IZN))
              VOL(N) = VOL(N)*FRAC_P(7,IZN)
              EPORFX = PORD(M,N)*FRAC_P(7,IZN)
              EPORMX = PORD_M(M,N)*(1.D+0-FRAC_P(7,IZN))
              CALL CAP_EOR_EC( EPORFX,EPORMX,SG(M,N),SL(M,N),SN(M,N),
     &          SG_F(M,N),SL_F(M,N),SN_F(M,N),SG_M(M,N),SL_M(M,N),
     &          SN_M(M,N),CPGTX,CPNLX,IZN )
            ELSE
              CALL CAP_EOR( SG(M,N),SL(M,N),SN(M,N),CPGTX,CPNLX,IZN )
            ENDIF
!
!---        Phase pressure from phase capillary pressures and system
!           pressure  ---
!
            PG(M,N) = PSO(M,N)
            PTX = PG(M,N) - CPGTX
            IF( CPNLX.GT.0.D+0 ) THEN
              PN(M,N) = PTX
              PL(M,N) = PN(M,N) - CPNLX
            ELSE
              PL(M,N) = PTX
              PN(M,N) = PL(M,N) + CPNLX
            ENDIF
          ENDIF
!
!---      Save unincremented K-factors  ---
!
          IF( M.EQ.2 .AND. NITER.LE.3 ) THEN
            DO 90 IGC = 1,NGC+2
              FK(IGC,N) = FKX(IGC)
   90       CONTINUE
          ENDIF
!
!---      Load component aqueous mass fraction for CO2  ---
!
          XLC(1,M,N) = XLA(M,N)
          IF( M.EQ.2 ) THEN
!
!---        Store recent iterative values of beta  ---
!
            BETA(1,N) = BETA(2,N)
            BETA(2,N) = BETA(3,N)
            BETA(3,N) = BETAX
!
!---        Store recent iterative values of gas-nonaqueous liquid
!           interfacial tension ---
!
            BETA(4,N) = BETA(5,N)
            BETA(5,N) = BETA(6,N)
            BETA(6,N) = GNIFT(2,N)
          ENDIF
  100   CONTINUE
  200 CONTINUE
!
!---  Subroutine split  ---
!
      CPUMX = 0.D+0
      DO 400 N = 1,NFBN
        IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) GOTO 400
        IZN = IZ(N)
        N_DB = N
!
!---    Loop over increment indices  ---
!
        DO 300 M = 2,ISVC+2
          IF( ISLC(79).EQ.1 .AND. M.GE.2 ) EXIT
          TKX = T(M,N) + TABS
!
!---      System pressure, absolute  ---
!
          PX = PSO(M,N) + PATM
!
!---      Relative permeability  ---
!
#ifdef dual_porosity
          CALL RKG_EOR_F( RKG(M,N),SL(M,N),SN(M,N),IZN )
          CALL RKL_EOR_F( RKL(1,M,N),SL(M,N),IZN )
          CALL RKN_EOR_F( RKG(M,N),RKL(1,M,N),RKN(M,N),SG(M,N),
     &      SL(M,N),SN(M,N),IZN )
#else
          CALL RKG_EOR( RKG(M,N),SL(M,N),SN(M,N),IZN )
          CALL RKL_EOR( RKL(1,M,N),SL(M,N),IZN )
          CALL RKN_EOR( RKG(M,N),RKL(1,M,N),RKN(M,N),SG(M,N),
     &      SL(M,N),SN(M,N),IZN )
#endif
!!
!!---      Interfacial tension weighting of gas and nonaqueous-liquid
!!         relative permeability  ---
!!
!          IF( SN(M,N).GT.0.D+0 .AND. SG(M,N).GT.0.D+0 ) THEN
!            RKFX = 1.D+0 - EXP(-2.D+0*GNIFT(M,N))
!            SGX = 0.D+0
!            RKGX = 0.D+0
!            SNX = SG(M,N) + SN(M,N)
!            SLX = SL(M,N)
!            CALL RKL_EOR( RKLX(1),SLX,IZN )
!            CALL RKN_EOR( RKGX,RKLX(1),RKNX,SGX,SLX,SNX,IZN )
!            RKG(M,N) = RKFX*RKG(M,N) + (1.D+0-RKFX)*RKNX
!            RKN(M,N) = RKFX*RKN(M,N) + (1.D+0-RKFX)*RKNX
!          ENDIF
!
!---      Gas viscosity, Pa s  ---
!
          CALL VISC_G( RHOMG(M,N),T(M,N),VISG(M,N),XMGC(1,M,N),
     &      XMGW(M,N) )
!
!---      Aqueous viscosity, Pa s
!         concentration of CO2 in mol/kg,
!         concentration of salt in mol/kg  ---
!
          CMLAX = 1.D+3*XMLA(M,N)*RHOML(M,N)/RHOL(M,N)
          CMLSX = 1.D+3*XMLS(M,N)*RHOML(M,N)/RHOL(M,N)
          CALL VISC_L( CMLAX,CMLSX,PX,T(M,N),VISL(M,N) )
!
!---      Nonaqueous-liquid viscosity, Pa s  ---
!
          CALL VISC_N( RHOMN(M,N),T(M,N),VISN(M,N),XMNC(1,M,N) )
!
!---      Component gas diffusion coefficients  ---
!
          CALL DIFC_G( DFGC(1,M,N),DFGW(M,N),PX,T(M,N),XMGC(1,M,N),
     &      XMGW(M,N) )
!
!---      CO2 aqueous diffusion coefficient  ---
!
          CALL DIFC_LA( DFLA(M,N),T(M,N),VISL(M,N) )
!
!---      Salt aqueous diffusion coefficient  ---
!
          CALL DIFC_LS( DFLS(M,N),T(M,N),VISL(M,N),XLS(M,N) )
!
!---      Petroleum component nonaqueous-liquid diffusion 
!         coefficients  ---
!
          CALL DIFC_N( DFNC(1,M,N),T(M,N),VISN(M,N) )
!
!---      Gas thermal conductivity, W/m K  ---
!
          CALL THK_G( PX,T(M,N),THKG(M,N),XMGC(1,M,N),XMGW(M,N) )
!
!---      Aqueous thermal conductivity  ---
!
          CALL THK_W( PX,T(M,N),THKLWX )
          CALL THK_B( T(M,N),XLS(M,N),THKLWX,THKL(M,N) )
!
!---      Nonaqueous thermal conductivity, W/m K  ---
!
          CALL THK_N( PX,T(M,N),THKN(M,N),XMNC(1,M,N) )
!
!---      Gas enthalpy and internal energy, W/kg  ---
!
          CALL ENTH_G( HG(M,N),HGA(M,N),HGW(M,N),PX,T(M,N),RHOG(M,N),
     &      UEG(M,N),XGC(1,M,N),XGW(M,N),XMGC(1,M,N),ZG(M,N) )
!
!---      Nonaqueous-liquid enthalpy and internal energy  ---
!
          CALL ENTH_N( HN(M,N),HNAX,PX,T(M,N),RHON(M,N),
     &      UEN(M,N),XNC(1,M,N),XMNC(1,M,N),ZN(M,N) )
!
!---      Pure water liquid enthalpy  ---
!
          CALL SP_W( T(M,N),PSWX )
          PEX = MAX( PSWX,PX )
          ISRX = 1
          CALL ENTH_W( T(M,N),PEX,HLW(M,N),HGWX,ISRX )
!
!---      Brine enthalpy  ---
!
          CALL ENTH_B( T(M,N),XLS(M,N),HLW(M,N),HBX )
!!
!!---      Dissolved CO2 contribution  ---
!!
!          SGX = (BETAX/RHOMG(M,N))/
!     &      (BETAX/RHOMG(M,N) + (1.D+0-BETAX)/RHOMN(M,N))
!          IF( SGX.LT.1.D-12 ) SGX = 0.D+0
!          SNX = 1.D+0 - SGX
!          FGAX = SGX*RHOG(M,N)*XGC(1,M,N)
!          FNAX = SNX*RHON(M,N)*XNC(1,M,N)
          IF( SG(M,N).GT.0.D+0 ) THEN
            FGAX = SG(M,N)*RHOG(M,N)*XGC(1,M,N)
          ELSE
            FGAX = 0.D+0
          ENDIF
          IF( SN(M,N).GT.0.D+0 ) THEN
            FNAX = SN(M,N)*RHON(M,N)*XNC(1,M,N)
          ELSE
            FNAX = 0.D+0
          ENDIF
          IF( (FGAX+FNAX)/EPSL.LT.EPSL ) THEN
            HAX = 0.D+0
          ELSE
            HAX = (HGA(M,N)*FGAX + HNAX*FNAX)/(FGAX + FNAX + SMALL)
          ENDIF
!
!---      Aqueous enthalpy and internal energy  ---
!
          CALL ENTH_L( HAX,HBX,HL(M,N),T(M,N),XLA(M,N),XLS(M,N) )
          UEL(M,N) = HL(M,N) - PX/RHOL(M,N)
!
!---      Precipitated NaCl density, saturation, and enthalpy  ---
!
          CALL DENS_S( T(M,N),PX,RHOSP(M,N) )
          CALL SOL_LS( T(M,N),XBSMX )
          CALL DENS_B( T(M,N),PX,XBSMX,RHOBX )
          SS(M,N) = MAX(YLS(M,N)-XBSMX,0.D+0)*RHOBX*SL(M,N)/RHOSP(M,N)
!
!---      Precipitated NaCl enthalpy  ---
!
          CALL ENTH_S( T(M,N),HSP(M,N) )
!
!---      Permeability reduction factor  ---
!
          IF( IPRF(IZN).EQ.1 ) CALL PERM_R( SS(M,N),PERMRF(M,N),
     &      PORD(M,N),IZN )
!
!---      Change in porosity as a function of precipitated salt  ---
!
          PORD(M,N) = PORD(M,N)*(1.D+0-SS(M,N))
!
!---      Aqueous, gas, and nonaqueous-liquid tortuosity  ---
!
          IF( ISLC(3).EQ.1 ) CALL TORTU( IZN,SL(M,N),SG(M,N),SN(M,N),
     &      PORD(M,N),TORL(M,N),TORG(M,N),TORN(M,N) )
  300   CONTINUE
        CPUMX = CPUMX + VOL(N)*PORD(2,N)*(SL(2,N)*RHOL(2,N) + 
     &    SG(2,N)*RHOG(2,N) + SN(2,N)*RHON(2,N))
        IF( ISLC(79).EQ.1 ) THEN
          DO M = 3,ISVC+2
            BETA(M,N) =  BETA(2,N)
            DFGW(M,N) = DFGW(2,N)
            DFLA(M,N) = DFLA(2,N)
            GNIFT(M,N) = GNIFT(2,N)
            HG(M,N) = HG(2,N)
            HGA(M,N) = HGA(2,N)
            HGW(M,N) = HGW(2,N)
            HL(M,N) = HL(2,N)
            HLW(M,N) = HLW(2,N)
            HN(M,N) = HN(2,N)
            HSP(M,N) = HSP(2,N)
            PERMRF(M,N) = PERMRF(2,N)
            PG(M,N) = PG(2,N)
            PL(M,N) = PL(2,N)
            PN(M,N) = PN(2,N)
            PORD_M(M,N) = PORD_M(2,N)
            PORD(M,N) = PORD(2,N)
            PORT_M(M,N) = PORT_M(2,N)
            PSO(M,N) = PSO(2,N)
            PVA(M,N) = PVA(2,N)
            PVW(M,N) = PVW(2,N)
            RHOG(M,N) = RHOG(2,N)
            RHOL(M,N) = RHOL(2,N)
            RHOMG(M,N) = RHOMG(2,N)
            RHOML(M,N) = RHOML(2,N)
            RHOMN(M,N) = RHOMN(2,N)
            RHON(M,N) = RHON(2,N)
            RHOSP(M,N) = RHOSP(2,N)
            RKG(M,N) = RKG(2,N)
            RKL(1,M,N) = RKL(1,2,N)
            RKL(2,M,N) = RKL(2,2,N)
            RKL(3,M,N) = RKL(3,2,N)
            RKN(M,N) = RKN(2,N)
            SG_F(M,N) = SG_F(2,N)
            SG_M(M,N) = SG_M(2,N)
            SG(M,N) = SG(2,N)
            SL_F(M,N) = SL_F(2,N)
            SL_M(M,N) = SL_M(2,N)
            SL(M,N) = SL(2,N)
            SN_F(M,N) = SN_F(2,N)
            SN_M(M,N) = SN_M(2,N)
            SN(M,N) = SN(2,N)
            SS(M,N) = SS(2,N)
            T(M,N) = T(2,N)
            THKG(M,N) = THKG(2,N)
            THKL(M,N) = THKL(2,N)
            THKN(M,N) = THKN(2,N)
            TMS(M,N) = TMS(2,N)
            TORG(M,N) = TORG(2,N)
            TORL(M,N) = TORL(2,N)
            TORN(M,N) = TORN(2,N)
            UEG(M,N) = UEG(2,N)
            UEL(M,N) = UEL(2,N)
            UEN(M,N) = UEN(2,N)
            VISG(M,N) = VISG(2,N)
            VISL(M,N) = VISL(2,N)
            VISN(M,N) = VISN(2,N)
            XGW(M,N) = XGW(2,N)
            XLA(M,N) = XLA(2,N)
            XLS(M,N) = XLS(2,N)
            XLW(M,N) = XLW(2,N)
            XMGW(M,N) = XMGW(2,N)
            XMLA(M,N) = XMLA(2,N)
            XMLS(M,N) = XMLS(2,N)
            XMLW(M,N) = XMLW(2,N)
            YLS(M,N) = YLS(2,N)
            ZG(M,N) = ZG(2,N)
            ZN(M,N) = ZN(2,N)
            DO IGC = 1,NGC+2
              DFGC(IGC,M,N) =  DFGC(IGC,2,N)
              DFNC(IGC,M,N) =  DFNC(IGC,2,N)
              TMC(IGC,M,N) =  TMC(IGC,2,N)
              XGC(IGC,M,N) =  XGC(IGC,2,N)
              XLC(IGC,M,N) =  XLC(IGC,2,N)
              XMGC(IGC,M,N) =  XMGC(IGC,2,N)
              XMNC(IGC,M,N) =  XMNC(IGC,2,N)
              XNC(IGC,M,N) =  XNC(IGC,2,N)
            ENDDO
          ENDDO
        ENDIF
  400 CONTINUE
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of PROP_EOR group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE RD3PRP_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Read input file for rock/soil relative permeability
!     function information.
!
!     IRPN(1,IZN) 3-Phase Relative Permeability Model
!     IRPG(1,IZN) Gas Rel. Perm. vs Total-Liquid Sat. Submodel
!     IRPG(1,IZN)/10 Nonaqu.-Liq. Rel. Perm. vs Total-Liq. Sat. Submodel
!     IRPL(1,IZN) Aqueous Rel. Perm. vs Aqueous Sat. Submodel
!     IRPL(1,IZN)/10 Nonaqu.-Liq. Rel. Perm. vs Aqueous Sat. Submodel
!
!     RPGC(1,IZN) Corey Endpoint (krg vs st)
!     RPGC(2,IZN) Corey Exponent (krg vs st)
!     RPGC(3,IZN) Corey Total-Liquid Residual Saturation (krg vs st)
!     RPGC(4,IZN) Corey Gas Residual Saturation (krg vs st)
!
!     RPGC(1,IZN) LET Endpoint (krg vs st)
!     RPGC(2,IZN) LET "L" (krg vs st)
!     RPGC(3,IZN) LET Total-Liquid Residual Saturation (krg vs st)
!     RPGC(4,IZN) LET Gas Residual Saturation (krg vs st)
!     RPGC(5,IZN) LET "E" (krg vs st)
!     RPGC(6,IZN) LET "T" (krg vs st)
!
!     RPNC(1,IZN) Corey Endpoint (krn vs st)
!     RPNC(2,IZN) Corey Exponent (krn vs st)
!     RPNC(3,IZN) Corey Total-Liquid Residual Saturation (krn vs st)
!     RPNC(4,IZN) Corey Gas Residual Saturation (krn vs st)
!
!     RPNC(1,IZN) LET Endpoint (krn vs st)
!     RPNC(2,IZN) LET "L" (krn vs st)
!     RPNC(3,IZN) LET Total-Liquid Residual Saturation (krn vs st)
!     RPNC(4,IZN) LET Gas Residual Saturation (krn vs st)
!     RPNC(5,IZN) LET "E" (krn vs st)
!     RPNC(6,IZN) LET "T" (krn vs st)
!
!     RPLC(1,IZN) Corey Endpoint (krl vs sl)
!     RPLC(2,IZN) Corey Exponent (krl vs sl)
!     RPLC(3,IZN) Corey Total-Liquid Residual Saturation (krl vs sl)
!     RPLC(4,IZN) Corey Gas Residual Saturation (krl vs sl)
!
!     RPLC(1,IZN) LET Endpoint (krl vs sl)
!     RPLC(2,IZN) LET "L" (krl vs sl)
!     RPLC(3,IZN) LET Total-Liquid Residual Saturation (krl vs sl)
!     RPLC(4,IZN) LET Gas Residual Saturation (krl vs sl)
!     RPLC(5,IZN) LET "E" (krl vs sl)
!     RPLC(6,IZN) LET "T" (krl vs sl)
!
!     RPLC(7,IZN) Corey Endpoint (krn vs sl)
!     RPLC(8,IZN) Corey Exponent (krn vs sl)
!     RPLC(9,IZN) Corey Total-Liquid Residual Saturation (krn vs sl)
!     RPLC(10,IZN) Corey Gas Residual Saturation (krn vs sl)
!
!     RPLC(7,IZN) LET Endpoint (krn vs sl)
!     RPLC(8,IZN) LET "L" (krn vs sl)
!     RPLC(9,IZN) LET Total-Liquid Residual Saturation (krn vs sl)
!     RPLC(10,IZN) LET Gas Residual Saturation (krn vs sl)
!     RPLC(11,IZN) LET "E" (krn vs sl)
!     RPLC(12,IZN) LET "T" (krn vs sl)
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, March 17, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PORMED
      USE GRID
      USE GLB_PAR
      USE FILES
      USE FDVP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 RPGCX(LRPGC),RPLCX(LRPLC),RPNCX(LRPNC)
      CHARACTER*64 ADUM,RDUM,UNTS
      CHARACTER*512 CHDUM
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//RD3PRP_EOR'
!
!---  Write card information to ouput file  ---
!
      CARD = 'Rock/Soil Relative Permeability Function Card'
      ICD = INDEX( CARD,'  ' )-1
      WRITE(IWR,'(//,3A)') ' ~ ',CARD(1:ICD),': '
!
!---  Loop over the rock/soil relative permeability information 
!     lines  ---
!
      N = 0
   20 CONTINUE
      IJK = 0
      IF( N.GE.NROCK ) GOTO 500
      ISTART = 1
      VARB = '3-Phase Relative Permeability Function: Rock Name: '
      CALL RDINPL( CHDUM )
      CALL LCASE( CHDUM )
      CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,RDUM)
!
!---  IJK, KIJ, or JKI indexing  ---
!
      IF( INDEX(RDUM(1:),'indexing').NE.0 ) THEN
        IF( INDEX(ROCK(1)(1:),'indexing').EQ.0 ) THEN
          INDX = 4
          CHMSG = 'Indexing Option Not Declared ' //
     &      'in Rock/Soil Zonation Card'
          CALL WRMSGS( INDX )
        ENDIF
        IF( INDEX(RDUM,'ijk').NE.0 ) THEN
          IJK = 1
        ELSEIF( INDEX(RDUM,'jki').NE.0 ) THEN
          IJK = 2
        ELSEIF( INDEX(RDUM,'kij').NE.0 ) THEN
          IJK = 3
        ELSE
          INDX = 4
          CHMSG = 'Unrecognized Indexing Option' // RDUM(1:NCH)
          CALL WRMSGS( INDX )
        ENDIF
        GOTO 220
      ENDIF
!
!---  Search known rock types for a matching type ---
!
      DO 100 M = 1, NROCK
        IF( RDUM.EQ.ROCK(M)) THEN
          IROCK = M
          GOTO 200
        ENDIF
  100 CONTINUE
!
!---  Search known scaling groups for a matching type ---
!
      IF( ISLC(19).EQ.1 ) THEN
        DO 110 M = 1,NSCALE
           IF( RDUM.EQ.SCALNM(M) ) THEN
              ISGRP = M
              IROCK = 1
              GOTO 200
           ENDIF
  110   CONTINUE
        INDX = 2
        CHMSG = 'Unrecognized Rock/Soil Type or Scaling Group: '
     &    // RDUM(1:NCH)
        CALL WRMSGS( INDX )
        GOTO 20
      ENDIF
      INDX = 2
      CHMSG = 'Unrecognized Rock/Soil Type: ' // RDUM(1:NCH)
      CALL WRMSGS( INDX )
      GOTO 20
  200 CONTINUE
!
!---  Loop over rock/soils within scaling group  ---
!
      IF( ISLC(19).EQ.1 .AND. ISGRP.NE.0 ) THEN
        DO 202 M = IROCK,NROCK
          IF( ISCALE(M).EQ.ISGRP ) THEN
            IROCK = M
            GOTO 204
          ENDIF
  202   CONTINUE
      ENDIF
  204 CONTINUE
!
!---  Write rock/soil name  ---
!
      WRITE (IWR,'(/,2A)') 'Rock/Soil Name: ',ROCK(IROCK)
      N = N + 1
  220 CONTINUE
!
!---  Read 3-phase relative permeability function  ---
!
      VARB = '3-Phase Relative Permeability Function Type: '
      CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,ADUM)
      IF( INDEX(ADUM(1:),'stone ii').NE.0 .OR.
     &  INDEX(ADUM(1:),'stone 2').NE.0 .OR.
     &  INDEX(ADUM(1:),'stone-ii').NE.0 .OR.
     &  INDEX(ADUM(1:),'stone-2').NE.0 ) THEN
        IRPNX = 2
        WRITE(IWR,'(A)') 'Stone-II 3-Phase Relative Permeability'
      ELSEIF( INDEX(ADUM(1:),'stone').NE.0 ) THEN
        IRPNX = 1
        WRITE(IWR,'(A)') 'Stone-I 3-Phase Relative Permeability'
      ELSEIF( INDEX(ADUM(1:),'baker').NE.0 ) THEN
        IRPNX = 3
        WRITE(IWR,'(A)') 'Baker 3-Phase Relative Permeability'
      ELSE
        INDX = 4
        CHMSG = 'Unrecognized 3-Phase Relative Permeability: ' // ADUM
        CALL WRMSGS( INDX )
      ENDIF
!
!---  Stone-I, Stone-II, or Baker 3-phase relative permeability 
!     function  ---
!
      IF( IRPNX.EQ.1 .OR. IRPNX.EQ.2 .OR. IRPNX.EQ.3 ) THEN
!
!---    Read gas relative permeability vs total-liquid saturation
!       function  ---
!
        VARB = 'Gas Relative Permeability vs Total-Liquid Saturation' //
     &    'Function Type: '
        CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,ADUM)
        IF( INDEX(ADUM(1:),'corey').NE.0 ) THEN
          IRPGX = 1
        ELSEIF( INDEX(ADUM(1:),'let').NE.0 ) THEN
          IRPGX = 2
        ELSE
          INDX = 4
          CHMSG = 'Unrecognized Gas Relative ' // 
     &    'Permeability vs Aqueous Saturation Function: ' // ADUM
         CALL WRMSGS( INDX )
        ENDIF
!
!---    Corey Function  ---
!
        IF( IRPGX.EQ.1 ) THEN
          WRITE(IWR,'(A)') 'Corey Gas Relative Permeability vs ' //
     &      'Total-Liquid Saturation Function'
          VARB = 'Endpoint Relative Permeability'
          IF( IJK.GT.0 ) THEN
            INDX = 1
            LNDX = LRPGC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPGC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPGCX(1))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPGCX(1)
          ENDIF
          VARB = 'Exponent Relative Permeability'
          IF( IJK.GT.0 ) THEN
            INDX = 2
            LNDX = LRPGC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPGC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPGCX(2))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPGCX(2)
          ENDIF
          VARB = 'Residual Total-Liquid Saturation'
          IF( IJK.GT.0 ) THEN
            INDX = 3
            LNDX = LRPGC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPGC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPGCX(3))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPGCX(3)
          ENDIF
          VARB = 'Residual Gas Saturation'
          IF( IJK.GT.0 ) THEN
            INDX = 4
            LNDX = LRPGC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPGC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPGCX(4))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPGCX(4)
          ENDIF
!
!---    LET Function  ---
!
        ELSEIF( IRPGX.EQ.2 ) THEN
          WRITE(IWR,'(A)') 'LET Gas Relative Permeability vs ' //
     &      'Total-Liquid Saturation Function'
          VARB = 'Endpoint Relative Permeability'
          IF( IJK.GT.0 ) THEN
            INDX = 1
            LNDX = LRPGC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPGC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPGCX(1))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPGCX(1)
          ENDIF
          VARB = 'L Parameter'
          IF( IJK.GT.0 ) THEN
            INDX = 2
            LNDX = LRPGC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPGC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPGCX(2))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPGCX(2)
          ENDIF
          VARB = 'E Parameter'
          IF( IJK.GT.0 ) THEN
            INDX = 5
            LNDX = LRPGC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPGC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPGCX(5))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPGCX(5)
          ENDIF
          VARB = 'T Parameter'
          IF( IJK.GT.0 ) THEN
            INDX = 6
            LNDX = LRPGC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPGC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPGCX(6))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPGCX(6)
          ENDIF
          VARB = 'Residual Total-Liquid Saturation'
          IF( IJK.GT.0 ) THEN
            INDX = 3
            LNDX = LRPGC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPGC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPGCX(3))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPGCX(3)
          ENDIF
          VARB = 'Residual Gas Saturation'
          IF( IJK.GT.0 ) THEN
            INDX = 4
            LNDX = LRPGC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPGC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPGCX(4))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPGCX(4)
          ENDIF
        ENDIF
!
!---    Read nonaqueous-liquid relative permeability vs 
!       total-liquid saturation function  ---
!
        VARB = 'Nonaqueous-Liquid Relative Permeability vs ' // 
     &    'Total-Liquid Saturation Function Type: '
        CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,ADUM)
        IF( INDEX(ADUM(1:),'corey').NE.0 ) THEN
          IRPGX = IRPGX + 10
        ELSEIF( INDEX(ADUM(1:),'let').NE.0 ) THEN
          IRPGX = IRPGX + 20
        ELSE
          INDX = 4
          CHMSG = 'Unrecognized Nonaqueous-Liquid Relative ' // 
     &    'Permeability vs Total-Liquid Saturation Function: ' // ADUM
          CALL WRMSGS( INDX )
        ENDIF
!
!---    Corey Function  ---
!
        IF( IRPGX/10.EQ.1 ) THEN
          WRITE(IWR,'(A)') 'Corey Nonaqueous-Liquid Relative ' // 
     &      'Permeability vs Total-Liquid Saturation Function'
          VARB = 'Endpoint Relative Permeability'
          IF( IJK.GT.0 ) THEN
            INDX = 1
            LNDX = LRPNC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPNC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPNCX(1))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPNCX(1)
          ENDIF
          VARB = 'Exponent Relative Permeability'
          IF( IJK.GT.0 ) THEN
            INDX = 2
            LNDX = LRPNC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPNC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPNCX(2))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPNCX(2)
          ENDIF
          VARB = 'Residual Total-Liquid Saturation'
          IF( IJK.GT.0 ) THEN
            INDX = 3
            LNDX = LRPNC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPNC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPNCX(3))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPNCX(3)
          ENDIF
          VARB = 'Residual Gas Saturation'
          IF( IJK.GT.0 ) THEN
            INDX = 4
            LNDX = LRPNC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPNC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPNCX(4))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPNCX(4)
          ENDIF
!
!---    LET Function  ---
!
        ELSEIF( IRPGX/10.EQ.2 ) THEN
          WRITE(IWR,'(A)') 'LET Nonaqueous-Liquid Relative ' // 
     &      'Permeability vs Total-Liquid Saturation Function'
          VARB = 'Endpoint Relative Permeability'
          IF( IJK.GT.0 ) THEN
            INDX = 1
            LNDX = LRPNC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPNC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPNCX(1))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPNCX(1)
          ENDIF
          VARB = 'L Parameter'
          IF( IJK.GT.0 ) THEN
            INDX = 2
            LNDX = LRPNC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPNC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPNCX(2))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPNCX(2)
          ENDIF
          VARB = 'E Parameter'
          IF( IJK.GT.0 ) THEN
            INDX = 5
            LNDX = LRPNC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPNC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPNCX(5))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPNCX(5)
          ENDIF
          VARB = 'T Parameter'
          IF( IJK.GT.0 ) THEN
            INDX = 6
            LNDX = LRPNC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPNC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPNCX(6))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPNCX(6)
          ENDIF
          VARB = 'Residual Total-Liquid Saturation'
          IF( IJK.GT.0 ) THEN
            INDX = 3
            LNDX = LRPNC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPNC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPNCX(3))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPNCX(3)
          ENDIF
          VARB = 'Residual Gas Saturation'
          IF( IJK.GT.0 ) THEN
            INDX = 4
            LNDX = LRPNC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPNC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPNCX(4))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPNCX(4)
          ENDIF
        ENDIF
!
!---    Read aqueous relative permeability function  ---
!
        VARB = 'Aqueous Relative Permeability ' // 
     &      'vs Aqueous Saturation Function Type: '
        CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,ADUM)
        IF( INDEX(ADUM(1:),'corey').NE.0 ) THEN
          IRPLX = 1
        ELSEIF( INDEX(ADUM(1:),'let').NE.0 ) THEN
          IRPLX = 2
        ELSE
          INDX = 4
          CHMSG = 'Unrecognized Aqueous Relative ' // 
     &      'Permeability vs Aqueous Saturation Function: ' // ADUM
          CALL WRMSGS( INDX )
        ENDIF
!
!---    Corey Function  ---
!
        IF( IRPLX.EQ.1 ) THEN
          WRITE(IWR,'(A)') 'Corey Aqueous Relative Permeability ' // 
     &      'vs Aqueous Saturation Function'
          VARB = 'Endpoint Relative Permeability'
          IF( IJK.GT.0 ) THEN
            INDX = 1
            LNDX = LRPLC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPLC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPLCX(1))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPLCX(1)
          ENDIF
          VARB = 'Exponent Relative Permeability'
          IF( IJK.GT.0 ) THEN
            INDX = 2
            LNDX = LRPLC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPLC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPLCX(2))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPLCX(2)
          ENDIF
          VARB = 'Residual Aqueous Saturation'
          IF( IJK.GT.0 ) THEN
            INDX = 3
            LNDX = LRPLC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPLC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPLCX(3))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPLCX(3)
          ENDIF
          VARB = 'Residual Nonaqueous-Liquid Saturation'
          IF( IJK.GT.0 ) THEN
            INDX = 4
            LNDX = LRPLC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPLC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPLCX(4))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPLCX(4)
          ENDIF
!
!---    LET Function  ---
!
        ELSEIF( IRPLX.EQ.2 ) THEN
          WRITE(IWR,'(A)') 'LET Aqueous Relative Permeability ' // 
     &      'vs Aqueous Saturation Function'
          VARB = 'Endpoint Relative Permeability'
          IF( IJK.GT.0 ) THEN
            INDX = 1
            LNDX = LRPLC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPLC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPLCX(1))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPLCX(1)
          ENDIF
          VARB = 'L Parameter'
          IF( IJK.GT.0 ) THEN
            INDX = 2
            LNDX = LRPLC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPLC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPLCX(2))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPLCX(2)
          ENDIF
          VARB = 'E Parameter'
          IF( IJK.GT.0 ) THEN
            INDX = 5
            LNDX = LRPLC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPLC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPLCX(5))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPLCX(5)
          ENDIF
          VARB = 'T Parameter'
          IF( IJK.GT.0 ) THEN
            INDX = 6
            LNDX = LRPLC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPLC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPLCX(6))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPLCX(6)
          ENDIF
          VARB = 'Residual Aqueous Saturation'
          IF( IJK.GT.0 ) THEN
            INDX = 3
            LNDX = LRPLC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPLC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPLCX(3))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPLCX(3)
          ENDIF
          VARB = 'Residual Nonaqueous-Liquid Saturation'
          IF( IJK.GT.0 ) THEN
            INDX = 4
            LNDX = LRPLC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPLC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPLCX(4))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPLCX(4)
          ENDIF
        ENDIF
!
!---    Read nonaqueous-liquid relative permeability vs 
!       aqueous saturation function  ---
!
        VARB = 'Nonaqueous-Liquid Relative Permeability vs ' // 
     &    'Aqueous Saturation Function Type: '
        CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,ADUM)
        IF( INDEX(ADUM(1:),'corey').NE.0 ) THEN
          IRPLX = IRPLX + 10
        ELSEIF( INDEX(ADUM(1:),'let').NE.0 ) THEN
          IRPLX = IRPLX + 20
        ELSE
          INDX = 4
          CHMSG = 'Unrecognized Nonaqueous-Liquid Relative ' // 
     &      'Permeability vs Aqueous Saturation Function: ' // ADUM
          CALL WRMSGS( INDX )
        ENDIF
!
!---    Corey Function  ---
!
        IF( IRPLX/10.EQ.1 ) THEN
          WRITE(IWR,'(A)') 'Corey Nonaqueous-Liquid ' // 
     &      'Relative Permeability vs Aqueous Saturation Function'
          VARB = 'Endpoint Relative Permeability'
          IF( IJK.GT.0 ) THEN
            INDX = 7
            LNDX = LRPLC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPLC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPLCX(7))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPLCX(7)
          ENDIF
          VARB = 'Exponent Relative Permeability'
          IF( IJK.GT.0 ) THEN
            INDX = 8
            LNDX = LRPLC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPLC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPLCX(8))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPLCX(8)
          ENDIF
          VARB = 'Residual Aqueous Saturation'
          IF( IJK.GT.0 ) THEN
            INDX = 9
            LNDX = LRPLC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPLC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPLCX(9))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPLCX(9)
          ENDIF
          VARB = 'Residual Nonaqueous-Liquid Saturation'
          IF( IJK.GT.0 ) THEN
            INDX = 10
            LNDX = LRPLC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPLC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPLCX(10))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPLCX(10)
          ENDIF
!
!---    LET Function  ---
!
        ELSEIF( IRPLX/10.EQ.2 ) THEN
          WRITE(IWR,'(A)') 'LET Nonaqueous-Liquid ' // 
     &      'Relative Permeability vs Aqueous Saturation Function'
          VARB = 'Endpoint Relative Permeability'
          IF( IJK.GT.0 ) THEN
            INDX = 7
            LNDX = LRPLC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPLC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPLCX(7))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPLCX(7)
          ENDIF
          VARB = 'L Parameter'
          IF( IJK.GT.0 ) THEN
            INDX = 8
            LNDX = LRPLC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPLC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPLCX(8))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPLCX(8)
          ENDIF
          VARB = 'E Parameter'
          IF( IJK.GT.0 ) THEN
            INDX = 11
            LNDX = LRPLC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPLC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPLCX(11))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPLCX(11)
          ENDIF
          VARB = 'T Parameter'
          IF( IJK.GT.0 ) THEN
            INDX = 12
            LNDX = LRPLC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPLC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPLCX(12))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPLCX(12)
          ENDIF
          VARB = 'Residual Aqueous Saturation'
          IF( IJK.GT.0 ) THEN
            INDX = 9
            LNDX = LRPLC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPLC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPLCX(9))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPLCX(9)
          ENDIF
          VARB = 'Residual Nonaqueous-Liquid Saturation'
          IF( IJK.GT.0 ) THEN
            INDX = 10
            LNDX = LRPLC
            UNTS = 'null'
            CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,RPLC,INDX,LNDX )
          ELSE
            CALL RDDPR(ISTART,ICOMMA,CHDUM,RPLCX(10))
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',
     &        RPLCX(10)
          ENDIF
        ENDIF
      ENDIF
!
!---  Translate gas relative permeability type for IJK indexing  ---
!
      IF( IJK.GT.0 ) THEN
        DO 462 NC = 1,NFLD
          IRPG(IZ(NC)) = IRPGX
          IRPL(IZ(NC)) = IRPLX
          IRPN(IZ(NC)) = IRPNX
  462   CONTINUE
!
!---  For rock/soil zonation input translate gas relative permeability 
!     type and parameters  ---
!
      ELSE
        IRPG(IROCK) = IRPGX
        IRPL(IROCK) = IRPLX
        IRPN(IROCK) = IRPNX
        DO 480 L = 1,LRPGC
          RPGC(L,IROCK) = RPGCX(L)
  480   CONTINUE
        DO 482 L = 1,LRPLC
          RPLC(L,IROCK) = RPLCX(L)
  482   CONTINUE
        DO 484 L = 1,LRPNC
          RPNC(L,IROCK) = RPNCX(L)
  484   CONTINUE
      ENDIF
!
!---  Loop over remaining rock/soils within scaling group  ---
!
      IF( ISLC(19).EQ.1 .AND. IROCK.LT.NROCK ) THEN
        DO 496 M = IROCK+1,NROCK
          IF( ISCALE(M).EQ.ISGRP ) THEN
            NR = NR + 1
            IRPG(M) = IRPG(IROCK)
            IRPL(M) = IRPL(IROCK)
            IRPN(M) = IRPN(IROCK)
            DO 490 L = 1,LRPGC
              RPGC(L,M) = RPGC(L,IROCK)
  490       CONTINUE
            DO 492 L = 1,LRPLC
              RPLC(L,M) = RPLC(L,IROCK)
  492       CONTINUE
            DO 494 L = 1,LRPNC
              RPNC(L,M) = RPNC(L,IROCK)
  494       CONTINUE
          ENDIF
  496   CONTINUE
      ENDIF
!
!---  Read next rock/soil type or scaling group  ---
!
        IF( IJK.GT.0 ) N = N + NFLD
        IF( N.LT.NROCK ) WRITE(IWR,'(/)')
        GOTO 20
 500  CONTINUE
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of RD3PRP_EOR group ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE RDBC_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Read input file for boundary condition information.
!
!
!     Energy Boundary Condition Types
!
!     1 - Dirichlet (temperature)
!     2 - Neumann (heat flux)
!     3 - Zero Flux (no entry)
!     4 - Initial Condition (no entry)
!     5 - Inflow (temperature)
!     6 - Outflow (no entry)
!     7 - Advective (temperature)
!     8 - Geothermal (ref. temp., ref. elevation, geothermal grad.)
!
!     Aqueous Boundary Condition Types (Nonequilibrium States)
!
!   101 - Dirichlet (pressure, dissolved component conc.)
!   102 - Neumann (aqueous volumetric flux, dissolved component conc.)
!   103 - Zero Flux (no entry)
!   111 - Hydrostatic (ref. press., ref. elevation, ref. temp., 
!           ref. temp. elevation, geothermal grad., 
!           dissolved component conc.)
!   112 - Initial Conditions (no entry)
!
!     Nonaqueous Boundary Condition Types (Nonequilibrium States)
!
!   101 - Dirichlet (pressure, dissolved component conc.)
!   102 - Neumann (nonaqueous volumetric flux, total comp. mol. frac.)
!   103 - Zero Flux (no entry)
!   111 - Hydrostatic (ref. press., ref. elevation, ref. temp., 
!           ref. temp. elevation, geothermal grad., 
!           total comp. mol. frac.)
!   112 - Initial Conditions (no entry)
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, 26 August, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE TRNSPT
      USE SOLTN
      USE REACT
      USE GRID
      USE GLB_PAR
      USE FILES
      USE CONST
      USE BCV
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      CHARACTER*64 ADUM,BDUM(LSOLU+5+3),FDUM
      CHARACTER*64 UNTS
      CHARACTER*512 CHDUM
      REAL*8 VAR(LBTM,LBCV)
      INTEGER ITYP(LSOLU+5+3)
#ifdef ecke
      CHARACTER*64 SDUM
      INTEGER IBCSPX(LSPBC+1)
#endif
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//RDBC_EOR'
!
!---  Write card information to ouput file  ---
!
      CARD = 'Boundary Conditions Card'
      ICD = INDEX( CARD,'  ' )-1
      WRITE(IWR,'(//,3A)') ' ~ ',CARD(1:ICD),': '
      NBC = 0
      CALL RDINPL( CHDUM )
      CALL LCASE( CHDUM )
      ISTART = 1
      VARB = 'Number of Boundary Condition Cards'
      CALL RDINT(ISTART,ICOMMA,CHDUM,NLIN)
      DO NB = 1, NLIN
        CALL RDINPL( CHDUM )
        CALL LCASE( CHDUM )
        ISTART = 1
!
!---    Check for boundary condition states  ---
!
        IBCSX = 0
        NCH = INDEX(CHDUM,'  ')-1
        IF( INDEX(CHDUM(1:NCH),'bc1').NE.0 .OR. 
     &    INDEX(CHDUM(1:NCH),'bc2').NE.0 .OR.
     &    INDEX(CHDUM(1:NCH),'bc3').NE.0 ) IBCSX = 1
!
!---    Read boundary orientation  ---
!
        VARB = 'Boundary Condition Orientation'
        CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,ADUM)
        WRITE(IWR,'(/,2A,$)') VARB(1:IVR),': '
        IF( INDEX(ADUM(1:),'west').NE.0) THEN
          IBCDX = -1
          WRITE(IWR,'(A)') 'X-Direction: West Surface'
        ELSEIF( INDEX(ADUM(1:),'east').NE.0) THEN
          IBCDX = 1
          WRITE(IWR,'(A)') 'X-Direction: East Surface'
        ELSEIF( INDEX(ADUM(1:),'south').NE.0) THEN
          IBCDX = -2
          WRITE(IWR,'(A)') 'Y-Direction: South Surface'
        ELSEIF( INDEX(ADUM(1:),'north').NE.0) THEN
          IBCDX = 2
          WRITE(IWR,'(A)') 'Y-Direction: North Surface'
        ELSEIF( INDEX(ADUM(1:),'bottom').NE.0) THEN
          IBCDX = -3
          WRITE(IWR,'(A)') 'Z-Direction: Bottom Surface'
        ELSEIF( INDEX(ADUM(1:),'top').NE.0) THEN
          IBCDX = 3
          WRITE(IWR,'(A)') 'Z-Direction: Top Surface'
        ELSEIF( INDEX(ADUM(1:),'file').NE.0 ) THEN
          CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,FDUM)
          NCH = INDEX(FDUM,'  ')-1
          OPEN(UNIT=26,FILE=FDUM(1:NCH),STATUS='OLD',FORM='FORMATTED')
          WRITE(IWR,'(/,2A)') 'Boundary Condition Domain File: ',
     &      FDUM(1:NCH)
          I1X = 1
          I2X = 1
          J1X = 1
          J2X = 1
          K1X = 1
          K2X = 0
    5     CONTINUE
          READ(26,*,END=10) IX,JX,KX,IBCDX
          K2X = K2X+1
          GOTO 5
   10     CONTINUE
          REWIND(26)
        ENDIF
!
!---    Write boundary condition type header ---
!
        WRITE(IWR,'(A)') 'Boundary Condition Type(s): '
!
!---    Nonisothermal simulations and compostional option  ---
!
        IF( ISLC(30).EQ.0 .AND. ISLC(68).NE.0 ) THEN
!
!---      Read energy boundary condition type  ---
!
          VARB = 'Energy Boundary Condition Type'
          CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,BDUM(1))
          IF( INDEX(BDUM(1)(1:),'dirichlet').NE.0 ) THEN
            ITYP(1) = 1
            WRITE(IWR,'(2X,2A)') 'Energy: Dirichlet'
          ELSEIF( INDEX(BDUM(1)(1:),'neumann').NE.0 ) THEN
            ITYP(1) = 2
            WRITE(IWR,'(2X,2A)') 'Energy: Neumann'
          ELSEIF( INDEX(BDUM(1)(1:),'zero flux').NE.0 ) THEN
            ITYP(1) = 3
            WRITE(IWR,'(2X,2A)') 'Energy: Zero Flux'
          ELSEIF( INDEX(BDUM(1)(1:),'initial cond').NE.0 ) THEN
            ITYP(1) = 4
            WRITE(IWR,'(2X,2A)') 'Energy: Initial Condition'
          ELSEIF( INDEX(BDUM(1)(1:),'inflow').NE.0 ) THEN
            ITYP(1) = 5
            WRITE(IWR,'(2X,2A)') 'Energy: Inflow'
          ELSEIF( INDEX(BDUM(1)(1:),'outflow').NE.0 ) THEN
            ITYP(1) = 6
            WRITE(IWR,'(2X,2A)') 'Energy: Outflow'
          ELSEIF( INDEX(BDUM(1)(1:),'advective').NE.0 ) THEN
            ITYP(1) = 7
            WRITE(IWR,'(2X,2A)') 'Energy: Advective Only'
          ELSEIF( INDEX(BDUM(1)(1:),'geothermal').NE.0 ) THEN
            ITYP(1) = 8
            WRITE(IWR,'(2X,2A)') 'Energy: Geothermal Gradient'
          ELSE
            INDX = 4
            CHMSG = 'Unrecognized Energy Boundary Condition Type: ' 
     &        // BDUM(1)
            CALL WRMSGS( INDX )
          ENDIF
        ELSEIF( ISLC(30).NE.0 ) THEN
          ITYP(1) = 0
          WRITE(IWR,'(2X,2A)') 'Energy: Isothermal Option'
        ENDIF
!
!---    Skip fluid boundary condition reads for energy Neumann type
!       boundaries  ---
!
        IF( ITYP(1).NE.2 .AND. ITYP(1).NE.3 ) THEN
!
!---      Equilibrium boundary conditions states  ---
!
          IF( IBCSX.EQ.1 ) THEN
!
!---        Read fluid flow or aqueous boundary condition type  ---
!
            VARB = 'Fluid Flow Boundary Condition Type'
            CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,BDUM(2))
            IF( INDEX(BDUM(2)(1:),'dirichlet').NE.0 .AND.
     &        INDEX(BDUM(2)(1:),'inflow').NE.0 ) THEN
              ITYP(2) = 5
              WRITE(IWR,'(2X,2A)') 'Fluid Flow: Dirichlet Inflow'
            ELSEIF( INDEX(BDUM(2)(1:),'dirichlet').NE.0 .AND.
     &        INDEX(BDUM(2)(1:),'outflow').NE.0 ) THEN
              ITYP(2) = 6
              WRITE(IWR,'(2X,2A)') 'Fluid Flow: Dirichlet Outflow'
            ELSEIF( INDEX(BDUM(2)(1:),'dirichlet').NE.0 ) THEN
              ITYP(2) = 1
              WRITE(IWR,'(2X,2A)') 'Fluid Flow: Dirichlet'
            ELSEIF( INDEX(BDUM(2)(1:),'neumann').NE.0 .AND.
     &       INDEX(BDUM(2)(1:),'inflow').NE.0 ) THEN
              ITYP(2) = 7
              WRITE(IWR,'(2X,2A)') 'Fluid Flow: Neumann Inflow'
            ELSEIF( INDEX(BDUM(2)(1:),'neumann').NE.0 .AND.
     &       INDEX(BDUM(2)(1:),'outflow').NE.0 ) THEN
              ITYP(2) = 9
              WRITE(IWR,'(2X,2A)') 'Fluid Flow: Neumann Outflow'
            ELSEIF( INDEX(BDUM(2)(1:),'neumann').NE.0 ) THEN
              ITYP(2) = 2
              WRITE(IWR,'(2X,2A)') 'Fluid Flow: Neumann'
            ELSEIF( INDEX(BDUM(2)(1:),'zero flux').NE.0 ) THEN
              ITYP(2) = 3
              WRITE(IWR,'(2X,2A)') 'Fluid Flow: Zero Flux'
            ELSEIF( INDEX(BDUM(2)(1:),'initial cond').NE.0 ) THEN
              ITYP(2) = 4
              WRITE(IWR,'(2X,2A)') 'Fluid Flow: Initial Condition'
            ELSEIF( INDEX(BDUM(2)(1:),'hydraulic').NE.0 ) THEN
              ITYP(2) = 8
              WRITE(IWR,'(2X,2A)') 'Fluid Flow: Hydraulic Gradient'
            ELSE
              INDX = 4
              CHMSG = 'Unrecognized Fluid Flow Boundary Condition ' // 
     &          'Type: ' // BDUM(2)
              CALL WRMSGS( INDX )
            ENDIF
            ITFX = ITYP(2)
            IF( INDEX(BDUM(2)(1:),'zero-gas').NE.0 ) THEN
              ITYP(2) = ITYP(2) + 10
              WRITE(IWR,'(2X,2A)') 'Fluid Flow: Zero Gas Flux'
            ELSEIF( INDEX(BDUM(2)(1:),'zero-aqueous').NE.0 ) THEN
              ITYP(2) = ITYP(2) + 100
              WRITE(IWR,'(2X,2A)') 'Fluid Flow: Zero ' // 
     &          'Aqueous-Liquid Flux'
            ELSEIF( INDEX(BDUM(2)(1:),'zero-nonaqu').NE.0 ) THEN
              ITYP(2) = ITYP(2) + 1000
              WRITE(IWR,'(2X,2A)') 'Fluid Flow: Zero ' //
     &          'Nonaqueous-Liquid Flux'
            ENDIF
!
!---        Read boundary condition state  ---
!
            VARB = 'Boundary Condition State'
            CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,BDUM(3))
            IF( INDEX(BDUM(3)(1:),'bc1').NE.0 ) THEN
              ITYP(3) = 1
              WRITE(IWR,'(2X,2A)') 'Boundary Condition State: #1'
!
!---          Compositional option  ---
!
              IF( ISLC(68).NE.0 ) THEN
!
!---            Read aqueous CO2 option  ---
!
                VARB = 'Aqueous CO2 Option'
                CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,BDUM(4))
                IF( INDEX(BDUM(4)(1:),'co2').NE.0 .AND.
     &            INDEX(BDUM(4)(1:),'rel').NE.0 .AND.
     &            INDEX(BDUM(4)(1:),'sat').NE.0 ) THEN
                  ITYP(4) = 2
                  WRITE(IWR,'(2X,2A)') 'Aqueous CO2: Relative ' // 
     &              'Saturation'
                ELSEIF( INDEX(BDUM(4)(1:),'co2').NE.0 .AND.
     &            INDEX(BDUM(4)(1:),'mass').NE.0 .AND.
     &            INDEX(BDUM(4)(1:),'frac').NE.0 ) THEN
                  ITYP(4) = 3
                  WRITE(IWR,'(2X,2A)') 'Aqueous CO2: Mass Fraction'
                ELSE
                  INDX = 4
                  CHMSG = 'Unrecognized Aqueous CO2 Option: '
     &              // BDUM(4)
                  CALL WRMSGS( INDX )
                ENDIF
              ENDIF
!
!---          Read aqueous salt option  ---
!
              VARB = 'Aqueous Salt Option'
              CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,BDUM(5))
              IF( INDEX(BDUM(5)(1:),'salt').NE.0 .AND.
     &          INDEX(BDUM(5)(1:),'rel').NE.0 .AND.
     &          INDEX(BDUM(5)(1:),'sat').NE.0 ) THEN
                ITYP(5) = 2
                WRITE(IWR,'(2X,2A)') 'Aqueous Salt: Relative Saturation'
              ELSEIF( INDEX(BDUM(5)(1:),'salt').NE.0 .AND.
     &          INDEX(BDUM(5)(1:),'mass').NE.0 .AND.
     &          INDEX(BDUM(5)(1:),'frac').NE.0 ) THEN
                ITYP(5) = 3
                WRITE(IWR,'(2X,2A)') 'Aqueous Salt: Mass Fraction'
              ELSE
                INDX = 4
                CHMSG = 'Unrecognized Aqueous Salt Option: '
     &            // BDUM(5)
                CALL WRMSGS( INDX )
              ENDIF
            ELSEIF( INDEX(BDUM(3)(1:),'bc2').NE.0 ) THEN
              ITYP(3) = 2
              WRITE(IWR,'(2X,2A)') 'Boundary Condition State: #2'
!
!---          Read aqueous salt option  ---
!
              VARB = 'Aqueous Salt Option'
              CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,BDUM(5))
              IF( INDEX(BDUM(5)(1:),'salt').NE.0 .AND.
     &          INDEX(BDUM(5)(1:),'rel').NE.0 .AND.
     &          INDEX(BDUM(5)(1:),'sat').NE.0 ) THEN
                ITYP(5) = 2
                WRITE(IWR,'(2X,2A)') 'Aqueous Salt: Relative Saturation'
              ELSEIF( INDEX(BDUM(5)(1:),'salt').NE.0 .AND.
     &          INDEX(BDUM(5)(1:),'mass').NE.0 .AND.
     &          INDEX(BDUM(5)(1:),'frac').NE.0 ) THEN
                ITYP(5) = 3
                WRITE(IWR,'(2X,2A)') 'Aqueous Salt: Mass Fraction'
              ELSE
                INDX = 4
                CHMSG = 'Unrecognized Aqueous Salt Option: '
     &            // BDUM(5)
                CALL WRMSGS( INDX )
              ENDIF
            ELSEIF( INDEX(BDUM(3)(1:),'bc3').NE.0 ) THEN
               ITYP(3) = 3
              WRITE(IWR,'(2X,2A)') 'Boundary Condition State: #3'
            ELSE
              INDX = 4
              CHMSG = 'Unrecognized Boundary Condition State: '
     &          // BDUM(3)
              CALL WRMSGS( INDX )
            ENDIF
!
!---      Nonequilibrium boundary conditions, specify aqueous
!         and nonaqueous flow boundary conditions  ---
!
          ELSE
!
!---        Read aqueous boundary condition type ---
!
            IF( INDEX(BDUM(2)(1:),'dirichlet').NE.0 ) THEN
               ITYP(2) = 101
            ELSEIF( INDEX(BDUM(2)(1:),'neumann').NE.0 ) THEN
               ITYP(2) = 102
            ELSEIF( INDEX(BDUM(2)(1:),'zero flux').NE.0 ) THEN
               ITYP(2) = 103
            ELSEIF( INDEX(BDUM(2)(1:),'hydrostatic').NE.0 ) THEN
               ITYP(2) = 111
            ELSEIF( INDEX(BDUM(2)(1:),'initial cond').NE.0 ) THEN
               ITYP(2) = 112
            ELSE
              INDX = 4
              CHMSG = 'Unrecognized Aqueous Boundary Condition: ' // 
     &          BDUM(2)
              CALL WRMSGS( INDX )
            ENDIF
!
!---        Compositional option  ---
!
            IF( ISLC(68).NE.0 ) THEN
!
!---          Read aqueous dissolved component option  ---
!
              VARB = 'Aqueous Dissolved Component Option'
              CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,BDUM(4))
              IF( INDEX(BDUM(4)(1:),'rel').NE.0 .AND.
     &          INDEX(BDUM(4)(1:),'sat').NE.0 ) THEN
                ITYP(4) = 2
                WRITE(IWR,'(2X,2A)') 'Aqueous Dissolved Component: ' // 
     &            'Relative Saturation'
              ELSEIF( INDEX(BDUM(4)(1:),'mass').NE.0 .AND.
     &          INDEX(BDUM(4)(1:),'frac').NE.0 ) THEN
                ITYP(4) = 3
                WRITE(IWR,'(2X,2A)') 'Aqueous Dissolved Component: ' //
     &            'Mass Fraction'
              ELSE
                INDX = 4
                CHMSG = 'Unrecognized Aqueous Dissolved ' // 
     &            'Component Option: ' // BDUM(4)
                CALL WRMSGS( INDX )
              ENDIF
            ENDIF
!
!---        Read aqueous salt option  ---
!
            VARB = 'Aqueous Salt Option'
            CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,BDUM(5))
            IF( INDEX(BDUM(5)(1:),'salt').NE.0 .AND.
     &        INDEX(BDUM(5)(1:),'rel').NE.0 .AND.
     &        INDEX(BDUM(5)(1:),'sat').NE.0 ) THEN
              ITYP(5) = 2
              WRITE(IWR,'(2X,2A)') 'Aqueous Salt: Relative Saturation'
            ELSEIF( INDEX(BDUM(5)(1:),'salt').NE.0 .AND.
     &        INDEX(BDUM(5)(1:),'mass').NE.0 .AND.
     &        INDEX(BDUM(5)(1:),'frac').NE.0 ) THEN
              ITYP(5) = 3
              WRITE(IWR,'(2X,2A)') 'Aqueous Salt: Mass Fraction'
            ELSE
              INDX = 4
              CHMSG = 'Unrecognized Aqueous Salt Option: '
     &          // BDUM(5)
              CALL WRMSGS( INDX )
            ENDIF
!
!---        Read nonaqueous boundary condition type ---
!
            IF( INDEX(BDUM(3)(1:),'dirichlet').NE.0 ) THEN
               ITYP(3) = 101
            ELSEIF( INDEX(BDUM(3)(1:),'neumann').NE.0 ) THEN
               ITYP(3) = 102
            ELSEIF( INDEX(BDUM(3)(1:),'zero flux').NE.0 ) THEN
               ITYP(3) = 103
            IF( INDEX(BDUM(3)(1:),'hydrostatic').NE.0 ) THEN
               ITYP(3) = 111
            ELSEIF( INDEX(BDUM(3)(1:),'initial cond').NE.0 ) THEN
               ITYP(3) = 112
            ELSE
              INDX = 4
              CHMSG = 'Unrecognized Nonqueous Boundary Condition: ' // 
     &          BDUM(3)
              CALL WRMSGS( INDX )
            ENDIF
          ENDIF
          ENDIF
        ENDIF
!
!---    Read solute boundary condition type(s) ---
!
        IF( IEQC.GT.0 ) THEN
          DO NSL = 1,NSOLU
            VARB = 'Solute Boundary Condition Type'
            CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,BDUM(NSL+5))
            IF( INDEX(BDUM(NSL+5)(1:),'volum').NE.0 .AND.
     &        INDEX(BDUM(NSL+5)(1:),'conc').NE.0 ) THEN
              ITYP(NSL+5) = 1
              IDB = INDEX(SOLUT(NSL)(1:),'  ') - 1
              WRITE(IWR,'(2X,A)') 'Solute (' // SOLUT(NSL)(1:IDB) // 
     &          ': Volumetric Concentration'
            ELSEIF( INDEX(BDUM(NSL+5)(1:),'outflow').NE.0 ) THEN
              ITYP(NSL+5) = 2
              IDB = INDEX(SOLUT(NSL)(1:),'  ') - 1
              WRITE(IWR,'(2X,A)') 'Solute (' // SOLUT(NSL)(1:IDB) // 
     &          ': Outflow'
            ELSEIF( INDEX(BDUM(NSL+5)(1:),'zero').NE.0 .AND.
     &        INDEX(BDUM(NSL+5)(1:),'flux').NE.0 ) THEN
              ITYP(NSL+5) = 3
              IDB = INDEX(SOLUT(NSL)(1:),'  ') - 1
              WRITE(IWR,'(2X,A)') 'Solute (' // SOLUT(NSL)(1:IDB) // 
     &          ': Zero Flux'
            ELSEIF( INDEX(BDUM(NSL+5)(1:),'init').NE.0 .AND.
     &        INDEX(BDUM(NSL+5)(1:),'cond').NE.0 ) THEN
              ITYP(NSL+5) = 4
              IDB = INDEX(SOLUT(NSL)(1:),'  ') - 1
              WRITE(IWR,'(2X,A)') 'Solute (' // SOLUT(NSL)(1:IDB) // 
     &          ': Initial Condition'
            ELSEIF( INDEX(BDUM(NSL+5)(1:),'aqu').NE.0 .AND.
     &        INDEX(BDUM(NSL+5)(1:),'conc').NE.0 ) THEN
              ITYP(NSL+5) = 5
              IDB = INDEX(SOLUT(NSL)(1:),'  ') - 1
              WRITE(IWR,'(2X,A)') 'Solute (' // SOLUT(NSL)(1:IDB) // 
     &          ': Aqueous Concentration'
            ELSEIF( INDEX(BDUM(NSL+5)(1:),'gas').NE.0 .AND.
     &        INDEX(BDUM(NSL+5)(1:),'conc').NE.0 ) THEN
              ITYP(NSL+5) = 6
              IDB = INDEX(SOLUT(NSL)(1:),'  ') - 1
              WRITE(IWR,'(2X,A)') 'Solute (' // SOLUT(NSL)(1:IDB) // 
     &          ': Gas Concentration'
            ELSEIF( INDEX(BDUM(NSL+5)(1:),'nonaqu').NE.0 .AND.
     &        INDEX(BDUM(NSL+5)(1:),'liq').NE.0 .AND.
     &        INDEX(BDUM(NSL+5)(1:),'conc').NE.0 ) THEN
              ITYP(NSL+5) = 7
              IDB = INDEX(SOLUT(NSL)(1:),'  ') - 1
              WRITE(IWR,'(2X,A)') 'Solute (' // SOLUT(NSL)(1:IDB) // 
     &          ': Nonaqueous Liquid Concentration'
            ELSEIF( INDEX(BDUM(NSL+5)(1:),'aqu').NE.0 .AND.
     &        INDEX(BDUM(NSL+5)(1:),'inflow').NE.0 ) THEN
              ITYP(NSL+5) = 8
              IDB = INDEX(SOLUT(NSL)(1:),'  ') - 1
              WRITE(IWR,'(2X,A)') 'Solute (' // SOLUT(NSL)(1:IDB) // 
     &          ': Aqueous Inflow'
            ELSEIF( INDEX(BDUM(NSL+5)(1:),'gas').NE.0 .AND.
     &        INDEX(BDUM(NSL+5)(1:),'inflow').NE.0 ) THEN
              ITYP(NSL+5) = 9
              IDB = INDEX(SOLUT(NSL)(1:),'  ') - 1
              WRITE(IWR,'(2X,A)') 'Solute (' // SOLUT(NSL)(1:IDB) // 
     &          ': Gas Inflow'
            ELSEIF( INDEX(BDUM(NSL+5)(1:),'nonaqu').NE.0 .AND.
     &        INDEX(BDUM(NSL+5)(1:),'liq').NE.0 .AND.
     &        INDEX(BDUM(NSL+5)(1:),'inflow').NE.0 ) THEN
              ITYP(NSL+5) = 10
              IDB = INDEX(SOLUT(NSL)(1:),'  ') - 1
              WRITE(IWR,'(2X,A)') 'Solute (' // SOLUT(NSL)(1:IDB) // 
     &          ': Nonaqueous Liquid Inflow'
            ELSEIF( INDEX(BDUM(NSL+5)(1:),'aqu').NE.0 .AND.
     &        INDEX(BDUM(NSL+5)(1:),'advec').NE.0 ) THEN
              ITYP(NSL+5) = 11
              IDB = INDEX(SOLUT(NSL)(1:),'  ') - 1
              WRITE(IWR,'(2X,A)') 'Solute (' // SOLUT(NSL)(1:IDB) // 
     &          ': Aqueous Advection'
            ELSEIF( INDEX(BDUM(NSL+5)(1:),'gas').NE.0 .AND.
     &        INDEX(BDUM(NSL+5)(1:),'advec').NE.0 ) THEN
              ITYP(NSL+5) = 12
              IDB = INDEX(SOLUT(NSL)(1:),'  ') - 1
              WRITE(IWR,'(2X,A)') 'Solute (' // SOLUT(NSL)(1:IDB) // 
     &          ': Gas Advection'
            ELSEIF( INDEX(BDUM(NSL+5)(1:),'nonaqu').NE.0 .AND.
     &        INDEX(BDUM(NSL+5)(1:),'liq').NE.0 .AND.
     &        INDEX(BDUM(NSL+5)(1:),'advec').NE.0 ) THEN
              ITYP(NSL+5) = 13
              IDB = INDEX(SOLUT(NSL)(1:),'  ') - 1
              WRITE(IWR,'(2X,A)') 'Solute (' // SOLUT(NSL)(1:IDB) // 
     &          ': Nonaqueous Liquid Inflow'
            ELSE
              INDX = 4
              CHMSG = 'Unrecognized Solute Boundary Condition: ' //
     &          BDUM(NSL+5)
              CALL WRMSGS( INDX )
            ENDIF
          ENDDO
        ENDIF
#ifdef ecke
!
!---    Reactive species boundary condition types, 
!       allowing for returns in input lines  ---
!
        CALL CHKCHR( ISTART,ICOMMA,CHDUM,INDX )
        IF( INDX.EQ.0 ) THEN
          CALL RDINPL( CHDUM )
          CALL LCASE( CHDUM )
          ISTART = 1
        ENDIF
        BDUM(NSOLU+5+1) = 'zero flux'
        IDFLT = 1
        VARB = 'Reactive Species Boundary Condition Type: '
        CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,BDUM(NSOLU+5+1))
        IF( INDEX(BDUM(NSOLU+LUK+1)(1:),'inflow-outflow').NE.0 ) THEN
          ITYP(NSOLU+LUK+1) = 23
          WRITE(IWR,'(2X,A)') 'Reactive Species Boundary Type: ' // 
     &      'Inflow-Outflow'
        ELSEIF( INDEX(BDUM(NSOLU+LUK+1)(1:),'outflow').NE.0 ) THEN
          ITYP(NSOLU+LUK+1) = 7
          WRITE(IWR,'(2X,A)') 'Reactive Species Boundary Type: ' // 
     &      'Outflow'
        ELSEIF( INDEX(BDUM(NSOLU+LUK+1)(1:),'initial co').NE.0 ) THEN
          ITYP(NSOLU+LUK+1) = 12
          WRITE(IWR,'(2X,A)') 'Reactive Species Boundary Type: ' // 
     &      'Initial Condition'
        ELSEIF( INDEX(BDUM(NSOLU+LUK+1)(1:),'inflow').NE.0 ) THEN
          ITYP(NSOLU+LUK+1) = 14
          WRITE(IWR,'(2X,A)') 'Reactive Species Boundary Type: ' // 
     &      'Inflow'
        ELSEIF( INDEX(BDUM(NSOLU+LUK+1)(1:),'conc').NE.0 ) THEN
          ITYP(NSOLU+LUK+1) = 1
          WRITE(IWR,'(2X,A)') 'Reactive Species Boundary Type: ' // 
     &      'Volumetric Concentration'
        ELSEIF( INDEX(BDUM(NSOLU+LUK+1)(1:),'zero flux').NE.0 ) THEN
          ITYP(NSOLU+LUK+1) = 3
          WRITE(IWR,'(2X,A)') 'Reactive Species Boundary Type: ' // 
     &      'Zero Flux'
        ELSE
          INDX = 4
          CHMSG = 'Unrecognized Reactive Species Boundary Condition: '
     &      //BDUM(NSOLU+LUK+1)
          CALL WRMSGS( INDX )
        ENDIF
!
!---    Number of reactive species  ---
!
        CALL RDINPL( CHDUM )
        CALL LCASE( CHDUM )
        ISTART = 1
        VARB = 'Number of Reactive Species'
        CALL RDINT(ISTART,ICOMMA,CHDUM,IBCSPX(1))
        DO NSPX = 2,IBCSPX(1)+1
          IBCSPX(NSPX) = 0
        ENDDO
!
!---    Loop over number of reactive species  ---
!
        L1 : DO NSPX = 1,IBCSPX(1)
!
!---      Allow for returns in input lines  ---
!
          CALL CHKCHR( ISTART,ICOMMA,CHDUM,INDX )
          IF( INDX.EQ.0 ) THEN
            CALL RDINPL( CHDUM )
            CALL LCASE( CHDUM )
            ISTART = 1
          ENDIF
          VARB = 'Species Name'
          CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,SDUM)
!
!---      Aqueous species  ---
!
          DO M = 1,NSPL
            IF( SPNML(M).EQ.SDUM ) THEN
              IBCSPX(NSPX+1) = M
              CYCLE L1
            ENDIF
          ENDDO
!
!---      Gas species  ---
!
          DO M = 1,NSPG
            IF( SPNMG(M).EQ.SDUM ) THEN
              MX = M + NSPL + NSPS
              CYCLE L1
            ENDIF
          ENDDO
!
!---      Nonaqueous species  ---
!
          DO M = 1,NSPN
            IF( SPNMN(M).EQ.SDUM ) THEN
              MX = M + NSPL + NSPS + NSPG
              CYCLE L1
            ENDIF
          ENDDO
          INDX = 4
          CHMSG = 'Unrecognized Aqueous, Gas, or ' //
     &      'Nonaqueous-liquid Species Name: '
     &       // SDUM(1:NCH)
          CALL WRMSGS( INDX )
        ENDDO L1
#endif
!
!---    Read and write boundary domain indices  ---
!
        ISTART = 1
        CALL RDINPL( CHDUM )
        CALL LCASE( CHDUM )
        IF( INDEX(ADUM(1:),'file').EQ.0 ) THEN
          VARB = 'Boundary Condition Domain: '
          CALL RDINT(ISTART,ICOMMA,CHDUM,I1X)
          CALL RDINT(ISTART,ICOMMA,CHDUM,I2X)
          CALL RDINT(ISTART,ICOMMA,CHDUM,J1X)
          CALL RDINT(ISTART,ICOMMA,CHDUM,J2X)
          CALL RDINT(ISTART,ICOMMA,CHDUM,K1X)
          CALL RDINT(ISTART,ICOMMA,CHDUM,K2X)
          WRITE(IWR,'(A)') VARB(1:IVR)
          WRITE(IWR, '(2X,A,I6,A,I6)') 'I = ',I1X,' to ',I2X
          WRITE(IWR, '(2X,A,I6,A,I6)') 'J = ',J1X,' to ',J2X
          WRITE(IWR, '(2X,A,I6,A,I6)') 'K = ',K1X,' to ',K2X
!
!---  Check boundary domain  ---
!
          IF( I1X.GT.I2X .OR. J1X.GT.J2X .OR. K1X.GT.K2X ) THEN
            INDX = 4
            CHMSG = 'Nonascending Boundary Condition Domain Indices'
            CALL WRMSGS( INDX )
          ENDIF
          IF( I1X.LT.1 .OR. I2X.GT.IFLD. OR. J1X.LT.1 .OR.
     &      J2X.GT.JFLD .OR. K1X.LT.1 .OR. K2X.GT.KFLD ) THEN
            INDX = 4
            CHMSG = 'Illegal Boundary Condition Domain'
            CALL WRMSGS( INDX )
          ENDIF
        ENDIF
!
!---  Read number of boundary times  ---
!
        VARB = 'Number of Boundary Condition Times'
        CALL RDINT(ISTART,ICOMMA,CHDUM,IBCMX)
        IF( IBCMX.LE.-3 ) THEN
          IBCCX = 1
          IBCMX = -IBCMX
          WRITE(IWR,'(A)') 'Cyclic Boundary Conditions'
        ELSEIF( IBCMX.GE.1 ) THEN
          IBCCX = 0
          WRITE(IWR,'(A)') 'Noncyclic Boundary Conditions'
        ELSEIF( IBCMX.EQ.0 ) THEN
          INDX = 4
          CHMSG = 'No Boundary Condition Times'
          CALL WRMSGS( INDX )
        ELSE
          INDX = 4
          CHMSG = 'Number of Cyclic Boundary Conditions Times < 3'
          CALL WRMSGS( INDX )
        ENDIF
        IF( IBCMX.GT.LBTM ) THEN
          INDX = 5
          CHMSG = 'Number of Boundary Condition Times > LBTM'
          CALL WRMSGS( INDX )
        ENDIF
        BCTMO = -SMALL
        WRITE(IWR,'(A)') 'Boundary Condition Times and Variables:'
        DO 100 NTM = 1,IBCMX
          DO 20 M = 1,LBCV
            VAR(NTM,M) = 0.D+0
   20     CONTINUE
!
!---      Read, write, and convert boundary condition time, variables,
!         and units  ---
!
          CALL RDINPL( CHDUM )
          CALL LCASE( CHDUM )
          ISTART = 1
          VARB = 'Time'
          CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,1))
          CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
          WRITE(IWR,'(2X,4A,1PE11.4)') VARB(1:IVR),', ',UNTS(1:NCH)
     &      ,': ',VAR(NTM,1)
          INDX = 0
          IUNS = 1
          CALL RDUNIT(UNTS,VAR(NTM,1),INDX)
!
!---      Nonisothermal simulations and compositional option  ---
!
          IF( ISLC(30).EQ.0 .AND. ISLC(68).NE.0 ) THEN
!
!---        Read temperature, C for Dirichlet and inflow type 
!           energy boundary conditions  ---
!
            IF( ITYP(1).EQ.1 .OR. ITYP(1).EQ.5 .OR. ITYP(1).EQ.7 ) THEN
              VARB = 'Temperature'
              CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,2))
              CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
              WRITE(IWR,'(2X,2A,$)') VARB(1:IVR),', '
              WRITE(IWR,'(2A,1PE11.4)') UNTS(1:NCH),': ',VAR(NTM,2)
              INDX = 0
              IUNK = 1
              CALL RDUNIT(UNTS,VAR(NTM,2),INDX)
!
!---        Read energy flux, W/m^2 for Neumann type 
!           energy boundary conditions  ---
!
            ELSEIF( ITYP(1).EQ.2 ) THEN
              VARB = 'Energy Flux'
              CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,2))
              CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
              WRITE(IWR,'(2X,2A,$)') VARB(1:IVR),', '
              WRITE(IWR,'(2A,1PE11.4)') UNTS(1:NCH),': ',VAR(NTM,2)
              INDX = 0
              IUNKG = 1
              IUNS = -3
              CALL RDUNIT(UNTS,VAR(NTM,2),INDX)
!
!---        Read reference temperature, C, reference Z point, m, and
!           geothermal gradient, C/m for geothermal gradient type 
!           energy boundary conditions  ---
!
            ELSEIF( ITYP(1).EQ.8 ) THEN
              VARB = 'Reference Temperature'
              CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,2))
              CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
              WRITE(IWR,'(2X,2A,$)') VARB(1:IVR),', '
              WRITE(IWR,'(2A,1PE11.4)') UNTS(1:NCH),': ',VAR(NTM,2)
              INDX = 0
              IUNK = 1
              CALL RDUNIT(UNTS,VAR(NTM,2),INDX)
              VARB = 'Reference Z Point'
              CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,6))
              CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
              WRITE(IWR,'(2X,2A,$)') VARB(1:IVR),', '
              WRITE(IWR,'(2A,1PE11.4)') UNTS(1:NCH),': ',VAR(NTM,6)
              INDX = 0
              IUNM = 1
              CALL RDUNIT(UNTS,VAR(NTM,6),INDX)
              VARB = 'Geothermal Gradient'
              CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,7))
              CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
              WRITE(IWR,'(2X,2A,$)') VARB(1:IVR),', '
              WRITE(IWR,'(2A,1PE11.4)') UNTS(1:NCH),': ',VAR(NTM,7)
              INDX = 0
              IUNK = 1
              IUNM = -1
              CALL RDUNIT(UNTS,VAR(NTM,7),INDX)
            ENDIF
          ENDIF
!
!---      Equilibrium boundary conditions states  ---
!
          IF( IBCSX.EQ.1 ) THEN
!
!---        Read pressure, Pa for Dirichlet, Dirichlet Inflow, 
!           Dirichlet Outflow, and Hydraulic Gradient type fluid flow  
!           boundary conditions  ---
!
            IF( ITFX.EQ.1 .OR. ITFX.EQ.5 .OR. ITFX.EQ.6 .OR.
     &        ITFX.EQ.8 ) THEN
              VARB = 'Pressure'
              CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,3))
              CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
              WRITE(IWR,'(2X,2A,$)') VARB(1:IVR),', '
              WRITE(IWR,'(2A,1PE11.4)') UNTS(1:NCH),': ',VAR(NTM,3)
              INDX = 0
              IUNM = -1
              IUNKG = 1
              IUNS = -2
              CALL RDUNIT(UNTS,VAR(NTM,3),INDX)
              VAR(NTM,3) = VAR(NTM,3) - PATM
!
!---        Read volumetric flux, m/s for Neumann, Neumann Inflow,
!           and Neumann Outflow type fluid flow boundary conditions  ---
!
            ELSEIF( ITFX.EQ.2 .OR. ITFX.EQ.7 .OR. ITFX.EQ.9 ) THEN
              VARB = 'Volumetric Flux'
              CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,3))
              CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
              WRITE(IWR,'(2X,2A,$)') VARB(1:IVR),', '
              WRITE(IWR,'(2A,1PE11.4)') UNTS(1:NCH),': ',VAR(NTM,3)
              INDX = 0
              IUNM = 1
              IUNS = -1
              CALL RDUNIT(UNTS,VAR(NTM,3),INDX)
            ENDIF
!
!---        Boundary condition state #1 for compositional option  ---
!
!           SL = 1.0
!           SG+SN = 0.0
!
!           Declared variables:
!
!           BC(4,NTM,NB) - aqueous CO2 relative saturation, or
!                          aqueous CO2 mass fraction
!           BC(5,NTM,NB) - aqueous salt relative saturation, or
!                          aqueous salt mass fraction
!
!---        Boundary condition state #1 for black-oil option  ---
!
!           SL = 1.0
!           SG+SN = 0.0
!           Aqueuous saturated
!
!           Declared variables:
!
!           BC(5,NTM,NB) - aqueous salt relative saturation, or
!                          aqueous salt mass fraction
!
            IF( ITYP(3).EQ.1 ) THEN
!
!---          Read aqueous CO2  ---
!
              IF( ITYP(4).EQ.2 ) THEN
                VARB = 'Aqueous CO2 Relative Saturation'
                CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,4))
                WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),
     &            ': ',VAR(NTM,4)
              ELSEIF( ITYP(4).EQ.3 ) THEN
                VARB = 'Aqueous CO2 Mass Fraction'
                CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,4))
                WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),
     &            ': ',VAR(NTM,4)
              ENDIF
!
!---          Read aqueous salt  ---
!
              IF( ITYP(5).EQ.2 ) THEN
                VARB = 'Aqueous Salt Relative Saturation'
                CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,5))
                WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),
     &            ': ',VAR(NTM,5)
              ELSEIF( ITYP(5).EQ.3 ) THEN
                VARB = 'Aqueous Salt Mass Fraction'
                CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,5))
                WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),
     &            ': ',VAR(NTM,5)
              ENDIF
!
!---        Boundary condition state #2 for compositional option  ---
!
!           SL < 1.0
!           SG+SN > 0.0
!
!           Declared variables:
!
!           BC(4,NTM,NB) - aqueous saturation
!           BC(5,NTM,NB) - aqueous salt relative saturation, or
!                          aqueous salt mass fraction
!           BC(8+,NTM,NB) - total mole fraction of petroleum components
!
!---        Boundary condition state #2 for black-oil option  ---
!
!           SG >= 0.0
!           SL > 0.0
!           SN > 0.0
!           Aqueous and nonaqueous liquid saturated
!
!           Declared variables:
!
!           BC(4,NTM,NB) - aqueous saturation
!           BC(5,NTM,NB) - aqueous salt relative saturation, or
!                          aqueous salt mass fraction
!           BC(8,NTM,NB) - gas saturation
!           BC(9,NTM,NB) - gas-oil ratio (m^3/m^3)
!
            ELSEIF( ITYP(3).EQ.2 ) THEN
!
!---          Read aqueous saturation  ---
!
              VARB = 'Aqueous Saturation'
              CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,4))
              WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),
     &          ': ',VAR(NTM,4)
!
!---          Read aqueous salt  ---
!
              IF( ITYP(5).EQ.2 ) THEN
                VARB = 'Aqueous Salt Relative Saturation'
                CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,5))
                WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),
     &            ': ',VAR(NTM,5)
              ELSEIF( ITYP(5).EQ.3 ) THEN
                VARB = 'Aqueous Salt Mass Fraction'
                CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,5))
                WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),
     &            ': ',VAR(NTM,5)
              ENDIF
!
!---          Compositional option  ---
!
              IF( ISLC(68).NE.0 ) THEN
!
!---            Read total mole fraction of petroleum components  ---
!
                SZMCX = 0.D+0
                DO 30 IGC = 1,NGC+2
                  JGC = 7 + IGC
                  VARB = 'Total Mole Fraction of ' // GCNM(IGC)
                  CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,JGC))
                  WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),
     &              ': ',VAR(NTM,JGC)
                  SZMCX = SZMCX + VAR(NTM,JGC)
   30           CONTINUE
                IF( ABS(1.D+0-SZMCX).GT.EPSL ) THEN
                  INDX = 9
                  RLMSG = SZMCX
                  CHMSG = 'Summation of Total Mole Fraction ' // 
     &              'of Petroleum Components'
                  CALL WRMSGS( INDX )
                ELSE
                  DO 32 IGC = 1,NGC+2
                    VAR(NTM,IGC) = VAR(NTM,IGC)/SZMCX
   32             CONTINUE
                ENDIF
!
!---          Black-oil option  ---
!
              ELSE
                VARB = 'Gas Saturation'
                CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,8))
                WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',VAR(NTM,8)
                IF( (VAR(NTM,4)+VAR(NTM,8)).GT.1.D+0 ) THEN
                  INDX = 9
                  RLMSG = (VAR(NTM,4)+VAR(NTM,8))
                  CHMSG = 'Aqueous + Gas Saturation > 1: '
                  CALL WRMSGS( INDX )
                ENDIF
                VARB = 'Gas-to-Oil Ratio'
                CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,9))
                CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
                WRITE(IWR,'(2X,2A,$)') VARB(1:IVR),', '
                WRITE(IWR,'(2A,1PE11.4)') UNTS(1:NCH),': ',VAR(NTM,9)
                INDX = 0
                CALL RDUNIT(UNTS,VAR(NTM,9),INDX)
              ENDIF
!
!---        Boundary condition state #3 for compositional option  ---
!
!           SL = 0.0
!           SG+SN = 1.0
!
!           Declared variables:
!
!           BC(4,NTM,NB) - water vapor relative saturation
!           BC(8+,NTM,NB) - total mole fraction of petroleum components
!          
!---        Boundary condition state #3 for black-oil option  ---
!
!           SG >= 0.0
!           SL = 0.0
!           SN > 0.0
!           Aqueous and nonaqueous liquid saturated
!
!           Declared variables:
!
!           BC(4,NTM,NB) - water vapor relative saturation
!           BC(8,NTM,NB) - gas saturation
!           BC(9,NTM,NB) - gas-oil ratio (m^3/m^3)
!
            ELSEIF( ITYP(3).EQ.3 ) THEN
              VARB = 'Water Vapor Relative Saturation'
              CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,4))
              WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),
     &          ': ',VAR(NTM,4)
!
!---          Compositional option  ---
!
              IF( ISLC(68).NE.0 ) THEN
!
!---            Read total mole fraction of petroleum components  ---
!
                SZMCX = 0.D+0
                DO 40 IGC = 1,NGC+2
                  JGC = 7 + IGC
                  VARB = 'Total Mole Fraction of ' // GCNM(IGC)
                  CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,JGC))
                  WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),
     &              ': ',VAR(NTM,JGC)
                  SZMCX = SZMCX + VAR(NTM,JGC)
   40           CONTINUE
                IF( ABS(1.D+0-SZMCX).GT.EPSL ) THEN
                  INDX = 9
                  RLMSG = SZMCX
                  CHMSG = 'Summation of Total Mole Fraction ' // 
     &              'of Petroleum Components'
                  CALL WRMSGS( INDX )
                ELSE
                  DO 42 IGC = 1,NGC+2
                    VAR(NTM,IGC) = VAR(NTM,IGC)/SZMCX
   42             CONTINUE
                ENDIF
!
!---          Black-oil option  ---
!
              ELSE
                VARB = 'Gas Saturation'
                CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,8))
                WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',VAR(NTM,8)
                VARB = 'Gas-to-Oil Ratio'
                CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,9))
                CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
                WRITE(IWR,'(2X,2A,$)') VARB(1:IVR),', '
                WRITE(IWR,'(2A,1PE11.4)') UNTS(1:NCH),': ',VAR(NTM,9)
                INDX = 0
                CALL RDUNIT(UNTS,VAR(NTM,9),INDX)
              ENDIF
            ENDIF
!
!---      Nonequilibrium boundary conditions, specify aqueous
!         and nonaqueous flow boundary conditions  ---
!
          ELSE
!
!---        Read aqueous pressure, Pa for aqueous Dirichlet 
!           boundary conditions  ---
!
            IF( ITYP(2).EQ.101 ) THEN
              VARB = 'Aqueous Pressure'
              CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,3))
              CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
              WRITE(IWR,'(2X,2A,$)') VARB(1:IVR),', '
              WRITE(IWR,'(2A,1PE11.4)') UNTS(1:NCH),': ',VAR(NTM,3)
              INDX = 0
              IUNM = -1
              IUNKG = 1
              IUNS = -2
              CALL RDUNIT(UNTS,VAR(NTM,3),INDX)
              VAR(NTM,3) = VAR(NTM,3) - PATM
!
!---        Read aqueous volumetric flux, m/s for aqueosu Neumann
!           boundary conditions  ---
!
            ELSEIF( ITYP(2).EQ.102 ) THEN
              VARB = 'Aqueous Volumetric Flux'
              CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,3))
              CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
              WRITE(IWR,'(2X,2A,$)') VARB(1:IVR),', '
              WRITE(IWR,'(2A,1PE11.4)') UNTS(1:NCH),': ',VAR(NTM,3)
              INDX = 0
              IUNM = 1
              IUNS = -1
              CALL RDUNIT(UNTS,VAR(NTM,3),INDX)
            ENDIF
 !
!---        Read nonaqueous pressure, Pa for nonaqueous Dirichlet 
!           boundary conditions  ---
!
            IF( ITYP(2).EQ.101 ) THEN
              VARB = 'Nonaqueous Pressure'
              CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,3))
              CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
              WRITE(IWR,'(2X,2A,$)') VARB(1:IVR),', '
              WRITE(IWR,'(2A,1PE11.4)') UNTS(1:NCH),': ',VAR(NTM,3)
              INDX = 0
              IUNM = -1
              IUNKG = 1
              IUNS = -2
              CALL RDUNIT(UNTS,VAR(NTM,3),INDX)
              VAR(NTM,3) = VAR(NTM,3) - PATM
!
!---        Read aqueous volumetric flux, m/s for aqueosu Neumann
!           boundary conditions  ---
!
            ELSEIF( ITYP(2).EQ.102 ) THEN
              VARB = 'Nonaqueous Volumetric Flux'
              CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,3))
              CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
              WRITE(IWR,'(2X,2A,$)') VARB(1:IVR),', '
              WRITE(IWR,'(2A,1PE11.4)') UNTS(1:NCH),': ',VAR(NTM,3)
              INDX = 0
              IUNM = 1
              IUNS = -1
              CALL RDUNIT(UNTS,VAR(NTM,3),INDX)
            ENDIF
         ENDIF
!
!---      Read solute transport boundary condition variables ---
!
          IF( IEQC.GT.0 ) THEN
           JGC = 9 + NGC
           DO NSL = 1,NSOLU
              IF( ITYP(NSL+5).EQ.1 ) THEN
                VARB = 'Volumetric Concentration'
                CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,NSL+JGC))
                CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
                IDB = INDEX(SOLUT(NSL)(1:),'  ') - 1
                WRITE(IWR,'(2X,5A,1PE11.4)') SOLUT(NSL)(1:IDB),
     &            VARB(1:IVR),', ',UNTS(1:NCH),': ',VAR(NTM,NSL+JGC)
                INDX = 0
                IUNM = -3
                CALL RDUNIT(UNTS,VAR(NTM,NSL+JGC),INDX)
              ELSEIF( ITYP(NSL+5).EQ.5 .OR. ITYP(NSL+5).EQ.8 ) THEN
                VARB = 'Aqueous Volumetric Concentration'
                CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,NSL+JGC))
                CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
                IDB = INDEX(SOLUT(NSL)(1:),'  ') - 1
                WRITE(IWR,'(2X,5A,1PE11.4)') SOLUT(NSL)(1:IDB),
     &            VARB(1:IVR),', ',UNTS(1:NCH),': ',VAR(NTM,NSL+JGC)
                INDX = 0
                IUNM = -3
                CALL RDUNIT(UNTS,VAR(NTM,NSL+JGC),INDX)
              ELSEIF( ITYP(NSL+5).EQ.6 .OR. ITYP(NSL+5).EQ.9 ) THEN
                VARB = 'Gas Volumetric Concentration'
                CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,NSL+JGC))
                CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
                IDB = INDEX(SOLUT(NSL)(1:),'  ') - 1
                WRITE(IWR,'(2X,5A,1PE11.4)') SOLUT(NSL)(1:IDB),
     &            VARB(1:IVR),', ',UNTS(1:NCH),': ',VAR(NTM,NSL+JGC)
                INDX = 0
                IUNM = -3
                CALL RDUNIT(UNTS,VAR(NTM,NSL+JGC),INDX)
              ELSEIF( ITYP(NSL+5).EQ.7 .OR. ITYP(NSL+5).EQ.10 ) THEN
                VARB = 'Nonaqueous Liquid Volumetric Concentration'
                CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,NSL+JGC))
                CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
                IDB = INDEX(SOLUT(NSL)(1:),'  ') - 1
                WRITE(IWR,'(2X,5A,1PE11.4)') SOLUT(NSL)(1:IDB),
     &            VARB(1:IVR),', ',UNTS(1:NCH),': ',VAR(NTM,NSL+JGC)
                INDX = 0
                IUNM = -3
                CALL RDUNIT(UNTS,VAR(NTM,NSL+JGC),INDX)
              ENDIF
            ENDDO
          ENDIF
#ifdef ecke
          IF( ISLC(40).EQ.1 ) THEN
!
!---        Loop over reactive species inputs  ---
!
            DO NSPX = 1,IBCSPX(1)
              NSP = IBCSPX(NSPX+1)
              M = NSOLU+5+NSPX
!
!---          Initial input line  ---
!
              IF( NSPX.EQ.1 ) THEN
                CALL RDINPL( CHDUM )
                CALL LCASE( CHDUM )
                ISTART = 1
              ENDIF
!
!---          Allow for returns in input lines  ---
!
              CALL CHKCHR( ISTART,ICOMMA,CHDUM,INDX )
              IF( INDX.EQ.0 ) THEN
                CALL RDINPL( CHDUM )
                CALL LCASE( CHDUM )
                ISTART = 1
              ENDIF
!
!---          Aqueous species  ---
!
              IF( NSP.LE.NSPL ) THEN
                IF( ITYP(NSOLU+LUK+1).EQ.1
     &            .OR. ITYP(NSOLU+LUK+1).EQ.14
     &            .OR. ITYP(NSOLU+LUK+1).EQ.23 ) THEN
                  VARB = 'Aqueous Concentration, '
                  CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,M))
                  CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
                  IDB = INDEX( SPNML(NSP)(1:),'  ') - 1
                  WRITE(IWR,'(2X,A,2X,3A,1PE11.4,$)') 
     &              SPNML(NSP)(1:IDB),VARB(1:IVR),UNTS(1:NCH),
     &              ': ',VAR(NTM,M)
                  INDX = 0
                  IUNM = -3
                  IUNMOL = 1
                  CALL RDUNIT(UNTS,VAR(NTM,M),INDX)
!
!---              Convert aqueous concentration from kmol/m^3 to
!                 mol/m^3  ---
!
                  VAR(NTM,M) = VAR(NTM,M)*1.D+3
                  WRITE(IWR,'(A,1PE11.4,A)') ' (',
     &              VAR(NTM,M),', mol/m^3)'
                ELSEIF( ITYP(NSOLU+LUK+1).EQ.12 ) THEN
                  VARB = 'Dummy Variable, '
                  CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
                  CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
                ELSE
                  VARB = 'Dummy Variable, '
                  CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
                  CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
                ENDIF
!
!---          Gas species  ---
!
              ELSEIF( NSP.GT.(NSPL+NSPS) .AND. 
     &          NSP.LE.(NSPL+NSPS+NSPG) ) THEN
                IF( ITYP(NSOLU+LUK+1).EQ.1
     &            .OR. ITYP(NSOLU+LUK+1).EQ.14
     &            .OR. ITYP(NSOLU+LUK+1).EQ.23 ) THEN
                  VARB = 'Gas Concentration, '
                  CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,M))
                  CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
                  IDB = INDEX( SPNML(NSP)(1:),'  ') - 1
                  WRITE(IWR,'(2X,A,2X,3A,1PE11.4,$)') 
     &              SPNML(NSP)(1:IDB),VARB(1:IVR),UNTS(1:NCH),
     &              ': ',VAR(NTM,M)
                  INDX = 0
                  IUNM = -3
                  IUNMOL = 1
                  CALL RDUNIT(UNTS,VAR(NTM,M),INDX)
!
!---              Convert gas concentration from kmol/m^3 to
!                 mol/m^3  ---
!
                  VAR(NTM,M) = VAR(NTM,M)*1.D+3
                  WRITE(IWR,'(A,1PE11.4,A)') ' (',
     &              VAR(NTM,M),', mol/m^3)'
                ELSEIF( ITYP(NSOLU+LUK+1).EQ.12 ) THEN
                  VARB = 'Dummy Variable, '
                  CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
                  CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
                ELSE
                  VARB = 'Dummy Variable, '
                  CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
                  CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
                ENDIF
!
!---          Nonaqueous-liquid species  ---
!
              ELSEIF( NSP.GT.(NSPL+NSPS+NSPG) .AND. 
     &          NSP.LE.(NSPL+NSPS+NSPG+NSPN) ) THEN
                IF( ITYP(NSOLU+LUK+1).EQ.1
     &            .OR. ITYP(NSOLU+LUK+1).EQ.14
     &            .OR. ITYP(NSOLU+LUK+1).EQ.23 ) THEN
                  VARB = 'Nonaqueous-liquid Concentration, '
                  CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,M))
                  CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
                  IDB = INDEX( SPNML(NSP)(1:),'  ') - 1
                  WRITE(IWR,'(2X,A,2X,3A,1PE11.4,$)') 
     &              SPNML(NSP)(1:IDB),VARB(1:IVR),UNTS(1:NCH),
     &              ': ',VAR(NTM,M)
                  INDX = 0
                  IUNM = -3
                  IUNMOL = 1
                  CALL RDUNIT(UNTS,VAR(NTM,M),INDX)
!
!---              Convert nonaqueous-liquid concentration from 
!                 kmol/m^3 to mol/m^3  ---
!
                  VAR(NTM,M) = VAR(NTM,M)*1.D+3
                  WRITE(IWR,'(A,1PE11.4,A)') ' (',
     &              VAR(NTM,M),', mol/m^3)'
                ELSEIF( ITYP(NSOLU+LUK+1).EQ.12 ) THEN
                  VARB = 'Dummy Variable, '
                  CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
                  CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
                ELSE
                  VARB = 'Dummy Variable, '
                  CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
                  CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
                ENDIF
              ENDIF
            ENDDO
          ENDIF
#endif
!
!---      Check for nonascending boundary condition times  ---
!
          IF( VAR(NTM,1).LT.BCTMO ) THEN
            INDX = 4
            CHMSG = 'Boundary Condition Time Sequencing'
            CALL WRMSGS( INDX )
          ENDIF
          BCTMO = VAR(NTM,1)
  100   CONTINUE
!
!---    Assign values to boundary variables  ---
!
        JGC = 9 + NGC
        DO NTM = 1,IBCMX
          DO M = 1,JGC
            BC(M,NTM,NB) = VAR(NTM,M)
          ENDDO
          IF( IEQC.GT.0 ) THEN
            DO NSL = 1,NSOLU
              BC(NSL+JGC,NTM,NB) = VAR(NTM,NSL+JGC)
            ENDDO
          ENDIF
#ifdef ecke
          IF( ISLC(40).EQ.1 ) THEN
            DO NSPX = 1,IBCSPX(1)
              M = NSOLU+JGC+NSPX
              BC(M,NTM,NB) = VAR(NTM,M)
            ENDDO
          ENDIF
#endif
        ENDDO
!
!---  Assign values to boundary variables  ---
!
        NBCL = 0
        DO K = K1X, K2X
          DO J = J1X, J2X
            DO I = I1X, I2X
              IF( INDEX(ADUM(1:),'file').NE.0 ) THEN
                READ(26,*,END=320) IX,JX,KX,IBCDX
                N = ND(IX,JX,KX)
              ELSE
                N = ND(I,J,K)
                IX = I
                JX = J
                KX = K
              ENDIF
!
!---         Check for boundary applied to inactive nodes  ---
!
              IF( IXP(N).EQ.0 ) THEN
                WRITE(IWR,'(A,I9)') 'Boundary Condition Applied ' //
     &            'to an Inactive Node: ',N
              ENDIF
!
!---          Check for boundary applied to interior surfaces  ---
!
              IERR = 0
              IF( IBCDX.EQ.-3 .AND. KX.NE.1) THEN
                IF( IXP(N-IJFLD).NE.0 .AND. INBS(1,N).EQ.0 ) THEN
                  IERR = 1
                  WRITE(ISC,'(A)') 'Bottom Boundary'
                  WRITE(IWR,'(A)') 'Bottom Boundary'
                ENDIF
              ELSEIF( IBCDX.EQ.-2 .AND. JX.NE.1) THEN
                IF( IXP(N-IFLD).NE.0 .AND. INBS(2,N).EQ.0 ) THEN
                  IERR = 1
                  WRITE(ISC,'(A)') 'South Boundary'
                  WRITE(IWR,'(A)') 'South Boundary'
                ENDIF
              ELSEIF( IBCDX.EQ.-1 .AND. IX.NE.1) THEN
                IF( IXP(N-1).NE.0 .AND. INBS(3,N).EQ.0 ) THEN
                  IERR = 1
                  WRITE(ISC,'(A)') 'West Boundary'
                  WRITE(IWR,'(A)') 'West Boundary'
                ENDIF
              ELSEIF( IBCDX.EQ.1 .AND. IX.NE.IFLD) THEN
                IF( IXP(N+1).NE.0 .AND. INBS(4,N).EQ.0 ) THEN
                  IERR = 1
                  WRITE(ISC,'(A)') 'East Boundary'
                  WRITE(IWR,'(A)') 'East Boundary'
                ENDIF
              ELSEIF( IBCDX.EQ.2 .AND. JX.NE.JFLD) THEN
                IF( IXP(N+IFLD).NE.0 .AND. INBS(5,N).EQ.0 ) THEN
                  IERR = 1
                  WRITE(ISC,'(A)') 'North Boundary'
                  WRITE(IWR,'(A)') 'North Boundary'
                ENDIF
              ELSEIF( IBCDX.EQ.3 .AND. KX.NE.KFLD) THEN
                IF( IXP(N+IJFLD).NE.0 .AND. INBS(6,N).EQ.0 ) THEN
                  IERR = 1
                  WRITE(ISC,'(A)') 'Top Boundary'
                  WRITE(IWR,'(A)') 'Top Boundary'
                ENDIF
              ENDIF
!
!---          Report boundary error  ---
!
              IF( IERR.EQ.1 ) THEN
                WRITE(ISC,'(A,I9)') 'Node = ',N
                WRITE(IWR,'(A,I9)') 'Node = ',N
                WRITE(ISC,'(3(A,I9))') 'I = ',I,' J = ',J,' K = ',K
                WRITE(IWR,'(3(A,I9))') 'I = ',I,' J = ',J,' K = ',K
                INDX = 7
                IMSG = NBC
                CHMSG = 'Boundary Cond. Applied to an Interior Surface'
     &            //': Boundary Number'
                CALL WRMSGS( INDX )
              ENDIF
              NBCL = NBCL + 1
              NBC = NBC + 1
              IF( NBC.GT.LBC ) THEN
                INDX = 5
                CHMSG = 'Number of Boundary Condition Surfaces > '
     &            //'Parameter LBC'
                CALL WRMSGS( INDX )
              ENDIF
              IF( IBR(4,N).GT.N ) THEN
                WRITE(ISC,'(A,I9)') 'Node = ',N
                WRITE(IWR,'(A,I9)') 'Node = ',N
                WRITE(ISC,'(A,I9)') 'Refined Node = ',IBR(4,N)
                WRITE(IWR,'(A,I9)') 'Refined Node = ',IBR(4,N)
                WRITE(ISC,'(3(A,I9))') 'I = ',I,' J = ',J,' K = ',K
                WRITE(IWR,'(3(A,I9))') 'I = ',I,' J = ',J,' K = ',K
                INDX = 7
                IMSG = NBC
                CHMSG = 'Boundary Cond. Applied to an Refined Node'
     &            //': Boundary Number'
                CALL WRMSGS( INDX )
              ENDIF
              IBCN(NBC) = N
              IBCC(NBC) = IBCCX
              IBCD(NBC) = IBCDX
              IBCT(1,NBC) = ITYP(1)
              IBCT(2,NBC) = ITYP(2)
              IBCT(3,NBC) = ITYP(3)
              IBCT(4,NBC) = ITYP(4)
              IBCT(5,NBC) = ITYP(5)
              IF( IEQC.GT.0 ) THEN
                DO NSL = 1,NSOLU
                  IBCT(NSL+5,NBC) = ITYP(NSL+5)
                ENDDO
              ENDIF
#ifdef ecke
              IF( ISLC(40).EQ.1 ) THEN
                IBCT(NSOLU+LUK+1,NBC) = ITYP(NSOLU+LUK+1)
                DO NSP = 1,LSPBC+1
                  IBCSP(NSP,NBC) = IBCSPX(NSP)
                ENDDO
              ENDIF
#endif
              IBCM(NBC) = IBCMX
              IBCIN(NBC) = NB
!
!---          Assign hydraulic gradient type boundary condition
!             for the base surface  ---
!
              IF( ITFX.EQ.8 .AND. NBCL.EQ.1 ) IBCT(2,NBC) = -8
!
!---          Check for double boundary conditions  ---
!
              DO M = 1,NBC-1
                MB = IBCIN(M)
                IF( IBCN(M).EQ.N .AND. IBCD(M).EQ.IBCDX ) THEN
                  IF( (VAR(1,1).GT.BC(1,1,MB) .AND.
     &              VAR(1,1).LT.BC(1,IBCM(M),MB)) .OR.
     &              (VAR(IBCMX,1).GT.BC(1,1,MB) .AND.
     &              VAR(IBCMX,1).LT.BC(1,IBCM(M),MB)) ) THEN
                      INDX = 4
                      CHMSG = 'Multiple Boundary Conditions'
                      CALL WRMSGS( INDX )
                  ENDIF
                ENDIF
              ENDDO
            ENDDO
          ENDDO
        ENDDO
  320   CONTINUE
        IF( INDEX(ADUM(1:),'file').NE.0 ) CLOSE(UNIT=26)
      ENDDO
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of RDBC_EOR group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE RDBIP_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Read binary interaction parameters.
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, October 18, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE FILES
      USE EOR
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      CHARACTER*64 BDUM
      CHARACTER*512 CHDUM
      CHARACTER*5 TAB
      INTEGER IGCX(LNGC),JGCX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//RDBIP_EOR'
      TAB = '     '
!
!---  Write card information to ouput file  ---
!
      CARD = 'Binary Interaction Parameters Card'
      ICD = INDEX( CARD,'  ' )-1
      WRITE(IWR,'(//,3A)') ' ~ ',CARD(1:ICD),': '
!
!---  Read new input line ---
!
      CALL RDINPL( CHDUM )
      CALL LCASE( CHDUM )
      ISTART = 1
!
!---  Create a pointer of petroleum component order  ---
!
      WRITE(IWR,'(/,A)') 'Binary Interaction Parameter Table'
      DO 30 IGC = 1,NGC+2
        VARB = 'Petroleum Component Name: '
        CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
        DO 10 JGC = 1,NGC+2
          IDB = INDEX(GCNM(JGC)(1:),'  ') - 1
          IF( BDUM(1:NCHB).EQ.GCNM(JGC)(1:IDB) ) IGCX(IGC) = JGC
   10   CONTINUE
        DO 20 JGC = 1,IGC-1
          IX = IGCX(IGC)
          JX = IGCX(JGC)
          IF( GCNM(IX).EQ.GCNM(JX) ) THEN
            INDX = 4
            CHMSG = 'Duplicate Petroleum Component Name: ' // GCNM(IX)
            CALL WRMSGS( INDX )
          ENDIF
   20   CONTINUE
        IF( JGC.EQ.1 ) THEN
          WRITE(IWR,'(5A,$)') TAB,TAB,TAB,GCNM(IGC)(1:10),TAB
        ELSEIF( JGC.LT.NGC+2 ) THEN
          WRITE(IWR,'(2A,$)') GCNM(IGC)(1:10),TAB
        ELSE
          WRITE(IWR,'(2A)') GCNM(IGC)(1:10)
        ENDIF
   30 CONTINUE
!
!---  Loop over number of petroleum components  ---
!
      DO 200 IGC = 1,NGC+2
!
!---    Read new input line ---
!
        CALL RDINPL( CHDUM )
        CALL LCASE( CHDUM )
        ISTART = 1
        VARB = 'Petroleum Component Name: '
        CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
        DO 40 JGC = 1,NGC+2
          IDB = INDEX(GCNM(JGC)(1:),'  ') - 1
          IF( BDUM(1:NCHB).EQ.GCNM(JGC)(1:IDB) ) JGCX(IGC) = JGC
   40   CONTINUE
        DO 50 JGC = 1,IGC-1
          IX = JGCX(IGC)
          JX = JGCX(JGC)
          IF( GCNM(IX).EQ.GCNM(JX) ) THEN
            INDX = 4
            CHMSG = 'Duplicate Petroleum Component Name: ' // GCNM(IX)
            CALL WRMSGS( INDX )
          ENDIF
   50   CONTINUE
        WRITE(IWR,'(2A,$)') GCNM(IGC)(1:10),TAB
!
!---    Loop over number of petroleum components  ---
!
        DO 100 JGC = 1,NGC+2
          IX = IGCX(JGC)
          JX = JGCX(IGC)
          ICH = INDEX(GCNM(IX)(1:),'  ')-1
          JCH = INDEX(GCNM(JX)(1:),'  ')-1
          VARB = 'Binary Interaction Parameter: '
     &        // GCNM(IX)(1:ICH) // '-' // GCNM(JX)(1:JCH)
          CALL RDDPR(ISTART,ICOMMA,CHDUM,BIPC(IX,JX))
          IF( IX.EQ.JX .AND. BIPC(IX,JX).GT.EPSL ) THEN
            INDX = 4
            CHMSG = 'Non-Zero Identity Binary Interaction Parameter: ' 
     &        // GCNM(IX)(1:ICH)
            CALL WRMSGS( INDX )
          ENDIF
          IF( BIPC(IX,JX).LT.0.D+0) THEN
            INDX = 4
            CHMSG = 'Negative Binary Interaction Parameter: ' 
     &        // GCNM(IX)(1:ICH) // '-' // GCNM(JX)(1:JCH)
            CALL WRMSGS( INDX )
          ENDIF
          IF( JGC.LT.NGC+2 ) THEN
            WRITE(IWR,'(1PE10.3,A,$)') BIPC(IX,JX),TAB
          ELSE
            WRITE(IWR,'(1PE10.3)') BIPC(IX,JX)
          ENDIF
  100   CONTINUE
  200 CONTINUE
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of RDBIP_EOR group ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE RDBOP_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Black-oil properties card.
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, 14 May 2014
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE FILES
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      CHARACTER*64 ADUM,UNTS
      CHARACTER*512 CHDUM
      CHARACTER*5 TAB
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//RDBOP_EOR'
      TAB = '     '
!
!---  Write card information to ouput file  ---
!
      CARD = 'Black-Oil Properties Card'
      ICD = INDEX( CARD,'  ' )-1
      WRITE(IWR,'(//,3A)') ' ~ ',CARD(1:ICD),': '
!
!---  Read new input line ---
!
      CALL RDINPL( CHDUM )
      CALL LCASE( CHDUM )
      ISTART = 1
!
!---  Read oil specific gravity and gas specific gravity  ---
!
      VARB = 'Oil Specific Gravity Option'
      CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,ADUM)
      IF( INDEX(ADUM(1:),'api').NE.0 ) THEN
        VARB = 'Oil Specific Gravity, API'
        CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(37,2))
        WRITE (IWR,'(2X,A,1PE11.4)') 'Oil Specific Gravity, API: ',
     &    GCPP(37,2)
        GCPP(37,2) = 141.5D+0/(GCPP(37,2)+131.5D+0)
        WRITE (IWR,'(2X,A,1PE11.4)') 'Oil Specific Gravity: ',
     &    GCPP(37,2)
      ELSE       
        VARB = 'Oil Specific Gravity'
        CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(37,2))
        WRITE (IWR,'(2X,A,1PE11.4)') 'Oil Specific Gravity: ',
     &    GCPP(37,2)
        OSGX = (141.5D+0/GCPP(37,2)) - 131.5D+0
        WRITE (IWR,'(2X,A,1PE11.4)') 'Oil Specific Gravity, API: ',OSGX
      ENDIF
      VARB = 'Gas Specific Gravity'
      CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(37,1))
      WRITE (IWR,'(2X,A,1PE11.4)') 'Gas Specific Gravity: ',GCPP(37,1)
      VARB = 'Oil Bubble-Point Pressure'
      CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(38,2))
      CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
      WRITE(IWR,'(2X,2A,$)') VARB(1:IVR),', '
      WRITE(IWR,'(2A,1PE11.4,$)') UNTS(1:NCH),': ',GCPP(38,2)
      INDX = 0
      IUNM = -1
      IUNKG = 1
      IUNS = -2
      CALL RDUNIT(UNTS,GCPP(38,2),INDX)
      WRITE(IWR,'(A,1PE11.4,A)') ' (',GCPP(38,2),', Pa)'
!
!---  Read new input line ---
!
      CALL RDINPL( CHDUM )
      CALL LCASE( CHDUM )
      ISTART = 1
!
!---  Read bubble-point model coefficients, Al-Shammasi, A.A. 2001. 
!     A Review of Bubblepoint Pressure and Oil Formation Volume 
!     Factor Correlations. SPE Res Eval & Eng 4 (2): 146-160. 
!     SPE-71302-PA. http://dx.doi.org/10.2118/71302-PA  ---
!
      VARB = 'Bubble-Point Model'
      CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,ADUM)
      IF( INDEX(ADUM(1:),'al').NE.0 .AND.
     &  INDEX(ADUM(1:),'shammasi').NE.0 ) THEN
        WRITE (IWR,'(2X,A)') 'Black-Oi Bubble-Point Model: Al-Shammasi'
      ELSE
        INDX = 4
        CHMSG = 'Unrecognized Black-Oil Bubble-Point Model: ' // 
     &    ADUM(1:NCH)
        CALL WRMSGS( INDX )        
      ENDIF
      VARB = 'Bubble-Point Coefficient a'
      CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(24,2))
      WRITE (IWR,'(2X,A,1PE11.4)') 'Bubble-Point Coefficient a: ',
     &  GCPP(24,2)
      VARB = 'Bubble-Point Coefficient b'
      CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(25,2))
      WRITE (IWR,'(2X,A,1PE11.4)') 'Bubble-Point Coefficient b: ',
     &  GCPP(25,2)
      VARB = 'Bubble-Point Coefficient c'
      CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(26,2))
      WRITE (IWR,'(2X,A,1PE11.4)') 'Bubble-Point Coefficient c: ',
     &  GCPP(26,2)
!
!---  Read new input line ---
!
      CALL RDINPL( CHDUM )
      CALL LCASE( CHDUM )
      ISTART = 1
!
!---  Read oil formation volume fraction model coefficients, 
!     Al-Shammasi, A.A. 2001. 
!     A Review of Bubblepoint Pressure and Oil Formation Volume 
!     Factor Correlations. SPE Res Eval & Eng 4 (2): 146-160. 
!     SPE-71302-PA. http://dx.doi.org/10.2118/71302-PA  ---
!
      VARB = 'Nonaqueous-Liquid FVF Model'
      CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,ADUM)
      IF( INDEX(ADUM(1:),'al').NE.0 .AND.
     &  INDEX(ADUM(1:),'shammasi').NE.0 ) THEN
        WRITE (IWR,'(2X,A)') 'Black-Oi Bubble-Point ' // 
     &    'Nonaqueous-Liquid FVF Model: Al-Shammasi'
      ELSE
        INDX = 4
        CHMSG = 'Unrecognized Black-Oil Nonaqueous-Liquid FVF ' //
     &    'Model: ' //  ADUM(1:NCH)
        CALL WRMSGS( INDX )        
      ENDIF
      VARB = 'Nonaqueous-Liquid FVF Coefficient a'
      CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(27,2))
      WRITE (IWR,'(2X,A,1PE11.4)') 'Oil FVF Coefficient a: ',
     &  GCPP(27,2)
      VARB = 'Nonaqueous-Liquid FVF Coefficient b'
      CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(28,2))
      WRITE (IWR,'(2X,A,1PE11.4)') 'Oil FVF Coefficient b: ',
     &  GCPP(28,2)
      VARB = 'Nonaqueous-Liquid FVF Coefficient c'
      CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(29,2))
      WRITE (IWR,'(2X,A,1PE11.4)') 'Oil FVF Coefficient c: ',
     &  GCPP(29,2)
      VARB = 'Nonaqueous-Liquid FVF Coefficient d'
      CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(30,2))
      WRITE (IWR,'(2X,A,1PE11.4)') 'Oil FVF Coefficient d: ',
     &  GCPP(30,2)
!
!---  Read new input line ---
!
      CALL RDINPL( CHDUM )
      CALL LCASE( CHDUM )
      ISTART = 1
!
!---  Read oil bubble-point oil viscosity model coefficients, 
!     Elsharkawy, A.M. and Alikhan, A.A. 1999. Models for predicting 
!     the viscosity of Middle East crude oils. Fuel 78 (8): 891–903. 
!     http://dx.doi.org/10.1016/S0016-2361(99)00019-8  ---
!
      VARB = 'Nonaqueous-Liquid Bubble-Point Viscosity Model'
      CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,ADUM)
      IF( INDEX(ADUM(1:),'elsharkawy').NE.0 ) THEN
        WRITE (IWR,'(2X,A)') 'Black-Oi Bubble-Point ' // 
     &    'Nonaqueous-Liquid Viscosity Model: Elsharkawy'
      ELSE
        INDX = 4
        CHMSG = 'Unrecognized Black-Oil Nonaqueous-Liquid ' //
     &    'Bubble-Point Viscosity Model: ' //  ADUM(1:NCH)
        CALL WRMSGS( INDX )        
      ENDIF
      VARB = 'Nonaqueous-Liquid Bubble-Point Viscosity Coefficient a'
      CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(31,2))
      WRITE (IWR,'(2X,A,1PE11.4)') 'Oil Bubble-Point Viscosity ' // 
     &  'Coefficient a: ',GCPP(31,2)
      VARB = 'Nonaqueous-Liquid Bubble-Point Viscosity Coefficient b'
      CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(32,2))
      WRITE (IWR,'(2X,A,1PE11.4)') 'Oil Bubble-Point Viscosity ' // 
     &  'Coefficient g: ',GCPP(32,2)
      VARB = 'Nonaqueous-Liquid Bubble-Point Viscosity Coefficient c'
      CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(33,2))
      WRITE (IWR,'(2X,A,1PE11.4)') 'Oil Bubble-Point Viscosity ' // 
     &  'Coefficient c: ',GCPP(33,2)
      VARB = 'Nonaqueous-Liquid Bubble-Point Viscosity Coefficient d'
      CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(34,2))
      WRITE (IWR,'(2X,A,1PE11.4)') 'Oil Bubble-Point Viscosity ' // 
     &  'Coefficient d: ',GCPP(34,2)
      VARB = 'Nonaqueous-Liquid Bubble-Point Viscosity Coefficient e'
      CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(35,2))
      WRITE (IWR,'(2X,A,1PE11.4)') 'Oil Bubble-Point Viscosity ' // 
     &  'Coefficient e: ',GCPP(35,2)
      VARB = 'Nonaqueous-Liquid Bubble-Point Viscosity Coefficient f'
      CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(36,2))
      WRITE (IWR,'(2X,A,1PE11.4)') 'Oil Bubble-Point Viscosity ' // 
     &  'Coefficient f: ',GCPP(36,2)
!
!---  Read new input line ---
!
      CALL RDINPL( CHDUM )
      CALL LCASE( CHDUM )
      ISTART = 1
!
!---  Read gas Z-factor model coefficients  ---
!
      VARB = 'Gas Z-Factor Model'
      CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,ADUM)
      IF( INDEX(ADUM(1:),'5-term').NE.0 .AND.
     &  INDEX(ADUM(1:),'polynomial').NE.0 ) THEN
        WRITE (IWR,'(2X,A)') 'Gas Z-Factor Model: 5-Term Polynomial'
      ELSE
        INDX = 4
        CHMSG = 'Unrecognized Gas Z-Factor Model: ' //  ADUM(1:NCH)
        CALL WRMSGS( INDX )        
      ENDIF
      VARB = 'Gas Z-Factor Coefficient a'
      CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(24,1))
      WRITE (IWR,'(2X,A,1PE11.4)') 'Gas Z-Factor ' // 
     &  'Coefficient a: ',GCPP(24,1)
      VARB = 'Gas Z-Factor Coefficient b'
      CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(25,1))
      WRITE (IWR,'(2X,A,1PE11.4)') 'Gas Z-Factor ' // 
     &  'Coefficient b: ',GCPP(25,1)
      VARB = 'Gas Z-Factor Coefficient c'
      CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(26,1))
      WRITE (IWR,'(2X,A,1PE11.4)') 'Gas Z-Factor ' // 
     &  'Coefficient c: ',GCPP(26,1)
      VARB = 'Gas Z-Factor Coefficient d'
      CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(27,1))
      WRITE (IWR,'(2X,A,1PE11.4)') 'Gas Z-Factor ' // 
     &  'Coefficient d: ',GCPP(27,1)
      VARB = 'Gas Z-Factor Coefficient e'
      CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(28,1))
      WRITE (IWR,'(2X,A,1PE11.4)') 'Gas Z-Factor ' // 
     &  'Coefficient e: ',GCPP(28,1)
!
!---  Read new input line ---
!
      CALL RDINPL( CHDUM )
      CALL LCASE( CHDUM )
      ISTART = 1
!
!---  Read gas viscosity model coefficients  ---
!
      VARB = 'Gas Viscosity Model'
      CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,ADUM)
      IF( INDEX(ADUM(1:),'3-term').NE.0 .AND.
     &  INDEX(ADUM(1:),'polynomial').NE.0 ) THEN
        WRITE (IWR,'(2X,A)') 'Gas Viscosity Model: 3-Term Polynomial'
      ELSE
        INDX = 4
        CHMSG = 'Unrecognized Gas Viscosity Model: ' //  ADUM(1:NCH)
        CALL WRMSGS( INDX )        
      ENDIF
      VARB = 'Gas Viscosity Coefficient a'
      CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(29,1))
      WRITE (IWR,'(2X,A,1PE11.4)') 'Gas Viscosity ' // 
     &  'Coefficient a: ',GCPP(29,1)
      VARB = 'Gas Viscosity Coefficient b'
      CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(30,1))
      WRITE (IWR,'(2X,A,1PE11.4)') 'Gas Viscosity ' // 
     &  'Coefficient b: ',GCPP(30,1)
      VARB = 'Gas Viscosity Coefficient c'
      CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(31,1))
      WRITE (IWR,'(2X,A,1PE11.4)') 'Gas Viscosity ' // 
     &  'Coefficient c: ',GCPP(31,1)
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of RDBP_EOR group ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE RDIC_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Read input file for initial conditions information.
!
!----------------------Compositional Option----------------------------!
!
!     IC_OPT(1,N) initial condition state option
!     IC_OPT(2,N) 0 total nonaqueous saturation not specified
!     IC_OPT(2,N) 1 total nonaqueous saturation specified
!     IC_OPT(3,N) 0 aqueous saturation not specified
!     IC_OPT(3,N) 1 aqueous saturation specified
!     IC_OPT(4,N) 0 gas mass fraction not specified
!     IC_OPT(4,N) 1 gas mass fraction specified
!     IC_OPT(5,N) 0 nonaqueous liquid mass fraction not specified
!     IC_OPT(5,N) 1 nonaqueous liquid mass fraction specified
!     IC_OPT(6,N) 0 total component mass fraction not specified
!     IC_OPT(6,N) 1 total component mass fraction specified
!     IC_OPT(7,N) CO2 aqueous concentration option
!     IC_OPT(8,N) salt concentration option
!     IC_OPT(9,N) 0 temperature not specified
!     IC_OPT(9,N) 1 temperature specified
!     IC_OPT(10,N) 0 pressure not specified
!     IC_OPT(10,N) 1 pressure specified
!     IC_OPT(11,N) 0 gas mole fraction not specified
!     IC_OPT(11,N) 1 gas mole fraction specified
!     IC_OPT(12,N) 0 nonaqueous liquid mole fraction not specified
!     IC_OPT(12,N) 1 nonaqueous liquid mole fraction specified
!     IC_OPT(13,N) 0 total component mole fraction not specified
!     IC_OPT(13,N) 1 total component mole fraction specified
!
!---    Initial condition state #1
!
!       SL = 1.0
!       SG+SN = 0.0
!       Aqueuous saturated
!
!       Declared variables:
!
!       T - temperature, C
!       PSO - pressure, Pa
!       PVA - aqueous CO2 relative saturation, or
!             aqueous CO2 mass fraction
!       TMS - aqueous salt relative saturation, or
!             aqueous salt mass fraction
!
!---    Initial condition state #2
!
!       SL < 1.0
!       SG+SN > 0.0
!       Three-phase (total petroleum components)
!
!       Declared variables:
!
!       T - temperature, C
!       PSO - pressure, Pa
!       SL - aqueous saturation
!       ZMC - total mole fraction of petroleum components
!       TMS - aqueous salt relative saturation, or
!             aqueous salt mass fraction
!
!---    Initial condition state #3
!
!       SL = 0.0
!       SG+SN = 1.0
!       Nonaqueous gas and liquid saturated (total petroleum components)
!
!       Declared variables:
!
!       T - temperature, C
!       PSO - pressure, Pa
!       PVW - relative saturation of water vapor
!       ZMC - total mole fraction of petroleum components
!
!----------------------Black-Oil Option----------------------------!
!
!     IC_OPT(1,N) initial condition state option
!     IC_OPT(2,N) 0 gas-oil ratio not specified
!     IC_OPT(2,N) 1 gas-oil ratio specified
!     IC_OPT(3,N) 0 aqueous saturation not specified
!     IC_OPT(3,N) 1 aqueous saturation specified
!     IC_OPT(4,N) 0 gas saturation not specified
!     IC_OPT(4,N) 1 gas saturation specified
!     IC_OPT(8,N) salt aqueous concentration option
!     IC_OPT(9,N) 0 temperature not specified
!     IC_OPT(9,N) 1 temperature specified
!     IC_OPT(10,N) 0 pressure not specified
!     IC_OPT(10,N) 1 pressure specified
!     IC_OPT(11,N) 0 relative saturation of water vapor not specified
!     IC_OPT(11,N) 1 relative saturation of water vapor specified
!
!---    Initial condition state #1
!
!       SG = 0.0
!       SL = 1.0
!       SN = 0.0
!       Aqueuous saturated
!
!       Declared variables:
!
!       T - temperature, C
!       PSO - pressure, Pa
!       TMS - aqueous salt relative saturation, or
!             aqueous salt mass fraction
!
!---    Initial condition state #2
!
!       SG = 0.0
!       SL > 0.0
!       SN > 0.0
!       Aqueous and nonaqueous liquid saturated
!
!       Declared variables:
!
!       T - temperature, C
!       PSO - pressure, Pa
!       SL - aqueous saturation
!       POSM - gas-oil ratio
!       TMS - aqueous salt relative saturation, or
!             aqueous salt mass fraction
!
!---    Initial condition state #3
!
!       SG > 0.0
!       SL > 0.0
!       SN > 0.0
!       Three-phase
!
!       Declared variables:
!
!       T - temperature, C
!       PSO - pressure, Pa
!       SL - aqueous saturation
!       SG - gas saturation
!       TMS - aqueous salt relative saturation, or
!             aqueous salt mass fraction
!
!---    Initial condition state #4
!
!       SG = 0.0
!       SL = 0.0
!       SN = 1.0
!       Nonaqueous liquid saturated
!
!       Declared variables:
!
!       T - temperature, C
!       PSO - pressure, Pa
!       POSM - gas-oil ratio
!       PVW - relative saturation of water vapor
!
!
!---    Initial condition state #5
!
!       SG > 0.0
!       SL = 0.0
!       SN > 0.0
!       Nonaqueous liquid and gas saturated
!
!       Declared variables:
!
!       T - temperature, C
!       PSO - pressure, Pa
!       SG - gas saturation
!       PVW - relative saturation of water vapor
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, March 29, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE TRNSPT
      USE SOLTN
      USE REACT
      USE GRID
      USE GLB_PAR
      USE FILES
      USE FDVP
      USE FDVH
      USE FDVGC
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      CHARACTER*64 ADUM,BDUM,FDUM,FMDUM,UNTS
      CHARACTER*24 CHLB(3)
      CHARACTER*512 CHDUM
      INTEGER IDOM(6)
      REAL*8 VAR(5)
      LOGICAL FCHK
!
!----------------------Data Statements---------------------------------!
!
      SAVE CHLB
      DATA CHLB /'X-Direction Gradient, ','Y-Direction Gradient, ',
     &           'Z-Direction Gradient, '/
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//RDIC_EOR'
      IERR = 0
!
!---  Write card information to ouput file  ---
!
      CARD = 'Initial Conditions Card'
      ICD = INDEX( CARD,'  ' )-1
      WRITE(IWR,'(//,3A)') ' ~ ',CARD(1:ICD),': '
!
!---  Restart file will be read for initial conditions  ---
!
      IF( IEO.EQ.2 ) THEN
        INDX = 2
        CALL RDRST(INDX)
      ENDIF
!
!---  Read initial conditions  ---
!
      WRITE(IWR,'(/,A)') 'Initial Condition Variable(s) and Domain(s)'
      ISTART = 1
      CALL RDINPL( CHDUM )
      CALL LCASE( CHDUM )
      VARB = 'Number of Initial Condition Lines: '
      CALL RDINT(ISTART,ICOMMA,CHDUM,NLIN)
      DO 1000 NL = 1,NLIN
        ISTART = 1
        CALL RDINPL( CHDUM )
        CALL LCASE( CHDUM )
        VARB = 'Initial Condition Variable: '
        CALL RDCHR(ISTART,ICOMMA,NCHA,CHDUM,ADUM)
        ICX = 0
        IF( INDEX( ADUM(1:),'overwrite').EQ.0 .AND. IEO.EQ.2 ) GOTO 1000
        IF( INDEX( ADUM(1:),'temperature' ).NE.0 ) THEN
          VARB = 'Initial Temperature'
          IUNK = 1
        ELSEIF( INDEX( ADUM(1:),'pressure' ).NE.0 ) THEN
          VARB = 'Initial Pressure'
          IUNM = -1
          IUNKG = 1
          IUNS = -2
        ELSEIF( INDEX( ADUM(1:),'eclipse' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'gas' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'sat' ).NE.0 ) THEN
          VARB = 'Initial Eclipse Gas Saturation'
        ELSEIF( INDEX( ADUM(1:),'eclipse' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'oil' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'sat' ).NE.0 ) THEN
          VARB = 'Initial Eclipse Oil Saturation'
        ELSEIF( INDEX( ADUM(1:),'aqueous' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'sat' ).NE.0 ) THEN
          VARB = 'Initial Aqueous Saturation'
        ELSEIF( INDEX( ADUM(1:),'gas' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'sat' ).NE.0 .AND. ISLC(68).EQ.0 ) THEN
          VARB = 'Initial Gas Saturation'
        ELSEIF( INDEX( ADUM(1:),'gas' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'oil' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'ratio' ).NE.0 .AND. ISLC(68).EQ.0 ) THEN
          VARB = 'Initial Gas-Oil Ratio'
        ELSEIF( INDEX( ADUM(1:),'nonaqueous' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'liquid' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'mass' ).NE.0 ) THEN
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          VARB = 'Petroleum Component Nonaqueous-Liquid Mass Fraction'
        ELSEIF( INDEX( ADUM(1:),'nonaqueous' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'liquid' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'mole' ).NE.0 ) THEN
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          VARB = 'Petroleum Component Nonaqueous-Liquid Mole Fraction'
        ELSEIF( INDEX( ADUM(1:),'total' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'mass' ).NE.0 ) THEN
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          VARB = 'Petroleum Component Aqueous Mass Fraction'
        ELSEIF( INDEX( ADUM(1:),'total' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'mole' ).NE.0 ) THEN
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          VARB = 'Petroleum Component Aqueous Mole Fraction'
        ELSEIF( INDEX( ADUM(1:),'gas' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'mass' ).NE.0 ) THEN
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          VARB = 'Petroleum Component Gas Mass Fraction'
        ELSEIF( INDEX( ADUM(1:),'gas' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'mole' ).NE.0 ) THEN
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          VARB = 'Petroleum Component Gas Fraction'
        ELSEIF( INDEX( ADUM(1:),'ic1' ).NE.0 ) THEN
          VARB = 'Initial Condition State #1'
          ICX = 1
        ELSEIF( INDEX( ADUM(1:),'ic2' ).NE.0 ) THEN
          VARB = 'Initial Condition State #2'
          ICX = 2
        ELSEIF( INDEX( ADUM(1:),'ic3' ).NE.0 ) THEN
          VARB = 'Initial Condition State #3'
          ICX = 3
        ELSEIF( INDEX( ADUM(1:),'ic4' ).NE.0 .AND. ISLC(68).EQ.0 ) THEN
          VARB = 'Initial Condition State #4'
          ICX = 4
        ELSEIF( INDEX( ADUM(1:),'ic5' ).NE.0 .AND. ISLC(68).EQ.0 ) THEN
          VARB = 'Initial Condition State #5'
          ICX = 5
        ELSEIF( INDEX( ADUM(1:),'ic6' ).NE.0 .AND. ISLC(68).EQ.0 ) THEN
          VARB = 'Initial Condition State #6'
          ICX = 6
        ELSEIF( INDEX( ADUM(1:),'co2' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'rel' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'sat' ).NE.0 ) THEN
          VARB = 'Initial Aqueous-CO2 Relative Saturation'
        ELSEIF( INDEX( ADUM(1:),'co2' ).NE.0 .AND.
     &    ( INDEX( ADUM(1:),'mass' ).NE.0 .OR.
     &    INDEX( ADUM(1:),'frac' ).NE.0 ) ) THEN
          VARB = 'Initial Aqueous-CO2 Mass Fraction'
        ELSEIF( INDEX( ADUM(1:),'gas' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'rel' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'sat' ).NE.0 .AND. ISLC(68).EQ.0 ) THEN
          VARB = 'Initial Aqueous-Gas Relative Saturation'
        ELSEIF( INDEX( ADUM(1:),'gas' ).NE.0 .AND.
     &    ( INDEX( ADUM(1:),'mass' ).NE.0 .OR.
     &    INDEX( ADUM(1:),'frac' ).NE.0 ) .AND. ISLC(68).EQ.0 ) THEN
          VARB = 'Initial Aqueous-Gas Mass Fraction'
        ELSEIF( INDEX( ADUM(1:),'salt' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'rel' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'sat' ).NE.0 ) THEN
          VARB = 'Initial Aqueous-Salt Relative Saturation'
        ELSEIF( INDEX( ADUM(1:),'salt' ).NE.0 .AND.
     &    ( INDEX( ADUM(1:),'mass' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'frac' ).NE.0 ) ) THEN
          VARB = 'Initial Aqueous-Salt Mass Fraction'
        ELSEIF( INDEX( ADUM(1:),'water' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'vapor' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'rel' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'sat' ).NE.0 ) THEN
          VARB = 'Initial Water-Vapor Relative Saturation'
        ELSEIF( INDEX( ADUM(1:),'solute' ).NE.0 ) THEN
          VARB = 'Solute Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          VARB = 'Initial Solute Concentration'
          IUNM = -3
#ifdef ecke
        ELSEIF( INDEX( ADUM(1:),'specie' ).NE.0 ) THEN
          VARB = 'Reactive Species Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          VARB = 'Initial Reactive Species Concentration'
!
!---      Set species units  ---
!
          IUNMOL = 1
          IF( INDEX(ADUM(1:),'gas').NE.0 ) THEN
            IVAR = 4
            IUNM = -3
          ELSEIF( INDEX(ADUM(1:),'aqueous').NE.0 ) THEN
            IF( INDEX(ADUM(1:),'molal').NE.0 ) THEN
              IVAR = 3
              IUNKG = -1
            ELSE
              IVAR = 2
              IUNM = -3
            ENDIF
          ELSE
            IVAR = 1
            IUNM = -3
          ENDIF
          IF( IEO.EQ.2 ) IVAR = IVAR+10
#endif
        ELSE
          INDX = 4
          CHMSG = 'Unrecognized Initial Condition Variable: ' //
     &      ADUM(1:NCHA)
          CALL WRMSGS( INDX )
        ENDIF
        IF( ICX.EQ.0 ) THEN
          CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(1))
          CALL RDCHR(ISTART,ICOMMA,NCHU,CHDUM,UNTS)
        ENDIF
!
!---    Read initial conditions input from an external file  ---
!
        IF( INDEX( ADUM(1:),'file' ).NE.0 ) THEN
          IF( INDEX( ADUM(1:),'binary' ).NE.0 ) THEN
            IF( ICX.EQ.0 ) THEN
              WRITE(IWR,'(2X,3A)') ADUM(1:NCHA),',',UNTS(1:NCHU)
            ENDIF
            CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,FDUM)
            NCHF = INDEX(FDUM,'  ')-1
!
!---        Check for external file  ---
!
            INQUIRE( FILE=FDUM(1:NCHF), FORM=FMDUM, EXIST=FCHK )
            IF( .NOT.FCHK ) THEN
              INDX = 4
              CHMSG = 'Missing Initial Conditions File: '// FDUM(1:NCHF)
              CALL WRMSGS( INDX )
            ELSEIF( FDUM.EQ.'formatted' ) THEN
              INDX = 4
              CHMSG = 'Initial Conditions File Format: '// FDUM(1:NCHF)
              CALL WRMSGS( INDX )
            ENDIF
            OPEN(UNIT=26,FILE=FDUM(1:NCHF),STATUS='OLD',
     &        FORM='UNFORMATTED')
            WRITE(IWR,'(/,2A)') 'Initial Conditions File: ',FDUM(1:NCHF)
          ELSEIF( INDEX( ADUM(1:),'ascii' ).NE.0 ) THEN
            IF( ICX.EQ.0 ) THEN
              WRITE(IWR,'(2X,3A)') ADUM(1:NCHA),',',UNTS(1:NCHU)
            ENDIF
            CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,FDUM)
            NCHF = INDEX(FDUM,'  ')-1
!
!---        Check for external file  ---
!
            INQUIRE( FILE=FDUM(1:NCHF), FORM=FMDUM, EXIST=FCHK )
            IF( .NOT.FCHK ) THEN
              INDX = 4
              CHMSG = 'Missing Initial Conditions File: '// FDUM(1:NCHF)
              CALL WRMSGS( INDX )
            ELSEIF( FDUM.EQ.'unformatted' ) THEN
              INDX = 4
              CHMSG = 'Initial Conditions File Format: '// FDUM(1:NCHF)
              CALL WRMSGS( INDX )
            ENDIF
            OPEN(UNIT=26,FILE=FDUM(1:NCHF),STATUS='OLD',
     &        FORM='FORMATTED')
            WRITE(IWR,'(/,2A)') 'Initial Conditions File: ',FDUM(1:NCHF)
          ELSE
            IF( ICX.EQ.0 ) THEN
              WRITE(IWR,'(2X,4A,1PE11.4)') ADUM(1:NCHA),
     &          ' (Default Value), ',UNTS(1:NCHU),': ',VAR(1)
            ENDIF
            CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,FDUM)
            NCHF = INDEX(FDUM,'  ')-1
!
!---        Check for external file  ---
!
            INQUIRE( FILE=FDUM(1:NCHF), FORM=FMDUM, EXIST=FCHK )
            IF( .NOT.FCHK ) THEN
              INDX = 4
              CHMSG = 'Missing Initial Conditions File: '// FDUM(1:NCHF)
              CALL WRMSGS( INDX )
            ELSEIF( FDUM.EQ.'unformatted' ) THEN
              INDX = 4
              CHMSG = 'Initial Conditions File Format: '// FDUM(1:NCHF)
              CALL WRMSGS( INDX )
            ENDIF
            OPEN(UNIT=26,FILE=FDUM(1:NCHF),STATUS='OLD',
     &        FORM='FORMATTED')
            WRITE(IWR,'(/,2A)') 'Initial Conditions File: ',FDUM(1:NCHF)
            IF( ICX.EQ.0 ) THEN
              INDX = 0
              CALL RDUNIT( UNTS,VAR(1),INDX )
            ENDIF
          ENDIF
!
!---    Read initial conditions according to rock/soil zonations  ---
!
        ELSEIF( INDEX( ADUM(1:),'rock' ).NE.0 .OR.
     &    INDEX( ADUM(1:),'zonation' ).NE.0 ) THEN
          VARB = 'Rock/Soil Name'
          CALL RDCHR(ISTART,ICOMMA,NCHF,CHDUM,FDUM)
!
!---      Search known rock types for a matching type ---
!
          DO 20 M = 1, NROCK
            IF( FDUM .EQ. ROCK(M)) THEN
            IROCK = M
            GOTO 30
          ENDIF
   20     CONTINUE
          INDX = 2
          CHMSG = 'Unrecognized Rock/Soil Type: '//FDUM
          CALL WRMSGS( INDX )
          GOTO 1000
   30     CONTINUE
          IF( ICX.EQ.0 ) THEN
            WRITE(IWR,'(2X,3A,1PE11.4,2A)') ADUM(1:NCHA),UNTS(1:NCHU),
     &        ': ',VAR(1),' Rock/Soil Type: ',FDUM(1:NCHF)
            INDX = 0
            CALL RDUNIT( UNTS,VAR(1),INDX )
          ELSE
            WRITE(IWR,'(2X,3A)') ADUM(1:NCHA),
     &        ': Rock/Soil Type: ',FDUM(1:NCHF)
          ENDIF
!
!---    Read initial condtions input from the input file  ---
!
        ELSE
          IF( ICX.EQ.0 ) THEN
            WRITE(IWR,'(2X,4A,1PE11.4)') ADUM(1:NCHA),', ',
     &        UNTS(1:NCHU),': ',VAR(1)
            INDX = 0
            CALL RDUNIT( UNTS,VAR(1),INDX )
            INDX = 2
            VAR(5) = 1.D+0
            NCH = INDEX( UNTS,'  ' ) - 1
            IF( UNTS(1:NCH).EQ.'f' .OR. UNTS(1:NCH).EQ.'r' ) THEN
              VAR(5) = 1.D+0/1.8D+0
            ELSEIF( UNTS(1:NCH).EQ.'c' .OR. UNTS(1:NCH).EQ.'k' ) THEN
              VAR(5) = 1.D+0
            ELSE
              CALL RDUNIT( UNTS,VAR(5),INDX )
            ENDIF
            VARB = 'Initial Condition Variable Gradient: '
            DO 100 I = 2,4
              CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(I))
              VAR(I) = VAR(I)*VAR(5)
              CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
              WRITE(IWR,'(2X,4A,1PE11.4,$)') CHLB(I-1),', ',UNTS(1:NCH),
     &          ': ',VAR(I)
              INDX = 0
              IUNM = -1
              CALL RDUNIT( UNTS,VAR(I),INDX )
              WRITE(IWR,'(A,1PE11.4,A)') ' (',VAR(I),', 1/m)'
  100       CONTINUE
          ELSE
            WRITE(IWR,'(2X,2A)') 'Initial Condition Option: ',
     &        ADUM(1:NCHA)
          ENDIF
!
!---      Read domain indices  ---
!
          VARB = 'Initial Condition Domain Index: '
          CALL RDINT(ISTART,ICOMMA,CHDUM,IDOM(1))
          IF( IDOM(1).LT.1 .OR. IDOM(1).GT.IFLD ) THEN
            INDX = 7
            CHMSG = 'Out-of-Range Lower I-Index: ' // ADUM(1:NCHA)
            IMSG = IDOM(1)
            CALL WRMSGS( INDX )
          ENDIF
          CALL RDINT(ISTART,ICOMMA,CHDUM,IDOM(2))
          IF( IDOM(2).LT.1 .OR. IDOM(2).GT.IFLD ) THEN
            INDX = 7
            CHMSG = 'Out-of-Range Upper I-Index: ' // ADUM(1:NCHA)
            IMSG = IDOM(2)
            CALL WRMSGS( INDX )
          ENDIF
          CALL RDINT(ISTART,ICOMMA,CHDUM,IDOM(3))
          IF( IDOM(3).LT.1 .OR. IDOM(3).GT.JFLD ) THEN
            INDX = 7
            CHMSG = 'Out-of-Range Lower J-Index: ' // ADUM(1:NCHA)
            IMSG = IDOM(3)
            CALL WRMSGS( INDX )
          ENDIF
          CALL RDINT(ISTART,ICOMMA,CHDUM,IDOM(4))
          IF( IDOM(4).LT.1 .OR. IDOM(4).GT.JFLD ) THEN
            INDX = 7
            CHMSG = 'Out-of-Range Upper J-Index: ' // ADUM(1:NCHA)
            IMSG = IDOM(4)
            CALL WRMSGS( INDX )
          ENDIF
          CALL RDINT(ISTART,ICOMMA,CHDUM,IDOM(5))
          IF( IDOM(5).LT.1 .OR. IDOM(5).GT.KFLD ) THEN
            INDX = 7
            CHMSG = 'Out-of-Range Lower K-Index: ' // ADUM(1:NCHA)
            IMSG = IDOM(5)
            CALL WRMSGS( INDX )
          ENDIF
          CALL RDINT(ISTART,ICOMMA,CHDUM,IDOM(6))
          IF( IDOM(6).LT.1 .OR. IDOM(6).GT.KFLD ) THEN
            INDX = 7
            CHMSG = 'Out-of-Range Upper K-Index: ' // ADUM(1:NCHA)
            IMSG = IDOM(6)
            CALL WRMSGS( INDX )
          ENDIF
        ENDIF
!
!---    Read temperature input  ---
!
        IF( INDEX(ADUM(1:),'temperature').NE.0 ) THEN
          ADDER = 0.D+0
          INDX = 2
          IF( INDEX(ADUM(1:),'file').NE.0 ) THEN
            WRITE(IWR,'(2X,4A)') 'Temperature, ',UNTS(1:NCHU),
     &        'from External File: ',FDUM(1:NCHF)
            IUNK = 1
            IF( INDEX(ADUM(1:),'binary').NE.0 ) THEN
              CALL RDINBS( T,ADDER,UNTS,INDX )
            ELSEIF( INDEX(ADUM(1:),'ascii').NE.0 ) THEN
              CALL RDINAS( T,ADDER,UNTS,INDX )
            ELSE
              CALL RDINFS( T,VAR,ADDER,UNTS,INDX )
            ENDIF
            CLOSE(UNIT=26)
            DO 202 N = 1,NFLD
              IF( IXP(N).EQ.0 ) GOTO 202
              DO NRX = IBR(4,N),IBR(5,N)
                IC_OPT(9,NRX) = 1
              ENDDO
  202       CONTINUE
          ELSEIF( INDEX(ADUM(1:),'rock').NE.0 .OR.
     &      INDEX(ADUM(1:),'zonation').NE.0 )  THEN
            WRITE(IWR,'(2X,4A)') 'Temperature, ',UNTS(1:NCHU),
     &        'from External File: ',FDUM(1:NCHF)
            CALL RDINZS( T,VAR(1),ADDER,IROCK,INDX )
            DO 204 N = 1,NFLD
              IF( IXP(N).EQ.0 ) GOTO 204
              DO NRX = IBR(4,N),IBR(5,N)
                IF( IZ(N).EQ.IROCK ) IC_OPT(9,NRX) = 1
              ENDDO
  204       CONTINUE
          ELSE
            WRITE(IWR,'(2X,2A)') 'Temperature, ',UNTS(1:NCHU)
            CALL RDINIS( T,VAR,ADDER,IDOM,INDX )
            DO K = IDOM(5),IDOM(6)
            DO J = IDOM(3),IDOM(4)
            DO I = IDOM(1),IDOM(2)
              N = ND(I,J,K)
              IF( IXP(N).EQ.0 ) CYCLE
              DO NRX = IBR(4,N),IBR(5,N)
                IC_OPT(9,NRX) = 1
              ENDDO
            ENDDO
            ENDDO
            ENDDO
          ENDIF
!
!---    Read pressure input  ---
!
        ELSEIF( INDEX(ADUM(1:),'pressure').NE.0 ) THEN
          ADDER = -PATM
          INDX = 2
          IF( INDEX(ADUM(1:),'file').NE.0 ) THEN
            WRITE(IWR,'(2X,4A)') 'Pressure, ',
     &        UNTS(1:NCHU),'from External File: ',FDUM(1:NCHF)
            IUNM = -1
            IUNKG = 1
            IUNS = -2
            IF( INDEX(ADUM(1:),'binary').NE.0 ) THEN
              CALL RDINBS( PSO,ADDER,UNTS,INDX )
            ELSEIF( INDEX(ADUM(1:),'ascii').NE.0 ) THEN
              CALL RDINAS( PSO,ADDER,UNTS,INDX )
            ELSE
              CALL RDINFS( PSO,VAR,ADDER,UNTS,INDX )
            ENDIF
            CLOSE(UNIT=26)
            DO 212 N = 1,NFLD
              IF( IXP(N).EQ.0 ) GOTO 212
              DO NRX = IBR(4,N),IBR(5,N)
                IC_OPT(10,NRX) = 1
              ENDDO
  212       CONTINUE
          ELSEIF( INDEX(ADUM(1:),'rock').NE.0 .OR.
     &      INDEX(ADUM(1:),'zonation').NE.0 )  THEN
            WRITE(IWR,'(2X,4A)') 'Pressure, ',
     &        UNTS(1:NCHU),'from External File: ',FDUM(1:NCHF)
            CALL RDINZS( PSO,VAR(1),ADDER,IROCK,INDX )
            DO 214 N = 1,NFLD
              IF( IXP(N).EQ.0 ) GOTO 214
              DO NRX = IBR(4,N),IBR(5,N)
                IF( IZ(N).EQ.IROCK ) IC_OPT(10,NRX) = 1
              ENDDO
  214       CONTINUE
          ELSE
            WRITE(IWR,'(2X,2A)') 'Pressure, ',
     &        UNTS(1:NCHU)
            CALL RDINIS( PSO,VAR,ADDER,IDOM,INDX )
            DO K = IDOM(5),IDOM(6)
            DO J = IDOM(3),IDOM(4)
            DO I = IDOM(1),IDOM(2)
              N = ND(I,J,K)
              IF( IXP(N).EQ.0 ) CYCLE
              DO NRX = IBR(4,N),IBR(5,N)
                IC_OPT(10,NRX) = 1
              ENDDO
            ENDDO
            ENDDO
            ENDDO
          ENDIF
!
!---    Read Eclipse gas saturation input  ---
!
        ELSEIF( INDEX(ADUM(1:),'eclipse').NE.0 .AND.
     &    INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'sat').NE.0 ) THEN
          ADDER = 0.D+0
          INDX = 1
          IF( INDEX(ADUM(1:),'file').NE.0 ) THEN
            WRITE(IWR,'(2X,3A)') 'Eclipse Gas Saturation ',
     &        'from External File: ',FDUM(1:NCHF)
            IF( INDEX(ADUM(1:),'binary').NE.0 ) THEN
              CALL RDINBS( SI,ADDER,UNTS,INDX )
            ELSEIF( INDEX(ADUM(1:),'ascii').NE.0 ) THEN
              CALL RDINAS( SI,ADDER,UNTS,INDX )
            ELSE
              CALL RDINFS( SI,VAR,ADDER,UNTS,INDX )
            ENDIF
            CLOSE(UNIT=26)
          ELSEIF( INDEX(ADUM(1:),'rock').NE.0 .OR.
     &      INDEX(ADUM(1:),'zonation').NE.0 )  THEN
            WRITE(IWR,'(2X,3A)') 'Eclipse Gas Saturation ',
     &        'from External File: ',FDUM(1:NCHF)
            CALL RDINZS( SI,VAR(1),ADDER,IROCK,INDX )
          ELSE
            WRITE(IWR,'(2X,A)') 'Eclipse Gas Saturation'
            CALL RDINIS( SI,VAR,ADDER,IDOM,INDX )
          ENDIF
!
!---    Read Eclipse oil saturation input  ---
!
        ELSEIF( INDEX(ADUM(1:),'eclipse').NE.0 .AND.
     &    INDEX(ADUM(1:),'oil').NE.0 .AND.
     &    INDEX(ADUM(1:),'sat').NE.0 ) THEN
          ADDER = 0.D+0
          INDX = 2
          IF( INDEX(ADUM(1:),'file').NE.0 ) THEN
            WRITE(IWR,'(2X,3A)') 'Eclipse Oil Saturation ',
     &        'from External File: ',FDUM(1:NCHF)
            IF( INDEX(ADUM(1:),'binary').NE.0 ) THEN
              CALL RDINBS( SI,ADDER,UNTS,INDX )
            ELSEIF( INDEX(ADUM(1:),'ascii').NE.0 ) THEN
              CALL RDINAS( SI,ADDER,UNTS,INDX )
            ELSE
              CALL RDINFS( SI,VAR,ADDER,UNTS,INDX )
            ENDIF
            CLOSE(UNIT=26)
          ELSEIF( INDEX(ADUM(1:),'rock').NE.0 .OR.
     &      INDEX(ADUM(1:),'zonation').NE.0 )  THEN
            WRITE(IWR,'(2X,3A)') 'Eclipse Oil Saturation ',
     &        'from External File: ',FDUM(1:NCHF)
            CALL RDINZS( SI,VAR(1),ADDER,IROCK,INDX )
          ELSE
            WRITE(IWR,'(2X,A)') 'Eclipse Oil Saturation'
            CALL RDINIS( SI,VAR,ADDER,IDOM,INDX )
          ENDIF
!
!---    Read gas-oil ratio input  ---
!
        ELSEIF( INDEX( ADUM(1:),'gas' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'oil' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'ratio' ).NE.0 ) THEN
          ADDER = 0.D+0
          INDX = 2
          IF( INDEX(ADUM(1:),'file').NE.0 ) THEN
            WRITE(IWR,'(2X,4A)') 'Gas-Oil Ratio, ',
     &        UNTS(1:NCHU),'from External File: ',FDUM(1:NCHF)
            IF( INDEX(ADUM(1:),'binary').NE.0 ) THEN
              CALL RDINBS( POSM,ADDER,UNTS,INDX )
            ELSEIF( INDEX(ADUM(1:),'ascii').NE.0 ) THEN
              CALL RDINAS( POSM,ADDER,UNTS,INDX )
            ELSE
              CALL RDINFS( POSM,VAR,ADDER,UNTS,INDX )
            ENDIF
            CLOSE(UNIT=26)
            DO 222 N = 1,NFLD
              IF( IXP(N).EQ.0 ) GOTO 222
              DO NRX = IBR(4,N),IBR(5,N)
                IC_OPT(2,NRX) = 1
              ENDDO
  222       CONTINUE
          ELSEIF( INDEX(ADUM(1:),'rock').NE.0 .OR.
     &      INDEX(ADUM(1:),'zonation').NE.0 )  THEN
            WRITE(IWR,'(2X,4A)') 'Gas-Oil Ratio, ',
     &        UNTS(1:NCHU),'from External File: ',FDUM(1:NCHF)
            CALL RDINZS( POSM,VAR(1),ADDER,IROCK,INDX )
            DO 224 N = 1,NFLD
              IF( IXP(N).EQ.0 ) GOTO 224
              DO NRX = IBR(4,N),IBR(5,N)
                IF( IZ(N).EQ.IROCK ) IC_OPT(2,NRX) = 1
              ENDDO
  224       CONTINUE
          ELSE
            WRITE(IWR,'(2X,2A)') 'Gas-Oil Ratio, ',
     &        UNTS(1:NCHU)
            CALL RDINIS( POSM,VAR,ADDER,IDOM,INDX )
            DO K = IDOM(5),IDOM(6)
            DO J = IDOM(3),IDOM(4)
            DO I = IDOM(1),IDOM(2)
              N = ND(I,J,K)
              IF( IXP(N).EQ.0 ) CYCLE
              DO NRX = IBR(4,N),IBR(5,N)
                IC_OPT(2,NRX) = 1
              ENDDO
            ENDDO
            ENDDO
            ENDDO
          ENDIF
!
!---    Read total (gas+liquid) nonaqueous saturation  ---
!
        ELSEIF( INDEX( ADUM(1:),'total' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'nonaqueous' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'sat' ).NE.0 ) THEN
          ADDER = 0.D+0
          INDX = 2
          IF( INDEX(ADUM(1:),'file').NE.0 ) THEN
            WRITE(IWR,'(2X,3A)') 'Total Nonaqueous Saturation ',
     &        'from External File: ',FDUM(1:NCHF)
            IF( INDEX(ADUM(1:),'binary').NE.0 ) THEN
              CALL RDINBS( SN,ADDER,UNTS,INDX )
            ELSEIF( INDEX(ADUM(1:),'ascii').NE.0 ) THEN
              CALL RDINAS( SN,ADDER,UNTS,INDX )
            ELSE
              CALL RDINFS( SN,VAR,ADDER,UNTS,INDX )
            ENDIF
            DO 232 N = 1,NFLD
              IF( IXP(N).EQ.0 ) GOTO 232
              DO NRX = IBR(4,N),IBR(5,N)
                IC_OPT(2,NRX) = 1
              ENDDO
  232       CONTINUE
            CLOSE(UNIT=26)
          ELSEIF( INDEX(ADUM(1:),'rock').NE.0 .OR.
     &      INDEX(ADUM(1:),'zonation').NE.0 )  THEN
            WRITE(IWR,'(2X,3A)') 'Total Nonaqueous Saturation ',
     &        'from External File: ',FDUM(1:NCHF)
            CALL RDINZS( SN,VAR(1),ADDER,IROCK,INDX )
            DO 234 N = 1,NFLD
              IF( IXP(N).EQ.0 ) GOTO 234
              DO NRX = IBR(4,N),IBR(5,N)
                IF( IZ(N).EQ.IROCK ) IC_OPT(2,NRX) = 1
              ENDDO
  234       CONTINUE
          ELSE
            WRITE(IWR,'(2X,A)') 'Total Nonaqueous Saturation'
            CALL RDINIS( SN,VAR,ADDER,IDOM,INDX )
            DO K = IDOM(5),IDOM(6)
            DO J = IDOM(3),IDOM(4)
            DO I = IDOM(1),IDOM(2)
              N = ND(I,J,K)
              IF( IXP(N).EQ.0 ) CYCLE
              DO NRX = IBR(4,N),IBR(5,N)
                IC_OPT(2,NRX) = 1
              ENDDO
            ENDDO
            ENDDO
            ENDDO
          ENDIF
!
!---    Read aqueous saturation  ---
!
        ELSEIF( INDEX( ADUM(1:),'aqueous' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'sat' ).NE.0 ) THEN
          ADDER = 0.D+0
          INDX = 2
          IF( INDEX(ADUM(1:),'file').NE.0 ) THEN
            WRITE(IWR,'(2X,3A)') 'Aqueous Saturation ',
     &        'from External File: ',FDUM(1:NCHF)
            IF( INDEX(ADUM(1:),'binary').NE.0 ) THEN
              CALL RDINBS( SL,ADDER,UNTS,INDX )
            ELSEIF( INDEX(ADUM(1:),'ascii').NE.0 ) THEN
              CALL RDINAS( SL,ADDER,UNTS,INDX )
            ELSE
              CALL RDINFS( SL,VAR,ADDER,UNTS,INDX )
            ENDIF
            DO 242 N = 1,NFLD
              IF( IXP(N).EQ.0 ) GOTO 242
              DO NRX = IBR(4,N),IBR(5,N)
                IC_OPT(3,NRX) = 1
              ENDDO
  242       CONTINUE
            CLOSE(UNIT=26)
          ELSEIF( INDEX(ADUM(1:),'rock').NE.0 .OR.
     &      INDEX(ADUM(1:),'zonation').NE.0 )  THEN
            WRITE(IWR,'(2X,3A)') 'Aqueous Saturation ',
     &        'from External File: ',FDUM(1:NCHF)
            CALL RDINZS( SL,VAR(1),ADDER,IROCK,INDX )
            DO 244 N = 1,NFLD
              IF( IXP(N).EQ.0 ) GOTO 244
              DO NRX = IBR(4,N),IBR(5,N)
                IF( IZ(N).EQ.IROCK ) IC_OPT(3,NRX) = 1
              ENDDO
  244       CONTINUE
          ELSE
            WRITE(IWR,'(2X,A)') 'Aqueous Saturation'
            CALL RDINIS( SL,VAR,ADDER,IDOM,INDX )
            DO K = IDOM(5),IDOM(6)
            DO J = IDOM(3),IDOM(4)
            DO I = IDOM(1),IDOM(2)
              N = ND(I,J,K)
              IF( IXP(N).EQ.0 ) CYCLE
              DO NRX = IBR(4,N),IBR(5,N)
                IC_OPT(3,NRX) = 1
              ENDDO
            ENDDO
            ENDDO
            ENDDO
          ENDIF
!
!---    Read gas saturation  ---
!
        ELSEIF( INDEX( ADUM(1:),'gas' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'sat' ).NE.0 ) THEN
          ADDER = 0.D+0
          INDX = 2
          IF( INDEX(ADUM(1:),'file').NE.0 ) THEN
            WRITE(IWR,'(2X,3A)') 'Gas Saturation ',
     &        'from External File: ',FDUM(1:NCHF)
            IF( INDEX(ADUM(1:),'binary').NE.0 ) THEN
              CALL RDINBS( SG,ADDER,UNTS,INDX )
            ELSEIF( INDEX(ADUM(1:),'ascii').NE.0 ) THEN
              CALL RDINAS( SG,ADDER,UNTS,INDX )
            ELSE
              CALL RDINFS( SG,VAR,ADDER,UNTS,INDX )
            ENDIF
            DO 252 N = 1,NFLD
              IF( IXP(N).EQ.0 ) GOTO 252
              DO NRX = IBR(4,N),IBR(5,N)
                IC_OPT(4,NRX) = 1
              ENDDO
  252       CONTINUE
            CLOSE(UNIT=26)
          ELSEIF( INDEX(ADUM(1:),'rock').NE.0 .OR.
     &      INDEX(ADUM(1:),'zonation').NE.0 )  THEN
            WRITE(IWR,'(2X,3A)') 'Gas Saturation ',
     &        'from External File: ',FDUM(1:NCHF)
            CALL RDINZS( SG,VAR(1),ADDER,IROCK,INDX )
            DO 254 N = 1,NFLD
              IF( IXP(N).EQ.0 ) GOTO 254
              DO NRX = IBR(4,N),IBR(5,N)
                IF( IZ(N).EQ.IROCK ) IC_OPT(4,NRX) = 1
              ENDDO
  254       CONTINUE
          ELSE
            WRITE(IWR,'(2X,A)') 'Gas Saturation'
            CALL RDINIS( SG,VAR,ADDER,IDOM,INDX )
            DO K = IDOM(5),IDOM(6)
            DO J = IDOM(3),IDOM(4)
            DO I = IDOM(1),IDOM(2)
              N = ND(I,J,K)
              IF( IXP(N).EQ.0 ) CYCLE
              DO NRX = IBR(4,N),IBR(5,N)
                IC_OPT(4,NRX) = 1
              ENDDO
            ENDDO
            ENDDO
            ENDDO
          ENDIF
!
!---    Read petroleum component gas mass fraction  ---
!
        ELSEIF( INDEX( ADUM(1:),'gas' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'mass' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'fraction' ).NE.0 ) THEN
          IGCX = 0
          DO 260 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IGCX = IGC
  260     CONTINUE
          IF( IGCX.EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Petroleum Component Name: '
     &        // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
          ADDER = 0.D+0
          INDX = 2
          IF( INDEX(ADUM(1:),'file').NE.0 ) THEN
            WRITE(IWR,'(2X,4A)') 'Petroleum Component: ',BDUM(1:NCHB),
     &        ', Gas Mass Fraction from External File: ',FDUM(1:NCHF)
            IUNK = 1
            IF( INDEX(ADUM(1:),'binary').NE.0 ) THEN
              CALL RDINBGC( XGC,ADDER,UNTS,INDX,IGCX )
            ELSEIF( INDEX(ADUM(1:),'ascii').NE.0 ) THEN
              CALL RDINAGC( XGC,ADDER,UNTS,INDX,IGCX )
            ELSE
              CALL RDINFGC( XGC,VAR,ADDER,UNTS,INDX,IGCX )
            ENDIF
            DO 262 N = 1,NFLD
              IF( IXP(N).EQ.0 ) GOTO 262
              DO NRX = IBR(4,N),IBR(5,N)
                IC_OPT(4,NRX) = 1
              ENDDO
  262       CONTINUE
            CLOSE(UNIT=26)
          ELSEIF( INDEX(ADUM(1:),'rock').NE.0 .OR.
     &      INDEX(ADUM(1:),'zonation').NE.0 )  THEN
            WRITE(IWR,'(2X,4A)') 'Petroleum Component: ',BDUM(1:NCHB),
     &        ', Gas Mass Fraction from External File: ',FDUM(1:NCHF)
            CALL RDINZGC( XGC,VAR(1),ADDER,IROCK,INDX,IGCX )
            DO 264 N = 1,NFLD
              IF( IXP(N).EQ.0 ) GOTO 264
              DO NRX = IBR(4,N),IBR(5,N)
                IF( IZ(N).EQ.IROCK ) IC_OPT(4,NRX) = 1
              ENDDO
  264       CONTINUE
          ELSE
            WRITE(IWR,'(2X,4A)') 'Petroleum Component: ',BDUM(1:NCHB),
     &        ', Gas Mass Fraction'
            CALL RDINIGC( XGC,VAR,ADDER,IDOM,INDX,IGCX )
            DO K = IDOM(5),IDOM(6)
            DO J = IDOM(3),IDOM(4)
            DO I = IDOM(1),IDOM(2)
              N = ND(I,J,K)
              IF( IXP(N).EQ.0 ) CYCLE
              DO NRX = IBR(4,N),IBR(5,N)
                IC_OPT(4,NRX) = 1
              ENDDO
            ENDDO
            ENDDO
            ENDDO
          ENDIF
!
!---    Read petroleum component gas mole fraction  ---
!
        ELSEIF( INDEX( ADUM(1:),'gas' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'mole' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'fraction' ).NE.0 ) THEN
          IGCX = 0
          DO 270 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IGCX = IGC
  270     CONTINUE
          IF( IGCX.EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Petroleum Component Name: '
     &        // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
          ADDER = 0.D+0
          INDX = 2
          IF( INDEX(ADUM(1:),'file').NE.0 ) THEN
            WRITE(IWR,'(2X,4A)') 'Petroleum Component: ',BDUM(1:NCHB),
     &        ', Gas Mole Fraction from External File: ',FDUM(1:NCHF)
            IUNK = 1
            IF( INDEX(ADUM(1:),'binary').NE.0 ) THEN
              CALL RDINBGC( XMGC,ADDER,UNTS,INDX,IGCX )
            ELSEIF( INDEX(ADUM(1:),'ascii').NE.0 ) THEN
              CALL RDINAGC( XMGC,ADDER,UNTS,INDX,IGCX )
            ELSE
              CALL RDINFGC( XMGC,VAR,ADDER,UNTS,INDX,IGCX )
            ENDIF
            DO 272 N = 1,NFLD
              IF( IXP(N).EQ.0 ) GOTO 272
              DO NRX = IBR(4,N),IBR(5,N)
                IC_OPT(11,NRX) = 1
              ENDDO
  272       CONTINUE
            CLOSE(UNIT=26)
          ELSEIF( INDEX(ADUM(1:),'rock').NE.0 .OR.
     &      INDEX(ADUM(1:),'zonation').NE.0 )  THEN
            WRITE(IWR,'(2X,4A)') 'Petroleum Component: ',BDUM(1:NCHB),
     &        ', Gas Mole Fraction from External File: ',FDUM(1:NCHF)
            CALL RDINZGC( XMGC,VAR(1),ADDER,IROCK,INDX,IGCX )
            DO 274 N = 1,NFLD
              IF( IXP(N).EQ.0 ) GOTO 274
              DO NRX = IBR(4,N),IBR(5,N)
                IF( IZ(N).EQ.IROCK ) IC_OPT(11,NRX) = 1
              ENDDO
  274       CONTINUE
          ELSE
            WRITE(IWR,'(2X,4A)') 'Petroleum Component: ',BDUM(1:NCHB),
     &        ', Gas Mole Fraction'
            CALL RDINIGC( XMGC,VAR,ADDER,IDOM,INDX,IGCX )
            DO K = IDOM(5),IDOM(6)
            DO J = IDOM(3),IDOM(4)
            DO I = IDOM(1),IDOM(2)
              N = ND(I,J,K)
              IF( IXP(N).EQ.0 ) CYCLE
              DO NRX = IBR(4,N),IBR(5,N)
                IC_OPT(11,NRX) = 1
              ENDDO
            ENDDO
            ENDDO
            ENDDO
          ENDIF
!
!---    Read petroleum component nonaqueous liquid mass fraction  ---
!
        ELSEIF( INDEX( ADUM(1:),'nonaqueous' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'liquid' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'mass' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'fraction' ).NE.0 ) THEN
          IGCX = 0
          DO 280 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IGCX = IGC
  280     CONTINUE
          IF( IGCX.EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Petroleum Component Name: '
     &        // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
          ADDER = 0.D+0
          INDX = 2
          IF( INDEX(ADUM(1:),'file').NE.0 ) THEN
            WRITE(IWR,'(2X,5A)') 'Petroleum Component: ',BDUM(1:NCHB),
     &        ', Nonaqueous-Liquid Mass Fraction ',
     &        'from External File: ',FDUM(1:NCHF)
            IUNK = 1
            IF( INDEX(ADUM(1:),'binary').NE.0 ) THEN
              CALL RDINBGC( XNC,ADDER,UNTS,INDX,IGCX )
            ELSEIF( INDEX(ADUM(1:),'ascii').NE.0 ) THEN
              CALL RDINAGC( XNC,ADDER,UNTS,INDX,IGCX )
            ELSE
              CALL RDINFGC( XNC,VAR,ADDER,UNTS,INDX,IGCX )
            ENDIF
            DO 282 N = 1,NFLD
              IF( IXP(N).EQ.0 ) GOTO 282
              DO NRX = IBR(4,N),IBR(5,N)
                IC_OPT(5,NRX) = 1
              ENDDO
  282       CONTINUE
            CLOSE(UNIT=26)
          ELSEIF( INDEX(ADUM(1:),'rock').NE.0 .OR.
     &      INDEX(ADUM(1:),'zonation').NE.0 )  THEN
            WRITE(IWR,'(2X,5A)') 'Petroleum Component: ',BDUM(1:NCHB),
     &        ', Nonaqueous-Liquid Mass Fraction ',
     &        'from External File: ',FDUM(1:NCHF)
            CALL RDINZGC( XNC,VAR(1),ADDER,IROCK,INDX,IGCX )
            DO 284 N = 1,NFLD
              IF( IXP(N).EQ.0 ) GOTO 284
              DO NRX = IBR(4,N),IBR(5,N)
                IF( IZ(N).EQ.IROCK ) IC_OPT(5,NRX) = 1
              ENDDO
  284       CONTINUE
          ELSE
            WRITE(IWR,'(2X,3A)') 'Petroleum Component: ',BDUM(1:NCHB),
     &        ', Nonaqueous-Liquid Mass Fraction'
            CALL RDINIGC( XNC,VAR,ADDER,IDOM,INDX,IGCX )
            DO K = IDOM(5),IDOM(6)
            DO J = IDOM(3),IDOM(4)
            DO I = IDOM(1),IDOM(2)
              N = ND(I,J,K)
              IF( IXP(N).EQ.0 ) CYCLE
              DO NRX = IBR(4,N),IBR(5,N)
                IC_OPT(5,NRX) = 1
              ENDDO
            ENDDO
            ENDDO
            ENDDO
          ENDIF
!
!---    Read petroleum component nonaqueous liquid mole fraction  ---
!
        ELSEIF( INDEX( ADUM(1:),'nonaqueous' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'liquid' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'mole' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'fraction' ).NE.0 ) THEN
          IGCX = 0
          DO 290 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IGCX = IGC
  290     CONTINUE
          IF( IGCX.EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Petroleum Component Name: '
     &        // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
          ADDER = 0.D+0
          INDX = 2
          IF( INDEX(ADUM(1:),'file').NE.0 ) THEN
            WRITE(IWR,'(2X,5A)') 'Petroleum Component: ',BDUM(1:NCHB),
     &        ', Nonaqueous Liquid Mole Fraction ',
     &        'from External File: ',FDUM(1:NCHF)
            IUNK = 1
            IF( INDEX(ADUM(1:),'binary').NE.0 ) THEN
              CALL RDINBGC( XMNC,ADDER,UNTS,INDX,IGCX )
            ELSEIF( INDEX(ADUM(1:),'ascii').NE.0 ) THEN
              CALL RDINAGC( XMNC,ADDER,UNTS,INDX,IGCX )
            ELSE
              CALL RDINFGC( XMNC,VAR,ADDER,UNTS,INDX,IGCX )
            ENDIF
            DO 292 N = 1,NFLD
              IF( IXP(N).EQ.0 ) GOTO 292
              DO NRX = IBR(4,N),IBR(5,N)
                IC_OPT(12,NRX) = 1
              ENDDO
  292       CONTINUE
            CLOSE(UNIT=26)
          ELSEIF( INDEX(ADUM(1:),'rock').NE.0 .OR.
     &      INDEX(ADUM(1:),'zonation').NE.0 )  THEN
            CALL RDINZGC( XMNC,VAR(1),ADDER,IROCK,INDX,IGCX )
            WRITE(IWR,'(2X,5A)') 'Petroleum Component: ',BDUM(1:NCHB),
     &        ', Nonaqueous Liquid Mole Fraction ',
     &        'from External File: ',FDUM(1:NCHF)
            DO 294 N = 1,NFLD
              IF( IXP(N).EQ.0 ) GOTO 294
              DO NRX = IBR(4,N),IBR(5,N)
                IF( IZ(N).EQ.IROCK ) IC_OPT(12,NRX) = 1
              ENDDO
  294       CONTINUE
          ELSE
            WRITE(IWR,'(2X,3A)') 'Petroleum Component: ',BDUM(1:NCHB),
     &        ', Nonaqueous Liquid Mole Fraction'
            CALL RDINIGC( XMNC,VAR,ADDER,IDOM,INDX,IGCX )
            DO K = IDOM(5),IDOM(6)
            DO J = IDOM(3),IDOM(4)
            DO I = IDOM(1),IDOM(2)
              N = ND(I,J,K)
              IF( IXP(N).EQ.0 ) CYCLE
              DO NRX = IBR(4,N),IBR(5,N)
                IC_OPT(12,NRX) = 1
              ENDDO
            ENDDO
            ENDDO
            ENDDO
          ENDIF
!
!---    Read petroleum component total mass fraction  ---
!
        ELSEIF( INDEX( ADUM(1:),'total' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'mass' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'fraction' ).NE.0 ) THEN
          IGCX = 0
          DO 300 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IGCX = IGC
  300     CONTINUE
          IF( IGCX.EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Petroleum Component Name: '
     &        // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
          ADDER = 0.D+0
          INDX = 2
          IF( INDEX(ADUM(1:),'file').NE.0 ) THEN
            WRITE(IWR,'(2X,5A)') 'Petroleum Component: ',BDUM(1:NCHB),
     &        ', Total Mass Fraction ',
     &        'from External File: ',FDUM(1:NCHF)
            IUNK = 1
            IF( INDEX(ADUM(1:),'binary').NE.0 ) THEN
              CALL RDINBGC( ZMC,ADDER,UNTS,INDX,IGCX )
            ELSEIF( INDEX(ADUM(1:),'ascii').NE.0 ) THEN
              CALL RDINAGC( ZMC,ADDER,UNTS,INDX,IGCX )
            ELSE
              CALL RDINFGC( ZMC,VAR,ADDER,UNTS,INDX,IGCX )
            ENDIF
            DO 302 N = 1,NFLD
              IF( IXP(N).EQ.0 ) GOTO 302
              DO NRX = IBR(4,N),IBR(5,N)
                IC_OPT(6,NRX) = 1
              ENDDO
  302       CONTINUE
            CLOSE(UNIT=26)
          ELSEIF( INDEX(ADUM(1:),'rock').NE.0 .OR.
     &      INDEX(ADUM(1:),'zonation').NE.0 )  THEN
            WRITE(IWR,'(2X,5A)') 'Petroleum Component: ',BDUM(1:NCHB),
     &        ', Total Mass Fraction ',
     &        'from External File: ',FDUM(1:NCHF)
            CALL RDINZGC( ZMC,VAR(1),ADDER,IROCK,INDX,IGCX )
            DO 304 N = 1,NFLD
              IF( IXP(N).EQ.0 ) GOTO 304
              DO NRX = IBR(4,N),IBR(5,N)
                IF( IZ(N).EQ.IROCK ) IC_OPT(6,NRX) = 1
              ENDDO
  304       CONTINUE
          ELSE
            WRITE(IWR,'(2X,3A)') 'Petroleum Component: ',BDUM(1:NCHB),
     &        ', Total Mass Fraction'
            CALL RDINIGC( ZMC,VAR,ADDER,IDOM,INDX,IGCX )
            DO K = IDOM(5),IDOM(6)
            DO J = IDOM(3),IDOM(4)
            DO I = IDOM(1),IDOM(2)
              N = ND(I,J,K)
              IF( IXP(N).EQ.0 ) CYCLE
              DO NRX = IBR(4,N),IBR(5,N)
                IC_OPT(6,NRX) = 1
              ENDDO
            ENDDO
            ENDDO
            ENDDO
          ENDIF
!
!---    Read petroleum component total mole fraction  ---
!
        ELSEIF( INDEX( ADUM(1:),'total' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'mole' ).NE.0 .AND.
     &    INDEX( ADUM(1:),'fraction' ).NE.0 ) THEN
          IGCX = 0
          DO 310 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IGCX = IGC
  310     CONTINUE
          IF( IGCX.EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Petroleum Component Name: '
     &        // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
          ADDER = 0.D+0
          INDX = 2
          IF( INDEX(ADUM(1:),'file').NE.0 ) THEN
            WRITE(IWR,'(2X,5A)') 'Petroleum Component: ',BDUM(1:NCHB),
     &        ', Total Mole Fraction ',
     &        'from External File: ',FDUM(1:NCHF)
            IUNK = 1
            IF( INDEX(ADUM(1:),'binary').NE.0 ) THEN
              CALL RDINBGC( ZMC,ADDER,UNTS,INDX,IGCX )
            ELSEIF( INDEX(ADUM(1:),'ascii').NE.0 ) THEN
              CALL RDINAGC( ZMC,ADDER,UNTS,INDX,IGCX )
            ELSE
              CALL RDINFGC( ZMC,VAR,ADDER,UNTS,INDX,IGCX )
            ENDIF
            DO 312 N = 1,NFLD
              IF( IXP(N).EQ.0 ) GOTO 312
              DO NRX = IBR(4,N),IBR(5,N)
                IC_OPT(13,NRX) = 1
              ENDDO
  312       CONTINUE
            CLOSE(UNIT=26)
          ELSEIF( INDEX(ADUM(1:),'rock').NE.0 .OR.
     &      INDEX(ADUM(1:),'zonation').NE.0 )  THEN
            CALL RDINZGC( ZMC,VAR(1),ADDER,IROCK,INDX,IGCX )
            WRITE(IWR,'(2X,5A)') 'Petroleum Component: ',BDUM(1:NCHB),
     &        ', Total Mole Fraction ',
     &        'from External File: ',FDUM(1:NCHF)
            DO 314 N = 1,NFLD
              IF( IXP(N).EQ.0 ) GOTO 314
              DO NRX = IBR(4,N),IBR(5,N)
                IF( IZ(N).EQ.IROCK ) IC_OPT(13,NRX) = 1
              ENDDO
  314       CONTINUE
          ELSE
            WRITE(IWR,'(2X,3A)') 'Petroleum Component: ',BDUM(1:NCHB),
     &        ', Total Mole Fraction'
            CALL RDINIGC( ZMC,VAR,ADDER,IDOM,INDX,IGCX )
            DO K = IDOM(5),IDOM(6)
            DO J = IDOM(3),IDOM(4)
            DO I = IDOM(1),IDOM(2)
              N = ND(I,J,K)
              IF( IXP(N).EQ.0 ) CYCLE
              DO NRX = IBR(4,N),IBR(5,N)
                IC_OPT(13,NRX) = 1
              ENDDO
            ENDDO
            ENDDO
            ENDDO
          ENDIF
!
!---    Read initial condition state, using the ice pressure
!       variable as a dummy  ---
!
        ELSEIF( INDEX(ADUM(1:),'ic').NE.0 .AND.
     &    ICX.GE.1 .AND. ICX.LE.10 ) THEN
          ADDER = 0.D+0
          INDX = 2
          IF( INDEX(ADUM(1:),'file').NE.0 ) THEN
            WRITE(IWR,'(2X,2A)') 'Initial Condition State ' //
     &        'from External File: ',FDUM(1:NCHF)
            IF( INDEX(ADUM(1:),'binary').NE.0 ) THEN
              CALL RDINBS( PI,ADDER,UNTS,INDX )
            ELSEIF( INDEX(ADUM(1:),'ascii').NE.0 ) THEN
              CALL RDINAS( PI,ADDER,UNTS,INDX )
            ELSE
              CALL RDINFS( PI,VAR,ADDER,UNTS,INDX )
            ENDIF
            DO 322 N = 1,NFLD
              IF( IXP(N).EQ.0 ) GOTO 322
              DO NRX = IBR(4,N),IBR(5,N)
                IC_OPT(1,NRX) = ICX
              ENDDO
  322       CONTINUE
            CLOSE(UNIT=26)
          ELSEIF( INDEX(ADUM(1:),'rock').NE.0 .OR.
     &      INDEX(ADUM(1:),'zonation').NE.0 )  THEN
            WRITE(IWR,'(2X,2A)') 'Initial Condition State ' //
     &        'from External File: ',FDUM(1:NCHF)
            CALL RDINZS( PI,VAR(1),ADDER,IROCK,INDX )
            DO 324 N = 1,NFLD
              IF( IXP(N).EQ.0 ) GOTO 324
              DO NRX = IBR(4,N),IBR(5,N)
                IF( IZ(N).EQ.IROCK ) IC_OPT(1,NRX) = ICX
              ENDDO
  324       CONTINUE
          ELSE
            WRITE(IWR,'(2X,2A)') 'Initial Condition State'
            CALL RDINIS( PI,VAR,ADDER,IDOM,INDX )
            DO K = IDOM(5),IDOM(6)
            DO J = IDOM(3),IDOM(4)
            DO I = IDOM(1),IDOM(2)
              N = ND(I,J,K)
              IF( IXP(N).EQ.0 ) CYCLE
              DO NRX = IBR(4,N),IBR(5,N)
                IC_OPT(1,NRX) = ICX
              ENDDO
            ENDDO
            ENDDO
            ENDDO
          ENDIF
!
!---    Read CO2 aqueous concentration  ---
!
        ELSEIF( INDEX(ADUM(1:),'co2').NE.0 ) THEN
          IVAR = 3
          IF( INDEX(ADUM(1:),'mass').NE.0 .AND.
     &      INDEX(ADUM(1:),'frac').NE.0 ) THEN
            IVAR = 3
            ADDER = 0.D+0
          ELSEIF( INDEX(ADUM(1:),'rel').NE.0 .AND.
     &      INDEX(ADUM(1:),'sat').NE.0 ) THEN
            IVAR = 2
            ADDER = 0.D+0
          ENDIF
          INDX = 2
          IF( INDEX(ADUM(1:),'file').NE.0 ) THEN
            CALL RDINFS( PVA,VAR,ADDER,UNTS,INDX )
            CLOSE(UNIT=26)
            DO 332 N = 1,NFLD
              IF( IXP(N).EQ.0 ) GOTO 332
              DO NRX = IBR(4,N),IBR(5,N)
                IC_OPT(7,NRX) = IVAR
              ENDDO
  332       CONTINUE
          ELSEIF( INDEX(ADUM(1:),'rock').NE.0 .OR.
     &      INDEX(ADUM(1:),'zonation').NE.0 )  THEN
            CALL RDINZS( PVA,VAR(1),ADDER,IROCK,INDX )
            DO 334 N = 1,NFLD
              IF( IXP(N).EQ.0 ) GOTO 334
              DO NRX = IBR(4,N),IBR(5,N)
                IF( IZ(N).EQ.IROCK ) IC_OPT(7,NRX) = IVAR
              ENDDO
  334       CONTINUE
          ELSE
            CALL RDINIS( PVA,VAR,ADDER,IDOM,INDX )
            DO K = IDOM(5),IDOM(6)
            DO J = IDOM(3),IDOM(4)
            DO I = IDOM(1),IDOM(2)
              N = ND(I,J,K)
              IF( IXP(N).EQ.0 ) CYCLE
              DO NRX = IBR(4,N),IBR(5,N)
                IC_OPT(7,NRX) = IVAR
              ENDDO
            ENDDO
            ENDDO
            ENDDO
          ENDIF
!
!---    Read salt concentration  ---
!
        ELSEIF( INDEX(ADUM(1:),'salt').NE.0 ) THEN
          IF( INDEX(ADUM(1:),'mass').NE.0 .AND.
     &      INDEX(ADUM(1:),'total').NE.0 ) THEN
            IVAR = 4
          ELSEIF( INDEX(ADUM(1:),'mass').NE.0 .AND.
     &      INDEX(ADUM(1:),'frac').NE.0 ) THEN
            IVAR = 3
          ELSEIF( INDEX(ADUM(1:),'rel').NE.0 .AND.
     &      INDEX(ADUM(1:),'sat').NE.0 ) THEN
            IVAR = 2
          ELSE
            IVAR = 3
          ENDIF
          ADDER = 0.D+0
          INDX = 2
          IF( INDEX(ADUM(1:),'file').NE.0 ) THEN
            CALL RDINFS( TMS,VAR,ADDER,UNTS,INDX )
            CLOSE(UNIT=26)
            DO 342 N = 1,NFLD
              IF( IXP(N).EQ.0 ) GOTO 342
              DO NRX = IBR(4,N),IBR(5,N)
                IC_OPT(8,NRX) = IVAR
              ENDDO
  342       CONTINUE
          ELSEIF( INDEX(ADUM(1:),'rock').NE.0 .OR.
     &      INDEX(ADUM(1:),'zonation').NE.0 )  THEN
            CALL RDINZS( TMS,VAR(1),ADDER,IROCK,INDX )
            DO 344 N = 1,NFLD
              IF( IXP(N).EQ.0 ) GOTO 344
              DO NRX = IBR(4,N),IBR(5,N)
                IF( IZ(N).EQ.IROCK ) IC_OPT(8,NRX) = IVAR
              ENDDO
  344       CONTINUE
          ELSE
            CALL RDINIS( TMS,VAR,ADDER,IDOM,INDX )
            DO K = IDOM(5),IDOM(6)
            DO J = IDOM(3),IDOM(4)
            DO I = IDOM(1),IDOM(2)
              N = ND(I,J,K)
              IF( IXP(N).EQ.0 ) CYCLE
              DO NRX = IBR(4,N),IBR(5,N)
                IC_OPT(8,NRX) = IVAR
              ENDDO
            ENDDO
            ENDDO
            ENDDO
          ENDIF
!
!---    Read water vapor relative saturation  ---
!
        ELSEIF( INDEX(ADUM(1:),'water').NE.0 .AND.
     &    INDEX(ADUM(1:),'vapor').NE.0 .AND.
     &    INDEX(ADUM(1:),'rel').NE.0 .AND.
     &    INDEX(ADUM(1:),'sat').NE.0 ) THEN
          ADDER = 0.D+0
          INDX = 2
          IF( INDEX(ADUM(1:),'file').NE.0 ) THEN
            CALL RDINFS( PVW,VAR,ADDER,UNTS,INDX )
            CLOSE(UNIT=26)
            DO 352 N = 1,NFLD
              IF( IXP(N).EQ.0 ) GOTO 352
              DO NRX = IBR(4,N),IBR(5,N)
                IC_OPT(11,NRX) = IVAR
              ENDDO
  352       CONTINUE
          ELSEIF( INDEX(ADUM(1:),'rock').NE.0 .OR.
     &      INDEX(ADUM(1:),'zonation').NE.0 )  THEN
            CALL RDINZS( PVW,VAR(1),ADDER,IROCK,INDX )
            DO 354 N = 1,NFLD
              IF( IXP(N).EQ.0 ) GOTO 354
              DO NRX = IBR(4,N),IBR(5,N)
                IF( IZ(N).EQ.IROCK ) IC_OPT(11,NRX) = IVAR
              ENDDO
  354       CONTINUE
          ELSE
            CALL RDINIS( PVW,VAR,ADDER,IDOM,INDX )
            DO K = IDOM(5),IDOM(6)
            DO J = IDOM(3),IDOM(4)
            DO I = IDOM(1),IDOM(2)
              N = ND(I,J,K)
              IF( IXP(N).EQ.0 ) CYCLE
              DO NRX = IBR(4,N),IBR(5,N)
                IC_OPT(11,NRX) = IVAR
              ENDDO
            ENDDO
            ENDDO
            ENDDO
          ENDIF
!
!---    Read solute concentration  ---
!
        ELSEIF( INDEX(ADUM(1:),'solute').NE.0 ) THEN
          IF( INDEX(ADUM(1:),'gas').NE.0 ) THEN
            IVAR = 3
          ELSEIF( INDEX(ADUM(1:),'aqueous').NE.0 ) THEN
            IVAR = 2
          ELSE
            IVAR = 1
          ENDIF
          IF( INDEX( UNTS(1:),'bd' ).NE.0 ) IVAR = -IVAR
          DO 420 NSL = 1,NSOLU
            IDB = INDEX(SOLUT(NSL)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.SOLUT(NSL)(1:IDB) ) THEN
              ADDER = 0.D+0
              IF( INDEX(ADUM(1:),'file').NE.0 ) THEN
                IUNM = -3
                IF( INDEX(ADUM(1:),'binary').NE.0 ) THEN
                  CALL RDINBP( C(1,NSL),ADDER,ICT(1,NSL),IVAR,UNTS )
                ELSEIF( INDEX(ADUM(1:),'ascii').NE.0 ) THEN
                  CALL RDINAP( C(1,NSL),ADDER,ICT(1,NSL),IVAR,UNTS )
                ELSE
                  CALL RDINFP( C(1,NSL),VAR,ADDER,ICT(1,NSL),IVAR,UNTS )
                ENDIF
                CLOSE(UNIT=26)
              ELSEIF( INDEX(ADUM(1:),'rock').NE.0 .OR.
     &          INDEX(ADUM(1:),'zonation').NE.0 )  THEN
                CALL RDINZP( C(1,NSL),VAR(1),ADDER,ICT(1,NSL),
     &            IVAR,IROCK )
              ELSE
                CALL RDINIP( C(1,NSL),VAR,ADDER,ICT(1,NSL),IVAR,IDOM )
              ENDIF
              GOTO 430
            ENDIF
  420     CONTINUE
          INDX = 4
          CHMSG = 'Unrecognized Solute: ' // BDUM(1:NCHB)
          CALL WRMSGS( INDX )
  430     CONTINUE
#ifdef ecke
        ELSEIF( INDEX(ADUM(1:),'specie').NE.0 ) THEN
          ADDER = 0.D+0
!
!---      Conservation- or kinetic-component species  ---
!
          IF( INDEX( BDUM(1:),'total_' ).NE.0 ) THEN
            DO 500 NSLX = NSOLU+1,NSOLU+NEQC+NEQK
              IDB = INDEX(SOLUT(NSLX)(1:),'  ') - 1
              IF( BDUM(1:NCHB).EQ.SOLUT(NSLX) ) THEN
                NSL = NSLX
                GOTO 540
              ENDIF
  500       CONTINUE
          ENDIF
!
!---      Aqueous reactive species  ---
!
          DO 510 NSPX = 1,NSPL
            IDB = INDEX(SPNML(NSPX)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.SPNML(NSPX)(1:IDB) ) THEN
              NSP = NSPX
              GOTO 540
            ENDIF
  510     CONTINUE
!
!---      Solid reactive species  ---
!
          DO 520 NSPX = 1,NSPS
            IDB = INDEX(SPNMS(NSPX)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.SPNMS(NSPX)(1:IDB) ) THEN
              NSP = NSPX + NSPL
!
!---          Verify that solid-species is not a mineral  ---
!
              IF( ISP_MN(NSP).EQ.1 ) THEN
                INDX = 4
                CHMSG = 'Solid-Species Mineral ' // 
     &            '(see Lithology Card): ' // BDUM(1:NCHB)
                CALL WRMSGS( INDX )
              ENDIF
              GOTO 540
            ENDIF
  520     CONTINUE
!
!---      Gas reactive species  ---
!
          DO 530 NSPX = 1,NSPG
            IDB = INDEX(SPNMG(NSPX)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.SPNMG(NSPX)(1:IDB) ) THEN
              NSP = NSPX + NSPL + NSPS
              GOTO 540
            ENDIF
  530     CONTINUE
!
!---      pH  ---
!
          IF( BDUM(1:NCHB).EQ.'ph' .AND. ISPLK(1).NE.0 ) THEN
            NSP = MOD(ISPLK(1),1000)
            ISPLK(1) = ISPLK(1) + 1000
            IVAR = 2
            IF( IEO.EQ.2 ) IVAR = IVAR+10
            ADDER = 7.D+0
!
!---        Verify that species linked to pH is a conservation
!           component species  ---
!
            DO 532 NEQ = 1,NEQC
              IF( NSP.EQ.IEQ_C(2,NEQ) ) GOTO 540
  532       CONTINUE
            INDX = 4
            CHMSG = 'pH Species not a Conservation ' //
     &        'Component Species: ' // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
          INDX = 4
          CHMSG = 'Unrecognized Reactive Species: ' // BDUM(1:NCHB)
          CALL WRMSGS( INDX )
  540     CONTINUE
!
!---      Conservation- or kinetic-component species  ---
!
          IF( INDEX( BDUM(1:),'total_' ).NE.0 ) THEN
            IF( INDEX(ADUM(1:),'file').NE.0 ) THEN
              IF( INDEX(ADUM(1:),'binary').NE.0 ) THEN
                CALL RDINBP( C(1,NSL),ADDER,ICT(1,NSL),IVAR,UNTS )
              ELSEIF( INDEX(ADUM(1:),'ascii').NE.0 ) THEN
                CALL RDINAP( C(1,NSL),ADDER,ICT(1,NSL),IVAR,UNTS )
              ELSE
                CALL RDINFP( C(1,NSL),VAR,ADDER,ICT(1,NSL),
     &            IVAR,UNTS )
              ENDIF
              CLOSE(UNIT=26)
            ELSEIF( INDEX(ADUM(1:),'rock').NE.0 .OR.
     &        INDEX(ADUM(1:),'zonation').NE.0 )  THEN
              CALL RDINZP( C(1,NSL),VAR(1),ADDER,ICT(1,NSL),
     &          IVAR,IROCK )
            ELSE
              CALL RDINIP( C(1,NSL),VAR,ADDER,ICT(1,NSL),IVAR,
     &          IDOM )
            ENDIF
          ELSE
            IF( INDEX(ADUM(1:),'file').NE.0 ) THEN
              IF( INDEX(ADUM(1:),'binary').NE.0 ) THEN
                CALL RDINBP( SP_C(1,NSP),ADDER,IC_SP(1,NSP),IVAR,UNTS )
              ELSEIF( INDEX(ADUM(1:),'ascii').NE.0 ) THEN
                CALL RDINAP( SP_C(1,NSP),ADDER,IC_SP(1,NSP),IVAR,UNTS )
              ELSE
                CALL RDINFP( SP_C(1,NSP),VAR,ADDER,IC_SP(1,NSP),
     &            IVAR,UNTS )
              ENDIF
              CLOSE(UNIT=26)
            ELSEIF( INDEX(ADUM(1:),'rock').NE.0 .OR.
     &        INDEX(ADUM(1:),'zonation').NE.0 )  THEN
              CALL RDINZP( SP_C(1,NSP),VAR(1),ADDER,IC_SP(1,NSP),
     &          IVAR,IROCK )
            ELSE
              CALL RDINIP( SP_C(1,NSP),VAR,ADDER,IC_SP(1,NSP),IVAR,
     &          IDOM )
            ENDIF
          ENDIF
#endif
        ELSE
          INDX = 4
          CHMSG = 'Unrecognized Initial Condition Variable: ' //
     &      ADUM(1:NCHA)
          CALL WRMSGS( INDX )
        ENDIF
 1000 CONTINUE
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of RDIC_EOR group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE RDINPT_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Read input file cards.
!     Direct control to card reader subroutines.
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, March 17, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE FILES
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      CHARACTER*512 CHDUM
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//RDINPT_EOR'
!
!---  Write header line to output file  ---
!
      WRITE(IWR,'(/,A)') ' --- Input File Record ---'
!
!---  Search input file for simulation title card  ---
!
  100 CONTINUE
  109 READ(IRD,'(A)', END=110) CHDUM
      IF( CHDUM(1:1).EQ.'#' ) GOTO 109
      CALL LCASE( CHDUM )
      IF( CHDUM(1:1).EQ.'~' .AND.
     &    INDEX(CHDUM(2:),'simulation').NE.0 ) THEN
        CALL RDSIMU
        REWIND(IRD)
        GOTO 200
      ELSE
        GOTO 100
      ENDIF
  110 CONTINUE
      INDX = 4
      CARD = 'Simulation Title Card'
      ICD = INDEX( CARD,'  ' )-1
      CHMSG = 'Missing Simulation Title Card'
      CALL WRMSGS( INDX )
      REWIND(IRD)
!
!---  Search input file for solution control card  ---
!
  200 CONTINUE
  209 READ(IRD,'(A)', END=210) CHDUM
      IF( CHDUM(1:1).EQ.'#' ) GOTO 209
      CALL LCASE( CHDUM )
      IF( CHDUM(1:1).EQ.'~' .AND.
     &    INDEX(CHDUM(2:),'solution').NE.0 ) THEN
        CALL RDSOLU
        IF( IOM.NE.ICODE ) THEN
          INDX = 4
          CHMSG = 'Incompatible Operational Mode'
          CALL WRMSGS( INDX )
        ENDIF
        REWIND(IRD)
        GOTO 300
      ELSE
        GOTO 200
      ENDIF
  210 CONTINUE
      INDX = 4
      CARD = 'Solution Control Card'
      ICD = INDEX( CARD,'  ' )-1
      CHMSG = 'Missing Solution Control Card'
      CALL WRMSGS( INDX )
      REWIND(IRD)
  300 CONTINUE
!
!---  Read petroleum fractions property file  ---
!
      CALL RDPF_EOR
!
!---  Search input file for grid card  ---
!
  309 READ(IRD,'(A)', END=310) CHDUM
      IF( CHDUM(1:1).EQ.'#' ) GOTO 309
      CALL LCASE( CHDUM )
      IF( CHDUM(1:1).EQ.'~' .AND.
     &    INDEX(CHDUM(2:),'grid').NE.0 ) THEN
        CALL RDGRID
        REWIND(IRD)
        GOTO 400
      ELSE
        GOTO 300
      ENDIF
  310 CONTINUE
      INDX = 4
      CARD = 'Grid Card'
      ICD = INDEX( CARD,'  ' )-1
      CHMSG = 'Missing Grid Card'
      CALL WRMSGS( INDX )
      REWIND(IRD)
!
!---  Search input file for rock/soil zonation card  ---
!
  400 CONTINUE
  409 READ(IRD,'(A)', END=410) CHDUM
      IF( CHDUM(1:1).EQ.'#' ) GOTO 409
      CALL LCASE( CHDUM )
      IF( CHDUM(1:1).EQ.'~' .AND.
     &    INDEX(CHDUM(2:),'rock/soil').NE.0 .AND. 
     &    INDEX(CHDUM(2:),'zonation').NE.0 ) THEN 
        CALL RDROCK
        REWIND(IRD)
        GOTO 500
      ELSE
        GOTO 400
      ENDIF
  410 CONTINUE
      INDX = 4
      CARD = 'Rock/Soil Zonation Card'
      ICD = INDEX( CARD,'  ' )-1
      CHMSG = 'Missing Rock/Soil Zonation Card'
      CALL WRMSGS( INDX )
!
!---  Search input file for inactive nodes card  ---
!
  500 CONTINUE
  509 READ(IRD,'(A)', END=510) CHDUM
      IF( CHDUM(1:1).EQ.'#' ) GOTO 509
      CALL LCASE( CHDUM )
      IF( CHDUM(1:1).EQ.'~' .AND.
     &    INDEX(CHDUM(2:),'inactive').NE.0 ) THEN
        CALL RDINAC
        REWIND(IRD)
        GOTO 520
      ELSE
        GOTO 500
      ENDIF
  510 CONTINUE
      INDX = 1
      CARD = 'Inactive Nodes Card'
      ICD = INDEX( CARD,'  ' )-1
      CHMSG = 'Missing Inactive Nodes Card'
      CALL WRMSGS( INDX )
      REWIND(IRD)
!
!---  Search input file for fracture/fault geometry card --
!
  520 CONTINUE
  529 READ(IRD,'(A)', END=530) CHDUM
      IF( CHDUM(1:1).EQ.'#' ) GOTO 529
      CALL LCASE( CHDUM )
      IF( CHDUM(1:1).EQ.'~' .AND.
     &  (INDEX(CHDUM(2:),'fracture').NE.0 .OR.
     &  INDEX(CHDUM(2:),'fault').NE.0) .AND.
     &  INDEX(CHDUM(2:),'geometry').NE.0 ) THEN
        INDX = 2
        CALL RDGEOM_FRC( INDX )
        REWIND(IRD)
        GOTO 531
       ELSE
        GOTO 520
      ENDIF
  530 CONTINUE
!
!---  Fracture/fault flow simulations  ---
!
      IF( ISLC(74).NE.0 ) THEN
        INDX = 4
        CHMSG = 'Missing Fracture/Fault Geometry Card'
        CALL WRMSGS( INDX )
      ELSE
        REWIND(IRD)
      ENDIF
!rss_add
!
!---  Search input file for fracture/fault zonation card  ---
!
  531 CONTINUE
  539 READ(IRD,'(A)', END=540) CHDUM
      IF( CHDUM(1:1).EQ.'#' ) GOTO 539
      CALL LCASE( CHDUM )
      IF( CHDUM(1:1).EQ.'~' .AND.
     &    (INDEX(CHDUM(2:),'fracture').NE.0 .OR.
     &    INDEX(CHDUM(2:),'fault').NE.0) .AND.
     &    INDEX(CHDUM(2:),'zonation').NE.0 ) THEN
        CALL FRAC_RDROCK
        REWIND(IRD)
        GOTO 570
      ELSE
        GOTO 531
      ENDIF
  540 CONTINUE
      IF( ISLC(74).NE.0 ) THEN
        INDX = 4
        CARD = 'Fracture/Fault Zonation Card'
        ICD = INDEX( CARD,'  ' )-1
        CHMSG = 'Missing Fracture/Fault Zonation Card'
        CALL WRMSGS( INDX )
      ELSE
        REWIND(IRD)
      ENDIF
!
!---  Search input file for block refinement card  ---
!
  570 CONTINUE
  579 READ(IRD,'(A)', END=580) CHDUM
      IF( CHDUM(1:1).EQ.'#' ) GOTO 579
      CALL LCASE( CHDUM )
      IF( CHDUM(1:1).EQ.'~' .AND.
     &    INDEX(CHDUM(2:),'block').NE.0 .AND.
     &    INDEX(CHDUM(2:),'refine').NE.0 ) THEN
        CALL RDBR
        REWIND(IRD)
        GOTO 600
      ELSE
        GOTO 570
      ENDIF
  580 CONTINUE
      INDX = 1
      CARD = 'Block Refinement Card'
      ICD = INDEX( CARD,'  ' )-1
      CHMSG = 'Missing Block Refinement Card'
      CALL WRMSGS( INDX )
      REWIND(IRD)
!
!---  Search input file for mechanical properties card  ---
!
  600 CONTINUE
  609 READ(IRD,'(A)', END=610) CHDUM
      IF( CHDUM(1:1).EQ.'#' ) GOTO 609
      CALL LCASE( CHDUM )
      IF( CHDUM(1:1).EQ.'~' .AND.
     &    INDEX(CHDUM(2:),'mechanical').NE.0 ) THEN
        CALL RDMECH
        REWIND(IRD)
        GOTO 700
      ELSE
        GOTO 600
      ENDIF
  610 CONTINUE
      INDX = 4
      CARD = 'Mechanical Properties Card'
      ICD = INDEX( CARD,'  ' )-1
      CHMSG = 'Missing Mechanical Properties Card'
      CALL WRMSGS( INDX )
!
!---  Search input file for hydraulic properties card  ---
!
  700 CONTINUE
  709 READ(IRD,'(A)', END=710) CHDUM
      IF( CHDUM(1:1).EQ.'#' ) GOTO 709
      CALL LCASE( CHDUM )
      IF( CHDUM(1:1).EQ.'~' .AND.
     &    INDEX(CHDUM(2:),'hydraulic').NE.0 ) THEN
        CALL RDHYDR
        REWIND(IRD)
        GOTO 800
      ELSE
        GOTO 700
      ENDIF
  710 CONTINUE
      INDX = 4
      CARD = 'Hydraulic Properties Card'
      ICD = INDEX( CARD,'  ' )-1
      CHMSG = 'Missing Hydraulic Properties Card'
      CALL WRMSGS( INDX )
!
!---  Search input file for saturation function card  ---
!
  800 CONTINUE
  809 READ(IRD,'(A)', END=810) CHDUM
      IF( CHDUM(1:1).EQ.'#' ) GOTO 809
      CALL LCASE( CHDUM )
      IF( CHDUM(1:1).EQ.'~' .AND.
     &    INDEX(CHDUM(2:),'saturation').NE.0 ) THEN
        CALL RDSP_EOR
        REWIND(IRD)
        GOTO 900
      ELSE
        GOTO 800
      ENDIF
  810 CONTINUE
      INDX = 4
      CARD = 'Saturation Function Card'
      ICD = INDEX( CARD,'  ' )-1
      CHMSG = 'Missing Saturation Function Card'
      CALL WRMSGS( INDX )
!
!---  Search input file for 3-phase relative permeability card  ---
!
  900 CONTINUE
  909 READ(IRD,'(A)', END=910) CHDUM
      IF( CHDUM(1:1).EQ.'#' ) GOTO 909
      CALL LCASE( CHDUM )
      IF( CHDUM(1:1).EQ.'~' .AND.
     &  (INDEX(CHDUM(2:),'3').NE.0 .OR.
     &  INDEX(CHDUM(2:),'three').NE.0) .AND.
     &  INDEX(CHDUM(2:),'phase').NE.0 .AND.
     &  INDEX(CHDUM(2:),'relative').NE.0 .AND.
     &  INDEX(CHDUM(2:),'perm').NE.0 ) THEN
        CALL RD3PRP_EOR
        REWIND(IRD)
        GOTO 1200
      ELSE
        GOTO 900
      ENDIF
  910 CONTINUE
      INDX = 4
      CARD = '3-Phase Relative Permeability Card'
      ICD = INDEX( CARD,'  ' )-1
      CHMSG = 'Missing 3-Phase Relative Permeability Card'
      CALL WRMSGS( INDX )
!
!---  Search input file for thermal properties card  ---
!
 1200 CONTINUE
 1209 READ(IRD,'(A)', END=1250) CHDUM
      IF( CHDUM(1:1).EQ.'#' ) GOTO 1209
      CALL LCASE( CHDUM )
      IF( CHDUM(1:8).EQ.'~thermal' ) THEN
        CALL RDTHER
        REWIND(IRD)
        GOTO 1300
      ELSE
        GOTO 1200
      ENDIF
 1250 CONTINUE
      INDX = 4
      CARD = 'Thermal Properties Card'
      ICD = INDEX( CARD,'  ' )-1
      CHMSG = 'Missing Thermal Properties Card'
      CALL WRMSGS( INDX )
!
!---  Search input file for fracture properties card
!     for equivalent-continuum model or dual-porosity model  ---
!
 1300 CONTINUE
      IF( ISLC(11).EQ.0 ) GOTO 1600
 1309 READ(IRD,'(A)', END=1350) CHDUM
      IF( CHDUM(1:1).EQ.'#' ) GOTO 1309
      CALL LCASE( CHDUM )
      IF( CHDUM(1:1).EQ.'~' .AND.
     &    ( INDEX(CHDUM(2:),'rock').NE.0 .OR.
     &    INDEX(CHDUM(2:),'soil').NE.0 ) .AND.
     &    INDEX(CHDUM(2:),'fracture').NE.0 .AND.
     &    INDEX(CHDUM(2:),'properties').NE.0 ) THEN
        CALL RDFRAC
        REWIND(IRD)
        GOTO 1600
      ELSE
        GOTO 1300
      ENDIF
 1350 CONTINUE
      IF( ISLC(11).EQ.0 ) THEN
        INDX = 1
        CARD = 'Fracture Properties Card'
        ICD = INDEX( CARD,'  ' )-1
        CHMSG = 'Missing Fracture Properties Card'
        CALL WRMSGS( INDX )
        REWIND(IRD)
      ELSE
        INDX = 4
        CARD = 'Fracture Properties Card'
        ICD = INDEX( CARD,'  ' )-1
        CHMSG = 'Missing Fracture Properties Card'
        CALL WRMSGS( INDX )
      ENDIF
!
!---  Search input file for petroleum components properties card  ---
!
 1600 CONTINUE
 1609 READ(IRD,'(A)', END=1650) CHDUM
      IF( CHDUM(1:1).EQ.'#' ) GOTO 1609
      CALL LCASE( CHDUM )
      IF( CHDUM(1:1).EQ.'~' .AND.
     &    INDEX(CHDUM(2:),'petroleum').NE.0 ) THEN
        CALL RDPCP_EOR
        REWIND(IRD)
        GOTO 1700
      ELSE
        GOTO 1600
      ENDIF
 1650 CONTINUE
      IF( ISLC(68).EQ.0 ) THEN
        INDX = 1
        CARD = 'Petroleum Components Properties Card'
        ICD = INDEX( CARD,'  ' )-1
        CHMSG = 'Missing Petroleum Components Properties Card'
        CALL WRMSGS( INDX )
        REWIND(IRD)
      ELSE
        INDX = 4
        CARD = 'Petroleum Components Properties Card'
        ICD = INDEX( CARD,'  ' )-1
        CHMSG = 'Missing Petroleum Components Properties Card'
        CALL WRMSGS( INDX )
      ENDIF
!
!---  Search input file for binary interaction parameters card  ---
!
 1700 CONTINUE
 1709 READ(IRD,'(A)', END=1750) CHDUM
      IF( CHDUM(1:1).EQ.'#' ) GOTO 1709
      CALL LCASE( CHDUM )
      IF( CHDUM(1:1).EQ.'~' .AND.
     &    INDEX(CHDUM(2:),'binary').NE.0 ) THEN
        CALL RDBIP_EOR
        REWIND(IRD)
        GOTO 1800
      ELSE
        GOTO 1700
      ENDIF
 1750 CONTINUE
      INDX = 1
      CARD = 'Binary Interaction Parameters Card'
      ICD = INDEX( CARD,'  ' )-1
      CHMSG = 'Missing Binary Interaction Parameters Card'
      CALL WRMSGS( INDX )
      REWIND(IRD)
!
!---  Search input file for MMP gas composition card --
!
 1800 CONTINUE
 1809 READ(IRD,'(A)', END=1810) CHDUM
      IF( CHDUM(1:1).EQ.'#' ) GOTO 1809
      CALL LCASE( CHDUM )
      IF( CHDUM(1:1).EQ.'~' .AND.
     &    INDEX(CHDUM(2:),'mmp').NE.0 .AND.
     &  INDEX(CHDUM(2:),'gas').NE.0 ) THEN
        CALL RDMMPGC_EOR
        REWIND(IRD)
        GOTO 1900
      ELSE
        GOTO 1800
      ENDIF
 1810 CONTINUE
      IF( IEO.EQ.4 ) THEN
        INDX = 4
        CARD = 'MPP Gas Composition Card'
        ICD = INDEX( CARD,'  ' )-1
        CHMSG = 'Missing MPP Gas Composition Card'
        CALL WRMSGS( INDX )
      ELSE
        INDX = 1
        CARD = 'MPP Gas Composition Card'
        ICD = INDEX( CARD,'  ' )-1
        CHMSG = 'Missing MPP Gas Composition Card'
        CALL WRMSGS( INDX )
        REWIND(IRD)
      ENDIF
!
!---  Search input file for black-oil properties card --
!
 1900 CONTINUE
 1909 READ(IRD,'(A)', END=1910) CHDUM
      IF( CHDUM(1:1).EQ.'#' ) GOTO 1909
      CALL LCASE( CHDUM )
      IF( CHDUM(1:1).EQ.'~' .AND.
     &  INDEX(CHDUM(2:),'black').NE.0 .AND.
     &  INDEX(CHDUM(2:),'oil').NE.0 .AND.
     &  INDEX(CHDUM(2:),'prop').NE.0 ) THEN
        CALL RDBOP_EOR
        REWIND(IRD)
        GOTO 2000
      ELSE
        GOTO 1900
      ENDIF
 1910 CONTINUE
      IF( ISLC(68).EQ.0 ) THEN
        INDX = 4
        CARD = 'Black-Oil Properties Card'
        ICD = INDEX( CARD,'  ' )-1
        CHMSG = 'Missing Black-Oil Properties Card'
        CALL WRMSGS( INDX )
      ELSE
        INDX = 1
        CARD = 'Black-Oil Properties Card'
        ICD = INDEX( CARD,'  ' )-1
        CHMSG = 'Missing Black-Oil Properties Card'
        CALL WRMSGS( INDX )
        REWIND(IRD)
      ENDIF
!
!---  Search input file for solute/fluid interaction card --
!
 2000 CONTINUE
 2009 READ(IRD,'(A)', END=2010) CHDUM
      IF( CHDUM(1:1).EQ.'#' ) GOTO 2009
      CALL LCASE( CHDUM )
      IF( CHDUM(1:1).EQ.'~' .AND.
     &    INDEX(CHDUM(2:),'solute/fluid').NE.0 ) THEN
        CALL RDTF_EOR
        REWIND(IRD)
        GOTO 2100
      ELSE
        GOTO 2000
      ENDIF
 2010 CONTINUE
      IF( IEQC.EQ.0 ) THEN
        REWIND(IRD)
      ELSE
        INDX = 4
        CARD = 'Solute/Fluid Interaction Card'
        ICD = INDEX( CARD,'  ' )-1
        CHMSG = 'Missing Solute/Fluid Interaction Card'
        CALL WRMSGS( INDX )
      ENDIF
!
!---  Search input file for solute/rock interaction card --
!
 2100 CONTINUE
 2109 READ(IRD,'(A)', END=2110) CHDUM
      IF( CHDUM(1:1).EQ.'#' ) GOTO 2109
      CALL LCASE( CHDUM )
      IF( CHDUM(1:1).EQ.'~' .AND.
     &    INDEX(CHDUM(2:),'solute/porous').NE.0 ) THEN
        CALL RDTP_EOR
        REWIND(IRD)
        GOTO 2200
      ELSE
        GOTO 2100
      ENDIF
 2110 CONTINUE
      IF( IEQC.EQ.0 ) THEN
       REWIND(IRD)
      ELSE
        INDX = 4
        CARD = 'Solute/Porous Media Interaction Card'
        ICD = INDEX( CARD,'  ' )-1
        CHMSG = 'Missing Solute/Porous Media Interaction Card'
        CALL WRMSGS( INDX )
      ENDIF
 2200 CONTINUE
#ifdef ecke
      IF( ISLC(40).EQ.1 ) THEN
!
!---    Search input file for aqueous species card  ---
!
 2209   READ(IRD,'(A)', END=2210) CHDUM
        IF( CHDUM(1:1).EQ.'#' ) GOTO 2209
        CALL LCASE( CHDUM )
        IF( CHDUM(1:1).EQ.'~' .AND.
     &    INDEX(CHDUM(2:),'aqueous').NE.0 .AND.
     &    INDEX(CHDUM(2:),'specie').NE.0) THEN
          CALL RDAQSP
          REWIND(IRD)
          GOTO 2259
        ELSE
          GOTO 2209
        ENDIF
 2210   CONTINUE
        REWIND(IRD)
        IF( ISLC(40).GT.0 ) THEN
          INDX = 1
          CARD = 'Aqueous Species Card'
          ICD = INDEX( CARD,'  ' )-1
          CHMSG = 'Missing Aqueous Species Card'
          CALL WRMSGS( INDX )
        ENDIF
!
!---    Search input file for gas species card  ---
!
 2259   READ(IRD,'(A)', END=2260) CHDUM
        IF( CHDUM(1:1).EQ.'#' ) GOTO 2259
        CALL LCASE( CHDUM )
        IF( CHDUM(1:1).EQ.'~' .AND.
     &    INDEX(CHDUM(2:),'gas').NE.0 .AND.
     &    INDEX(CHDUM(2:),'specie').NE.0) THEN
          CALL RDGSSP
          REWIND(IRD)
          GOTO 2300
        ELSE
          GOTO 2259
        ENDIF
 2260   CONTINUE
        REWIND(IRD)
        IF( ISLC(40).GT.0 ) THEN
          INDX = 1
          CARD = 'Gas Species Card'
          ICD = INDEX( CARD,'  ' )-1
          CHMSG = 'Missing Gas Species Card'
          CALL WRMSGS( INDX )
        ENDIF
!
!---    Search input file for solid species card  ---
!
 2300   CONTINUE
 2309   READ(IRD,'(A)', END=2310) CHDUM
        IF( CHDUM(1:1).EQ.'#' ) GOTO 2309
        CALL LCASE( CHDUM )
        IF( CHDUM(1:1).EQ.'~' .AND.
     &    INDEX(CHDUM(2:),'solid').NE.0 .AND.
     &    INDEX(CHDUM(2:),'specie').NE.0) THEN
          CALL RDSDSP
          REWIND(IRD)
          GOTO 2400
        ELSE
          GOTO 2300
        ENDIF
 2310   CONTINUE
        REWIND(IRD)
        IF( ISLC(40).GT.0 ) THEN
          INDX = 1
          CARD = 'Solid Species Card'
          ICD = INDEX( CARD,'  ' )-1
          CHMSG = 'Missing Solid Species Card'
          CALL WRMSGS( INDX )
        ENDIF
        REWIND(IRD)
 2400   CONTINUE
!
!---    Search input file for equilibrium reactions card  ---
!
 2409   READ(IRD,'(A)', END=2410) CHDUM
        IF( CHDUM(1:1).EQ.'#' ) GOTO 2409
        CALL LCASE( CHDUM )
        IF( CHDUM(1:1).EQ.'~' .AND.
     &    INDEX(CHDUM(2:),'equil').NE.0 .AND.
     &    INDEX(CHDUM(2:),'react').NE.0) THEN
          CALL RDEQRC
          REWIND(IRD)
          GOTO 2500
        ELSE
          GOTO 2400
        ENDIF
 2410   CONTINUE
        REWIND(IRD)
        IF( ISLC(40).GT.0 ) THEN
          INDX = 1
          CARD = 'Equilibrium Reactions Card'
          ICD = INDEX( CARD,'  ' )-1
          CHMSG = 'Missing Equilibrium Reactions Card'
          CALL WRMSGS( INDX )
        ENDIF
        REWIND(IRD)
!
!---    Search input file for kinetic reactions card  ---
!
 2500   CONTINUE
 2509   READ(IRD,'(A)', END=2510) CHDUM
        IF( CHDUM(1:1).EQ.'#' ) GOTO 2509
        CALL LCASE( CHDUM )
        IF( CHDUM(1:1).EQ.'~' .AND.
     &    INDEX(CHDUM(2:),'kinetic').NE.0 .AND.
     &    INDEX(CHDUM(2:),'react').NE.0) THEN
          CALL RDKNRC
          REWIND(IRD)
          GOTO 2700
        ELSE
          GOTO 2500
        ENDIF
 2510   CONTINUE
        REWIND(IRD)
        IF( ISLC(40).GT.0 ) THEN
          INDX = 1
          CARD = 'Kinetic Reactions Card'
          ICD = INDEX( CARD,'  ' )-1
          CHMSG = 'Missing Kinetic Reactions Card'
          CALL WRMSGS( INDX )
        ENDIF
        REWIND(IRD)
!
!---    Search input file for equilibrium equation card  ---
!
 2700   CONTINUE
 2709   READ(IRD,'(A)', END=2710) CHDUM
        IF( CHDUM(1:1).EQ.'#' ) GOTO 2709
        CALL LCASE( CHDUM )
        IF( CHDUM(1:1).EQ.'~' .AND.
     &    INDEX(CHDUM(2:),'equil').NE.0 .AND.
     &    INDEX(CHDUM(2:),'equat').NE.0) THEN
          CALL RDEQEQ
          REWIND(IRD)
          GOTO 2800
        ELSE
          GOTO 2700
        ENDIF
 2710   CONTINUE
        REWIND(IRD)
        IF( ISLC(40).GT.0 ) THEN
          INDX = 1
          CARD = 'Equilibrium Equations Card'
          ICD = INDEX( CARD,'  ' )-1
          CHMSG = 'Missing Equilibrium Equations Card'
          CALL WRMSGS( INDX )
        ENDIF
        REWIND(IRD)
!
!---    Search input file for kinetic equations card  ---
!
 2800   CONTINUE
 2809   READ(IRD,'(A)', END=2810) CHDUM
        IF( CHDUM(1:1).EQ.'#' ) GOTO 2809
        CALL LCASE( CHDUM )
        IF( CHDUM(1:1).EQ.'~' .AND.
     &    INDEX(CHDUM(2:),'kinetic').NE.0 .AND.
     &    INDEX(CHDUM(2:),'equat').NE.0) THEN
          CALL RDKNEQ
          REWIND(IRD)
          GOTO 2900
        ELSE
          GOTO 2800
        ENDIF
 2810   CONTINUE
        REWIND(IRD)
        IF( ISLC(40).GT.0 ) THEN
          INDX = 1
          CARD = 'Kinetic Equations Card'
          ICD = INDEX( CARD,'  ' )-1
          CHMSG = 'Missing Kinetic Equations Card'
          CALL WRMSGS( INDX )
        ENDIF
        REWIND(IRD)
!
!---    Search input file for conservation equations card  ---
!
 2900   CONTINUE
 2909   READ(IRD,'(A)', END=2910) CHDUM
        IF( CHDUM(1:1).EQ.'#' ) GOTO 2909
        CALL LCASE( CHDUM )
        IF( CHDUM(1:1).EQ.'~' .AND.
     &    INDEX(CHDUM(2:),'conservation').NE.0 .AND.
     &    INDEX(CHDUM(2:),'equat').NE.0) THEN
          CALL RDCNEQ
          REWIND(IRD)
          GOTO 3000
        ELSE
          GOTO 2900
        ENDIF
 2910   CONTINUE
        REWIND(IRD)
        IF( ISLC(40).GT.0 ) THEN
          INDX = 1
          CARD = 'Conservation Equations Card'
          ICD = INDEX( CARD,'  ' )-1
          CHMSG = 'Missing Conservation Equations Card'
          CALL WRMSGS( INDX )
        ENDIF
        REWIND(IRD)
!
!---    Search input file for lithology card  ---
!
 3000   CONTINUE
 3009   READ(IRD,'(A)', END=3010) CHDUM
        IF( CHDUM(1:1).EQ.'#' ) GOTO 3009
        CALL LCASE( CHDUM )
        IF( CHDUM(1:1).EQ.'~' .AND.
     &    INDEX(CHDUM(2:),'lithol').NE.0) THEN
          CALL RDLITH
          REWIND(IRD)
          GOTO 3100
        ELSE
          GOTO 3000
        ENDIF
 3010   CONTINUE
        REWIND(IRD)
        IF( ISLC(40).GT.0 ) THEN
          INDX = 1
          CARD = 'Lithology Card'
          ICD = INDEX( CARD,'  ' )-1
          CHMSG = 'Missing Lithology Card'
          CALL WRMSGS( INDX )
        ENDIF
        REWIND(IRD)
!
!---    Search input file for reactive species link card  ---
!
 3100   CONTINUE
 3109   READ(IRD,'(A)', END=3110) CHDUM
        IF( CHDUM(1:1).EQ.'#' ) GOTO 3109
        CALL LCASE( CHDUM )
        IF( CHDUM(1:1).EQ.'~' .AND.
     &    INDEX(CHDUM(2:),'link').NE.0 .AND.
     &    INDEX(CHDUM(2:),'specie').NE.0) THEN
          CALL RDSPLK
          REWIND(IRD)
          GOTO 3200
        ELSE
          GOTO 3100
        ENDIF
 3110   CONTINUE
        REWIND(IRD)
        IF( ISLC(40).GT.0 ) THEN
          INDX = 1
          CARD = 'Reactive Species Link Card'
          ICD = INDEX( CARD,'  ' )-1
          CHMSG = 'Missing Reactive Species Link Card'
          CALL WRMSGS( INDX )
        ENDIF
        REWIND(IRD)
      ENDIF
#endif
!
!---  Search input file for salt transport card --
!
 3200 CONTINUE
 3209 READ(IRD,'(A)', END=3210) CHDUM
      IF( CHDUM(1:1).EQ.'#' ) GOTO 3209
      CALL LCASE( CHDUM )
      IF( CHDUM(1:15).EQ.'~salt transport' ) THEN
        CALL RDST_EOR
        REWIND(IRD)
        GOTO 3250
      ELSE
        GOTO 3200
      ENDIF
 3210 CONTINUE
      INDX = 4
      CARD = 'Salt Transport Card'
      ICD = INDEX( CARD,'  ' )-1
      CHMSG = 'Missing Salt Transport Card'
      CALL WRMSGS( INDX )
!
!---  Search input file for coupled well card --
!
 3250 CONTINUE
 3259 READ(IRD,'(A)', END= 3260) CHDUM
      IF( CHDUM(1:1).EQ.'#' ) GOTO 3259
      CALL LCASE( CHDUM )
      IF( CHDUM(1:1).EQ.'~' .AND.
     &  INDEX(CHDUM(2:),'coupled').NE.0 .AND.
     &  INDEX(CHDUM(2:),'well').NE.0 ) THEN
        CALL RDCOUP_WELL
        REWIND(IRD)
        GOTO 4000
      ELSE
        GOTO 3250
      ENDIF
 3260 CONTINUE
      INDX = 1
      CHMSG = 'Missing Coupled Well Card'
      CARD = 'Coupled Well Card Card'
      ICD = INDEX( CARD,'  ' )-1
      CALL WRMSGS( INDX )
      REWIND(IRD)
!
!---  Search input file for initial conditions card --
!
 4000 CONTINUE
 4009 READ(IRD,'(A)', END=4010) CHDUM
      IF( CHDUM(1:1).EQ.'#' ) GOTO 4009
      CALL LCASE( CHDUM )
      IF( CHDUM(1:1).EQ.'~' .AND.
     &    INDEX(CHDUM(2:),'initial').NE.0 .AND.
     &    INDEX(CHDUM(2:),'fracture').EQ.0 .AND.
     &    INDEX(CHDUM(2:),'fault').EQ.0  ) THEN
        CALL RDIC_EOR
        REWIND(IRD)
        GOTO 4100
      ELSE
        GOTO 4000
      ENDIF
 4010 CONTINUE
      IF( IEO.EQ.2 ) THEN
        INDX = 1
        CARD = 'Initial Conditions Card'
        ICD = INDEX( CARD,'  ' )-1
        CHMSG = 'Missing Initial Conditions Card'
        CALL WRMSGS( INDX )
        INDX = 2
        CALL RDRST(INDX)
        REWIND(IRD)
      ELSE
        INDX = 4
        CARD = 'Initial Conditions Card'
        ICD = INDEX( CARD,'  ' )-1
        CHMSG = 'Missing Initial Conditions Card'
        CALL WRMSGS( INDX )
      ENDIF
!
!---  Search input file for boundary conditions card --
!
 4100 CONTINUE
 4109 READ(IRD,'(A)', END=4110) CHDUM
      IF( CHDUM(1:1).EQ.'#' ) GOTO 4109
      CALL LCASE( CHDUM )
      IF( CHDUM(1:1).EQ.'~' .AND.
     &  INDEX(CHDUM(2:),'boundary').NE.0 .AND.
     &  INDEX(CHDUM(2:),'geomech').EQ.0 ) THEN
        CALL RDBC_EOR
        REWIND(IRD)
        GOTO 4200
      ELSE
        GOTO 4100
      ENDIF
 4110 CONTINUE
      INDX = 1
      CARD = 'Boundary Conditions Card'
      ICD = INDEX( CARD,'  ' )-1
      CHMSG = 'Missing Boundary Conditions Card'
      CALL WRMSGS( INDX )
      REWIND(IRD)
!
!---  Search input file for source card --
!
 4200 CONTINUE
 4209 READ(IRD,'(A)', END= 4210) CHDUM
      IF( CHDUM(1:1).EQ.'#' ) GOTO 4209
      CALL LCASE( CHDUM )
      IF( CHDUM(1:1).EQ.'~' .AND.
     &    INDEX(CHDUM(2:),'source').NE.0 .AND.
     &    INDEX(CHDUM(2:),'fracture').EQ.0 .AND.
     &    INDEX(CHDUM(2:),'fault').EQ.0 ) THEN
        CALL RDSR_EOR
        REWIND(IRD)
        GOTO 4400
      ELSE
        GOTO 4200
      ENDIF
 4210 CONTINUE
      INDX = 1
      CARD = 'Source Card'
      ICD = INDEX( CARD,'  ' )-1
      CHMSG = 'Missing Source Card'
      CALL WRMSGS( INDX )
      REWIND(IRD)
!
!---  Search input file for surface flux card --
!
 4400 CONTINUE
 4409 READ(IRD,'(A)', END=4410) CHDUM
      IF( CHDUM(1:1).EQ.'#' ) GOTO 4409
      CALL LCASE( CHDUM )
      IF( CHDUM(1:1).EQ.'~' .AND.
     &    INDEX(CHDUM(2:),'surface').NE.0 ) THEN
        CALL RDSF_EOR
        REWIND(IRD)
        GOTO 4500
      ELSE
        GOTO 4400
      ENDIF
 4410 CONTINUE
      INDX = 1
      CARD = 'Surface Flux Card'
      ICD = INDEX( CARD,'  ' )-1
      CHMSG = 'Missing Surface Flux Card'
      CALL WRMSGS( INDX )
      REWIND(IRD)
 4500 CONTINUE
!
!---  Geomechanics  ---
!
      IF( ISLC(50).NE.0 ) THEN
 7100   CONTINUE
!
!---  Search input file for inactive nodes card  ---
!
 7109   READ(IRD,'(A)', END=7110) CHDUM
        IF( CHDUM(1:1).EQ.'#' ) GOTO 7109
        CALL LCASE( CHDUM )
        IF( CHDUM(1:1).EQ.'~' .AND.
     &    INDEX(CHDUM(2:),'inactive').NE.0 .AND.
     &    INDEX(CHDUM(2:),'elements').NE.0 ) THEN
          CALL RDINAC_GM
          REWIND(IRD)
          GOTO 7200
        ELSE
          GOTO 7100
        ENDIF
 7110   CONTINUE
        INDX = 1
        CHMSG = 'Missing Inactive Elements Card'
        CARD = 'Inactive Elements Card'
        CALL WRMSGS( INDX )
        REWIND(IRD)
 7200   CONTINUE
!
!---    Search input file for geomechanics property card --
!
 7209   READ(IRD,'(A)', END=7210) CHDUM
        IF( CHDUM(1:1).EQ.'#' ) GOTO 7209
        CALL LCASE( CHDUM )
          IF( CHDUM(1:1).EQ.'~' .AND.
     &      INDEX(CHDUM(2:),'geomech').NE.0 .AND.
     &      INDEX(CHDUM(2:),'prop').NE.0 ) THEN
          CALL RDGMP
          REWIND(IRD)
          GOTO 7300
        ELSE
          GOTO 7200
        ENDIF
 7210   CONTINUE
!
!---    Geomechanical simulations  ---
!
        IF( ISLC(50).NE.0 ) THEN
          INDX = 4
          CHMSG = 'Missing Geomechanical Properties Card'
          CALL WRMSGS( INDX )
        ELSE
          REWIND(IRD)
        ENDIF
 7300   CONTINUE
!
!---    Search input file for geomechanics link card --
!
 7309   READ(IRD,'(A)', END=7310) CHDUM
        IF( CHDUM(1:1).EQ.'#' ) GOTO 7309
        CALL LCASE( CHDUM )
          IF( CHDUM(1:1).EQ.'~' .AND.
     &      INDEX(CHDUM(2:),'geomech').NE.0 .AND.
     &      INDEX(CHDUM(2:),'link').NE.0 ) THEN
          CALL RDGMLK
          REWIND(IRD)
          GOTO 7400
        ELSE
          GOTO 7300
        ENDIF
 7310   CONTINUE
!
!---    Geomechanical simulations  ---
!
        IF( ISLC(50).NE.0 ) THEN
          INDX = 1
          CHMSG = 'Missing Geomechanics Link Card'
          CALL WRMSGS( INDX )
          REWIND(IRD)
        ELSE
          REWIND(IRD)
        ENDIF
 7400   CONTINUE
!
!---    Search input file for geomechanics boundary condition card --
!
 7409   READ(IRD,'(A)', END=7410) CHDUM
        IF( CHDUM(1:1).EQ.'#' ) GOTO 7409
        CALL LCASE( CHDUM )
          IF( CHDUM(1:1).EQ.'~' .AND.
     &      INDEX(CHDUM(2:),'geomech').NE.0 .AND.
     &      INDEX(CHDUM(2:),'bound').NE.0 ) THEN
          CALL RDGMBC
          REWIND(IRD)
          GOTO 7500
        ELSE
          GOTO 7400
        ENDIF
 7410   CONTINUE
!
!---    Geomechanical simulations  ---
!
        IF( ISLC(50).NE.0 ) THEN
          INDX = 1
          CHMSG = 'Missing Geomechanics Boundary Condition Card'
          CALL WRMSGS( INDX )
        ELSE
          REWIND(IRD)
        ENDIF
 7500   CONTINUE
      ENDIF
!
!---  Create a node connection map  ---
!
      CALL CONNMAP
!rss_add
!
!---  Search input file for fracture/fault initial conditions card --
!
 5500 CONTINUE
 5509 READ(IRD,'(A)', END=5510) CHDUM
      IF( CHDUM(1:1).EQ.'#' ) GOTO 5509
      CALL LCASE( CHDUM )
      IF( CHDUM(1:1).EQ.'~' .AND.
     &  (INDEX(CHDUM(2:),'fracture').NE.0 .OR.
     &  INDEX(CHDUM(2:),'fault').NE.0) .AND.
     &  INDEX(CHDUM(2:),'initial').NE.0 ) THEN
        CONTINUE
        CALL RDIC_FRC_EOR
        REWIND(IRD)
        GOTO 5800
       ELSE
        GOTO 5500
      ENDIF
 5510 CONTINUE
      INDX = 1
      CHMSG = 'Missing Fracture/Fault Initial Conditions Card'
      CARD = 'Fracture/Fault Initial Conditions Card'
      CALL WRMSGS( INDX )
      REWIND(IRD)
!
!---  Search input file for fracture source card --
!
 5800 CONTINUE
 5809 READ(IRD,'(A)', END=5810) CHDUM
      IF( CHDUM(1:1).EQ.'#' ) GOTO 5809
      CALL LCASE( CHDUM )
      IF( CHDUM(1:1).EQ.'~' .AND.
     &  (INDEX(CHDUM(2:),'fracture').NE.0 .OR.
     &  INDEX(CHDUM(2:),'fault').NE.0) .AND.
     &  INDEX(CHDUM(2:),'source').NE.0 ) THEN
        CONTINUE
        CALL RDSR_FRC_EOR
        REWIND(IRD)
        GOTO 6000
       ELSE
        GOTO 5800
      ENDIF
 5810 CONTINUE
      INDX = 1
      CHMSG = 'Missing Fracture/Fault Source Card'
      CARD = 'Fracture/Fault Source Card'
      CALL WRMSGS( INDX )
      REWIND(IRD)
!
!---  Search input file for output control card --
!
 6000 CONTINUE
 6009 READ(IRD,'(A)', END=6010) CHDUM
      IF( CHDUM(1:1).EQ.'#' ) GOTO 6009
      CALL LCASE( CHDUM )
      IF( CHDUM(1:1).EQ.'~' .AND.
     &    INDEX(CHDUM(2:),'output').NE.0 ) THEN
        CALL RDOU_EOR
        REWIND(IRD)
        GOTO 6100
      ELSE
        GOTO 6000
      ENDIF
 6010 CONTINUE
      INDX = 1
      CARD = 'Output Control Card'
      ICD = INDEX( CARD,'  ' )-1
      CHMSG = 'Missing Output Control Card'
      CALL WRMSGS( INDX )
      REWIND(IRD)
 6100 CONTINUE
!
!---  End of input record --
!
      CARD = 'End of Input Record'
      ICD = INDEX( CARD,'  ' )-1
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of RDINPT_EOR group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE RDMMPGC_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Minimum miscibility pressure gas composition card.
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, October 24, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE FILES
      USE EOR
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      CHARACTER*64 ADUM,BDUM
      CHARACTER*512 CHDUM
      CHARACTER*5 TAB
      INTEGER JGCX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//RDMMPGC_EOR'
      TAB = '     '
!
!---  Write card information to ouput file  ---
!
      CARD = 'MMP Gas Composition Card'
      ICD = INDEX( CARD,'  ' )-1
      WRITE(IWR,'(//,3A)') ' ~ ',CARD(1:ICD),': '
!
!---  Read new input line ---
!
      CALL RDINPL( CHDUM )
      CALL LCASE( CHDUM )
      ISTART = 1
!
!---  Read number of petroleum components in MMP gas  ---
!
      VARB = 'Number of Components in MMP Gas'
      CALL RDINT(ISTART,ICOMMA,CHDUM,NGCX)
!
!---  Read MMP gas composition option ---
!
      VARB = 'MMP Gas Composition Option'
      CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,ADUM)
      IF( INDEX(ADUM(1:),'mole').NE.0
     &  .AND. INDEX(ADUM(1:),'fraction').NE.0 ) THEN
        IOPTX = 1
      ELSEIF( INDEX(ADUM(1:),'mass').NE.0
     &  .AND. INDEX(ADUM(1:),'fraction').NE.0 ) THEN
        IOPTX = 2
      ELSE
        INDX = 4
        CHMSG = 'Unrecognized MMP Gas Composition Option: ' //
     &    ADUM(1:NCH)
        CALL WRMSGS( INDX )
      ENDIF
!
!---  Loop over number of petroleum components in MMP gas  ---
!
      DO 100 IGC = 1,NGCX
!
!---    Read new input line ---
!
        CALL RDINPL( CHDUM )
        CALL LCASE( CHDUM )
        ISTART = 1
        VARB = 'Petroleum Component Name: '
        CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
        DO 40 JGC = 1,NGC+2
          IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
          IF( BDUM(1:NCHB).EQ.GCNM(JGC)(1:IDB) ) JGCX(IGC) = JGC
   40   CONTINUE
        DO 50 JGC = 1,IGC-1
          IX = JGCX(IGC)
          JX = JGCX(JGC)
          IF( GCNM(IX).EQ.GCNM(JX) ) THEN
            INDX = 4
            CHMSG = 'Duplicate Petroleum Component Name: ' // GCNM(IX)
            CALL WRMSGS( INDX )
          ENDIF
   50   CONTINUE
        JX = JGCX(IGC)
        VARB = 'Petroleum Component Fraction'
        CALL RDDPR(ISTART,ICOMMA,CHDUM,GC_MMP(JX))
        IF( GC_MMP(JX).LT.0.D+0 .OR. 
     &    GC_MMP(JX).GT.1.D+0 ) THEN
          INDX = 4
          JCH = INDEX(GCNM(JX)(1:),'  ')-1
          CHMSG = 'Out-of-Range Petroleum Component Fraction: ' 
     &      // GCNM(JX)(1:JCH)
          CALL WRMSGS( INDX )
        ENDIF
  100 CONTINUE
!
!---  Set petroleum component fractions to mole fractions, and 
!     check summation  ---
!
      CALL INIT_FRAC( GC_MMP,IOPTX )
!
!---  Loop over all petroleum components  ---
!
      WRITE(IWR,'(/,A)') 'MMP Gas Composition Table (Mole Fractions)'
      DO 200 IGC = 1,NGC+2
        IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
        WRITE(IWR,'(3A,1PE12.5)') TAB,GCNM(IGC)(1:10),TAB,GC_MMP(IGC)
  200 CONTINUE
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of RDMMPGC_EOR group ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE RDOU_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Read input file for output information.
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, March 17, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE TRNSPT
      USE SOLTN
      USE REACT
      USE PARM_FRC
      USE OUTPU
      USE GRID
      USE GLB_PAR
      USE GEOM_FRC
      USE FILES
      USE FDVS
      USE FDVGC
      USE COUP_WELL
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      EXTERNAL ICOUNT
!
!----------------------Type Declarations-------------------------------!
!
      CHARACTER*64 ADUM,BDUM,CDUM,UNTS,SOLNM,WNM_CWX
      CHARACTER*512 CHDUM
      CHARACTER*6 FORM
#ifdef ecke
      CHARACTER*64 SPNM
#endif
!
!----------------------Data Statements---------------------------------!
!
      SAVE FORM
      DATA FORM / '(I6,$)' /
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//RDOU_EOR'
!
!---  Write card information to ouput file  ---
!
      CARD = 'Output Control Card'
      ICD = INDEX( CARD,'  ' )-1
      WRITE(IWR,'(//,3A)') ' ~ ',CARD(1:ICD),': '
!
!---  Read reference node information  ---
!
      CALL RDINPL( CHDUM )
      CALL LCASE( CHDUM )
      ISTART = 1
      VARB = 'Number of Reference Nodes'
      CALL RDINT(ISTART,ICOMMA,CHDUM,NREF)
      IF( NREF.GT.LREF ) THEN
        INDX = 5
        CHMSG = 'Number of Reference Nodes > Parameter LREF'
        CALL WRMSGS( INDX )
      ENDIF
      WRITE(IWR,'(/,A,I6)') 'Reference Node No. and Indices: ',NREF
      DO 100 N = 1,NREF
        CALL RDINPL( CHDUM )
        CALL LCASE( CHDUM )
        ISTART = 1
        VARB = 'Reference Node Index'
        CALL RDINT(ISTART,ICOMMA,CHDUM,IRF)
        CALL RDINT(ISTART,ICOMMA,CHDUM,JRF)
        CALL RDINT(ISTART,ICOMMA,CHDUM,KRF)
        IF( IRF.LT.1 .OR. IRF.GT.IFLD ) THEN
          INDX = 7
          CHMSG = 'Unrecognized Reference Node I Index'
          IMSG = IRF
          CALL WRMSGS( INDX )
        ENDIF
        IF( JRF.LT.1 .OR. JRF.GT.JFLD ) THEN
          INDX = 7
          CHMSG = 'Unrecognized Reference Node J Index'
          IMSG = JRF
          CALL WRMSGS( INDX )
        ENDIF
        IF( KRF.LT.1 .OR. KRF.GT.KFLD ) THEN
          INDX = 7
          CHMSG = 'Unrecognized Reference Node K Index'
          IMSG = KRF
          CALL WRMSGS( INDX )
        ENDIF
        NDREF(N) = ND(IRF,JRF,KRF)
        NRF = NDREF(N)
 !
 !---   Block refined node, 
 !      check for additional reference node indices  ---
 !
        IF( IBR(4,NRF).GT.NRF ) THEN
          IRX = 2**IBR(1,NRF)
          JRX = 2**IBR(2,NRF)
          KRX = 2**IBR(3,NRF)
          CALL CHKINT(ISTART,ICOMMA,CHDUM,INDX)
          IF( INDX.EQ.1 ) THEN
            VARB = 'Block Refinement Reference Node Index'
            CALL RDINT(ISTART,ICOMMA,CHDUM,IX)
            CALL RDINT(ISTART,ICOMMA,CHDUM,JX)
            CALL RDINT(ISTART,ICOMMA,CHDUM,KX)
            IF( IX.LT.1 .OR. IX.GT.IRX ) THEN
              INDX = 7
              CHMSG = 'Out-of-Range Block Refinement ' // 
     &          'Reference Node I Index'
              IMSG = IX
              CALL WRMSGS( INDX )
            ENDIF
            IF( JX.LT.1 .OR. JX.GT.JRX ) THEN
              INDX = 7
              CHMSG = 'Out-of-Range Block Refinement ' // 
     &          'Reference Node J Index'
              IMSG = JX
              CALL WRMSGS( INDX )
            ENDIF
            IF( KX.LT.1 .OR. KX.GT.KRX ) THEN
              INDX = 7
              CHMSG = 'Out-of-Range Block Refinement ' // 
     &          'Reference Node K Index'
              IMSG = KX
              CALL WRMSGS( INDX )
            ENDIF
          ENDIF
          NDREF(N) = IBR(4,NRF) + NDBR(IX,IRX,JX,JRX,KX)
          WRITE(IWR,'(2X,A,$)') 'Reference Node No. '
          WRITE(FORM(3:3),'(I1)') ICOUNT(NDREF(N))
          WRITE(IWR,FORM) NDREF(N)
          WRITE(FORM(3:3),'(I1)') ICOUNT(IX)
          WRITE(IWR,'(2X,A,$)') 'I = '
          WRITE(IWR,FORM) IRF
          WRITE(FORM(3:3),'(I1)') ICOUNT(JX)
          WRITE(IWR,'(2X,A,$)') 'J = '
          WRITE(IWR,FORM) JRF
          WRITE(FORM(3:3),'(I1)') ICOUNT(KX)
          WRITE(IWR,'(2X,A,$)') 'K = '
          WRITE(IWR,FORM) KRF
          WRITE(IWR,'(2X,A,$)' ) 'Indices of '
          WRITE(FORM(3:3),'(I1)') ICOUNT(IRF)
          WRITE(IWR,'(2X,A,$)') 'I = '
          WRITE(IWR,FORM) IRF
          WRITE(FORM(3:3),'(I1)') ICOUNT(JRF)
          WRITE(IWR,'(2X,A,$)') 'J = '
          WRITE(IWR,FORM) JRF
          WRITE(FORM(3:3),'(I1)') ICOUNT(KRF)
          WRITE(IWR,'(2X,A,$)') 'K = '
          WRITE(IWR,FORM) KRF
          WRITE(IWR,'(2X,A)' ) 'Indices'
        ELSE
          WRITE(FORM(3:3),'(I1)') ICOUNT(NDREF(N))
          WRITE(IWR,'(2X,A,$)') 'Reference Node No. '
          WRITE(IWR,FORM) NDREF(N)
          WRITE(FORM(3:3),'(I1)') ICOUNT(IRF)
          WRITE(IWR,'(2X,A,$)') 'I = '
          WRITE(IWR,FORM) IRF
          WRITE(FORM(3:3),'(I1)') ICOUNT(JRF)
          WRITE(IWR,'(2X,A,$)') 'J = '
          WRITE(IWR,FORM) JRF
          WRITE(FORM(3:3),'(I1)') ICOUNT(KRF)
          WRITE(IWR,'(2X,A,$)') 'K = '
          WRITE(IWR,FORM) KRF
          WRITE(IWR,'(2X,A)' ) 'Indices'
        ENDIF
  100 CONTINUE
!
!---  Read fracture/fault reference node information  ---
!
      IF( ISLC(74).NE.0 .AND. NF_FRC.GT.0 ) THEN
        ISTART = 1
        CALL RDINPL( CHDUM )
        CALL LCASE( CHDUM )
        VARB = 'Number of Fracture/Fault Reference Nodes'
        CALL RDINT(ISTART,ICOMMA,CHDUM,NREF_FRC)
        IF( NREF_FRC.GT.LREF ) THEN
          INDX = 5
          CHMSG = 'Number of Fracture/Fault Reference Nodes > LREF'
          CALL WRMSGS( INDX )
        ENDIF
        WRITE(IWR,'(/,A)') 'Fracture/Fault Nos., Local ' //
     &    'Triangle Nos. and Global Triangle Nos.'
        DO N = 1,NREF_FRC
          ISTART = 1
          CALL RDINPL( CHDUM )
          CALL LCASE( CHDUM )
          VARB = 'Fracture/Fault Reference Node: Fracture/Fault No.'
          CALL RDINT(ISTART,ICOMMA,CHDUM,NFX)
          IF( NFX.LT.1 .OR. NFX.GT.NF_FRC ) THEN
            INDX = 4
            CHMSG = 'Out-of-Range Fracture/Fault Reference Node ' // 
     &        'Fracture/Fault'
            CALL WRMSGS( INDX )
          ENDIF
          VARB = 'Fracture/Fault Reference Node: Local Triangle No.'
          CALL RDINT(ISTART,ICOMMA,CHDUM,NTX)
          IF( NTX.LT.1 .OR. NTX.GT.NTP_FRC(NFX) ) THEN
            INDX = 4
            CHMSG = 'Out-of-Range Fracture/Fault Reference Node ' // 
     &        'Triangle No.'
            CALL WRMSGS( INDX )
          ENDIF
          NC = 0
          L1: DO KFX = 1,NFX
            DO KTX = 1,NTP_FRC(KFX)
                NC = NC + 1
              IF( KFX.EQ.NFX .AND. KTX.EQ.NTX ) EXIT L1
            ENDDO
          ENDDO L1
          NDREF_FRC(N) = NC
          WRITE(FORM(3:3),'(I1)') ICOUNT(NFX)
          WRITE(IWR,'(2X,A,$)') 'Fracture/Fault No. = '
          WRITE(IWR,FORM) NFX
          WRITE(FORM(3:3),'(I1)') ICOUNT(NTX)
          WRITE(IWR,'(2X,A,$)') 'Local Triangle No. = '
          WRITE(IWR,FORM) NTX
          WRITE(FORM(3:3),'(I1)') ICOUNT(NDREF_FRC(N))
          WRITE(IWR,'(2X,A,$)') 'Global Triangle No. = '
          WRITE(IWR,FORM) NDREF_FRC(N)
          WRITE(IWR,'(A)' ) ''
        ENDDO
      ENDIF
      CALL RDINPL( CHDUM )
      CALL LCASE( CHDUM )
      ISTART = 1
      IDFLT = 1
      IFQS = IBIG
      VARB = 'Reference Node Screen Output Frequency'
      CALL RDINT(ISTART,ICOMMA,CHDUM,IFQS)
      WRITE(IWR,'(/,2A,I6,A)') VARB(1:IVR),': Every ',IFQS,
     &' Time Step(s)'
      IF( IFQS.LE.0 ) IFQS = IBIG
      IDFLT = 1
      IFQO = IBIG
      VARB = 'Reference Node Output File Frequency'
      CALL RDINT(ISTART,ICOMMA,CHDUM,IFQO)
      WRITE(IWR,'(2A,I6,A)') VARB(1:IVR),': Every ',IFQO,' Time Step(s)'
      IF( IFQO.LE.0 ) IFQO = IBIG
      IDFLT = 1
      VARB = 'Time Output Units'
      CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTM)
      WRITE(IWR,'(3A)') VARB(1:IVR),': ',UNTM(1:NCH)
      IDFLT = 1
      VARB = 'Length Output Units'
      CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNLN)
      WRITE(IWR,'(3A)') VARB(1:IVR),': ',UNLN(1:NCH)
      IF( ICS.EQ.2 .OR. ICS.EQ.6 .OR. ICS.EQ.8 ) THEN
        IDFLT = 1
        VARB = 'Arc Output Units'
        CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNAR)
        WRITE(IWR,'(3A)') VARB(1:IVR),': ',UNAR(1:NCH)
      ENDIF
      IDFLT = 1
      VARB = 'Screen Significant Digits'
      CALL RDINT(ISTART,ICOMMA,CHDUM,ISGNS)
      WRITE(IWR,'(2A,I2)') VARB(1:IVR),': ',ISGNS
      IDFLT = 1
      VARB = 'Output File Significant Digits'
      CALL RDINT(ISTART,ICOMMA,CHDUM,ISGNO)
      WRITE(IWR,'(2A,I2)') VARB(1:IVR),': ',ISGNO
      IDFLT = 1
      VARB = 'Plot File Significant Digits'
      CALL RDINT(ISTART,ICOMMA,CHDUM,ISGNP)
      WRITE(IWR,'(2A,I2)') VARB(1:IVR),': ',ISGNP
!
!---  Read reference node variables  ---
!
      CALL RDINPL( CHDUM )
      CALL LCASE( CHDUM )
      ISTART = 1
      VARB = 'Number of Reference Node Variables'
      CALL RDINT(ISTART,ICOMMA,CHDUM,NVREF)
      WRITE( IWR,'(/,A,I6)') 'Reference Node Variables: ',NVREF
      NVC = 0
      DO 200 NV = 1,NVREF
        CALL RDINPL( CHDUM )
        CALL LCASE( CHDUM )
        ISTART = 1
        VARB = 'Reference Node Variable'
        CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,ADUM)
        IF( INDEX( ADUM(1:),'solute' ).NE.0 ) THEN
          VARB = 'Reference Node Variable: Solute Name'
          CALL RDCHR(ISTART,ICOMMA,NCS,CHDUM,SOLNM)
          DO 110 NSL = 1,NSOLU
            IF( SOLNM.EQ.SOLUT(NSL) ) GOTO 120
  110     CONTINUE
          INDX = 4
          CHMSG = 'Unrecognized Solute Name: '//SOLNM
          CALL WRMSGS( INDX )
          NVC = NVC -1
          GOTO 200
  120     CONTINUE
        ENDIF
#ifdef ecke
        IF( INDEX( ADUM(1:),'species' ).NE.0 ) THEN
          IF( ISLC(40).EQ.0 ) THEN
            NVC = NVC -1
            GOTO 200
          ENDIF
          VARB = 'Reference Node Variable: Reactive Species Name: '
          CALL RDCHR(ISTART,ICOMMA,NCS,CHDUM,SPNM)
!
!---      Conservation- or kinetic-component species  ---
!
          IF( INDEX( SPNM(1:),'total_' ).NE.0 ) THEN
            DO 130 NSL = NSOLU+1,NSOLU+NEQC+NEQK
              IF( SPNM.EQ.SOLUT(NSL) ) GOTO 150
  130       CONTINUE
          ENDIF
!
!---      Aqueous species  ---
!
          DO 132 M = 1,NSPL
            NSP = M
            IF( SPNM.EQ.SPNML(M) ) GOTO 150
  132     CONTINUE
!
!---      Solid species  ---
!
          DO 134 M = 1,NSPS
            NSP = M+NSPL
            IF( SPNM.EQ.SPNMS(M) ) GOTO 150
  134     CONTINUE
!
!---      Gas species  ---
!
          DO 136 M = 1,NSPG
            NSP = M+NSPL+NSPS
            IF( SPNM.EQ.SPNMG(M) ) GOTO 150
  136     CONTINUE
!
!---      Unrecognized species name  ---
!
          INDX = 4
          CHMSG = 'Unrecognized Reference-Node Reactive Species Name: '
     &      // SPNM
          CALL WRMSGS( INDX )
          NVC = NVC -1
          GOTO 200
  150     CONTINUE
        ENDIF
#endif
        IF( (INDEX(ADUM(1:),'nonaqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'non-aqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'napl').NE.0) .AND.
     &    INDEX(ADUM(1:),'press').NE.0 ) THEN
          IREF(NV) = 3
        ELSEIF( INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'press').NE.0 ) THEN
          IREF(NV) = 1
        ELSEIF( INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'press').NE.0 ) THEN
          IREF(NV) = 2
!        ELSEIF( INDEX(ADUM(1:),'critical').NE.0 .AND.
!     &    INDEX(ADUM(1:),'temp').NE.0 ) THEN
!          IREF(NV) = 206
!          CHREF(206) = 'TCR'
!        ELSEIF( INDEX(ADUM(1:),'cricondentherm').NE.0 .AND.
!     &    INDEX(ADUM(1:),'temp').NE.0 ) THEN
!          IREF(NV) = 213
!          CHREF(213) = 'TCT'
        ELSEIF( INDEX(ADUM(1:),'temp').NE.0 ) THEN
          IREF(NV) = 4
        ELSEIF( INDEX(ADUM(1:),'phase').NE.0 .AND.
     &    INDEX(ADUM(1:),'cond').NE.0 ) THEN
          IREF(NV) = 5
        ELSEIF( (INDEX(ADUM(1:),'nonaqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'non-aqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'napl').NE.0) .AND.
     &    INDEX(ADUM(1:),'gauge').NE.0 .AND.
     &    INDEX(ADUM(1:),'pressure').NE.0 ) THEN
          IREF(NV) = 8
        ELSEIF( INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'gauge').NE.0 .AND.
     &    INDEX(ADUM(1:),'press').NE.0 ) THEN
          IREF(NV) = 6
        ELSEIF( INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'gauge').NE.0 .AND.
     &    INDEX(ADUM(1:),'press').NE.0 ) THEN
          IREF(NV) = 7
        ELSEIF( INDEX(ADUM(1:),'eclipse').NE.0 .AND.
     &    INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'sat').NE.0 ) THEN
          IREF(NV) = 83
          CHREF(83) = 'ESG'
        ELSEIF( INDEX(ADUM(1:),'eclipse').NE.0 .AND.
     &    INDEX(ADUM(1:),'oil').NE.0 .AND.
     &    INDEX(ADUM(1:),'sat').NE.0 ) THEN
          IREF(NV) = 84
          CHREF(84) = 'ESO'
        ELSEIF( INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'saturation').NE.0 ) THEN
          IREF(NV) = 12
        ELSEIF( (INDEX(ADUM(1:),'nonaqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'non-aqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'napl').NE.0) .AND.
     &    INDEX(ADUM(1:),'saturation').NE.0 ) THEN
          IREF(NV) = 13
        ELSEIF( INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'saturation').NE.0 ) THEN
          IREF(NV) = 11
        ELSEIF( INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'saturation').NE.0 ) THEN
          IREF(NV) = 12
        ELSEIF( INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'moisture').NE.0 .AND.
     &    INDEX(ADUM(1:),'content').NE.0 ) THEN
          IREF(NV) = 15
        ELSEIF( (INDEX(ADUM(1:),'salt').NE.0 .OR.
     &    INDEX(ADUM(1:),'nacl').NE.0) .AND.
     &    INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'mole').NE.0 .AND.
     &    INDEX(ADUM(1:),'frac').NE.0 ) THEN
          CHREF(205) = 'XMLS'
          IREF(NV) = 205
        ELSEIF( (INDEX(ADUM(1:),'x intrinsic').NE.0 .OR.
     &    INDEX(ADUM(1:),'x-intrinsic').NE.0 ) .AND.
     &    INDEX(ADUM(1:),'perm').NE.0 ) THEN
          IREF(NV) = 247
        ELSEIF( (INDEX(ADUM(1:),'y intrinsic').NE.0 .OR.
     &    INDEX(ADUM(1:),'y-intrinsic').NE.0 ) .AND.
     &    INDEX(ADUM(1:),'perm').NE.0 ) THEN
          IREF(NV) = 248
        ELSEIF( (INDEX(ADUM(1:),'z intrinsic').NE.0 .OR.
     &    INDEX(ADUM(1:),'z-intrinsic').NE.0 ) .AND.
     &    INDEX(ADUM(1:),'perm').NE.0 ) THEN
          IREF(NV) = 249
        ELSEIF( INDEX(ADUM(1:),'node').NE.0 .AND.
     &    INDEX(ADUM(1:),'number').NE.0 ) THEN
          IREF(NV) = 100
        ELSEIF( INDEX(ADUM(1:),'x').NE.0 .AND.
     &    INDEX(ADUM(1:),'node').NE.0 .AND.
     &    INDEX(ADUM(1:),'centroid').NE.0 ) THEN
          IREF(NV) = 291
        ELSEIF( INDEX(ADUM(1:),'y').NE.0 .AND.
     &    INDEX(ADUM(1:),'node').NE.0 .AND.
     &    INDEX(ADUM(1:),'centroid').NE.0 ) THEN
          IREF(NV) = 292
        ELSEIF( INDEX(ADUM(1:),'z').NE.0 .AND.
     &    INDEX(ADUM(1:),'node').NE.0 .AND.
     &    INDEX(ADUM(1:),'centroid').NE.0 ) THEN
          IREF(NV) = 293
        ELSEIF( INDEX(ADUM(1:),'diffusive').NE.0 .AND.
     &    INDEX(ADUM(1:),'porosity').NE.0 ) THEN
          IREF(NV) = 20
        ELSEIF( (INDEX(ADUM(1:),'h2o').NE.0 .OR.
     &    INDEX(ADUM(1:),'water').NE.0 ) .AND.
     &    INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'mass').NE.0 .AND.
     &    INDEX(ADUM(1:),'frac').NE.0 ) THEN
          IREF(NV) = 21
        ELSEIF( INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'mass').NE.0 .AND.
     &    INDEX(ADUM(1:),'frac').NE.0 ) THEN
          IREF(NV) = 22
          CHREF(22) = 'XGC'
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          DO 142 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IREFGC(NV) = IGC
  142     CONTINUE
          IF( IREFGC(NV).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Petroleum Component Fraction Name: '
     &        // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
        ELSEIF( (INDEX(ADUM(1:),'nonaqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'non-aqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'napl').NE.0) .AND.
     &    INDEX(ADUM(1:),'mass').NE.0 .AND.
     &    INDEX(ADUM(1:),'frac').NE.0 ) THEN
          IREF(NV) = 23
          CHREF(23) = 'XNC'
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          DO 144 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IREFGC(NV) = IGC
  144     CONTINUE
          IF( IREFGC(NV).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Nonaqueous Liquid Mass Fraction ' //
     &        'Component Name: ' // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
        ELSEIF( INDEX(ADUM(1:),'total').NE.0 .AND.
     &    INDEX(ADUM(1:),'component').NE.0 .AND.
     &    INDEX(ADUM(1:),'mole').NE.0 .AND.
     &    INDEX(ADUM(1:),'frac').NE.0 ) THEN
          IREF(NV) = 383
          CHREF(383) = 'ZMC'
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          DO 146 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IREFGC(NV) = IGC
  146     CONTINUE
          IF( IREFGC(NV).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Total Petroleum Component Mole ' //
     &        'Fraction Component Name: ' // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
        ELSEIF( (INDEX(ADUM(1:),'h2o').NE.0 .OR.
     &    INDEX(ADUM(1:),'water').NE.0 ) .AND.
     &    INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'mass').NE.0 .AND.
     &    INDEX(ADUM(1:),'frac').NE.0 ) THEN
          IREF(NV) = 24
        ELSEIF( INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'mass').NE.0 .AND.
     &    INDEX(ADUM(1:),'frac').NE.0 ) THEN
          IREF(NV) = 25
          CHREF(25) = 'XLC'
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          DO 148 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IREFGC(NV) = IGC
  148     CONTINUE
          IF( IREFGC(NV).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Aqueous Mass Fraction ' //
     &        'Component Name: ' // ADUM(1:NCH)
            CALL WRMSGS( INDX )
          ENDIF
        ELSEIF( INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'hydraulic').NE.0 .AND.
     &    INDEX(ADUM(1:),'head').NE.0 ) THEN
          IREF(NV) = 27
        ELSEIF( INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'hydraulic').NE.0 .AND.
     &    INDEX(ADUM(1:),'head').NE.0 ) THEN
          IREF(NV) = 28
        ELSEIF( INDEX(ADUM(1:),'napl').NE.0 .AND.
     &    INDEX(ADUM(1:),'hydraulic').NE.0 .AND.
     &    INDEX(ADUM(1:),'head').NE.0 ) THEN
          IREF(NV) = 29
        ELSEIF ( INDEX(ADUM(1:),'rock').NE.0 .AND.
     &    INDEX(ADUM(1:),'soil').NE.0 .AND.
     &    INDEX(ADUM(1:),'type').NE.0 ) THEN
          IREF(NV) = 30
        ELSEIF( (INDEX(ADUM(1:),'nonaqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'non-aqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'napl').NE.0) .AND.
     &    INDEX(ADUM(1:),'relative').NE.0 .AND.
     &    INDEX(ADUM(1:),'permeability').NE.0 ) THEN
          IREF(NV) = 33
        ELSEIF( INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'relative').NE.0 .AND.
     &    INDEX(ADUM(1:),'permeability').NE.0 ) THEN
          IREF(NV) = 31
        ELSEIF( INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'relative').NE.0 .AND.
     &    INDEX(ADUM(1:),'permeability').NE.0 ) THEN
          IREF(NV) = 32
        ELSEIF( (INDEX(ADUM(1:),'nonaqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'non-aqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'napl').NE.0) .AND.
     &    INDEX(ADUM(1:),'density').NE.0 ) THEN
          IREF(NV) = 36
        ELSEIF( INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'density').NE.0 ) THEN
          IREF(NV) = 34
        ELSEIF( INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'density').NE.0 ) THEN
          IREF(NV) = 35
        ELSEIF( (INDEX(ADUM(1:),'prod').NE.0 .OR.
     &    INDEX(ADUM(1:),'inject').NE.0) .AND.
     &    INDEX(ADUM(1:),'well').NE.0 .AND. 
     &    INDEX(ADUM(1:),'total').NE.0 .AND. 
     &    INDEX(ADUM(1:),'petro').NE.0 .AND. 
     &    INDEX(ADUM(1:),'mass').NE.0 .AND. 
     &    INDEX(ADUM(1:),'rate').NE.0 ) THEN
          IREF(NV) = 349
!
!---      Check for quotes, indicating well name  ---
!
          ISTX = ISTART
          ICMX = ICOMMA
          VARB = 'Reference Node Variable: Coupled-Well Name/Number'
          CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,CDUM)
!
!---      Quotes found, read well name  ---
!
          IF( INDEX(CDUM(1:1),'"').NE.0 ) THEN
            NCH = INDEX(CDUM(1:),'"',.TRUE.)-1
            WNM_CWX = CDUM(2:NCH)
            DO NCW = 1,N_CW
              NCH = INDEX(WNM_CW(NCW)(1:),'  ') - 1
              IF( WNM_CWX(1:NCH).EQ.WNM_CW(NCW)(1:NCH) ) 
     &          IREF_CW(NV) = NCW
            ENDDO
            IF( IREF_CW(NV).EQ.0 ) THEN
              INDX = 4
              CHMSG = 'Unrecognized Well Name: ' // WNM_CWX(1:NCH)
              CALL WRMSGS( INDX )
            ENDIF
!
!---      Quotes not found, read well number  ---
!
          ELSE
            ISTART = ISTX
            ICOMMA = ICMX
            VARB = 'Reference Node Variable: Coupled-Well Number'
            CALL RDINT(ISTART,ICOMMA,CHDUM,IREF_CW(NV))
            IF( IREF_CW(NV).LT.1 .OR. IREF_CW(NV).GT.N_CW ) THEN
              INDX = 7
              CHMSG = 'Unrecognized Well Number: '
              IMSG = IREF_CW(NV)
              CALL WRMSGS( INDX )
            ENDIF
          ENDIF
!
!---      Check well-type  ---
!
          IF( INDEX(ADUM(1:),'prod').NE.0 ) THEN
            IF( IT_CW(IREF_CW(NV)).GT.0 ) THEN
              INDX = 7
              CHMSG = 'Incompatible Output for Well Type: ' // 
     &          ADUM(1:NCH)
              IMSG = IREF_CW(NV)
              CALL WRMSGS( INDX )
            ENDIF
            CHREF(349) = 'WPR'
            UNREF(349) = 'kg/s'
          ELSEIF( INDEX(ADUM(1:),'inject').NE.0 ) THEN
            IF( IT_CW(IREF_CW(NV)).LT.0 ) THEN
              INDX = 7
              CHMSG = 'Incompatible Output for Well Type: ' // 
     &          ADUM(1:NCH)
              IMSG = IREF_CW(NV)
              CALL WRMSGS( INDX )
            ENDIF
            CHREF(349) = 'WPR'
            UNREF(349) = 'kg/s'
          ENDIF
          WRITE(ADUM(NCH+1:NCH+11),'(A,I3)') ': well #',IREF_CW(NV)
          NCH = NCH+11
        ELSEIF( (INDEX(ADUM(1:),'prod').NE.0 .OR.
     &    INDEX(ADUM(1:),'inject').NE.0) .AND.
     &    INDEX(ADUM(1:),'well').NE.0 .AND. 
     &    INDEX(ADUM(1:),'total').NE.0 .AND. 
     &    INDEX(ADUM(1:),'petro').NE.0 .AND. 
     &    INDEX(ADUM(1:),'mass').NE.0 .AND. 
     &    INDEX(ADUM(1:),'integral').NE.0 ) THEN
          IREF(NV) = 350
!
!---      Check for quotes, indicating well name  ---
!
          ISTX = ISTART
          ICMX = ICOMMA
          VARB = 'Reference Node Variable: Coupled-Well Name/Number'
          CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,CDUM)
!
!---      Quotes found, read well name  ---
!
          IF( INDEX(CDUM(1:1),'"').NE.0 ) THEN
            NCH = INDEX(CDUM(1:),'"',.TRUE.)-1
            WNM_CWX = CDUM(2:NCH)
            DO NCW = 1,N_CW
              NCH = INDEX(WNM_CW(NCW)(1:),'  ') - 1
              IF( WNM_CWX(1:NCH).EQ.WNM_CW(NCW)(1:NCH) ) 
     &          IREF_CW(NV) = NCW
            ENDDO
            IF( IREF_CW(NV).EQ.0 ) THEN
              INDX = 4
              CHMSG = 'Unrecognized Well Name: ' // WNM_CWX(1:NCH)
              CALL WRMSGS( INDX )
            ENDIF
!
!---      Quotes not found, read well number  ---
!
          ELSE
            ISTART = ISTX
            ICOMMA = ICMX
            VARB = 'Reference Node Variable: Coupled-Well Number'
            CALL RDINT(ISTART,ICOMMA,CHDUM,IREF_CW(NV))
            IF( IREF_CW(NV).LT.1 .OR. IREF_CW(NV).GT.N_CW ) THEN
              INDX = 7
              CHMSG = 'Unrecognized Well Number: '
              IMSG = IREF_CW(NV)
              CALL WRMSGS( INDX )
            ENDIF
          ENDIF
!
!---      Check well-type  ---
!
          IF( INDEX(ADUM(1:),'prod').NE.0 ) THEN
            IF( IT_CW(IREF_CW(NV)).GT.0 ) THEN
              INDX = 7
              CHMSG = 'Incompatible Output for Well Type: ' // 
     &          ADUM(1:NCH)
              IMSG = IREF_CW(NV)
              CALL WRMSGS( INDX )
            ENDIF
            CHREF(350) = 'WPI'
            UNREF(350) = 'kg'
          ELSEIF( INDEX(ADUM(1:),'inject').NE.0 ) THEN
            IF( IT_CW(IREF_CW(NV)).LT.0 ) THEN
              INDX = 7
              CHMSG = 'Incompatible Output for Well Type: ' // 
     &          ADUM(1:NCH)
              IMSG = IREF_CW(NV)
              CALL WRMSGS( INDX )
            ENDIF
            CHREF(350) = 'WPI'
            UNREF(350) = 'kg'
          ENDIF
          WRITE(ADUM(NCH+1:NCH+11),'(A,I3)') ': well #',IREF_CW(NV)
          NCH = NCH+11
        ELSEIF( (INDEX(ADUM(1:),'prod').NE.0 .OR.
     &    INDEX(ADUM(1:),'inject').NE.0) .AND.
     &    INDEX(ADUM(1:),'well').NE.0 .AND. 
     &    INDEX(ADUM(1:),'petro').NE.0 .AND. 
     &    INDEX(ADUM(1:),'comp').NE.0 .AND. 
     &    INDEX(ADUM(1:),'mass').NE.0 .AND. 
     &    INDEX(ADUM(1:),'rate').NE.0 ) THEN
          IREF(NV) = 246
          VARB = 'Reference Node Variable: Coupled-Well Number'
!
!---      Check for quotes, indicating well name  ---
!
          ISTX = ISTART
          ICMX = ICOMMA
          VARB = 'Reference Node Variable: Coupled-Well Name/Number'
          CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,CDUM)
!
!---      Quotes found, read well name  ---
!
          IF( INDEX(CDUM(1:1),'"').NE.0 ) THEN
            NCH = INDEX(CDUM(1:),'"',.TRUE.)-1
            WNM_CWX = CDUM(2:NCH)
            DO NCW = 1,N_CW
              NCH = INDEX(WNM_CW(NCW)(1:),'  ') - 1
              IF( WNM_CWX(1:NCH).EQ.WNM_CW(NCW)(1:NCH) ) 
     &          IREF_CW(NV) = NCW
            ENDDO
            IF( IREF_CW(NV).EQ.0 ) THEN
              INDX = 4
              CHMSG = 'Unrecognized Well Name: ' // WNM_CWX(1:NCH)
              CALL WRMSGS( INDX )
            ENDIF
!
!---      Quotes not found, read well number  ---
!
          ELSE
            ISTART = ISTX
            ICOMMA = ICMX
            VARB = 'Reference Node Variable: Coupled-Well Number'
            CALL RDINT(ISTART,ICOMMA,CHDUM,IREF_CW(NV))
            IF( IREF_CW(NV).LT.1 .OR. IREF_CW(NV).GT.N_CW ) THEN
              INDX = 7
              CHMSG = 'Unrecognized Well Number: '
              IMSG = IREF_CW(NV)
              CALL WRMSGS( INDX )
            ENDIF
          ENDIF
!
!---      Check well-type  ---
!
          IF( INDEX(ADUM(1:),'prod').NE.0 ) THEN
            IF( IT_CW(IREF_CW(NV)).GT.0 ) THEN
              INDX = 7
              CHMSG = 'Incompatible Output for Well Type: ' // 
     &          ADUM(1:NCH)
              IMSG = IREF_CW(NV)
              CALL WRMSGS( INDX )
            ENDIF
          ELSEIF( INDEX(ADUM(1:),'inject').NE.0 ) THEN
            IF( IT_CW(IREF_CW(NV)).LT.0 ) THEN
              INDX = 7
              CHMSG = 'Incompatible Output for Well Type: ' // 
     &          ADUM(1:NCH)
              IMSG = IREF_CW(NV)
              CALL WRMSGS( INDX )
            ENDIF
          ENDIF
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          DO 160 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IREFGC(NV) = IGC
  160     CONTINUE
          IF( IREFGC(NV).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Petroleum Component Fraction Name: '
     &        // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
          IF( INDEX(ADUM(1:),'prod').NE.0 ) THEN
            CHREF(246) = 'WCR'
            UNREF(246) = 'kg/s'
          ELSEIF( INDEX(ADUM(1:),'inject').NE.0 ) THEN
            CHREF(246) = 'WCR'
            UNREF(246) = 'kg/s'
          ENDIF
          WRITE(ADUM(NCH+1:NCH+11),'(A,I3)') ': well #',IREF_CW(NV)
          NCH = NCH+11
        ELSEIF( (INDEX(ADUM(1:),'prod').NE.0 .OR.
     &    INDEX(ADUM(1:),'inject').NE.0) .AND.
     &    INDEX(ADUM(1:),'well').NE.0 .AND. 
     &    INDEX(ADUM(1:),'petro').NE.0 .AND. 
     &    INDEX(ADUM(1:),'comp').NE.0 .AND. 
     &    INDEX(ADUM(1:),'mass').NE.0 .AND. 
     &    INDEX(ADUM(1:),'integral').NE.0 ) THEN
          IREF(NV) = 257
!
!---      Check for quotes, indicating well name  ---
!
          ISTX = ISTART
          ICMX = ICOMMA
          VARB = 'Reference Node Variable: Coupled-Well Name/Number'
          CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,CDUM)
!
!---      Quotes found, read well name  ---
!
          IF( INDEX(CDUM(1:1),'"').NE.0 ) THEN
            NCH = INDEX(CDUM(1:),'"',.TRUE.)-1
            WNM_CWX = CDUM(2:NCH)
            DO NCW = 1,N_CW
              NCH = INDEX(WNM_CW(NCW)(1:),'  ') - 1
              IF( WNM_CWX(1:NCH).EQ.WNM_CW(NCW)(1:NCH) ) 
     &          IREF_CW(NV) = NCW
            ENDDO
            IF( IREF_CW(NV).EQ.0 ) THEN
              INDX = 4
              CHMSG = 'Unrecognized Well Name: ' // WNM_CWX(1:NCH)
              CALL WRMSGS( INDX )
            ENDIF
!
!---      Quotes not found, read well number  ---
!
          ELSE
            ISTART = ISTX
            ICOMMA = ICMX
            VARB = 'Reference Node Variable: Coupled-Well Number'
            CALL RDINT(ISTART,ICOMMA,CHDUM,IREF_CW(NV))
            IF( IREF_CW(NV).LT.1 .OR. IREF_CW(NV).GT.N_CW ) THEN
              INDX = 7
              CHMSG = 'Unrecognized Well Number: '
              IMSG = IREF_CW(NV)
              CALL WRMSGS( INDX )
            ENDIF
          ENDIF
!
!---      Check well-type  ---
!
          IF( INDEX(ADUM(1:),'prod').NE.0 ) THEN
            IF( IT_CW(IREF_CW(NV)).GT.0 ) THEN
              INDX = 7
              CHMSG = 'Incompatible Output for Well Type: ' // 
     &          ADUM(1:NCH)
              IMSG = IREF_CW(NV)
              CALL WRMSGS( INDX )
            ENDIF
          ELSEIF( INDEX(ADUM(1:),'inject').NE.0 ) THEN
            IF( IT_CW(IREF_CW(NV)).LT.0 ) THEN
              INDX = 7
              CHMSG = 'Incompatible Output for Well Type: ' // 
     &          ADUM(1:NCH)
              IMSG = IREF_CW(NV)
              CALL WRMSGS( INDX )
            ENDIF
          ENDIF
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          DO 162 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IREFGC(NV) = IGC
  162     CONTINUE
          IF( IREFGC(NV).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Petroleum Component Fraction Name: '
     &        // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
          IF( INDEX(ADUM(1:),'prod').NE.0 ) THEN
            CHREF(257) = 'WCI'
            UNREF(257) = 'kg'
          ELSEIF( INDEX(ADUM(1:),'inject').NE.0 ) THEN
            CHREF(257) = 'WCI'
            UNREF(257) = 'kg'
          ENDIF
          WRITE(ADUM(NCH+1:NCH+11),'(A,I3)') ': well #',IREF_CW(NV)
          NCH = NCH+11
        ELSEIF( INDEX(ADUM(1:),'total').NE.0 .AND.
     &    (INDEX(ADUM(1:),'h2o').NE.0 .OR.
     &    INDEX(ADUM(1:),'water').NE.0) .AND.
     &    INDEX(ADUM(1:),'mass').NE.0 ) THEN
          IREF(NV) = 37
        ELSEIF( INDEX(ADUM(1:),'total').NE.0 .AND.
     &    INDEX(ADUM(1:),'mass').NE.0 ) THEN
          IREF(NV) = 38
          CHREF(38) = 'TMC'
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          DO 164 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IREFGC(NV) = IGC
  164     CONTINUE
          IF( IREFGC(NV).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Total Mass Component Name: '
     &        // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
        ELSEIF( INDEX(ADUM(1:),'mass').NE.0 .AND.
     &    (INDEX(ADUM(1:),'h2o').NE.0 .OR.
     &    INDEX(ADUM(1:),'water').NE.0) .AND.
     &    INDEX(ADUM(1:),'source').NE.0 .AND.
     &    INDEX(ADUM(1:),'integral').NE.0 ) THEN
          IREF(NV) = 40
        ELSEIF( INDEX(ADUM(1:),'mass source int').NE.0 ) THEN
          IREF(NV) = 41
          CHREF(41) = 'SRIC'
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          DO 166 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IREFGC(NV) = IGC
  166     CONTINUE
          IF( IREFGC(NV).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Mass Source Integral Component Name: '
     &        // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
        ELSEIF( INDEX(ADUM(1:),'volumetric').NE.0 .AND.
     &    (INDEX(ADUM(1:),'salt').NE.0 .OR.
     &    INDEX(ADUM(1:),'nacl').NE.0) .AND.
     &    INDEX(ADUM(1:),'concentration').NE.0 ) THEN
          IREF(NV) = 47
        ELSEIF( INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    (INDEX(ADUM(1:),'salt').NE.0 .OR.
     &    INDEX(ADUM(1:),'nacl').NE.0) .AND.
     &    INDEX(ADUM(1:),'concentration').NE.0 ) THEN
          IREF(NV) = 48
        ELSEIF( INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'courant').NE.0 ) THEN
          ICRNT = 1
          IREF(NV) = 49
        ELSEIF( INDEX(ADUM(1:),'total').NE.0 .AND.
     &    (INDEX(ADUM(1:),'salt').NE.0 .OR.
     &    INDEX(ADUM(1:),'nacl').NE.0) .AND.
     &    INDEX(ADUM(1:),'mass').NE.0 ) THEN
          IREF(NV) = 50
        ELSEIF( INDEX(ADUM(1:),'system').NE.0 .AND.
     &    INDEX(ADUM(1:),'pressure').NE.0 ) THEN
          IREF(NV) = 80
          CHREF(80) = 'P'
        ELSEIF( INDEX(ADUM(1:),'xnc').NE.0 .AND.
     &    INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'volumetric').NE.0 ) THEN
          IREF(NV) = 87
        ELSEIF( INDEX(ADUM(1:),'ync').NE.0 .AND.
     &    INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'volumetric').NE.0 ) THEN
          IREF(NV) = 88
        ELSEIF( INDEX(ADUM(1:),'znc').NE.0 .AND.
     &    INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'volumetric').NE.0 ) THEN
          IREF(NV) = 89
        ELSEIF( INDEX(ADUM(1:),'x').NE.0 .AND.
     &    INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'volumetric').NE.0 ) THEN
          IREF(NV) = 51
        ELSEIF( INDEX(ADUM(1:),'y').NE.0 .AND.
     &    INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'volumetric').NE.0 ) THEN
          IREF(NV) = 52
        ELSEIF( INDEX(ADUM(1:),'z').NE.0 .AND.
     &    INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'volumetric').NE.0 ) THEN
          IREF(NV) = 53
        ELSEIF( INDEX(ADUM(1:),'xnc').NE.0 .AND.
     &    INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'volumetric').NE.0 ) THEN
          IREF(NV) = 90
        ELSEIF( INDEX(ADUM(1:),'ync').NE.0 .AND.
     &    INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'volumetric').NE.0 ) THEN
          IREF(NV) = 91
        ELSEIF( INDEX(ADUM(1:),'znc').NE.0 .AND.
     &    INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'volumetric').NE.0 ) THEN
          IREF(NV) = 92
        ELSEIF( INDEX(ADUM(1:),'x').NE.0 .AND.
     &    INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'volumetric').NE.0 ) THEN
          IREF(NV) = 54
        ELSEIF( INDEX(ADUM(1:),'y').NE.0 .AND.
     &    INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'volumetric').NE.0 ) THEN
          IREF(NV) = 55
        ELSEIF( INDEX(ADUM(1:),'z').NE.0 .AND.
     &    INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'volumetric').NE.0 ) THEN
          IREF(NV) = 56
        ELSEIF( INDEX(ADUM(1:),'x').NE.0 .AND.
     &    INDEX(ADUM(1:),'napl').NE.0 .AND.
     &    INDEX(ADUM(1:),'volumetric').NE.0 ) THEN
          IREF(NV) = 57
        ELSEIF( INDEX(ADUM(1:),'y').NE.0 .AND.
     &    INDEX(ADUM(1:),'napl').NE.0 .AND.
     &    INDEX(ADUM(1:),'volumetric').NE.0 ) THEN
          IREF(NV) = 58
        ELSEIF( INDEX(ADUM(1:),'z').NE.0 .AND.
     &    INDEX(ADUM(1:),'napl').NE.0 .AND.
     &    INDEX(ADUM(1:),'volumetric').NE.0 ) THEN
          IREF(NV) = 59
        ELSEIF( INDEX(ADUM(1:),'xnc').NE.0 .AND.
     &    INDEX(ADUM(1:),'heat').NE.0 .AND.
     &    INDEX(ADUM(1:),'flux').NE.0 ) THEN
          IREF(NV) = 96
        ELSEIF( INDEX(ADUM(1:),'ync').NE.0 .AND.
     &    INDEX(ADUM(1:),'heat').NE.0 .AND.
     &    INDEX(ADUM(1:),'flux').NE.0 ) THEN
          IREF(NV) = 97
        ELSEIF( INDEX(ADUM(1:),'znc').NE.0 .AND.
     &    INDEX(ADUM(1:),'heat').NE.0 .AND.
     &    INDEX(ADUM(1:),'flux').NE.0 ) THEN
          IREF(NV) = 98
        ELSEIF( INDEX(ADUM(1:),'x').NE.0 .AND.
     &    INDEX(ADUM(1:),'heat').NE.0 .AND.
     &    INDEX(ADUM(1:),'flux').NE.0 ) THEN
          IREF(NV) = 60
        ELSEIF( INDEX(ADUM(1:),'y').NE.0 .AND.
     &    INDEX(ADUM(1:),'heat').NE.0 .AND.
     &    INDEX(ADUM(1:),'flux').NE.0 ) THEN
          IREF(NV) = 61
        ELSEIF( INDEX(ADUM(1:),'z').NE.0 .AND.
     &    INDEX(ADUM(1:),'heat').NE.0 .AND.
     &    INDEX(ADUM(1:),'flux').NE.0 ) THEN
          IREF(NV) = 62
        ELSEIF( INDEX(ADUM(1:),'xnc').NE.0 .AND.
     &    INDEX(ADUM(1:),'salt').NE.0 .AND.
     &    INDEX(ADUM(1:),'flux').NE.0 ) THEN
          IREF(NV) = 67
        ELSEIF( INDEX(ADUM(1:),'ync').NE.0 .AND.
     &    INDEX(ADUM(1:),'salt').NE.0 .AND.
     &    INDEX(ADUM(1:),'flux').NE.0 ) THEN
          IREF(NV) = 68
        ELSEIF( INDEX(ADUM(1:),'znc').NE.0 .AND.
     &    INDEX(ADUM(1:),'salt').NE.0 .AND.
     &    INDEX(ADUM(1:),'flux').NE.0 ) THEN
          IREF(NV) = 69
        ELSEIF( INDEX(ADUM(1:),'x').NE.0 .AND.
     &    INDEX(ADUM(1:),'salt').NE.0 .AND.
     &    INDEX(ADUM(1:),'flux').NE.0 ) THEN
          IREF(NV) = 64
        ELSEIF( INDEX(ADUM(1:),'y').NE.0 .AND.
     &    INDEX(ADUM(1:),'salt').NE.0 .AND.
     &    INDEX(ADUM(1:),'flux').NE.0 ) THEN
          IREF(NV) = 65
        ELSEIF( INDEX(ADUM(1:),'z').NE.0 .AND.
     &    INDEX(ADUM(1:),'salt').NE.0 .AND.
     &    INDEX(ADUM(1:),'flux').NE.0 ) THEN
          IREF(NV) = 66
        ELSEIF( (INDEX(ADUM(1:),'h2o').NE.0 .OR.
     &    INDEX(ADUM(1:),'water').NE.0 ) .AND.
     &    INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'mole').NE.0 .AND.
     &    INDEX(ADUM(1:),'frac').NE.0 ) THEN
          IREF(NV) = 70
        ELSEIF( INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'mole').NE.0 ) THEN
          IF(  ISLC(68).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Black-Oil Reference Node Variable: '
     &        //  ADUM
            CALL WRMSGS( INDX )
          ENDIF
          IREF(NV) = 71
          CHREF(71) = 'XMGC'
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          DO 168 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IREFGC(NV) = IGC
  168     CONTINUE
          IF( IREFGC(NV).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Gas Mole Fraction Component Name: '
     &        // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
        ELSEIF( (INDEX(ADUM(1:),'nonaqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'non-aqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'napl').NE.0) .AND.
     &    INDEX(ADUM(1:),'mole').NE.0 ) THEN
          IF(  ISLC(68).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Black-Oil Reference Node Variable: '
     &        //  ADUM
            CALL WRMSGS( INDX )
          ENDIF
          IREF(NV) = 72
          CHREF(72) = 'XMNC'
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          DO 170 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IREFGC(NV) = IGC
  170     CONTINUE
          IF( IREFGC(NV).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Nonaqueous Liquid Mole Fraction ' //
     &        'Component Name: ' // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
        ELSEIF( (INDEX(ADUM(1:),'h2o').NE.0 .OR.
     &    INDEX(ADUM(1:),'water').NE.0 ) .AND.
     &    INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'conc').NE.0 ) THEN
          IREF(NV) = 73
        ELSEIF( INDEX(ADUM(1:),'gas conc').NE.0 ) THEN
          IREF(NV) = 74
          CHREF(74) = 'CGC'
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          DO 172 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IREFGC(NV) = IGC
  172     CONTINUE
          IF( IREFGC(NV).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Gas Concentration Component Name: '
     &        // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
        ELSEIF( (INDEX(ADUM(1:),'nonaqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'non-aqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'napl').NE.0) .AND.
     &    INDEX(ADUM(1:),'conc').NE.0 ) THEN
          IREF(NV) = 78
          CHREF(78) = 'CNC'
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          DO 174 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IREFGC(NV) = IGC
  174     CONTINUE
          IF( IREFGC(NV).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Nonaqueous Liquid Concentration ' //
     &        'Component Name: ' // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
        ELSEIF( (INDEX(ADUM(1:),'h2o').NE.0 .OR.
     &    INDEX(ADUM(1:),'water').NE.0 ) .AND.
     &    INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'conc').NE.0 ) THEN
          IREF(NV) = 76
        ELSEIF( INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'conc').NE.0 .AND.
     &    INDEX(ADUM(1:),'solute').EQ.0 .AND.
     &    INDEX(ADUM(1:),'species').EQ.0 ) THEN
          IREF(NV) = 77
          CHREF(77) = 'CLC'
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          DO 176 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IREFGC(NV) = IGC
  176     CONTINUE
          IF( IREFGC(NV).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Aqueous Concentration Component ' //
     &        'Name: ' // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
        ELSEIF( INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'courant').NE.0 ) THEN
          ICRNT = 1
          IREF(NV) = 79
        ELSEIF( INDEX(ADUM(1:),'node').NE.0 .AND.
     &    INDEX(ADUM(1:),'number').NE.0 ) THEN
          IREF(NV) = 100
        ELSEIF( (INDEX(ADUM(1:),'nacl').NE.0 .OR.
     &    INDEX(ADUM(1:),'salt').NE.0 ) .AND.
     &    INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'mass').NE.0 .AND.
     &    INDEX(ADUM(1:),'frac').NE.0 ) THEN
          IREF(NV) = 110
        ELSEIF( (INDEX(ADUM(1:),'h2o').NE.0 .OR.
     &    INDEX(ADUM(1:),'water').NE.0 ) .AND.
     &    INDEX(ADUM(1:),'vapor').NE.0 .AND.
     &    INDEX(ADUM(1:),'pressure').NE.0 ) THEN
          IREF(NV) = 128
!        ELSEIF( INDEX(ADUM(1:),'vapor').NE.0 .AND.
!     &    INDEX(ADUM(1:),'pressure').NE.0 ) THEN
!          IREF(NV) = 129
!          CHREF(129) = 'PVC'
!          VARB = 'Petroleum Component Name: '
!          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
!          DO 178 IGC = 1,NGC+2
!            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
!            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IREFGC(NV) = IGC
!  178     CONTINUE
!          IF( IREFGC(NV).EQ.0 ) THEN
!            INDX = 4
!            CHMSG = 'Unrecognized Vapor Pressure Component ' //
!     &        'Name: ' // BDUM(1:NCHB)
!            CALL WRMSGS( INDX )
!          ENDIF
        ELSEIF( INDEX(ADUM(1:),'inject').NE.0 .AND.
     &    INDEX(ADUM(1:),'well').NE.0 .AND. 
     &    INDEX(ADUM(1:),'press').NE.0 ) THEN
          IREF(NV) = 138
!
!---      Check for quotes, indicating well name  ---
!
          ISTX = ISTART
          ICMX = ICOMMA
          VARB = 'Reference Node Variable: Coupled-Well Name/Number'
          CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,CDUM)
!
!---      Quotes found, read well name  ---
!
          IF( INDEX(CDUM(1:1),'"').NE.0 ) THEN
            NCH = INDEX(CDUM(1:),'"',.TRUE.)-1
            WNM_CWX = CDUM(2:NCH)
            DO NCW = 1,N_CW
              NCH = INDEX(WNM_CW(NCW)(1:),'  ') - 1
              IF( WNM_CWX(1:NCH).EQ.WNM_CW(NCW)(1:NCH) ) 
     &          IREF_CW(NV) = NCW
            ENDDO
            IF( IREF_CW(NV).EQ.0 ) THEN
              INDX = 4
              CHMSG = 'Unrecognized Well Name: ' // WNM_CWX(1:NCH)
              CALL WRMSGS( INDX )
            ENDIF
!
!---      Quotes not found, read well number  ---
!
          ELSE
            ISTART = ISTX
            ICOMMA = ICMX
            VARB = 'Reference Node Variable: Coupled-Well Number'
            CALL RDINT(ISTART,ICOMMA,CHDUM,IREF_CW(NV))
            IF( IREF_CW(NV).LT.1 .OR. IREF_CW(NV).GT.N_CW ) THEN
              INDX = 7
              CHMSG = 'Unrecognized Well Number: '
              IMSG = IREF_CW(NV)
              CALL WRMSGS( INDX )
            ENDIF
          ENDIF
!
!---      Check well-type  ---
!
          IF( IT_CW(IREF_CW(NV)).LT.0 ) THEN
            INDX = 7
            CHMSG = 'Incompatible Output for Well Type: ' // ADUM(1:NCH)
            IMSG = IREF_CW(NV)
            CALL WRMSGS( INDX )
          ENDIF
          CHREF(138) = 'WP'
          UNREF(138) = 'pa'
          WRITE(ADUM(NCH+1:NCH+11),'(A,I3)') ': well #',IREF_CW(NV)
          NCH = NCH+11
        ELSEIF( (INDEX(ADUM(1:),'h2o').NE.0 .OR.
     &    INDEX(ADUM(1:),'water').NE.0 ) .AND.
     &    INDEX(ADUM(1:),'mass').NE.0 .AND.
     &    INDEX(ADUM(1:),'source').NE.0 .AND.
     &    INDEX(ADUM(1:),'rate').NE.0 ) THEN
          IREF(NV) = 140
        ELSEIF( INDEX(ADUM(1:),'mass source rate').NE.0 ) THEN
          IREF(NV) = 141
          CHREF(141) = 'SRCC'
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          DO 180 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IREFGC(NV) = IGC
  180     CONTINUE
          IF( IREFGC(NV).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Mass Source Rate Component Name: '
     &        // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
        ELSEIF( (INDEX(ADUM(1:),'nacl').NE.0 .OR.
     &    INDEX(ADUM(1:),'salt').NE.0 ) .AND.
     &    INDEX(ADUM(1:),'mass').NE.0 .AND.
     &    INDEX(ADUM(1:),'source').NE.0 .AND.
     &    INDEX(ADUM(1:),'rate').NE.0 ) THEN
          IREF(NV) = 147
        ELSEIF( (INDEX(ADUM(1:),'nonaqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'non-aqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'napl').NE.0) .AND.
     &    INDEX(ADUM(1:),'viscosity').NE.0 ) THEN
          IREF(NV) = 290
        ELSEIF( INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'viscosity').NE.0 ) THEN
          IREF(NV) = 176
        ELSEIF( INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'viscosity').NE.0 ) THEN
          IREF(NV) = 289
        ELSEIF( INDEX(ADUM(1:),'differential').NE.0 .AND.
     &    INDEX(ADUM(1:),'integrated').NE.0 .AND.
     &    (INDEX(ADUM(1:),'h2o').NE.0 .OR.
     &    INDEX(ADUM(1:),'water').NE.0) .AND.
     &    INDEX(ADUM(1:),'mass').NE.0 ) THEN
          IREF(NV) = 282
        ELSEIF( INDEX(ADUM(1:),'differential').NE.0 .AND.
     &    INDEX(ADUM(1:),'integrated').NE.0 .AND.
     &    INDEX(ADUM(1:),'mass').NE.0 ) THEN
          IREF(NV) = 283
          CHREF(283) = 'DMC'
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          DO 182 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IREFGC(NV) = IGC
  182     CONTINUE
          IF( IREFGC(NV).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Differential Integrated Mass ' //
     &        'Component Name: ' // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
        ELSEIF( INDEX(ADUM(1:),'integrated').NE.0 .AND.
     &    (INDEX(ADUM(1:),'h2o').NE.0 .OR.
     &    INDEX(ADUM(1:),'water').NE.0) .AND.
     &    INDEX(ADUM(1:),'mass').NE.0 ) THEN
          IREF(NV) = 191
        ELSEIF( INDEX(ADUM(1:),'integrated').NE.0 .AND.
     &    INDEX(ADUM(1:),'mass').NE.0 .AND.
     &    INDEX(ADUM(1:),'solute').EQ.0 .AND.
     &    INDEX(ADUM(1:),'species').EQ.0 ) THEN
          IREF(NV) = 192
          CHREF(192) = 'IMC'
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          DO 184 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IREFGC(NV) = IGC
  184     CONTINUE
          IF( IREFGC(NV).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Integrated Mass Component Name: '
     &        // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
        ELSEIF( INDEX(ADUM(1:),'integrated').NE.0 .AND.
     &    (INDEX(ADUM(1:),'h2o').NE.0 .OR.
     &    INDEX(ADUM(1:),'water').NE.0) .AND.
     &    INDEX(ADUM(1:),'aqueous').NE.0 ) THEN
          IREF(NV) = 194
        ELSEIF( INDEX(ADUM(1:),'integrated').NE.0 .AND.
     &    INDEX(ADUM(1:),'aqueous').NE.0 ) THEN
          IREF(NV) = 195
          CHREF(195) = 'IMLC'
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          DO 186 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IREFGC(NV) = IGC
  186     CONTINUE
          IF( IREFGC(NV).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Integrated Aqueous Component Name: '
     &        // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
        ELSEIF( INDEX(ADUM(1:),'integrated').NE.0 .AND.
     &    (INDEX(ADUM(1:),'h2o').NE.0 .OR.
     &    INDEX(ADUM(1:),'water').NE.0) .AND.
     &    INDEX(ADUM(1:),'gas').NE.0 ) THEN
          IREF(NV) = 197
        ELSEIF( INDEX(ADUM(1:),'integrated').NE.0 .AND.
     &    INDEX(ADUM(1:),'gas').NE.0 ) THEN
          IREF(NV) = 198
          CHREF(198) = 'IMGC'
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          DO 188 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IREFGC(NV) = IGC
  188     CONTINUE
          IF( IREFGC(NV).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Integrated Gas Component Name: '
     &        // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
        ELSEIF( INDEX(ADUM(1:),'prod').NE.0 .AND.
     &    INDEX(ADUM(1:),'well').NE.0 .AND. 
     &    INDEX(ADUM(1:),'fluid').NE.0 .AND. 
     &    INDEX(ADUM(1:),'density').NE.0 ) THEN
          IREF(NV) = 253
!
!---      Check for quotes, indicating well name  ---
!
          ISTX = ISTART
          ICMX = ICOMMA
          VARB = 'Reference Node Variable: Coupled-Well Name/Number'
          CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,CDUM)
!
!---      Quotes found, read well name  ---
!
          IF( INDEX(CDUM(1:1),'"').NE.0 ) THEN
            NCH = INDEX(CDUM(1:),'"',.TRUE.)-1
            WNM_CWX = CDUM(2:NCH)
            DO NCW = 1,N_CW
              NCH = INDEX(WNM_CW(NCW)(1:),'  ') - 1
              IF( WNM_CWX(1:NCH).EQ.WNM_CW(NCW)(1:NCH) ) 
     &          IREF_CW(NV) = NCW
            ENDDO
            IF( IREF_CW(NV).EQ.0 ) THEN
              INDX = 4
              CHMSG = 'Unrecognized Well Name: ' // WNM_CWX(1:NCH)
              CALL WRMSGS( INDX )
            ENDIF
!
!---      Quotes not found, read well number  ---
!
          ELSE
            ISTART = ISTX
            ICOMMA = ICMX
            VARB = 'Reference Node Variable: Coupled-Well Number'
            CALL RDINT(ISTART,ICOMMA,CHDUM,IREF_CW(NV))
            IF( IREF_CW(NV).LT.1 .OR. IREF_CW(NV).GT.N_CW ) THEN
              INDX = 7
              CHMSG = 'Unrecognized Well Number: '
              IMSG = IREF_CW(NV)
              CALL WRMSGS( INDX )
            ENDIF
          ENDIF
!
!---      Check well-type  ---
!
          IF( IT_CW(IREF_CW(NV)).GT.0 ) THEN
            INDX = 7
            CHMSG = 'Incompatible Output for Well Type: ' // ADUM(1:NCH)
            IMSG = IREF_CW(NV)
            CALL WRMSGS( INDX )
          ENDIF
          CHREF(253) = 'WFD'
          UNREF(253) = 'kg/m^3'
          WRITE(ADUM(NCH+1:NCH+11),'(A,I3)') ': well #',IREF_CW(NV)
          NCH = NCH+11
        ELSEIF( (INDEX(ADUM(1:),'prod').NE.0 .OR.
     &    INDEX(ADUM(1:),'inject').NE.0) .AND.
     &    INDEX(ADUM(1:),'well').NE.0 .AND. 
     &    INDEX(ADUM(1:),'water').NE.0 .AND. 
     &    INDEX(ADUM(1:),'mass').NE.0 .AND. 
     &    INDEX(ADUM(1:),'rate').NE.0 ) THEN
          IREF(NV) = 351
!
!---      Check for quotes, indicating well name  ---
!
          ISTX = ISTART
          ICMX = ICOMMA
          VARB = 'Reference Node Variable: Coupled-Well Name/Number'
          CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,CDUM)
!
!---      Quotes found, read well name  ---
!
          IF( INDEX(CDUM(1:1),'"').NE.0 ) THEN
            NCH = INDEX(CDUM(1:),'"',.TRUE.)-1
            WNM_CWX = CDUM(2:NCH)
            DO NCW = 1,N_CW
              NCH = INDEX(WNM_CW(NCW)(1:),'  ') - 1
              IF( WNM_CWX(1:NCH).EQ.WNM_CW(NCW)(1:NCH) ) 
     &          IREF_CW(NV) = NCW
            ENDDO
            IF( IREF_CW(NV).EQ.0 ) THEN
              INDX = 4
              CHMSG = 'Unrecognized Well Name: ' // WNM_CWX(1:NCH)
              CALL WRMSGS( INDX )
            ENDIF
!
!---      Quotes not found, read well number  ---
!
          ELSE
            ISTART = ISTX
            ICOMMA = ICMX
            VARB = 'Reference Node Variable: Coupled-Well Number'
            CALL RDINT(ISTART,ICOMMA,CHDUM,IREF_CW(NV))
            IF( IREF_CW(NV).LT.1 .OR. IREF_CW(NV).GT.N_CW ) THEN
              INDX = 7
              CHMSG = 'Unrecognized Well Number: '
              IMSG = IREF_CW(NV)
              CALL WRMSGS( INDX )
            ENDIF
          ENDIF
!
!---      Check well-type  ---
!
          IF( INDEX(ADUM(1:),'prod').NE.0 ) THEN
            IF( IT_CW(IREF_CW(NV)).GT.0 ) THEN
              INDX = 7
              CHMSG = 'Incompatible Output for Well Type: ' // 
     &          ADUM(1:NCH)
              IMSG = IREF_CW(NV)
              CALL WRMSGS( INDX )
            ENDIF
            CHREF(351) = 'WWR'
            UNREF(351) = 'kg/s'
          ELSEIF( INDEX(ADUM(1:),'inject').NE.0 ) THEN
            IF( IT_CW(IREF_CW(NV)).LT.0 ) THEN
              INDX = 7
              CHMSG = 'Incompatible Output for Well Type: ' // 
     &          ADUM(1:NCH)
              IMSG = IREF_CW(NV)
              CALL WRMSGS( INDX )
            ENDIF
            CHREF(351) = 'WWR'
            UNREF(351) = 'kg/s'
          ENDIF
          WRITE(ADUM(NCH+1:NCH+11),'(A,I3)') ': well #',IREF_CW(NV)
          NCH = NCH+11
        ELSEIF( (INDEX(ADUM(1:),'prod').NE.0 .OR.
     &    INDEX(ADUM(1:),'inject').NE.0) .AND.
     &    INDEX(ADUM(1:),'well').NE.0 .AND. 
     &    INDEX(ADUM(1:),'water').NE.0 .AND. 
     &    INDEX(ADUM(1:),'mass').NE.0 .AND. 
     &    INDEX(ADUM(1:),'integral').NE.0 ) THEN
          IREF(NV) = 352
!
!---      Check for quotes, indicating well name  ---
!
          ISTX = ISTART
          ICMX = ICOMMA
          VARB = 'Reference Node Variable: Coupled-Well Name/Number'
          CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,CDUM)
!
!---      Quotes found, read well name  ---
!
          IF( INDEX(CDUM(1:1),'"').NE.0 ) THEN
            NCH = INDEX(CDUM(1:),'"',.TRUE.)-1
            WNM_CWX = CDUM(2:NCH)
            DO NCW = 1,N_CW
              NCH = INDEX(WNM_CW(NCW)(1:),'  ') - 1
              IF( WNM_CWX(1:NCH).EQ.WNM_CW(NCW)(1:NCH) ) 
     &          IREF_CW(NV) = NCW
            ENDDO
            IF( IREF_CW(NV).EQ.0 ) THEN
              INDX = 4
              CHMSG = 'Unrecognized Well Name: ' // WNM_CWX(1:NCH)
              CALL WRMSGS( INDX )
            ENDIF
!
!---      Quotes not found, read well number  ---
!
          ELSE
            ISTART = ISTX
            ICOMMA = ICMX
            VARB = 'Reference Node Variable: Coupled-Well Number'
            CALL RDINT(ISTART,ICOMMA,CHDUM,IREF_CW(NV))
            IF( IREF_CW(NV).LT.1 .OR. IREF_CW(NV).GT.N_CW ) THEN
              INDX = 7
              CHMSG = 'Unrecognized Well Number: '
              IMSG = IREF_CW(NV)
              CALL WRMSGS( INDX )
            ENDIF
          ENDIF
!
!---      Check well-type  ---
!
          IF( INDEX(ADUM(1:),'prod').NE.0 ) THEN
            IF( IT_CW(IREF_CW(NV)).GT.0 ) THEN
              INDX = 7
              CHMSG = 'Incompatible Output for Well Type: ' // 
     &          ADUM(1:NCH)
              IMSG = IREF_CW(NV)
              CALL WRMSGS( INDX )
            ENDIF
            CHREF(352) = 'WWI'
            UNREF(352) = 'kg'
          ELSEIF( INDEX(ADUM(1:),'inject').NE.0 ) THEN
            IF( IT_CW(IREF_CW(NV)).LT.0 ) THEN
              INDX = 7
              CHMSG = 'Incompatible Output for Well Type: ' // 
     &          ADUM(1:NCH)
              IMSG = IREF_CW(NV)
              CALL WRMSGS( INDX )
            ENDIF
            CHREF(352) = 'WWI'
            UNREF(352) = 'kg'
          ENDIF
          WRITE(ADUM(NCH+1:NCH+11),'(A,I3)') ': well #',IREF_CW(NV)
          NCH = NCH+11
        ELSEIF( INDEX(ADUM(1:),'salt').NE.0 .AND.
     &    INDEX(ADUM(1:),'saturation').NE.0 ) THEN
          IREF(NV) = 264
        ELSEIF( (INDEX(ADUM(1:),'x intrinsic').NE.0 .OR.
     &    INDEX(ADUM(1:),'x-intrinsic').NE.0 ) .AND.
     &    INDEX(ADUM(1:),'perm').NE.0 ) THEN
          IREF(NV) = 247
        ELSEIF( (INDEX(ADUM(1:),'y intrinsic').NE.0 .OR.
     &    INDEX(ADUM(1:),'y-intrinsic').NE.0 ) .AND.
     &    INDEX(ADUM(1:),'perm').NE.0 ) THEN
          IREF(NV) = 248
        ELSEIF( (INDEX(ADUM(1:),'z intrinsic').NE.0 .OR.
     &    INDEX(ADUM(1:),'z-intrinsic').NE.0 ) .AND.
     &    INDEX(ADUM(1:),'perm').NE.0 ) THEN
          IREF(NV) = 249
        ELSEIF( INDEX(ADUM(1:),'x').NE.0 .AND.
     &    INDEX(ADUM(1:),'node').NE.0 .AND.
     &    INDEX(ADUM(1:),'centroid').NE.0 ) THEN
          IREF(NV) = 291
        ELSEIF( INDEX(ADUM(1:),'y').NE.0 .AND.
     &    INDEX(ADUM(1:),'node').NE.0 .AND.
     &    INDEX(ADUM(1:),'centroid').NE.0 ) THEN
          IREF(NV) = 292
        ELSEIF( INDEX(ADUM(1:),'z').NE.0 .AND.
     &    INDEX(ADUM(1:),'node').NE.0 .AND.
     &    INDEX(ADUM(1:),'centroid').NE.0 ) THEN
          IREF(NV) = 293
        ELSEIF( (INDEX(ADUM(1:),'nonaqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'non-aqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'napl').NE.0) .AND.
     &    INDEX(ADUM(1:),'enthalpy').NE.0 ) THEN
          IREF(NV) = 298
        ELSEIF( INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'enthalpy').NE.0 ) THEN
          IREF(NV) = 297
        ELSEIF( INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'enthalpy').NE.0 ) THEN
          IREF(NV) = 296
        ELSEIF( INDEX(ADUM(1:),'integrated').NE.0 .AND.
     &    INDEX(ADUM(1:),'energy').NE.0 ) THEN
          IREF(NV) = 378
        ELSEIF( INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    (INDEX(ADUM(1:),'nonaqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'non-aqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'napl').NE.0) .AND.
     &    INDEX(ADUM(1:),'tension').NE.0 ) THEN
          IREF(NV) = 396
#ifdef ecke
        ELSEIF( ( INDEX(ADUM(1:),'solute volumetric conc').NE.0 .OR.
     &    INDEX(ADUM(1:),'species volumetric conc').NE.0 ) .AND.
     &    INDEX( SPNM(1:),'total_' ).NE.0 .AND.
     &    INDEX( SPNM(1:),'exchange' ).NE.0 ) THEN
          IREF(NV) = 400+(NSL-1)*33 + 12
          IF( NSL.GT.NSOLU ) THEN
            INDX = 400+(NSL-1)*33 + 12
            CHREF(INDX) = 'SPX'
            UNREF(INDX) = 'mol/m^3'
          ENDIF
        ELSEIF( ( INDEX(ADUM(1:),'solute volumetric conc').NE.0 .OR.
     &    INDEX(ADUM(1:),'species volumetric conc').NE.0 ) .AND.
     &    INDEX( SPNM(1:),'total_' ).NE.0 .AND.
     &    INDEX( SPNM(1:),'solid' ).NE.0 ) THEN
          IREF(NV) = 400+(NSL-1)*33 + 26
          IF( NSL.GT.NSOLU ) THEN
            INDX = 400+(NSL-1)*33 + 26
            CHREF(INDX) = 'SPS'
            UNREF(INDX) = 'mol/m^3'
          ENDIF
        ELSEIF( ( INDEX(ADUM(1:),'solute volumetric conc').NE.0 .OR.
     &    INDEX(ADUM(1:),'species volumetric conc').NE.0 ) .AND.
     &    INDEX( SPNM(1:),'total_' ).NE.0 ) THEN
          IREF(NV) = 400+(NSL-1)*33 + 1
          IF( NSL.GT.NSOLU ) THEN
            INDX = 400+(NSL-1)*33 + 1
            CHREF(INDX) = 'SP'
            UNREF(INDX) = 'mol/m^3'
          ENDIF
#else
        ELSEIF( INDEX(ADUM(1:),'solute volumetric conc').NE.0 ) THEN
          IREF(NV) = 400+(NSL-1)*33 + 1
#endif
#ifdef ecke
        ELSEIF( ( INDEX(ADUM(1:),'solute aqueous conc').NE.0 .OR.
     &    INDEX(ADUM(1:),'species aqueous conc').NE.0 ) .AND.
     &    INDEX( SPNM(1:),'total_' ).NE.0 .AND.
     &    INDEX( SPNM(1:),'exchange' ).NE.0 ) THEN
          IREF(NV) = 400+(NSL-1)*33 + 13
          IF( NSL.GT.NSOLU ) THEN
            INDX = 400+(NSL-1)*33 + 13
            CHREF(INDX) = 'SPLX'
            UNREF(INDX) = 'mol/m^3'
          ENDIF
        ELSEIF( ( INDEX(ADUM(1:),'solute aqueous conc').NE.0 .OR.
     &    INDEX(ADUM(1:),'species aqueous conc').NE.0 ) .AND.
     &    INDEX( SPNM(1:),'total_' ).NE.0 .AND.
     &    INDEX( SPNM(1:),'solid' ).NE.0 ) THEN
          IREF(NV) = 400+(NSL-1)*33 + 27
          IF( NSL.GT.NSOLU ) THEN
            INDX = 400+(NSL-1)*33 + 27
            CHREF(INDX) = 'SPLS'
            UNREF(INDX) = 'mol/m^3'
          ENDIF
        ELSEIF( ( INDEX(ADUM(1:),'solute aqueous conc').NE.0 .OR.
     &    INDEX(ADUM(1:),'species aqueous conc').NE.0 ) .AND.
     &    INDEX( SPNM(1:),'total_' ).NE.0 ) THEN
          IREF(NV) = 400+(NSL-1)*33 + 2
          IF( NSL.GT.NSOLU ) THEN
            INDX = 400+(NSL-1)*33 + 2
            CHREF(INDX) = 'SPL'
            UNREF(INDX) = 'mol/m^3'
          ENDIF
#else
        ELSEIF( INDEX(ADUM(1:),'solute aqueous conc').NE.0 ) THEN
          IREF(NV) = 400+(NSL-1)*33 + 2
#endif
#ifdef ecke
        ELSEIF( ( INDEX(ADUM(1:),'solute gas conc').NE.0 .OR.
     &    INDEX(ADUM(1:),'species gas conc').NE.0 ) .AND.
     &    INDEX( SPNM(1:),'total_' ).NE.0 .AND.
     &    INDEX( SPNM(1:),'exchange' ).NE.0 ) THEN
          IREF(NV) = 400+(NSL-1)*33 + 14
          IF( NSL.GT.NSOLU ) THEN
            INDX = 400+(NSL-1)*33 + 14
            CHREF(INDX) = 'SPGS'
            UNREF(INDX) = 'mol/m^3'
          ENDIF
        ELSEIF( ( INDEX(ADUM(1:),'solute gas conc').NE.0 .OR.
     &    INDEX(ADUM(1:),'species gas conc').NE.0 ) .AND.
     &    INDEX( SPNM(1:),'total_' ).NE.0 .AND.
     &    INDEX( SPNM(1:),'solid' ).NE.0 ) THEN
          IREF(NV) = 400+(NSL-1)*33 + 28
          IF( NSL.GT.NSOLU ) THEN
            INDX = 400+(NSL-1)*33 + 28
            CHREF(INDX) = 'SPGS'
            UNREF(INDX) = 'mol/m^3'
          ENDIF
        ELSEIF( ( INDEX(ADUM(1:),'solute gas conc').NE.0 .OR.
     &    INDEX(ADUM(1:),'species gas conc').NE.0 ) .AND.
     &    INDEX( SPNM(1:),'total_' ).NE.0 ) THEN
          IREF(NV) = 400+(NSL-1)*33 + 3
          IF( NSL.GT.NSOLU ) THEN
            INDX = 400+(NSL-1)*33 + 3
            CHREF(INDX) = 'SPG'
            UNREF(INDX) = 'mol/m^3'
          ENDIF
#else
        ELSEIF( INDEX(ADUM(1:),'solute gas conc').NE.0 ) THEN
          IREF(NV) = 400+(NSL-1)*33 + 3
#endif
#ifdef ecke
        ELSEIF( ( INDEX(ADUM(1:),'solute nonaqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'species non-aqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'species napl').NE.0 ) .AND.
     &    INDEX( SPNM(1:),'total_' ).NE.0 .AND.
     &    INDEX( SPNM(1:),'exchange' ).NE.0 ) THEN
          IREF(NV) = 400+(NSL-1)*33 + 15
          IF( NSL.GT.NSOLU ) THEN
            INDX = 400+(NSL-1)*33 + 15
            CHREF(INDX) = 'SPNS'
            UNREF(INDX) = 'mol/m^3'
          ENDIF
        ELSEIF( ( INDEX(ADUM(1:),'solute nonaqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'species non-aqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'species napl').NE.0 ) .AND.
     &    INDEX( SPNM(1:),'total_' ).NE.0 .AND.
     &    INDEX( SPNM(1:),'solid' ).NE.0 ) THEN
          IREF(NV) = 400+(NSL-1)*33 + 29
          IF( NSL.GT.NSOLU ) THEN
            INDX = 400+(NSL-1)*33 + 29
            CHREF(INDX) = 'SPNS'
            UNREF(INDX) = 'mol/m^3'
          ENDIF
        ELSEIF( ( INDEX(ADUM(1:),'solute nonaqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'species non-aqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'species napl').NE.0 ) .AND.
     &    INDEX( SPNM(1:),'total_' ).NE.0 ) THEN
          IREF(NV) = 400+(NSL-1)*33 + 4
          IF( NSL.GT.NSOLU ) THEN
            INDX = 400+(NSL-1)*33 + 4
            CHREF(INDX) = 'SPN'
            UNREF(INDX) = 'mol/m^3'
          ENDIF
#else
        ELSEIF( INDEX(ADUM(1:),'solute nonaqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'species non-aqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'species napl').NE.0 ) THEN
          IREF(NV) = 400+(NSL-1)*33 + 4
#endif
        ELSEIF( INDEX(ADUM(1:),'solute').NE.0 .AND.
     &    INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'mol').NE.0 ) THEN
          IREF(NV) = 400+(NSL-1)*33 + 5
        ELSEIF( INDEX(ADUM(1:),'solute').NE.0 .AND.
     &    INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'mole').NE.0 ) THEN
          IREF(NV) = 400+(NSL-1)*33 + 6
        ELSEIF( INDEX(ADUM(1:),'solute').NE.0 .AND.
     &    (INDEX(ADUM(1:),'nonaqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'non-aqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'napl').NE.0) .AND.
     &    INDEX(ADUM(1:),'mole').NE.0 ) THEN
          IREF(NV) = 400+(NSL-1)*33 + 7
        ELSEIF( INDEX(ADUM(1:),'x').NE.0 .AND.
     &    INDEX(ADUM(1:),'solute').NE.0 .AND.
     &    INDEX(ADUM(1:),'flux').NE.0 ) THEN
          IREF(NV) = 400+(NSL-1)*33 + 8
        ELSEIF( INDEX(ADUM(1:),'y').NE.0 .AND.
     &    INDEX(ADUM(1:),'solute').NE.0 .AND.
     &    INDEX(ADUM(1:),'flux').NE.0 ) THEN
          IREF(NV) = 400+(NSL-1)*33 + 9
        ELSEIF( INDEX(ADUM(1:),'z').NE.0 .AND.
     &    INDEX(ADUM(1:),'solute').NE.0 .AND.
     &    INDEX(ADUM(1:),'flux').NE.0 ) THEN
          IREF(NV) = 400+(NSL-1)*33 + 10
#ifdef ecke
        ELSEIF( (INDEX(ADUM(1:),'solute source').NE.0) .OR.
     &    ((INDEX(ADUM(1:),'species source').NE.0) .AND.
     &    (INDEX( SPNM(1:),'total_' ).NE.0)) ) THEN
          IREF(NV) = 400+(NSL-1)*33 + 11
          IF( NSL.GT.NSOLU ) THEN
            INDX = 400+(NSL-1)*33 + 11
            CHREF(INDX) = 'SPSR'
            UNREF(INDX) = 'mol/s'
          ENDIF
#else
        ELSEIF( INDEX(ADUM(1:),'solute').NE.0 .AND.
     &    INDEX(ADUM(1:),'source').NE.0 ) THEN
          IREF(NV) = 400+(NSL-1)*33 + 11
#endif
#ifdef ecke
        ELSEIF( ( INDEX(ADUM(1:),'solute').NE.0 .OR. 
     &    ( INDEX(ADUM(1:),'species').NE.0 .AND. 
     &    INDEX( SPNM(1:),'total_' ).NE.0 ) ) .AND.
     &    INDEX(ADUM(1:),'integrated').NE.0 .AND.
     &    INDEX(ADUM(1:),'mass').NE.0 ) THEN
          IREF(NV) = 400+(NSL-1)*33 + 23
          IF( NSL.GT.NSOLU ) THEN
            INDX = 400+(NSL-1)*33 + 23
            CHREF(INDX) = 'SPIM'
            UNREF(INDX) = 'mol'
          ENDIF
#endif
        ELSEIF( INDEX(ADUM(1:),'solute').NE.0 .AND.
     &    INDEX(ADUM(1:),'integrated').NE.0 .AND.
     &    INDEX(ADUM(1:),'mass').NE.0 ) THEN
          IREF(NV) = 400+(NSL-1)*33 + 23
#ifdef ecke
        ELSEIF( INDEX(ADUM(1:),'species volumetric conc').NE.0 ) THEN
          INDX = 400+(NSOLU*33)+((NEQC+NEQK)*33)+(NSP-1)*33 + 1
          IREF(NV) = INDX
          CHREF(INDX) = 'SP'
          UNREF(INDX) = 'mol/m^3'
        ELSEIF( INDEX(ADUM(1:),'species aqueous conc').NE.0 ) THEN
          INDX = 400+(NSOLU*33)+((NEQC+NEQK)*33)+(NSP-1)*33 + 2
          IREF(NV) = INDX
          CHREF(INDX) = 'SPL'
          UNREF(INDX) = 'mol/m^3'
        ELSEIF( INDEX(ADUM(1:),'species gas conc').NE.0 ) THEN
          INDX = 400+(NSOLU*33)+((NEQC+NEQK)*33)+(NSP-1)*33 + 3
          IREF(NV) = INDX
          CHREF(INDX) = 'SPG'
          UNREF(INDX) = 'mol/m^3'
        ELSEIF( INDEX(ADUM(1:),'species source').NE.0 ) THEN
          INDX = 400+(NSOLU*33)+((NEQC+NEQK)*33)+(NSP-1)*33 + 11
          IREF(NV) = INDX
        ELSEIF( INDEX(ADUM(1:),'species integrated mass').NE.0 ) THEN
          INDX = 400+(NSOLU*33)+((NEQC+NEQK)*33)+(NSP-1)*33 + 23
          IREF(NV) = INDX
          CHREF(INDX) = 'SPIM'
          UNREF(INDX) = 'mol'
        ELSEIF( INDEX(ADUM(1:),'mineral area').NE.0 ) THEN
          INDX = 400+(NSOLU*33)+((NEQC+NEQK)*33)+(NSP-1)*33 + 24
          IREF(NV) = INDX
          CHREF(INDX) = 'SPMA'
          UNREF(INDX) = 'm^2'
        ELSEIF( INDEX(ADUM(1:),'mineral rate').NE.0 ) THEN
          INDX = 400+(NSOLU*33)+((NEQC+NEQK)*33)+(NSP-1)*33 + 25
          IREF(NV) = INDX
          CHREF(INDX) = 'SPMR'
          UNREF(INDX) = 'mol/s'
        ELSEIF( INDEX(ADUM(1:),'volume fraction').NE.0 ) THEN
          INDX = 400+(NSOLU*33)+((NEQC+NEQK)*33)+(NSP-1)*33 + 26
          IREF(NV) = INDX
          CHREF(INDX) = 'SPVF'
          UNREF(INDX) = ''
        ELSEIF( INDEX(ADUM(1:),'ph').NE.0 ) THEN
          INDX = 400+(NSOLU*33)+((NEQC+NEQK)*33) + 27
          IREF(NV) = INDX
          CHREF(INDX) = 'pH'
#endif
        ELSE
          INDX = 4
          CHMSG = 'Unrecognized Reference Node Variable: '//ADUM
          CALL WRMSGS( INDX )
        ENDIF
!
!---    Check for duplicate reference node variables  ---
!
        DO 190 NX = 1,NV-1
          IF( IREF(NV).EQ.IREF(NX) .AND. IREFGC(NV).EQ.IREFGC(NX) ) THEN
            IF( IREF_CW(NV).EQ.0 ) THEN
              INDX = 4
              CHMSG = 'Duplicate Reference Node Variable: '//ADUM
              CALL WRMSGS( INDX )
            ELSEIF( IREF_CW(NV).EQ.IREF_CW(NX) ) THEN
              INDX = 4
              CHMSG = 'Duplicate Reference Node Variable: '//ADUM
              CALL WRMSGS( INDX )
            ENDIF
          ENDIF
  190   CONTINUE
!
!---    Reference node variable units  ---
!
        IDFLT = 1
        VARB = 'Reference Node Variable Unit'
        CALL RDCHR(ISTART,ICOMMA,NCU,CHDUM,UNREF(IREF(NV)))
        IF( INDEX( ADUM(1:),'solute' ).NE.0 ) THEN
          WRITE( IWR,'(2X,3A,2X,2A,I2,A)' ) ADUM(1:NCH),', ',
     &      UNREF(IREF(NV))(1:NCU),SOLNM(1:NCS),' Solute(',NSL,')'
#ifdef ecke
        ELSEIF( INDEX( ADUM(1:),'species' ).NE.0 ) THEN
          WRITE( IWR,'(2X,3A,2X,2A,I2,A)' ) ADUM(1:NCH),', ',
     &      UNREF(IREF(NV))(1:NCU),SPNM(1:NCS),' Species(',NSP,')'
#endif
        ELSEIF( IREFGC(NV).NE.0 ) THEN
          WRITE( IWR,'(2X,5A)' ) ADUM(1:NCH),', ',
     &      BDUM(1:NCHB),', ',UNREF(IREF(NV))(1:NCU)
        ELSE
          WRITE( IWR,'(2X,3A)' ) ADUM(1:NCH),', ',UNREF(IREF(NV))(1:NCU)
        ENDIF
        CALL RDOUUN( IREF(NV) )
        VAR = 0.D+0
        INDX = 0
        CALL RDUNIT( UNREF(IREF(NV)),VAR,INDX )
  200 CONTINUE
      NVREF = NVREF + NVC
!
!---  Plot file output times  ---
!
      CALL RDINPL( CHDUM )
      CALL LCASE( CHDUM )
      ISTART = 1
      VARB = 'Number of Plot File Output Times'
      CALL RDINT(ISTART,ICOMMA,CHDUM,NPRTM)
      WRITE(IWR,'(/,A)') ' Plot File Output Times:'
      PRTMX = 0.D+0
      IC = 0
      DO 300 N = 1,NPRTM
        IF( IC.GT.1 ) PRTMX = PRTM(IC-1)
        CALL RDINPL( CHDUM )
        CALL LCASE( CHDUM )
        ISTART = 1
        ICMX = INDEX( CHDUM(ISTART:), ',' )
        IATX = INDEX( CHDUM(ISTART:), '@' )
!
!---    Sequence of plot file output times  ---
!
        IF( IATX.GT.1 .AND. IATX.LT.ICMX ) THEN
          CHDUM(IATX:IATX) = ','
          VARB = 'Count Integer'
          CALL RDINT(ISTART,ICOMMA,CHDUM,IATX )
          VARB = 'Delta Plot File Output Time'
          CALL RDDPR(ISTART,ICOMMA,CHDUM,DTX )
          VARB = 'Plot File Output Time Units'
          CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
          INDX = 0
          IUNS = 1
          CALL RDUNIT(UNTS,DTX,INDX)
          DO 210 II = 1,IATX
            IC = IC + 1
            IF( IC.GT.LPTM ) THEN
              INDX = 5
              CHMSG = 'Number of Output Times > Parameter LPTM'
              CALL WRMSGS( INDX )
            ENDIF
            IF( IC.EQ.1 ) THEN
              PRTM(IC) = DTX
            ELSE
              PRTM(IC) = PRTM(IC-1) + DTX
            ENDIF
            PRTMX = PRTM(IC)
            INDX = 1
            IUNS = 1
            CALL RDUNIT(UNTS,PRTMX,INDX)
            WRITE(IWR,'(2X,1PE11.4,1X,A)') PRTMX,UNTS(1:NCH)
            TMPR = MIN( TMPR,PRTM(IC) )
  210     CONTINUE
!
!---    Single plot file output time  ---
!
        ELSE
          IC = IC + 1
          IF( IC.GT.LPTM ) THEN
            INDX = 5
            CHMSG = 'Number of Output Times > Parameter LPTM'
            CALL WRMSGS( INDX )
          ENDIF
          VARB = 'Plot File Output Time'
          CALL RDDPR(ISTART,ICOMMA,CHDUM,PRTM(IC))
          VARB = 'Plot File Output Time Units'
          CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
          WRITE(IWR,'(2X,1PE11.4,1X,A)') PRTM(IC),UNTS(1:NCH)
          INDX = 0
          IUNS = 1
          CALL RDUNIT(UNTS,PRTM(IC),INDX)
          TMPR = MIN( TMPR,PRTM(IC) )
        ENDIF
 300  CONTINUE
      NPRTM = IC
      WRITE(IWR,'(2X,A)') 'After the Final Time Step'
!
!---  Read Plot File Variables  ---
!
      WRITE( IWR,'(/,A)') 'Plot File Variables:'
      CALL RDINPL( CHDUM )
      CALL LCASE( CHDUM )
      ISTART = 1
      VARB = 'Number of Plot File Variables'
      CALL RDINT(ISTART,ICOMMA,CHDUM,NVPLOT)
      NVC = 0
      DO 400 NV = 1,NVPLOT
        CALL RDINPL( CHDUM )
        CALL LCASE( CHDUM )
        ISTART = 1
        VARB = 'Plot File Variable'
        CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,ADUM)
        IF( INDEX( ADUM(1:),'solute' ).NE.0 ) THEN
          VARB = 'Plot File Variable: Solute Name'
          CALL RDCHR(ISTART,ICOMMA,NCS,CHDUM,SOLNM)
          DO 310 NSL = 1,NSOLU
            IF( SOLNM.EQ.SOLUT(NSL) ) GOTO 320
  310     CONTINUE
          INDX = 4
          CHMSG = 'Unrecognized Solute Name: '//SOLNM
          CALL WRMSGS( INDX )
          NVC = NVC -1
          GOTO 400
  320     CONTINUE
        ENDIF
#ifdef ecke
        IF( INDEX( ADUM(1:),'species' ).NE.0 ) THEN
          IF( ISLC(40).EQ.0 ) THEN
            NVC = NVC -1
            GOTO 400
          ENDIF
          VARB = 'Plot File Variable: Reactive Species Name: '
          CALL RDCHR(ISTART,ICOMMA,NCS,CHDUM,SPNM)
!
!---      Conservation- or kinetic-component species  ---
!
          IF( INDEX( SPNM(1:),'total_' ).NE.0 ) THEN
            DO 330 NSL = NSOLU+1,NSOLU+NEQC+NEQK
              IF( SPNM.EQ.SOLUT(NSL) ) GOTO 337
  330       CONTINUE
          ENDIF
!
!---      Aqueous species  ---
!
          DO 332 M = 1,NSPL
            NSP = M
            IF( SPNM.EQ.SPNML(M) ) GOTO 337
  332     CONTINUE
!
!---      Solid species  ---
!
          DO 334 M = 1,NSPS
            NSP = M+NSPL
            IF( SPNM.EQ.SPNMS(M) ) GOTO 337
  334     CONTINUE
!
!---      Gas species  ---
!
          DO 336 M = 1,NSPG
            NSP = M+NSPL+NSPS
            IF( SPNM.EQ.SPNMG(M) ) GOTO 337
  336     CONTINUE
          INDX = 4
          CHMSG = 'Unrecognized Plot File Reactive Species Name: '
     &      // SPNM
          CALL WRMSGS( INDX )
          NVC = NVC -1
          GOTO 400
  337     CONTINUE
        ENDIF
#endif
        IF( INDEX(ADUM(1:),'final').NE.0 .AND.
     &    INDEX(ADUM(1:),'restart').NE.0 ) THEN
          ISLC(18) = 1
          IPLOT(NV) = 200
        ELSEIF( INDEX(ADUM(1:),'no').NE.0 .AND.
     &    INDEX(ADUM(1:),'restart').NE.0 ) THEN
          ISLC(18) = 2
          IPLOT(NV) = 200
        ELSEIF( (INDEX(ADUM(1:),'nonaqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'non-aqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'napl').NE.0) .AND.
     &    INDEX(ADUM(1:),'press').NE.0 ) THEN
          IPLOT(NV) = 3
        ELSEIF( (INDEX(ADUM(1:),'nonaqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'non-aqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'napl').NE.0) .AND.
     &    INDEX(ADUM(1:),'gauge').NE.0 .AND.
     &    INDEX(ADUM(1:),'pressure').NE.0 ) THEN
          IPLOT(NV) = 8
        ELSEIF( (INDEX(ADUM(1:),'nonaqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'non-aqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'napl').NE.0) .AND.
     &    INDEX(ADUM(1:),'saturation').NE.0 ) THEN
          IPLOT(NV) = 13
        ELSEIF( INDEX(ADUM(1:),'x intrinsic perm').NE.0  .OR.
     &    INDEX(ADUM(1:),'x-intrinsic perm').NE.0 ) THEN
          IPLOT(NV) = 247
        ELSEIF( INDEX(ADUM(1:),'y intrinsic perm').NE.0  .OR.
     &    INDEX(ADUM(1:),'y-intrinsic perm').NE.0 ) THEN
          IPLOT(NV) = 248
        ELSEIF( INDEX(ADUM(1:),'z intrinsic perm').NE.0  .OR.
     &    INDEX(ADUM(1:),'z-intrinsic perm').NE.0 ) THEN
          IPLOT(NV) = 249
        ELSEIF( INDEX(ADUM(1:),'x').NE.0 .AND.
     &    INDEX(ADUM(1:),'node').NE.0 .AND.
     &    INDEX(ADUM(1:),'centroid').NE.0 ) THEN
          IPLOT(NV) = 291
        ELSEIF( INDEX(ADUM(1:),'y').NE.0 .AND.
     &    INDEX(ADUM(1:),'node').NE.0 .AND.
     &    INDEX(ADUM(1:),'centroid').NE.0 ) THEN
          IPLOT(NV) = 292
        ELSEIF( INDEX(ADUM(1:),'z').NE.0 .AND.
     &    INDEX(ADUM(1:),'node').NE.0 .AND.
     &    INDEX(ADUM(1:),'centroid').NE.0 ) THEN
          IPLOT(NV) = 293
        ELSEIF( INDEX(ADUM(1:),'node').NE.0 .AND.
     &    INDEX(ADUM(1:),'number').NE.0 ) THEN
          IPLOT(NV) = 100
        ELSEIF( (INDEX(ADUM(1:),'nonaqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'non-aqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'napl').NE.0) .AND.
     &    INDEX(ADUM(1:),'mass').NE.0 .AND.
     &    INDEX(ADUM(1:),'frac').NE.0 ) THEN
          IPLOT(NV) = 23
          CHREF(23) = 'XNC'
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          DO 344 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IPLOTGC(NV) = IGC
  344     CONTINUE
          IF( IPLOTGC(NV).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Nonaqueous Liquid Mass Fraction ' //
     &        'Component Name: ' // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
        ELSEIF( INDEX(ADUM(1:),'total').NE.0 .AND.
     &    INDEX(ADUM(1:),'component').NE.0 .AND.
     &    INDEX(ADUM(1:),'mole').NE.0 .AND.
     &    INDEX(ADUM(1:),'frac').NE.0 ) THEN
          IPLOT(NV) = 383
          CHREF(383) = 'ZMC'
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          DO 346 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IPLOTGC(NV) = IGC
  346     CONTINUE
          IF( IPLOTGC(NV).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Total Petroleum Component Mole ' //
     &        'Fraction Component Name: ' // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
        ELSEIF( (INDEX(ADUM(1:),'nonaqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'non-aqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'napl').NE.0) .AND.
     &    INDEX(ADUM(1:),'relative').NE.0 .AND.
     &    INDEX(ADUM(1:),'permeability').NE.0 ) THEN
          IPLOT(NV) = 33
        ELSEIF( (INDEX(ADUM(1:),'nonaqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'non-aqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'napl').NE.0) .AND.
     &    INDEX(ADUM(1:),'density').NE.0 ) THEN
          IPLOT(NV) = 36
        ELSEIF( (INDEX(ADUM(1:),'nonaqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'non-aqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'napl').NE.0) .AND.
     &    INDEX(ADUM(1:),'mole').NE.0 ) THEN
          IF(  ISLC(68).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Black-Oil Reference Node Variable: '
     &        //  ADUM
            CALL WRMSGS( INDX )
          ENDIF
          IPLOT(NV) = 72
          CHREF(72) = 'XMNC'
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          DO 348 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IPLOTGC(NV) = IGC
  348     CONTINUE
          IF( IPLOTGC(NV).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Nonaqueous Liquid Mole Fraction ' //
     &        'Component Name: ' // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
        ELSEIF( (INDEX(ADUM(1:),'nonaqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'non-aqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'napl').NE.0) .AND.
     &    INDEX(ADUM(1:),'conc').NE.0 ) THEN
          IPLOT(NV) = 78
          CHREF(78) = 'CNC'
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          DO 350 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IPLOTGC(NV) = IGC
  350     CONTINUE
          IF( IPLOTGC(NV).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Nonaqueous Liquid Concentration ' //
     &        'Component Name: ' // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
        ELSEIF( (INDEX(ADUM(1:),'nonaqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'non-aqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'napl').NE.0) .AND.
     &    INDEX(ADUM(1:),'viscosity').NE.0 ) THEN
          IPLOT(NV) = 290
        ELSEIF( INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'press').NE.0 ) THEN
          IPLOT(NV) = 1
        ELSEIF( INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'press').NE.0 ) THEN
          IPLOT(NV) = 2
        ELSEIF( INDEX(ADUM(1:),'critical').NE.0 .AND.
     &    INDEX(ADUM(1:),'temp').NE.0 ) THEN
          IPLOT(NV) = 206
        ELSEIF( INDEX(ADUM(1:),'cricondentherm').NE.0 .AND.
     &    INDEX(ADUM(1:),'temp').NE.0 ) THEN
          IPLOT(NV) = 213
        ELSEIF( INDEX(ADUM(1:),'temp').NE.0 ) THEN
          IPLOT(NV) = 4
        ELSEIF( INDEX(ADUM(1:),'phase').NE.0 .AND.
     &    INDEX(ADUM(1:),'cond').NE.0 ) THEN
          IPLOT(NV) = 5
        ELSEIF( INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'gauge').NE.0 .AND.
     &    INDEX(ADUM(1:),'press').NE.0 ) THEN
          IPLOT(NV) = 6
        ELSEIF( INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'gauge').NE.0 .AND.
     &    INDEX(ADUM(1:),'press').NE.0 ) THEN
          IPLOT(NV) = 7
        ELSEIF( INDEX(ADUM(1:),'eclipse').NE.0 .AND.
     &    INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'sat').NE.0 ) THEN
          IPLOT(NV) = 83
        ELSEIF( INDEX(ADUM(1:),'eclipse').NE.0 .AND.
     &    INDEX(ADUM(1:),'oil').NE.0 .AND.
     &    INDEX(ADUM(1:),'sat').NE.0 ) THEN
          IPLOT(NV) = 84
        ELSEIF( INDEX(ADUM(1:),'apparent').NE.0 .AND.
     &    INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'saturation').NE.0 ) THEN
          IPLOT(NV) = 9
        ELSEIF( INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'saturation').NE.0 ) THEN
          IPLOT(NV) = 11
        ELSEIF( INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'saturation').NE.0 ) THEN
          IPLOT(NV) = 12
        ELSEIF( INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'moisture').NE.0 .AND.
     &    INDEX(ADUM(1:),'content').NE.0 ) THEN
          IPLOT(NV) = 15
        ELSEIF( INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'mole').NE.0 .AND.
     &    INDEX(ADUM(1:),'frac').NE.0 ) THEN
          IPLOT(NV) = 204
        ELSEIF( (INDEX(ADUM(1:),'salt').NE.0 .OR.
     &    INDEX(ADUM(1:),'nacl').NE.0) .AND.
     &    INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'mole').NE.0 .AND.
     &    INDEX(ADUM(1:),'frac').NE.0 ) THEN
          IPLOT(NV) = 205
        ELSEIF( INDEX(ADUM(1:),'diffusive').NE.0 .AND.
     &    INDEX(ADUM(1:),'porosity').NE.0 ) THEN
          IPLOT(NV) = 20
        ELSEIF( (INDEX(ADUM(1:),'h2o').NE.0 .OR.
     &    INDEX(ADUM(1:),'water').NE.0 ) .AND.
     &    INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'mass').NE.0 .AND.
     &    INDEX(ADUM(1:),'frac').NE.0 ) THEN
          IPLOT(NV) = 21
        ELSEIF( INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'mass').NE.0 .AND.
     &    INDEX(ADUM(1:),'frac').NE.0 ) THEN
          IPLOT(NV) = 22
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          DO 352 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IPLOTGC(NV) = IGC
  352     CONTINUE
          IF( IPLOTGC(NV).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Petroleum Component Fraction Name: '
     &        // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
        ELSEIF( (INDEX(ADUM(1:),'h2o').NE.0 .OR.
     &    INDEX(ADUM(1:),'water').NE.0 ) .AND.
     &    INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'mass').NE.0 .AND.
     &    INDEX(ADUM(1:),'frac').NE.0 ) THEN
          IPLOT(NV) = 24
        ELSEIF( INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'mass').NE.0 .AND.
     &    INDEX(ADUM(1:),'frac').NE.0 ) THEN
          IPLOT(NV) = 25
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          DO 354 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IPLOTGC(NV) = IGC
  354     CONTINUE
          IF( IPLOTGC(NV).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Aqueous Mass Fraction ' //
     &        'Component Name: ' // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
        ELSEIF( INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'hydraulic').NE.0 .AND.
     &    INDEX(ADUM(1:),'head').NE.0 ) THEN
          IPLOT(NV) = 27
        ELSEIF( INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'hydraulic').NE.0 .AND.
     &    INDEX(ADUM(1:),'head').NE.0 ) THEN
          IPLOT(NV) = 28
        ELSEIF( INDEX(ADUM(1:),'napl').NE.0 .AND.
     &    INDEX(ADUM(1:),'hydraulic').NE.0 .AND.
     &    INDEX(ADUM(1:),'head').NE.0 ) THEN
          IPLOT(NV) = 29
        ELSEIF ( INDEX(ADUM(1:),'rock').NE.0 .AND.
     &    INDEX(ADUM(1:),'soil').NE.0 .AND.
     &    INDEX(ADUM(1:),'type').NE.0 ) THEN
          IPLOT(NV) = 30
        ELSEIF( INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'relative').NE.0 .AND.
     &    INDEX(ADUM(1:),'permeability').NE.0 ) THEN
          IPLOT(NV) = 31
        ELSEIF( INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'relative').NE.0 .AND.
     &    INDEX(ADUM(1:),'permeability').NE.0 ) THEN
          IPLOT(NV) = 32
        ELSEIF( INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'density').NE.0 ) THEN
          IPLOT(NV) = 34
        ELSEIF( INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'density').NE.0 ) THEN
          IPLOT(NV) = 35
        ELSEIF( INDEX(ADUM(1:),'total').NE.0 .AND.
     &    (INDEX(ADUM(1:),'h2o').NE.0 .OR.
     &    INDEX(ADUM(1:),'water').NE.0) .AND.
     &    INDEX(ADUM(1:),'mass').NE.0 ) THEN
          IPLOT(NV) = 37
        ELSEIF( INDEX(ADUM(1:),'total').NE.0 .AND.
     &    INDEX(ADUM(1:),'mass').NE.0 ) THEN
          IPLOT(NV) = 38
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          DO 356 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IPLOTGC(NV) = IGC
  356     CONTINUE
          IF( IPLOTGC(NV).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Total Mass Component Name: '
     &        // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
        ELSEIF( INDEX(ADUM(1:),'mass').NE.0 .AND.
     &    (INDEX(ADUM(1:),'h2o').NE.0 .OR.
     &    INDEX(ADUM(1:),'water').NE.0) .AND.
     &    INDEX(ADUM(1:),'source').NE.0 .AND.
     &    INDEX(ADUM(1:),'integral').NE.0 ) THEN
          IPLOT(NV) = 40
        ELSEIF( INDEX(ADUM(1:),'mass').NE.0 .AND.
     &    INDEX(ADUM(1:),'source').NE.0 .AND.
     &    INDEX(ADUM(1:),'integral').NE.0 ) THEN
          IPLOT(NV) = 41
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          DO 358 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IPLOTGC(NV) = IGC
  358     CONTINUE
          IF( IPLOTGC(NV).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Mass Source Integral Component Name: '
     &        // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
        ELSEIF( INDEX(ADUM(1:),'volumetric').NE.0 .AND.
     &    (INDEX(ADUM(1:),'salt').NE.0 .OR.
     &    INDEX(ADUM(1:),'nacl').NE.0) .AND.
     &    INDEX(ADUM(1:),'concentration').NE.0 ) THEN
          IPLOT(NV) = 47
        ELSEIF( INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    (INDEX(ADUM(1:),'salt').NE.0 .OR.
     &    INDEX(ADUM(1:),'nacl').NE.0) .AND.
     &    INDEX(ADUM(1:),'concentration').NE.0 ) THEN
          IPLOT(NV) = 48
        ELSEIF( INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'courant').NE.0 ) THEN
          ICRNT = 1
          IPLOT(NV) = 49
        ELSEIF( INDEX(ADUM(1:),'total').NE.0 .AND.
     &    (INDEX(ADUM(1:),'salt').NE.0 .OR.
     &    INDEX(ADUM(1:),'nacl').NE.0) .AND.
     &    INDEX(ADUM(1:),'mass').NE.0 ) THEN
          IPLOT(NV) = 50
        ELSEIF( INDEX(ADUM(1:),'xnc').NE.0 .AND.
     &    INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'volumetric').NE.0 ) THEN
          IPLOT(NV) = 87
        ELSEIF( INDEX(ADUM(1:),'ync').NE.0 .AND.
     &    INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'volumetric').NE.0 ) THEN
          IPLOT(NV) = 88
        ELSEIF( INDEX(ADUM(1:),'znc').NE.0 .AND.
     &    INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'volumetric').NE.0 ) THEN
          IPLOT(NV) = 89
        ELSEIF( INDEX(ADUM(1:),'xnc').NE.0 .AND.
     &    INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'volumetric').NE.0 ) THEN
          IPLOT(NV) = 90
        ELSEIF( INDEX(ADUM(1:),'ync').NE.0 .AND.
     &    INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'volumetric').NE.0 ) THEN
          IPLOT(NV) = 91
        ELSEIF( INDEX(ADUM(1:),'znc').NE.0 .AND.
     &    INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'volumetric').NE.0 ) THEN
          IPLOT(NV) = 92
        ELSEIF( INDEX(ADUM(1:),'system').NE.0 .AND.
     &    INDEX(ADUM(1:),'pressure').NE.0 ) THEN
          IPLOT(NV) = 80
        ELSEIF( INDEX(ADUM(1:),'xnc').NE.0 .AND.
     &    INDEX(ADUM(1:),'heat').NE.0 .AND.
     &    INDEX(ADUM(1:),'flux').NE.0 ) THEN
          IPLOT(NV) = 96
        ELSEIF( INDEX(ADUM(1:),'ync').NE.0 .AND.
     &    INDEX(ADUM(1:),'heat').NE.0 .AND.
     &    INDEX(ADUM(1:),'flux').NE.0 ) THEN
          IPLOT(NV) = 97
        ELSEIF( INDEX(ADUM(1:),'znc').NE.0 .AND.
     &    INDEX(ADUM(1:),'heat').NE.0 .AND.
     &    INDEX(ADUM(1:),'flux').NE.0 ) THEN
          IPLOT(NV) = 98
        ELSEIF( INDEX(ADUM(1:),'xnc').NE.0 .AND.
     &    INDEX(ADUM(1:),'salt').NE.0 .AND.
     &    INDEX(ADUM(1:),'flux').NE.0 ) THEN
          IPLOT(NV) = 67
        ELSEIF( INDEX(ADUM(1:),'ync').NE.0 .AND.
     &    INDEX(ADUM(1:),'salt').NE.0 .AND.
     &    INDEX(ADUM(1:),'flux').NE.0 ) THEN
          IPLOT(NV) = 68
        ELSEIF( INDEX(ADUM(1:),'znc').NE.0 .AND.
     &    INDEX(ADUM(1:),'salt').NE.0 .AND.
     &    INDEX(ADUM(1:),'flux').NE.0 ) THEN
          IPLOT(NV) = 69
        ELSEIF( (INDEX(ADUM(1:),'h2o').NE.0 .OR.
     &    INDEX(ADUM(1:),'water').NE.0 ) .AND.
     &    INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'mole').NE.0 .AND.
     &    INDEX(ADUM(1:),'frac').NE.0 ) THEN
          IPLOT(NV) = 70
        ELSEIF( INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'mole').NE.0 .AND.
     &    INDEX(ADUM(1:),'frac').NE.0 ) THEN
          IF(  ISLC(68).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Black-Oil Reference Node Variable: '
     &        //  ADUM
            CALL WRMSGS( INDX )
          ENDIF
          IPLOT(NV) = 71
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          DO 360 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IPLOTGC(NV) = IGC
  360     CONTINUE
          IF( IPLOTGC(NV).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Gas Mole Fraction Component Name: '
     &        // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
        ELSEIF( (INDEX(ADUM(1:),'h2o').NE.0 .OR.
     &    INDEX(ADUM(1:),'water').NE.0 ) .AND.
     &    INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'conc').NE.0 ) THEN
          IPLOT(NV) = 73
        ELSEIF( INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'conc').NE.0 ) THEN
          IPLOT(NV) = 74
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          DO 362 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IPLOTGC(NV) = IGC
  362     CONTINUE
          IF( IPLOTGC(NV).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Gas Concentration Component Name: '
     &        // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
        ELSEIF( (INDEX(ADUM(1:),'h2o').NE.0 .OR.
     &    INDEX(ADUM(1:),'water').NE.0 ) .AND.
     &    INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'conc').NE.0 ) THEN
          IPLOT(NV) = 76
        ELSEIF( INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'conc').NE.0 .AND.
     &    INDEX(ADUM(1:),'solute').EQ.0 .AND.
     &    INDEX(ADUM(1:),'species').EQ.0 ) THEN
          IPLOT(NV) = 77
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          DO 364 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IPLOTGC(NV) = IGC
  364     CONTINUE
          IF( IPLOTGC(NV).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Aqueous Concentration ' //
     &        'Component Name: ' // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
        ELSEIF( INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'courant').NE.0 ) THEN
          ICRNT = 1
          IPLOT(NV) = 79
        ELSEIF( INDEX(ADUM(1:),'node').NE.0 .AND.
     &    INDEX(ADUM(1:),'number').NE.0 ) THEN
          IPLOT(NV) = 100
        ELSEIF( (INDEX(ADUM(1:),'nacl').NE.0 .OR.
     &    INDEX(ADUM(1:),'salt').NE.0 ) .AND.
     &    INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'mass').NE.0 .AND.
     &    INDEX(ADUM(1:),'frac').NE.0 ) THEN
          IPLOT(NV) = 110
        ELSEIF( (INDEX(ADUM(1:),'h2o').NE.0 .OR.
     &    INDEX(ADUM(1:),'water').NE.0 ) .AND.
     &    INDEX(ADUM(1:),'vapor').NE.0 .AND.
     &    INDEX(ADUM(1:),'pressure').NE.0 ) THEN
          IPLOT(NV) = 128
!        ELSEIF( INDEX(ADUM(1:),'vapor').NE.0 .AND.
!     &    INDEX(ADUM(1:),'pressure').NE.0 ) THEN
!          IPLOT(NV) = 129
!          VARB = 'Petroleum Component Name: '
!          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
!          DO 366 IGC = 1,NGC+2
!            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
!            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IPLOTGC(NV) = IGC
!  366     CONTINUE
!          IF( IPLOTGC(NV).EQ.0 ) THEN
!            INDX = 4
!            CHMSG = 'Unrecognized Vapor Pressure ' //
!     &        'Component Name: ' // BDUM(1:NCHB)
!            CALL WRMSGS( INDX )
!          ENDIF
        ELSEIF( (INDEX(ADUM(1:),'h2o').NE.0 .OR.
     &    INDEX(ADUM(1:),'water').NE.0 ) .AND.
     &    INDEX(ADUM(1:),'mass').NE.0 .AND.
     &    INDEX(ADUM(1:),'source').NE.0 .AND.
     &    INDEX(ADUM(1:),'rate').NE.0 ) THEN
          IPLOT(NV) = 140
        ELSEIF( INDEX(ADUM(1:),'mass source rate').NE.0 ) THEN
          IPLOT(NV) = 141
          CHREF(141) = 'SRCC'
          VARB = 'Petroleum Component Name: '
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          DO 368 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IPLOTGC(NV) = IGC
  368     CONTINUE
          IF( IPLOTGC(NV).EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Mass Source Rate Component Name: '
     &        // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
        ELSEIF( (INDEX(ADUM(1:),'nacl').NE.0 .OR.
     &    INDEX(ADUM(1:),'salt').NE.0 ) .AND.
     &    INDEX(ADUM(1:),'mass').NE.0 .AND.
     &    INDEX(ADUM(1:),'source').NE.0 .AND.
     &    INDEX(ADUM(1:),'rate').NE.0 ) THEN
          IPLOT(NV) = 147
        ELSEIF( INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'viscosity').NE.0 ) THEN
          IPLOT(NV) = 176
        ELSEIF( INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'viscosity').NE.0 ) THEN
          IPLOT(NV) = 289
        ELSEIF( INDEX(ADUM(1:),'salt').NE.0 .AND.
     &    INDEX(ADUM(1:),'saturation').NE.0 ) THEN
          IPLOT(NV) = 264
        ELSEIF( INDEX(ADUM(1:),'x intrinsic perm').NE.0  .OR.
     &    INDEX(ADUM(1:),'x-intrinsic perm').NE.0 ) THEN
          IPLOT(NV) = 247
        ELSEIF( INDEX(ADUM(1:),'y intrinsic perm').NE.0  .OR.
     &    INDEX(ADUM(1:),'y-intrinsic perm').NE.0 ) THEN
          IPLOT(NV) = 248
        ELSEIF( INDEX(ADUM(1:),'z intrinsic perm').NE.0  .OR.
     &    INDEX(ADUM(1:),'z-intrinsic perm').NE.0 ) THEN
          IPLOT(NV) = 249
        ELSEIF( INDEX(ADUM(1:),'x').NE.0 .AND.
     &    INDEX(ADUM(1:),'node').NE.0 .AND.
     &    INDEX(ADUM(1:),'centroid').NE.0 ) THEN
          IPLOT(NV) = 291
        ELSEIF( INDEX(ADUM(1:),'y').NE.0 .AND.
     &    INDEX(ADUM(1:),'node').NE.0 .AND.
     &    INDEX(ADUM(1:),'centroid').NE.0 ) THEN
          IPLOT(NV) = 292
        ELSEIF( INDEX(ADUM(1:),'z').NE.0 .AND.
     &    INDEX(ADUM(1:),'node').NE.0 .AND.
     &    INDEX(ADUM(1:),'centroid').NE.0 ) THEN
          IPLOT(NV) = 293
        ELSEIF( (INDEX(ADUM(1:),'nonaqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'non-aqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'napl').NE.0) .AND.
     &    INDEX(ADUM(1:),'enthalpy').NE.0 ) THEN
          IPLOT(NV) = 298
        ELSEIF( INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'enthalpy').NE.0 ) THEN
          IPLOT(NV) = 297
        ELSEIF( INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'enthalpy').NE.0 ) THEN
          IPLOT(NV) = 296
        ELSEIF( INDEX(ADUM(1:),'x-dir').NE.0 .AND.
     &    INDEX(ADUM(1:),'index').NE.0 ) THEN
          IPLOT(NV) = 388
        ELSEIF( INDEX(ADUM(1:),'y-dir').NE.0 .AND.
     &    INDEX(ADUM(1:),'index').NE.0 ) THEN
          IPLOT(NV) = 389
        ELSEIF( INDEX(ADUM(1:),'z-dir').NE.0 .AND.
     &    INDEX(ADUM(1:),'index').NE.0 ) THEN
          IPLOT(NV) = 390
        ELSEIF( INDEX(ADUM(1:),'xnc').NE.0 .AND.
     &    INDEX(ADUM(1:),'surface').NE.0 .AND.
     &    INDEX(ADUM(1:),'area').NE.0 ) THEN
          IPLOT(NV) = 391
        ELSEIF( INDEX(ADUM(1:),'ync').NE.0 .AND.
     &    INDEX(ADUM(1:),'surface').NE.0 .AND.
     &    INDEX(ADUM(1:),'area').NE.0 ) THEN
          IPLOT(NV) = 392
        ELSEIF( INDEX(ADUM(1:),'znc').NE.0 .AND.
     &    INDEX(ADUM(1:),'surface').NE.0 .AND.
     &    INDEX(ADUM(1:),'area').NE.0 ) THEN
          IPLOT(NV) = 393
        ELSEIF( INDEX(ADUM(1:),'processor').NE.0 .AND.
     &    INDEX(ADUM(1:),'id').NE.0 ) THEN
          IPLOT(NV) = 395
        ELSEIF( INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    (INDEX(ADUM(1:),'nonaqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'non-aqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'napl').NE.0) .AND.
     &    INDEX(ADUM(1:),'tension').NE.0 ) THEN
          IPLOT(NV) = 396
#ifdef ecke
        ELSEIF( ( INDEX(ADUM(1:),'solute volumetric conc').NE.0 .OR.
     &    INDEX(ADUM(1:),'species volumetric conc').NE.0 ) .AND.
     &    INDEX( SPNM(1:),'total_' ).NE.0 .AND.
     &    INDEX( SPNM(1:),'exchange' ).NE.0 ) THEN
          IPLOT(NV) = 400+(NSL-1)*33 + 12
          IF( NSL.GT.NSOLU ) THEN
            INDX = 400+(NSL-1)*33 + 12
            UNPLOT(INDX) = 'mol/m^3'
          ENDIF
        ELSEIF( ( INDEX(ADUM(1:),'solute volumetric conc').NE.0 .OR.
     &    INDEX(ADUM(1:),'species volumetric conc').NE.0 ) .AND.
     &    INDEX( SPNM(1:),'total_' ).NE.0 .AND.
     &    INDEX( SPNM(1:),'solid' ).NE.0 ) THEN
          IPLOT(NV) = 400+(NSL-1)*33 + 26
          IF( NSL.GT.NSOLU ) THEN
            INDX = 400+(NSL-1)*33 + 26
            UNPLOT(INDX) = 'mol/m^3'
          ENDIF
        ELSEIF( ( INDEX(ADUM(1:),'solute volumetric conc').NE.0 .OR.
     &    INDEX(ADUM(1:),'species volumetric conc').NE.0 ) .AND.
     &   INDEX( SPNM(1:),'total_' ).NE.0 ) THEN
          IPLOT(NV) = 400+(NSL-1)*33 + 1
          IF( NSL.GT.NSOLU ) THEN
            INDX = 400+(NSL-1)*33 + 1
            UNPLOT(INDX) = 'mol/m^3'
          ENDIF
#else
        ELSEIF( INDEX(ADUM(1:),'solute').NE.0 .AND.
     &    INDEX(ADUM(1:),'volumetric').NE.0 .AND.
     &    INDEX(ADUM(1:),'conc').NE.0 ) THEN
          IPLOT(NV) = 400+(NSL-1)*33 + 1
#endif
#ifdef ecke
        ELSEIF( ( INDEX(ADUM(1:),'solute aqueous conc').NE.0 .OR.
     &    INDEX(ADUM(1:),'species aqueous conc').NE.0 ) .AND.
     &    INDEX( SPNM(1:),'total_' ).NE.0 .AND.
     &    INDEX( SPNM(1:),'exchange' ).NE.0 ) THEN
          IPLOT(NV) = 400+(NSL-1)*33 + 13
          IF( NSL.GT.NSOLU ) THEN
            INDX = 400+(NSL-1)*33 + 13
            UNPLOT(INDX) = 'mol/m^3'
          ENDIF
        ELSEIF( ( INDEX(ADUM(1:),'solute aqueous conc').NE.0 .OR.
     &    INDEX(ADUM(1:),'species aqueous conc').NE.0 ) .AND.
     &    INDEX( SPNM(1:),'total_' ).NE.0 .AND.
     &    INDEX( SPNM(1:),'solid' ).NE.0 ) THEN
          IPLOT(NV) = 400+(NSL-1)*33 + 27
          IF( NSL.GT.NSOLU ) THEN
            INDX = 400+(NSL-1)*33 + 27
            UNPLOT(INDX) = 'mol/m^3'
          ENDIF
        ELSEIF( ( INDEX(ADUM(1:),'solute aqueous conc').NE.0 .OR.
     &    INDEX(ADUM(1:),'species aqueous conc').NE.0 ) .AND.
     &    INDEX( SPNM(1:),'total_' ).NE.0 ) THEN
          IPLOT(NV) = 400+(NSL-1)*33 + 2
          IF( NSL.GT.NSOLU ) THEN
            INDX = 400+(NSL-1)*33 + 2
            UNPLOT(INDX) = 'mol/m^3'
          ENDIF
#else
        ELSEIF( INDEX(ADUM(1:),'solute').NE.0 .AND.
     &    INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'conc').NE.0 ) THEN
          IPLOT(NV) = 400+(NSL-1)*33 + 2
#endif
#ifdef ecke
        ELSEIF( ( INDEX(ADUM(1:),'solute gas conc').NE.0 .OR.
     &    INDEX(ADUM(1:),'species gas conc').NE.0 ) .AND.
     &    INDEX( SPNM(1:),'total_' ).NE.0 .AND.
     &    INDEX( SPNM(1:),'exchange' ).NE.0 ) THEN
          IPLOT(NV) = 400+(NSL-1)*33 + 14
          IF( NSL.GT.NSOLU ) THEN
            INDX = 400+(NSL-1)*33 + 14
            UNPLOT(INDX) = 'mol/m^3'
          ENDIF
        ELSEIF( ( INDEX(ADUM(1:),'solute gas conc').NE.0 .OR.
     &    INDEX(ADUM(1:),'species gas conc').NE.0 ) .AND.
     &    INDEX( SPNM(1:),'total_' ).NE.0 ) THEN
          IPLOT(NV) = 400+(NSL-1)*33 + 28
          IF( NSL.GT.NSOLU ) THEN
            INDX = 400+(NSL-1)*33 + 28
            UNPLOT(INDX) = 'mol/m^3'
          ENDIF
        ELSEIF( ( INDEX(ADUM(1:),'solute gas conc').NE.0 .OR.
     &    INDEX(ADUM(1:),'species gas conc').NE.0 ) .AND.
     &    INDEX( SPNM(1:),'total_' ).NE.0 ) THEN
          IPLOT(NV) = 400+(NSL-1)*33 + 3
          IF( NSL.GT.NSOLU ) THEN
            INDX = 400+(NSL-1)*33 + 3
            UNPLOT(INDX) = 'mol/m^3'
          ENDIF
#else

        ELSEIF( INDEX(ADUM(1:),'solute').NE.0 .AND.
     &    INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'conc').NE.0 ) THEN
          IPLOT(NV) = 400+(NSL-1)*33 + 3
#endif
#ifdef ecke
        ELSEIF( ( INDEX(ADUM(1:),'solute nonaqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'species non-aqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'species napl').NE.0 ) .AND.
     &    INDEX( SPNM(1:),'total_' ).NE.0 .AND.
     &    INDEX( SPNM(1:),'exchange' ).NE.0 ) THEN
          IPLOT(NV) = 400+(NSL-1)*33 + 15
          IF( NSL.GT.NSOLU ) THEN
            INDX = 400+(NSL-1)*33 + 15
            UNPLOT(INDX) = 'mol/m^3'
          ENDIF
        ELSEIF( ( INDEX(ADUM(1:),'solute nonaqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'species non-aqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'species napl').NE.0 ) .AND.
     &    INDEX( SPNM(1:),'total_' ).NE.0 ) THEN
          IPLOT(NV) = 400+(NSL-1)*33 + 29
          IF( NSL.GT.NSOLU ) THEN
            INDX = 400+(NSL-1)*33 + 29
            UNPLOT(INDX) = 'mol/m^3'
          ENDIF
        ELSEIF( ( INDEX(ADUM(1:),'solute nonaqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'species non-aqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'species napl').NE.0 ) .AND.
     &    INDEX( SPNM(1:),'total_' ).NE.0 ) THEN
          IPLOT(NV) = 400+(NSL-1)*33 + 4
          IF( NSL.GT.NSOLU ) THEN
            INDX = 400+(NSL-1)*33 + 4
            UNPLOT(INDX) = 'mol/m^3'
          ENDIF
#else

        ELSEIF( INDEX(ADUM(1:),'solute').NE.0 .AND.
     &    (INDEX(ADUM(1:),'nonaqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'non-aqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'napl').NE.0) .AND.
     &    INDEX(ADUM(1:),'conc').NE.0 ) THEN
          IPLOT(NV) = 400+(NSL-1)*33 + 4
#endif
        ELSEIF( INDEX(ADUM(1:),'solute').NE.0 .AND.
     &    INDEX(ADUM(1:),'aqueous').NE.0 .AND.
     &    INDEX(ADUM(1:),'mol').NE.0 ) THEN
          IPLOT(NV) = 400+(NSL-1)*33 + 5
        ELSEIF( INDEX(ADUM(1:),'solute').NE.0 .AND.
     &    INDEX(ADUM(1:),'gas').NE.0 .AND.
     &    INDEX(ADUM(1:),'mole').NE.0 ) THEN
          IPLOT(NV) = 400+(NSL-1)*33 + 6
        ELSEIF( INDEX(ADUM(1:),'solute').NE.0 .AND.
     &    (INDEX(ADUM(1:),'nonaqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'non-aqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'napl').NE.0) .AND.
     &    INDEX(ADUM(1:),'mole').NE.0 ) THEN
          IPLOT(NV) = 400+(NSL-1)*33 + 7
        ELSEIF( INDEX(ADUM(1:),'x').NE.0 .AND.
     &    INDEX(ADUM(1:),'solute').NE.0 .AND.
     &    INDEX(ADUM(1:),'flux').NE.0 ) THEN
          IPLOT(NV) = 400+(NSL-1)*33 + 8
        ELSEIF( INDEX(ADUM(1:),'y').NE.0 .AND.
     &    INDEX(ADUM(1:),'solute').NE.0 .AND.
     &    INDEX(ADUM(1:),'flux').NE.0 ) THEN
          IPLOT(NV) = 400+(NSL-1)*33 + 9
        ELSEIF( INDEX(ADUM(1:),'z').NE.0 .AND.
     &    INDEX(ADUM(1:),'solute').NE.0 .AND.
     &    INDEX(ADUM(1:),'flux').NE.0 ) THEN
          IPLOT(NV) = 400+(NSL-1)*33 + 10
#ifdef ecke
        ELSEIF( (INDEX(ADUM(1:),'solute source').NE.0) .OR.
     &    ((INDEX(ADUM(1:),'species source').NE.0) .AND.
     &    (INDEX( SPNM(1:),'total_' ).NE.0)) ) THEN
          IPLOT(NV) = 400+(NSL-1)*33 + 11
          IF( NSL.GT.NSOLU ) THEN
            INDX = 400+(NSL-1)*33 + 11
            UNPLOT(INDX) = 'mol/s'
          ENDIF
#else
        ELSEIF( INDEX(ADUM(1:),'solute').NE.0 .AND.
     &    INDEX(ADUM(1:),'source').NE.0 ) THEN
          IPLOT(NV) = 400+(NSL-1)*33 + 11
#endif
#ifdef ecke
        ELSEIF( INDEX(ADUM(1:),'species volumetric conc').NE.0 ) THEN
          INDX = 400+(NSOLU*33)+((NEQC+NEQK)*33)+(NSP-1)*33 + 1
          IPLOT(NV) = INDX
          UNPLOT(INDX) = 'mol/m^3'
        ELSEIF( INDEX(ADUM(1:),'species aqueous conc').NE.0 ) THEN
          INDX = 400+(NSOLU*33)+((NEQC+NEQK)*33)+(NSP-1)*33 + 2
          IPLOT(NV) = INDX
          UNPLOT(INDX) = 'mol/m^3'
        ELSEIF( INDEX(ADUM(1:),'species gas conc').NE.0 ) THEN
          INDX = 400+(NSOLU*33)+((NEQC+NEQK)*33)+(NSP-1)*33 + 3
          IPLOT(NV) = INDX
          UNPLOT(INDX) = 'mol/m^3'
        ELSEIF( INDEX(ADUM(1:),'species source').NE.0 ) THEN
          INDX = 400+(NSOLU*33)+((NEQC+NEQK)*33)+(NSP-1)*33 + 11
          IPLOT(NV) = INDX
          UNPLOT(INDX) = 'mol'
        ELSEIF( INDEX(ADUM(1:),'mineral area').NE.0 ) THEN
          INDX = 400+(NSOLU*33)+((NEQC+NEQK)*33)+(NSP-1)*33 + 24
          IPLOT(NV) = INDX
          UNPLOT(INDX) = 'm^2'
        ELSEIF( INDEX(ADUM(1:),'mineral rate').NE.0 ) THEN
          INDX = 400+(NSOLU*33)+((NEQC+NEQK)*33)+(NSP-1)*33 + 25
          IPLOT(NV) = INDX
          UNPLOT(INDX) = 'mol/s'
        ELSEIF( INDEX(ADUM(1:),'volume fraction').NE.0 ) THEN
          INDX = 400+(NSOLU*33)+((NEQC+NEQK)*33)+(NSP-1)*33 + 26
          IPLOT(NV) = INDX
        ELSEIF( INDEX(ADUM(1:),'ph').NE.0 ) THEN
          INDX = 400+(NSOLU*33)+((NEQC+NEQK)*33) + 27
          IPLOT(NV) = INDX
#endif
        ELSE
          INDX = 4
          CHMSG = 'Unrecognized Plot File Variable: '//ADUM
          CALL WRMSGS( INDX )
        ENDIF
!
!---    Check for duplicate plot file variables  ---
!
        DO 390 NX = 1,NV-1
          IF( IPLOT(NV).EQ.IPLOT(NX) .AND.
     &      IPLOTGC(NV).EQ.IPLOTGC(NX) ) THEN
            INDX = 4
            CHMSG = 'Duplicate Plot File Variable: '//ADUM
            CALL WRMSGS( INDX )
          ENDIF
  390   CONTINUE
!
!---    Plot file variable units  ---
!
        IDFLT = 1
        VARB = 'Plot File Variable Units'
        CALL RDCHR(ISTART,ICOMMA,NCU,CHDUM,UNPLOT(IPLOT(NV)))
        IF( INDEX( ADUM(1:),'solute' ).NE.0 ) THEN
          WRITE( IWR,'(2X,3A,2X,2A,I2,A)' ) ADUM(1:NCH),', ',
     &      UNPLOT(IPLOT(NV))(1:NCU),SOLNM(1:NCS),' Solute(',NSL,')'
        ELSEIF( IPLOTGC(NV).NE.0 ) THEN
          WRITE( IWR,'(2X,5A)' ) ADUM(1:NCH),', ',
     &      BDUM(1:NCHB),', ',UNREF(IPLOT(NV))(1:NCU)
        ELSE
          WRITE( IWR,'(2X,3A)' ) ADUM(1:NCH),', ',
     &      UNPLOT(IPLOT(NV))(1:NCU)
        ENDIF
        CALL RDOUUN( IPLOT(NV) )
        VAR = 0.D+0
        INDX = 0
        CALL RDUNIT( UNPLOT(IPLOT(NV)),VAR,INDX )
  400 CONTINUE
      NVPLOT = NVPLOT + NVC
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of RDOU_EOR group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE RDPCP_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Read petroleum component properties.
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, March 17, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE FILES
      USE EOR
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      CHARACTER*64 ADUM,BDUM,UNTS,PFNMX
      CHARACTER*512 CHDUM
      REAL(KIND=DP), DIMENSION(:,:), ALLOCATABLE :: GCPPX
      
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//RDPCP_EOR'
!
!---  Write card information to ouput file  ---
!
      CARD = 'Petroleum Component Properties Card'
      ICD = INDEX( CARD,'  ' )-1
      WRITE(IWR,'(//,3A)') ' ~ ',CARD(1:ICD),': '
!!
!!---  Read number of petroleum components  ---
!!
!      CALL RDINPL( CHDUM )
!      CALL LCASE( CHDUM )
!      ISTART = 1
!      VARB = 'Number of Petroleum Components'
!      CALL RDINT( ISTART,ICOMMA,CHDUM,NGCX )
!      IF( NGC+2.GT.LNGC ) THEN
!        INDX = 5
!        CHMSG = 'Number of Petroleum Components + 2 > Parameter LNGC'
!        CALL WRMSGS( INDX )
!      ENDIF
!
!---  Loop over number of petroleum components,
!     skipping CO2 and CH4  ---
!
      DO 500 IGC = 3,NGC+2
!
!---    Read new input line ---
!
        CALL RDINPL( CHDUM )
        CALL LCASE( CHDUM )
        ISTART = 1
        VARB = 'Petroleum Component Name'
        CALL RDCHR(ISTART,ICOMMA,NCHG,CHDUM,GCNM(IGC))
        DO 100 M = 3,IGC-1
          IF( GCNM(M).EQ.GCNM(IGC) ) THEN
            INDX = 4
            CHMSG = 'Duplicate Petroleum Component Name: ' // 
     &        GCNM(IGC)(1:NCHG)
            CALL WRMSGS( INDX )
          ENDIF
  100   CONTINUE
        WRITE (IWR,'(/,2A)') 'Petroleum Component Name: ',
     &    GCNM(IGC)(1:NCHG)
!
!---    Check for number of petroleum fraction components ---
!
        CALL CHKINT(ISTART,ICOMMA,CHDUM,INDX1)
        CALL CHKCHR(ISTART,ICOMMA,CHDUM,INDX2)
!
!---    Petroleum component composition declared as a combination
!       of petroluem fraction components  ---
!
        IF( INDX1.EQ.1 ) THEN
!
!---      Read number of petroleum fractions ---
!
          VARB = 'Number of Petroleum Component Fractions'
          CALL RDINT(ISTART,ICOMMA,CHDUM,NPCF(IGC))
!
!---      Read composition option ---
!
          VARB = 'Petroleum Component Fraction Composition Option'
          CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,ADUM)
          IF( INDEX(ADUM(1:),'mole').NE.0
     &      .AND. INDEX(ADUM(1:),'fraction').NE.0 ) THEN
            IPFX = 1
          ELSEIF( INDEX(ADUM(1:),'mass').NE.0
     &      .AND. INDEX(ADUM(1:),'fraction').NE.0 ) THEN
            IPFX = 2
          ELSE
            INDX = 4
            CHMSG = 'Unrecognized Petroleum Component Fraction ' //
     &        'Composition Option: ' // ADUM(1:NCH)
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Loop over the number of petroleum fractions ---
!
          DO 200 N = 1,NPCF(IGC)
            CALL RDINPL( CHDUM )
            CALL LCASE( CHDUM )
            ISTART = 1
!
!---        Read petroleum fraction name  ---
!
            CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,PFNMX)
!
!---        Loop over known petroleum fraction names  ---
!
            DO 110 M = 1,LPF_EOR
              IF( PFNMX.EQ.PFNM(M) ) THEN
                IPCF(N,IGC) = M
                GOTO 120
              ENDIF
  110       CONTINUE
              INDX = 4
              CHMSG = 'Unrecognized Petroleum Component Fraction Name: '
     &          // PFNMX(1:NCH)
              CALL WRMSGS( INDX )
  120       CONTINUE
!
!---        Check for duplicate petroleum fraction names  ---
!
            DO 130 M = 1,N-1
              IF( IPCF(N,IGC).EQ.IPCF(M,IGC) ) THEN
                INDX = 4
                CHMSG = 'Duplicate Petroleum Component  Fraction Name: '
     &            // PFNMX(1:NCH)
                CALL WRMSGS( INDX )
              ENDIF
  130       CONTINUE
!
!---        Read concentration of petroleum fraction  ---
!
            CALL RDDPR(ISTART,ICOMMA,CHDUM,XMPCF(N,IGC))
!
!---        Check concentration of petroleum fraction  ---
!
            IF( XMPCF(N,IGC).LT.0.D+0 .OR.
     &        XMPCF(N,IGC).GT.1.D+0 ) THEN
              INDX = 9
              RLMSG = XMPCF(N,IGC)
              IF( IPFX.EQ.1 ) THEN
                CHMSG = 'Invalid Mole Fraction of Petroleum Component '
     &             // 'Fraction: ' // PFNMX(1:NCH)
              ELSEIF( IPFX.EQ.2 ) THEN
                CHMSG = 'Invalid Mass Fraction of Petroleum Component '
     &             // 'Fraction: ' // PFNMX(1:NCH)
              ENDIF
              CALL WRMSGS( INDX )
            ENDIF
            NCH = INDEX(PFNM(IPCF(N,IGC)),'  ')-1
            WRITE (IWR,'(2X,2A,$)') 'Petroleum Component Fraction: ',
     &        PFNM(IPCF(N,IGC))(1:NCH)
            IF( IPFX.EQ.1 ) THEN
              WRITE (IWR,'(2X,A,1PE11.4)') 'Mole Fraction: ',
     &          XMPCF(N,IGC)
            ELSEIF( IPFX.EQ.2 ) THEN
              WRITE (IWR,'(2X,A,1PE11.4)') 'Mass Fraction: ',
     &          XMPCF(N,IGC)
            ENDIF
  200     CONTINUE
!
!---      Check summation of petroleum fractions  ---
!
          SXMPCFX = 0.D+0
          DO 210 N = 1,NPCF(IGC)
            SXMPCFX = SXMPCFX + XMPCF(N,IGC)
  210     CONTINUE
          IF( ABS(1.D+0-SXMPCFX).GT.EPSL ) THEN
            INDX = 9
            RLMSG = SXMPCFX
            IF( IPFX.EQ.1 ) THEN
              CHMSG = 'Invalid Sum of Mole Fraction of ' //
     &         'Petroleum Component Fractions: ' // 
     &         GCNM(IGC)(1:NCHG)
            ELSEIF( IPFX.EQ.2 ) THEN
              CHMSG = 'Invalid Sum of Mass Fraction of ' //
     &         'Petroleum Component Fractions: ' // 
     &         GCNM(IGC)(1:NCHG)
            ENDIF
            CALL WRMSGS( INDX )
          ENDIF
!
!---      Initialize critical properties for the petroleum component ---
!
          CALL INIT_PCP( IGC,IPFX )
!
!---      Petroleum component molecular weight, kg/kmol  ---
!
          WRITE (IWR,'(2X,A,1PE11.4)') 'Molecular Weight, kg/kmol: ',
     &      GCPP(1,IGC)
!
!---      Petroleum component boiling point, K  ---
!
          WRITE (IWR,'(2X,A,1PE11.4)') 'Normal Boiling Point, K: ',
     &      GCPP(2,IGC)
!
!---      Petroleum critical temperature, K  ---
!
          WRITE (IWR,'(2X,A,1PE11.4)') 'Critical Temperature, K: ',
     &      GCPP(3,IGC)
!
!---      Petroleum critical pressure, Pa  ---
!
          WRITE (IWR,'(2X,A,1PE11.4)') 'Critical Pressure, Pa: ',
     &      GCPP(4,IGC)
!
!---      Petroleum critical molar volume, m^3/kmol  ---
!
          WRITE (IWR,'(2X,A,1PE11.4)') 'Critical Molar Volume, ' //
     &      'm^3/kmol: ',GCPP(5,IGC)
!
!---      Petroleum critical compressibility  ---
!
          WRITE (IWR,'(2X,A,1PE11.4)') 'Critical Compressibility: ',
     &      GCPP(6,IGC)
!
!---      Petroleum acentric factor  ---
!
          WRITE (IWR,'(2X,A,1PE11.4)') 'Pitzer Acentric Factor: ',
     &      GCPP(7,IGC)
!
!---      Peng-Robinson mixture "a", "b", and "omega" parameters  ---
!
          IF( ISLC(68).EQ.1 ) THEN
            WRITE (IWR,'(2X,A,1PE11.4)') 'Peng-Robinson ''a'' ' //
     &         'Parameter, J/kmol: ',GCPP(13,IGC)
            WRITE (IWR,'(2X,A,1PE11.4)') 'Peng-Robinson ''b'' ' //
     &         'Parameter, m^3/kmol: ',GCPP(14,IGC)
            WRITE (IWR,'(2X,A,1PE11.4)') 'Peng-Robinson ''omega'' ' //
     &         'Parameter: ',GCPP(15,IGC)
!
!---      Soave-Redlich-Kwong mixture "a", "b", and "omega"
!         parameters  ---
!
          ELSEIF( ISLC(68).EQ.2 ) THEN
            WRITE (IWR,'(2X,A,1PE11.4)') 'Soave-Redlich-Kwong ' //
     &         '''a'' Parameter, J/kmol: ',GCPP(13,IGC)
            WRITE (IWR,'(2X,A,1PE11.4)') 'Soave-Redlich-Kwong ' //
     &         '''b'' Parameter, m^3/kmol: ',GCPP(14,IGC)
            WRITE (IWR,'(2X,A,1PE11.4)') 'Soave-Redlich-Kwong ' //
     &         '''omega'' Parameter: ',GCPP(15,IGC)
          ENDIF
!
!---    Petroleum component critical properties entered directly  ---
!
        ELSE
!
!---      Petroleum component composition declared as a combination
!         of petroluem fraction components  ---
!
          IF( INDX2.EQ.1 ) THEN
            VARB = 'Petroleum Component Grouping Type'
            CALL RDCHR(ISTART,ICOMMA,NCHG,CHDUM,BDUM)
!
!---        Read number of petroleum fractions ---
!
            IF( INDEX(BDUM(1:),'composite').NE.0 ) THEN
              VARB = 'Number of Petroleum Component Fractions'
              CALL RDINT(ISTART,ICOMMA,CHDUM,NPCFX)
            ELSE
              INDX = 4
              CHMSG = 'Unrecognized Petroleum Component Grouping ' // 
     &          'Type: ' // BDUM
              CALL WRMSGS( INDX )
            ENDIF
!
!---        Allocate temporary memory for petroleum component
!           parameters ---
!
            ALLOCATE( GCPPX(1:70,1:NPCFX),STAT=ISTAT )
            IF( ISTAT.NE.0 ) THEN
              INDX = 3
              CHMSG = 'Allocation Error: GCPPX'
              CALL WRMSGS( INDX )
            ENDIF
            DO JGC = 1,NPCFX
              WRITE (IWR,'(A,I6)') 'Component # ',JGC
!
!---          Read new input line ---
!
              CALL RDINPL( CHDUM )
              CALL LCASE( CHDUM )
              ISTART = 1
!
!---          Read molecular weight, kg/kmol ---
!
              VARB = 'Molecular Weight'
              CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPPX(1,JGC))
              CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
              WRITE (IWR,'(2X,4A,1PE11.4,$)') VARB(1:IVR),', ',
     &          UNTS(1:NCH),': ',GCPPX(1,JGC)
              INDX = 0
              IUNKG = 1
              IUNMOL = -1
              CALL RDUNIT(UNTS,GCPPX(1,JGC),INDX)
              WRITE(IWR,'(A,1PE11.4,A)') ' (',GCPPX(1,JGC),', kg/kmol)'
!
!---          Read normal boiling point temperature, C ---
!
              VARB = 'Normal Boiling Point, '
              CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPPX(2,JGC))
              CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
              WRITE (IWR,'(2X,4A,1PE11.4,$)') VARB(1:IVR),', ',
     &          UNTS(1:NCH),': ',GCPPX(2,JGC)
              INDX = 0
              IUNK = 1
              CALL RDUNIT(UNTS,GCPPX(2,JGC),INDX)
              GCPPX(2,JGC) = GCPPX(2,JGC) + TABS
              WRITE(IWR,'(A,1PE11.4,A)') ' (',GCPPX(2,JGC),', K)'
!
!---          Read critical temperature, C ---
!
              VARB = 'Critical Temperature, '
              CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPPX(3,JGC))
              CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
              WRITE (IWR,'(2X,4A,1PE11.4,$)') VARB(1:IVR),', ',
     &          UNTS(1:NCH),': ',GCPPX(3,JGC)
              INDX = 0
              IUNK = 1
              CALL RDUNIT(UNTS,GCPPX(3,JGC),INDX)
              GCPPX(3,JGC) = GCPPX(3,JGC) + TABS
              WRITE(IWR,'(A,1PE11.4,A)') ' (',GCPPX(3,JGC),', K)'
!
!---          Read critical pressure, Pa ---
!
              VARB = 'Critical Pressure, '
              CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPPX(4,JGC))
              CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
              WRITE (IWR,'(2X,4A,1PE11.4,$)') VARB(1:IVR),', ',
     &          UNTS(1:NCH),': ',GCPPX(4,JGC)
              INDX = 0
              IUNM = -1
              IUNKG = 1
              IUNS = -2
              CALL RDUNIT(UNTS,GCPPX(4,JGC),INDX)
              WRITE(IWR,'(A,1PE11.4,A)') ' (',GCPPX(4,JGC),', Pa)'
!
!---          Read critical molar volume ---
!
              VARB = 'Critical Molar Volume, '
              CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPPX(5,JGC))
              CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
              WRITE (IWR,'(2X,3A,1PE11.4,$)') VARB(1:IVR),
     &          UNTS(1:NCH),': ',GCPPX(5,JGC)
              INDX = 0
              IUNM = 3
              IUNMOL = -1
              CALL RDUNIT(UNTS,GCPPX(5,JGC),INDX)
              WRITE(IWR,'(A,1PE11.4,A)') ' (',GCPPX(5,JGC),', m^3/kmol)'
!
!---          Read critical compressiblity  ---
!
              VARB = 'Critical Compressibility: '
              CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPPX(6,JGC))
              WRITE (IWR,'(2X,A,1PE11.4)') VARB(1:IVR),GCPPX(6,JGC)
!
!---          Read Pitzer acentric factor ---
!
              VARB = 'Pitzer Acentric Factor: '
              CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPPX(7,JGC))
              WRITE (IWR,'(2X,A,1PE11.4)') VARB(1:IVR),GCPPX(7,JGC)
!
!---          Isobaric molar specific heat, J/kmol K, from the
!             Kesler and Lee second correlation Lastovka, V., and 
!             J. M. Shaw "Predictive correlations for ideal gas heat
!             capacities of pure hydrocarbons and petroleum fractions."
!             Fluid Phase Equilibria 356(2013):338-370.
!             M.G. Kesler, B.I. Lee, "Improve Prediction of Enthalpy of 
!             Fractions" Hydrocarbon Processing, 55, 1976, pp. 153–158.
!
!---          Specific gravity as a function of molecular weight  ---
!
              SGX = 8.7815-1 + 1.5898D-4*GCPPX(1,JGC) + 
     &          4.1893D-8*(GCPPX(1,JGC)**2) 
     &          + (-1.2518D-10)*(GCPPX(1,JGC)**3)
     &          + (-1.6561D+1)/GCPPX(1,JGC)
!
!---          Watson characterization factor  ---
!
              WCFX = ((GCPPX(2,JGC)*1.8D+0)**(1.D+0/3.D+0))/SGX
!
!---          Corrective factor  ---
!
              CFX = (((12.8D+0-WCFX)*(10.D+0-WCFX))/
     &          (10.D+0*GCPPX(7,JGC)))**2      
!
!---          Constant a, J/kmol K  ---
!
              GCPPX(18,JGC) = 4.187D+3*GCPPX(1,JGC)*((-0.33886D+0) +
     &          0.02827D+0*WCFX - CFX*(0.26105D+0 - 
     &          0.59332*GCPPX(7,JGC)))     
!
!---          Constant B, J/kmol K^2  ---
!
              GCPPX(19,JGC) = -7.536D+3*GCPPX(1,JGC)*(0.9291D+0 - 
     &          1.1543D+0*WCFX + 0.0368D+0*(WCFX**2) 
     &          - CFX*(4.56D+0 - 9.48D+0*GCPPX(7,JGC)))*1.D-4
!
!---          Constant C, J/kmol K^3  ---
!
              GCPPX(20,JGC) = -1.357D+4*GCPPX(1,JGC)*(1.6658D+0
     &          - CFX*(0.536D+0 - 0.6828D+0*GCPPX(7,JGC)))*1.D-7
!
!---          Constant D, J/kmol K^4  ---
!
              GCPPX(21,JGC) = 0.D+0
!
!---          Optional read from input  ---
!
              VARB = 'Isobaric Molar Specific Heat Coefficients: '
              CALL CHKDPR( ISTART,ICOMMA,CHDUM,INDX )
              IF( INDX.EQ.1 ) THEN
!
!---            Constant a, J/mol K  ---
!
                CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPPX(18,JGC))
!
!---            Constant a, J/kmol K  ---
!
                GCPPX(18,JGC) = 1.D+3*GCPPX(18,JGC)
!
!---            Constant b, J/mol K^2  ---
!
                CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPPX(19,JGC))
!
!---            Constant b, J/kmol K^2  ---
!
                GCPPX(19,JGC) = 1.D+3*GCPPX(19,JGC)
!
!---            Constant c, J/mol K^3  ---
!
                CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPPX(20,JGC))
!
!---            Constant c, J/kmol K^3  ---
!
                GCPPX(20,JGC) = 1.D+3*GCPPX(20,JGC)
!
!---            Constant d, J/mol K^4  ---
!
               CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPPX(21,JGC))
!
!---            Constant d, J/kmol K^4  ---
!
                GCPPX(21,JGC) = 1.D+3*GCPPX(21,JGC)
              ENDIF
              WRITE (IWR,'(2X,A,$)') VARB(1:IVR)
              WRITE (IWR,'(A)') ' (Cp = a + bT + cT^2 + dT^3)'
              WRITE (IWR,'(4X,A,1PE11.4)') 'Constant a, J/kmol K: ',
     &          GCPPX(18,JGC)
              WRITE (IWR,'(4X,A,1PE11.4)') 'Constant b, J/kmol K^2: ',
     &          GCPPX(19,JGC)
              WRITE (IWR,'(4X,A,1PE11.4)') 'Constant c, J/kmol K^3: ',
     &          GCPPX(20,JGC)
              WRITE (IWR,'(4X,A,1PE11.4)') 'Constant d, J/kmol K^4: ',
     &          GCPPX(21,JGC)
!
!---          Read Parachor ---
!
              VARB = 'Parachor: '
              CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPPX(22,JGC))
              WRITE (IWR,'(2X,A,1PE11.4)') VARB(1:IVR),GCPPX(22,JGC)
!
!---          Epsilon over Boltzmann constant
!             (Reid et al., 1987, pp. 587)  ---
!
              GCPPX(8,JGC) = 1.15D+0*GCPPX(2,JGC)
              WRITE (IWR,'(2X,A,1PE11.4)') 'Epsilon over' //
     &          'Boltzmann Constant, K: ',GCPPX(8,JGC)
!
!---          Liquid molar volume m^3/kmol at the
!             normal boiling point, using correlation of Tyn and Calus
!             (Reid et al., 1987, pp. 53)  ---
!
              GCPPX(9,JGC) = 0.285D-3*((1.D+3*GCPPX(5,JGC))**1.048D+0)
              WRITE (IWR,'(2X,A,1PE11.4)') 'Liquid Molar Volume' //
     &          'at the Normal Boiling Point, m^3/kmol: ',GCPPX(9,JGC)
!
!---          Characteristic length parameter
!             (Reid et al., 1987, pp. 587)  ---
!
              GCPPX(10,JGC) = 1.18D+0*(1.D+3*GCPPX(9,JGC))**3.333D-1
              WRITE (IWR,'(2X,A,1PE11.4)') 'Characteristic Length' //
     &          'Parameter, Angstroms: ',GCPPX(10,JGC)
!
!---          Peng-Robinson mixture "a", "b", and "omega" 
!             parameters  ---
!
              IF( ISLC(68).EQ.1 ) THEN
                GCPPX(13,JGC) = 0.45724D+0*(RCU**2)*(GCPPX(3,JGC)**2)/
     &            GCPPX(4,JGC)
                GCPPX(14,JGC) = 0.07780D+0*RCU*GCPPX(3,JGC)/GCPPX(4,JGC)
                GCPPX(15,JGC) = 0.37464D+0 + 1.54226D+0*GCPPX(7,JGC) -
     &            0.26992D+0*(GCPPX(7,JGC)**2)
                WRITE (IWR,'(2X,A,1PE11.4)') 'Peng-Robinson ''a'' ' //
     &             'Parameter, J/kmol: ',GCPPX(13,JGC)
                WRITE (IWR,'(2X,A,1PE11.4)') 'Peng-Robinson ''b'' ' //
     &             'Parameter, m^3/kmol: ',GCPPX(14,JGC)
                WRITE (IWR,'(2X,A,1PE11.4)') 'Peng-Robinson ' //
     &             '''omega'' Parameter: ',GCPPX(15,JGC)
!
!---          Soave-Redlich-Kwong mixture "a", "b", and "omega"
!             parameters  ---
!
              ELSEIF( ISLC(68).EQ.2 ) THEN
                GCPPX(13,JGC) = 0.42747D+0*(RCU**2)*(GCPPX(3,JGC)**2)/
     &            GCPPX(4,JGC)
                GCPPX(14,JGC) = 0.08664D+0*RCU*GCPPX(3,JGC)/GCPPX(4,JGC)
                GCPPX(15,JGC) = 0.480D+0 + 1.574D+0*GCPPX(7,JGC) -
     &            0.176D+0*(GCPPX(7,JGC)**2)
                WRITE (IWR,'(2X,A,1PE11.4)') 'Soave-Redlich-Kwong ' //
     &             '''a'' Parameter, J/kmol: ',GCPPX(13,JGC)
                WRITE (IWR,'(2X,A,1PE11.4)') 'Soave-Redlich-Kwong ' //
     &             '''b'' Parameter, m^3/kmol: ',GCPPX(14,JGC)
                WRITE (IWR,'(2X,A,1PE11.4)') 'Soave-Redlich-Kwong ' //
     &             '''omega'' Parameter: ',GCPPX(15,JGC)
              ENDIF
!
!---          Peneloux volume shift parameter, no liquid density input
!             use Peneloux correlation for Soave-Redlich-Kwong EOS  ---
!
              IF( ISLC(68).EQ.2 ) THEN
                ZRAX = 2.9056D-1 - 8.775D-2*GCPPX(7,JGC)
                GCPPX(23,JGC) = 4.0768D-1*RCU*GCPPX(3,JGC)*
     &            (2.9441D-1-ZRAX)/GCPPX(4,JGC)
!
!---          Peneloux volume shift parameter, no liquid density input
!             use Peneloux correlation for Peng-Robinson EOS  ---
!
              ELSE
                ZRAX = 2.9056D-1 - 8.775D-2*GCPPX(7,JGC)
                GCPPX(23,JGC) = 5.0033D-1*RCU*GCPPX(3,JGC)*
     &            (2.5969D-1-ZRAX)/GCPPX(4,JGC)
              ENDIF
            ENDDO
!
!---        Assume uniform mole fractions  ---
!
            XMPCFX = 1.D+0/REAL(NPCFX)
!
!---        Composite molecular weight, kg/kmol ---
!---        Composite normal boiling point temperature, C ---
!---        Composite acentric factor ---
!
            GCPP(1,IGC) = 0.D+0
            GCPP(2,IGC) = 0.D+0  
            GCPP(7,IGC) = 0.D+0
            DO JGC = 1,NPCFX
              GCPP(1,IGC) = GCPP(1,IGC) + XMPCFX*GCPPX(1,JGC)
              GCPP(2,IGC) = GCPP(2,IGC) + XMPCFX/GCPPX(2,JGC)
              GCPP(7,IGC) = GCPP(7,IGC) + XMPCFX*GCPPX(7,JGC)
            ENDDO
            GCPP(2,IGC) = 1.D+0/GCPP(2,IGC)
!
!---        Petroleum component critical molar volume m^3/kmol, 
!           according to Lee and Kesler (1975), from Petroleum 
!           Refining V.1: Crude Oil. Petroleum Products. Process 
!           Flowsheets, pp. 112  ---
!
            GCPP5AX = 0.D+0
            GCPP5BX = 0.D+0
            GCPP5CX = 0.D+0
            DO JGC = 1,NPCFX
              GCPP5AX = GCPP5AX + XMPCFX*GCPPX(5,JGC)
              GCPP5BX = GCPP5BX + XMPCFX*(GCPPX(5,JGC)**(2.D+0/3.D+0))
              GCPP5CX = GCPP5CX + XMPCFX*(GCPPX(5,JGC)**(1.D+0/3.D+0))
            ENDDO
            GCPP(5,IGC) = 2.5D-1*GCPP5AX + 7.5D-1*GCPP5BX*GCPP5CX
!
!---        Petroleum critical temperature, according
!           to Lee and Kesler (1975), from Petroleum Refining V.1: Crude
!           Oil. Petroleum Products. Process Flowsheets, pp. 112  ---
!
            GCPP3AX = 0.D+0  
            GCPP3BX = 0.D+0  
            GCPP3CX = 0.D+0  
            DO JGC = 1,NPCFX
              GCPP3AX = GCPP3AX + XMPCFX*GCPPX(5,JGC)*GCPPX(3,JGC)
              GCPP3BX = GCPP3BX + XMPCFX*(GCPPX(5,JGC)**(2.D+0/3.D+0))
     &          *SQRT(GCPPX(3,JGC))
              GCPP3CX = GCPP3CX + XMPCFX*(GCPPX(5,JGC)**(1.D+0/3.D+0))
     &          *SQRT(GCPPX(3,JGC))
            ENDDO
            GCPP(3,IGC) = (2.5D-1*GCPP3AX + 7.5D-1*GCPP3BX*GCPP3CX)/
     &        GCPP(5,IGC)
!
!---        Epsilon over Boltzmann constant
!           (Reid et al., 1987, pp. 587)  ---
!
            GCPP(8,IGC) = 1.15D+0*GCPP(2,IGC)
!
!---        Liquid molar volume m^3/kmol at the
!           normal boiling point, using correlation of Tyn and Calus
!           (Reid et al., 1987, pp. 53)  ---
!
            GCPP(9,IGC) = 0.285D-3*((1.D+3*GCPP(5,IGC))**1.048D+0)
!
!---        Characteristic length parameter
!           (Reid et al., 1987, pp. 587)  ---
!
            GCPP(10,IGC) = 1.18D+0*(1.D+3*GCPP(9,IGC))**3.333D-1
!
!---        Petroleum component critical compressibility factor  ---
!
            GCPP(6,IGC) = 2.91D-1 - 8.D-2*GCPP(7,IGC)
!
!---        Petroleum component critical pressure  ---
!
            GCPP(4,IGC) = RCU*GCPP(6,IGC)*GCPP(3,IGC)/GCPP(5,IGC)
!
!---        Peng-Robinson mixture "a", "b", and "omega" parameters  ---
!
            IF( ISLC(68).EQ.1 ) THEN
              GCPP(13,IGC) = 0.D+0
              GCPP(14,IGC) = 0.D+0
              GCPP(15,IGC) = 0.D+0
              DO JGC = 1,NPCFX
                AIX = 0.45724D+0*(RCU**2)*(GCPPX(3,JGC)**2)/
     &              GCPPX(4,JGC)
                BIX = 0.07780D+0*RCU*GCPPX(3,JGC)/GCPPX(4,JGC)
                OIX = 0.37464D+0 + 1.54226D+0*GCPPX(7,JGC) -
     &              0.26992D+0*(GCPPX(7,JGC)**2)
                DO KGC = 1,NPCFX
                  AJX = 0.45724D+0*(RCU**2)*(GCPPX(3,KGC)**2)/
     &              GCPPX(4,KGC)
                  BIPKX = 1.D+0 - 
     &              8.D+0*SQRT( GCPPX(5,JGC)*GCPPX(5,KGC) )/
     &              (((GCPPX(5,JGC)**(1.D+0/3.D+0)) + 
     &              (GCPPX(5,KGC)**(1.D+0/3.D+0)))**3)
                  GCPP(13,IGC) = GCPP(13,IGC) + SQRT( AIX*AJX )*
     &              XMPCFX*XMPCFX*(1.D+0-BIPKX)
                ENDDO
                GCPP(14,IGC) = GCPP(14,IGC) + BIX*XMPCFX
                GCPP(15,IGC) = GCPP(15,IGC) + OIX*XMPCFX
              ENDDO
!
!---        Soave-Redlich-Kwong mixture "a", "b", and "omega" 
!           parameters  ---
!
            ELSEIF( ISLC(68).EQ.2 ) THEN
              GCPP(13,IGC) = 0.D+0
              GCPP(14,IGC) = 0.D+0
              GCPP(15,IGC) = 0.D+0
              DO JGC = 1,NPCFX
                AIX = 0.42747D+0*(RCU**2)*(GCPPX(3,JGC)**2)/
     &              GCPPX(4,JGC)
                BIX = 0.08664D+0*RCU*GCPPX(3,JGC)/GCPPX(4,JGC)
                OIX = 0.480D+0 + 1.574D+0*GCPPX(7,JGC) -
     &              0.176D+0*(GCPPX(7,JGC)**2)
                DO KGC = 1,NPCFX
                  AJX = 0.42747D+0*(RCU**2)*(GCPPX(3,KGC)**2)/
     &              GCPPX(4,KGC)
                  BIPKX = 1.D+0 - 
     &              8.D+0*SQRT( GCPPX(5,JGC)*GCPPX(5,KGC) )/
     &              (((GCPPX(5,JGC)**(1.D+0/3.D+0)) + 
     &              (GCPPX(5,KGC)**(1.D+0/3.D+0)))**3)
                  GCPP(13,IGC) = GCPP(13,IGC) + SQRT( AIX*AJX )*
     &              XMPCFX*XMPCFX*(1.D+0-BIPKX)
                ENDDO
                GCPP(14,IGC) = GCPP(14,IGC) + BIX*XMPCFX
                GCPP(15,IGC) = GCPP(15,IGC) + OIX*XMPCFX
              ENDDO
            ELSE
              INDX = 3
              CHMSG = 'Unrecognized Equation of State'
              CALL WRMSGS( INDX )
            ENDIF
!
!---        Petroleum component isobaric molar specific heat 
!           coefficients  ---
!
            GCPP(18,IGC) = 0.D+0  
            GCPP(19,IGC) = 0.D+0
            GCPP(20,IGC) = 0.D+0  
            GCPP(21,IGC) = 0.D+0
            GCPP(22,IGC) = 0.D+0
            DO JGC = 1,NPCFX
              GCPP(18,IGC) = GCPP(18,IGC) + XMPCFX*GCPPX(18,JGC)
              GCPP(19,IGC) = GCPP(19,IGC) + XMPCFX*GCPPX(19,JGC)
              GCPP(20,IGC) = GCPP(20,IGC) + XMPCFX*GCPPX(20,JGC)
              GCPP(21,IGC) = GCPP(21,IGC) + XMPCFX*GCPPX(21,JGC)
              GCPP(22,IGC) = GCPP(22,IGC) + XMPCFX*GCPPX(22,JGC)
            ENDDO
!
!---        Petroleum component Peneloux volume-shift parameter  ---
!
            GCPP(23,IGC) = 0.D+0  
            DO JGC = 1,NPCFX
              GCPP(23,IGC) = GCPP(23,IGC) + XMPCFX*GCPPX(23,JGC)
            ENDDO
!
!---        Write composite molecular weight, kg/kmol ---
!
            WRITE (IWR,'(/,A)') 'Composite Parameters'
            VARB = 'Molecular Weight'
            IVR = INDEX(VARB(1:),'  ')-1
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),', kg/kmol : ',
     &        GCPP(1,IGC)
!
!---        Write composite normal boiling point temperature, C ---
!
            VARB = 'Normal Boiling Point'
            IVR = INDEX(VARB(1:),'  ')-1
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),', K :',
     &        GCPP(2,IGC)
!
!---        Write critical temperature, C ---
!
            VARB = 'Critical Temperature'
            IVR = INDEX(VARB(1:),'  ')-1
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),', K :',
     &        GCPP(3,IGC)
!
!---        Write composite critical pressure, Pa ---
!
            VARB = 'Critical Pressure'
            IVR = INDEX(VARB(1:),'  ')-1
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),', Pa :',
     &        GCPP(4,IGC)
!
!---        Write composite molar volume ---
!
            VARB = 'Critical Molar Volume'
            IVR = INDEX(VARB(1:),'  ')-1
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),', m^3/kmol : ',
     &        GCPP(5,IGC)
!
!---        Write composite critical compressiblity  ---
!
            VARB = 'Critical Compressibility'
            IVR = INDEX(VARB(1:),'  ')-1
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),' : ',
     &        GCPP(6,IGC)
!
!---        Write composite acentric factor ---
!
            VARB = 'Pitzer Acentric Factor'
            WRITE (IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),' : ',
     &        GCPP(7,IGC)
            IF( ISTAT.NE.0 ) THEN
              INDX = 3
              CHMSG = 'Deallocation Error: GCPPX'
              CALL WRMSGS( INDX )
            ENDIF
!
!---        Write composite isobaric molar specific heat coeffs ---
!
            IF( INDX.EQ.1 ) THEN
              VARB = 'Isobaric Molar Specific Heat Coefficients: '
              WRITE (IWR,'(2X,A,$)') VARB(1:IVR)
              WRITE (IWR,'(A)') ' (Cp = a + bT + cT^2 + dT^3)'
              WRITE (IWR,'(4X,A,1PE11.4)') 'Constant a, J/kmol K: ',
     &          GCPP(18,IGC)
              WRITE (IWR,'(4X,A,1PE11.4)') 'Constant b, J/kmol K^2: ',
     &          GCPP(19,IGC)
              WRITE (IWR,'(4X,A,1PE11.4)') 'Constant c, J/kmol K^3: ',
     &          GCPP(20,IGC)
              WRITE (IWR,'(4X,A,1PE11.4)') 'Constant d, J/kmol K^4: ',
     &          GCPP(21,IGC)
            ENDIF
!
!---        Write composite Parachor ---
!
            VARB = 'Parachor: '
            WRITE (IWR,'(2X,A,1PE11.4)') VARB(1:IVR),GCPP(22,IGC)
!
!---        Write composite Epsilon over Boltzmann constant
!           (Reid et al., 1987, pp. 587)  ---
!
            WRITE (IWR,'(2X,A,1PE11.4)') 'Epsilon over' //
     &        'Boltzmann Constant, K: ',GCPP(8,IGC)
!
!---        Write composite Liquid molar volume m^3/kmol at the
!           normal boiling point, using correlation of Tyn and Calus
!           (Reid et al., 1987, pp. 53)  ---
!
            WRITE (IWR,'(2X,A,1PE11.4)') 'Liquid Molar Volume ' //
     &        'at the Normal Boiling Point, m^3/kmol: ',GCPP(9,IGC)
!
!---        Write composite Characteristic length parameter
!           (Reid et al., 1987, pp. 587)  ---
!
            WRITE (IWR,'(2X,A,1PE11.4)') 'Characteristic Length ' //
     &        'Parameter, Angstroms: ',GCPP(10,IGC)
!
!---        Write composite Peng-Robinson mixture "a", "b", and 
!           "omega" parameters  ---
!
            IF( ISLC(68).EQ.1 ) THEN
              WRITE (IWR,'(2X,A,1PE11.4)') 'Peng-Robinson ''a'' ' //
     &           'Parameter, J/kmol: ',GCPP(13,IGC)
              WRITE (IWR,'(2X,A,1PE11.4)') 'Peng-Robinson ''b'' ' //
     &           'Parameter, m^3/kmol: ',GCPP(14,IGC)
              WRITE (IWR,'(2X,A,1PE11.4)') 'Peng-Robinson ''omega'' ' //
     &           'Parameter: ',GCPP(15,IGC)
!
!---        Write composite Soave-Redlich-Kwong mixture "a", "b", and
!           "omega" parameters  ---
!
            ELSEIF( ISLC(68).EQ.2 ) THEN
              WRITE (IWR,'(2X,A,1PE11.4)') 'Soave-Redlich-Kwong ' //
     &           '''a'' Parameter, J/kmol: ',GCPP(13,IGC)
              WRITE (IWR,'(2X,A,1PE11.4)') 'Soave-Redlich-Kwong ' //
     &           '''b'' Parameter, m^3/kmol: ',GCPP(14,IGC)
              WRITE (IWR,'(2X,A,1PE11.4)') 'Soave-Redlich-Kwong ' //
     &           '''omega'' Parameter: ',GCPP(15,IGC)
            ENDIF
!
!---        Deallocate temporary memory for petroleum component
!           parameters ---
!
            DEALLOCATE( GCPPX,STAT=ISTAT )
            IF( ISTAT.NE.0 ) THEN
              INDX = 3
              CHMSG = 'Deallocation Error: GCPPX'
              CALL WRMSGS( INDX )
            ENDIF
          ELSE
!
!---        Read new input line ---
!
            CALL RDINPL( CHDUM )
            CALL LCASE( CHDUM )
            ISTART = 1
!
!---        Read molecular weight, kg/kmol ---
!
            VARB = 'Molecular Weight'
            CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(1,IGC))
            CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
            WRITE (IWR,'(2X,4A,1PE11.4,$)') VARB(1:IVR),', ',
     &        UNTS(1:NCH),': ',GCPP(1,IGC)
            INDX = 0
            IUNKG = 1
            IUNMOL = -1
            CALL RDUNIT(UNTS,GCPP(1,IGC),INDX)
            WRITE(IWR,'(A,1PE11.4,A)') ' (',GCPP(1,IGC),', kg/kmol)'
!
!---        Read normal boiling point temperature, C ---
!
            VARB = 'Normal Boiling Point, '
            CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(2,IGC))
            CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
            WRITE (IWR,'(2X,4A,1PE11.4,$)') VARB(1:IVR),', ',
     &        UNTS(1:NCH),': ',GCPP(2,IGC)
            INDX = 0
            IUNK = 1
            CALL RDUNIT(UNTS,GCPP(2,IGC),INDX)
            GCPP(2,IGC) = GCPP(2,IGC) + TABS
            WRITE(IWR,'(A,1PE11.4,A)') ' (',GCPP(2,IGC),', K)'
!
!---        Read critical temperature, C ---
!
            VARB = 'Critical Temperature, '
            CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(3,IGC))
            CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
            WRITE (IWR,'(2X,4A,1PE11.4,$)') VARB(1:IVR),', ',
     &        UNTS(1:NCH),': ',GCPP(3,IGC)
            INDX = 0
            IUNK = 1
            CALL RDUNIT(UNTS,GCPP(3,IGC),INDX)
            GCPP(3,IGC) = GCPP(3,IGC) + TABS
            WRITE(IWR,'(A,1PE11.4,A)') ' (',GCPP(3,IGC),', K)'
!
!---        Read critical pressure, Pa ---
!
            VARB = 'Critical Pressure, '
            CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(4,IGC))
            CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
            WRITE (IWR,'(2X,4A,1PE11.4,$)') VARB(1:IVR),', ',
     &        UNTS(1:NCH),': ',GCPP(4,IGC)
            INDX = 0
            IUNM = -1
            IUNKG = 1
            IUNS = -2
            CALL RDUNIT(UNTS,GCPP(4,IGC),INDX)
            WRITE(IWR,'(A,1PE11.4,A)') ' (',GCPP(4,IGC),', Pa)'
!
!---        Read critical molar volume ---
!
            VARB = 'Critical Molar Volume, '
            CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(5,IGC))
            CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
            WRITE (IWR,'(2X,3A,1PE11.4,$)') VARB(1:IVR),
     &        UNTS(1:NCH),': ',GCPP(5,IGC)
            INDX = 0
            IUNM = 3
            IUNMOL = -1
            CALL RDUNIT(UNTS,GCPP(5,IGC),INDX)
            WRITE(IWR,'(A,1PE11.4,A)') ' (',GCPP(5,IGC),', m^3/kmol)'
!
!---        Read critical compressiblity  ---
!
            VARB = 'Critical Compressibility: '
            CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(6,IGC))
            WRITE (IWR,'(2X,A,1PE11.4)') VARB(1:IVR),GCPP(6,IGC)
!
!---        Read Pitzer acentric factor ---
!
            VARB = 'Pitzer Acentric Factor: '
            CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(7,IGC))
            WRITE (IWR,'(2X,A,1PE11.4)') VARB(1:IVR),GCPP(7,IGC)
!
!---        Isobaric molar specific heat, J/kmol K, from the
!           Kesler and Lee second correlation Lastovka, V., and 
!           J. M. Shaw "Predictive correlations for ideal gas heat
!           capacities of pure hydrocarbons and petroleum fractions."
!           Fluid Phase Equilibria 356(2013):338-370.
!           M.G. Kesler, B.I. Lee, "Improve Prediction of Enthalpy of 
!           Fractions" Hydrocarbon Processing, 55, 1976, pp. 153–158.
!
!---        Specific gravity as a function of molecular weight  ---
!
            SGX = 8.7815-1 + 1.5898D-4*GCPP(1,IGC) + 
     &        4.1893D-8*(GCPP(1,IGC)**2) + (-1.2518D-10)*
     &        (GCPP(1,IGC)**3) + (-1.6561D+1)/GCPP(1,IGC)
!
!---        Watson characterization factor  ---
!
            WCFX = ((GCPP(2,IGC)*1.8D+0)**(1.D+0/3.D+0))/SGX
!
!---        Corrective factor  ---
!
            CFX = (((12.8D+0-WCFX)*(10.D+0-WCFX))/
     &        (10.D+0*GCPP(7,IGC)))**2      
!
!---        Constant a, J/kmol K  ---
!
            GCPP(18,IGC) = 4.187D+3*GCPP(1,IGC)*((-0.33886D+0) +
     &        0.02827D+0*WCFX - CFX*(0.26105D+0 - 0.59332*GCPP(7,IGC)))     
!
!---        Constant B, J/kmol K^2  ---
!
            GCPP(19,IGC) = -7.536D+3*GCPP(1,IGC)*(0.9291D+0 - 
     &        1.1543D+0*WCFX + 0.0368D+0*(WCFX**2) 
     &        - CFX*(4.56D+0 - 9.48D+0*GCPP(7,IGC)))*1.D-4
!
!---        Constant C, J/kmol K^3  ---
!
            GCPP(20,IGC) = -1.357D+4*GCPP(1,IGC)*(1.6658D+0
     &        - CFX*(0.536D+0 - 0.6828D+0*GCPP(7,IGC)))*1.D-7
!
!---        Constant D, J/kmol K^4  ---
!
            GCPP(21,IGC) = 0.D+0
!
!---        Optional read from input  ---
!
            VARB = 'Isobaric Molar Specific Heat Coefficients: '
            CALL CHKDPR( ISTART,ICOMMA,CHDUM,INDX )
            IF( INDX.EQ.1 ) THEN
!
!---          Constant a, J/mol K  ---
!
              CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(18,IGC))
!
!---          Constant a, J/kmol K  ---
!
              GCPP(18,IGC) = 1.D+3*GCPP(18,IGC)
!
!---          Constant b, J/mol K^2  ---
!
              CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(19,IGC))
!
!---          Constant b, J/kmol K^2  ---
!
              GCPP(19,IGC) = 1.D+3*GCPP(19,IGC)
!
!---          Constant c, J/mol K^3  ---
!
              CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(20,IGC))
!
!---          Constant c, J/kmol K^3  ---
!
              GCPP(20,IGC) = 1.D+3*GCPP(20,IGC)
!
!---          Constant d, J/mol K^4  ---
!
             CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(21,IGC))
!
!---          Constant d, J/kmol K^4  ---
!
              GCPP(21,IGC) = 1.D+3*GCPP(21,IGC)
            ENDIF
            WRITE (IWR,'(2X,A,$)') VARB(1:IVR)
            WRITE (IWR,'(A)') ' (Cp = a + bT + cT^2 + dT^3)'
            WRITE (IWR,'(4X,A,1PE11.4)') 'Constant a, J/kmol K: ',
     &        GCPP(18,IGC)
            WRITE (IWR,'(4X,A,1PE11.4)') 'Constant b, J/kmol K^2: ',
     &        GCPP(19,IGC)
            WRITE (IWR,'(4X,A,1PE11.4)') 'Constant c, J/kmol K^3: ',
     &        GCPP(20,IGC)
            WRITE (IWR,'(4X,A,1PE11.4)') 'Constant d, J/kmol K^4: ',
     &        GCPP(21,IGC)
!
!---        Read Parachor ---
!
            VARB = 'Parachor: '
            CALL RDDPR(ISTART,ICOMMA,CHDUM,GCPP(22,IGC))
            WRITE (IWR,'(2X,A,1PE11.4)') VARB(1:IVR),GCPP(22,IGC)
!
!---        Epsilon over Boltzmann constant
!           (Reid et al., 1987, pp. 587)  ---
!
            GCPP(8,IGC) = 1.15D+0*GCPP(2,IGC)
            WRITE (IWR,'(2X,A,1PE11.4)') 'Epsilon over' //
     &        'Boltzmann Constant, K: ',GCPP(8,IGC)
!
!---        Liquid molar volume m^3/kmol at the
!           normal boiling point, using correlation of Tyn and Calus
!           (Reid et al., 1987, pp. 53)  ---
!
            GCPP(9,IGC) = 0.285D-3*((1.D+3*GCPP(5,IGC))**1.048D+0)
            WRITE (IWR,'(2X,A,1PE11.4)') 'Liquid Molar Volume' //
     &        'at the Normal Boiling Point, m^3/kmol: ',GCPP(9,IGC)
!
!---        Characteristic length parameter
!           (Reid et al., 1987, pp. 587)  ---
!
            GCPP(10,IGC) = 1.18D+0*(1.D+3*GCPP(9,IGC))**3.333D-1
            WRITE (IWR,'(2X,A,1PE11.4)') 'Characteristic Length' //
     &        'Parameter, Angstroms: ',GCPP(10,IGC)
!
!---        Peng-Robinson mixture "a", "b", and "omega" parameters  ---
!
            IF( ISLC(68).EQ.1 ) THEN
              GCPP(13,IGC) = 0.45724D+0*(RCU**2)*(GCPP(3,IGC)**2)/
     &          GCPP(4,IGC)
              GCPP(14,IGC) = 0.07780D+0*RCU*GCPP(3,IGC)/GCPP(4,IGC)
              GCPP(15,IGC) = 0.37464D+0 + 1.54226D+0*GCPP(7,IGC) -
     &          0.26992D+0*(GCPP(7,IGC)**2)
              WRITE (IWR,'(2X,A,1PE11.4)') 'Peng-Robinson ''a'' ' //
     &           'Parameter, J/kmol: ',GCPP(13,IGC)
              WRITE (IWR,'(2X,A,1PE11.4)') 'Peng-Robinson ''b'' ' //
     &           'Parameter, m^3/kmol: ',GCPP(14,IGC)
              WRITE (IWR,'(2X,A,1PE11.4)') 'Peng-Robinson ''omega'' ' //
     &           'Parameter: ',GCPP(15,IGC)
!
!---        Soave-Redlich-Kwong mixture "a", "b", and "omega"
!           parameters  ---
!
            ELSEIF( ISLC(68).EQ.2 ) THEN
              GCPP(13,IGC) = 0.42747D+0*(RCU**2)*(GCPP(3,IGC)**2)/
     &          GCPP(4,IGC)
              GCPP(14,IGC) = 0.08664D+0*RCU*GCPP(3,IGC)/GCPP(4,IGC)
              GCPP(15,IGC) = 0.480D+0 + 1.574D+0*GCPP(7,IGC) -
     &          0.176D+0*(GCPP(7,IGC)**2)
              WRITE (IWR,'(2X,A,1PE11.4)') 'Soave-Redlich-Kwong ' //
     &           '''a'' Parameter, J/kmol: ',GCPP(13,IGC)
              WRITE (IWR,'(2X,A,1PE11.4)') 'Soave-Redlich-Kwong ' //
     &           '''b'' Parameter, m^3/kmol: ',GCPP(14,IGC)
              WRITE (IWR,'(2X,A,1PE11.4)') 'Soave-Redlich-Kwong ' //
     &           '''omega'' Parameter: ',GCPP(15,IGC)
            ENDIF
!
!---        Peneloux volume shift parameter, no liquid density input
!           use Peneloux correlation for Soave-Redlich-Kwong EOS  ---
!
            IF( ISLC(68).EQ.2 ) THEN
              ZRAX = 2.9056D-1 - 8.775D-2*GCPP(7,IGC)
              GCPP(23,IGC) = 4.0768D-1*RCU*GCPP(3,IGC)*(2.9441D-1-ZRAX)/
     &          GCPP(4,IGC)
!
!---        Peneloux volume shift parameter, no liquid density input
!           use Peneloux correlation for Peng-Robinson EOS  ---
!
            ELSE
              ZRAX = 2.9056D-1 - 8.775D-2*GCPP(7,IGC)
              GCPP(23,IGC) = 5.0033D-1*RCU*GCPP(3,IGC)*(2.5969D-1-ZRAX)/
     &          GCPP(4,IGC)
            ENDIF
          ENDIF
        ENDIF
  500 CONTINUE
!
!---  Binary interaction parameters for CO2, CH4, and
!     petroleum fractions  ---
!
      DO 520 IPF = 1,LPF_EOR+2
        DO 510 JPF = 1,LPF_EOR+2
          IF( IPF.LE.2 ) THEN
            IF( JPF.LE.2 ) THEN
              BIPF(IPF,JPF) = 1.D+0 -
     &          8.D+0*SQRT( GCPP(5,IPF)*GCPP(5,JPF) )/
     &          (((GCPP(5,IPF)**(1.D+0/3.D+0)) +
     &          (GCPP(5,JPF)**(1.D+0/3.D+0)))**3)
            ELSE
              BIPF(IPF,JPF) = 1.D+0 -
     &          8.D+0*SQRT( GCPP(5,IPF)*PFPP(5,JPF-2) )/
     &          (((GCPP(5,IPF)**(1.D+0/3.D+0)) +
     &          (PFPP(5,JPF-2)**(1.D+0/3.D+0)))**3)
            ENDIF
          ELSE
            IF( JPF.LE.2 ) THEN
              BIPF(IPF,JPF) = 1.D+0 -
     &          8.D+0*SQRT( PFPP(5,IPF-2)*GCPP(5,JPF) )/
     &          (((PFPP(5,IPF-2)**(1.D+0/3.D+0)) +
     &          (GCPP(5,JPF)**(1.D+0/3.D+0)))**3)
            ELSE
              BIPF(IPF,JPF) = 1.D+0 -
     &          8.D+0*SQRT( PFPP(5,IPF-2)*PFPP(5,JPF-2) )/
     &          (((PFPP(5,IPF-2)**(1.D+0/3.D+0)) +
     &          (PFPP(5,JPF-2)**(1.D+0/3.D+0)))**3)
            ENDIF
          ENDIF
          IF( BIPF(IPF,JPF).LT.EPSL ) BIPF(IPF,JPF) = 0.D+0
  510   CONTINUE
  520 CONTINUE
!
!---  Binary interaction parameters, using optimized values for the
!     cubic equation of state from (Atilhan, M., S. Aparicio, and
!     K.R. Hall. 2012. "Optimized Binary Interaction Parameters
!     for VLE Calculations of Natural Gas Mixtures via Cubic
!     and Molecular Based Equations of State," Ind. Eng. Chem. Res.,
!     51(28):9687-9699.  ---
!
!
!---  Soave-Redlich-Kwong equation of state  ---
!
      IF( ISLC(68).EQ.2 ) THEN
!
!---    Methane sequence  ---
!
        BIPF(2,1) = 0.1116D+0
        BIPF(1,2) = 0.1116D+0
        BIPF(2,3) = 0.0344D+0
        BIPF(3,2) = 0.0344D+0
        BIPF(2,5) = 0.0075D+0
        BIPF(5,2) = 0.0075D+0
        BIPF(2,6) = 0.0102D+0
        BIPF(6,2) = 0.0102D+0
        BIPF(2,7) = 0.0537D+0
        BIPF(7,2) = 0.0537D+0
        BIPF(2,8) = 0.0132D+0
        BIPF(8,2) = 0.0132D+0
        BIPF(2,9) = 0.0484D+0
        BIPF(9,2) = 0.0484D+0
        BIPF(2,10) = 0.0121D+0
        BIPF(10,2) = 0.0121D+0
!
!---    Ethane sequence  ---
!
        BIPF(5,1) = 0.1255D+0
        BIPF(1,5) = 0.1255D+0
        BIPF(5,3) = 0.0423D+0
        BIPF(3,5) = 0.0423D+0
        BIPF(5,6) = -0.0071D+0
        BIPF(6,5) = -0.0071D+0
        BIPF(5,7) = 0.0124D+0
        BIPF(7,5) = 0.0124D+0
        BIPF(5,8) = -0.0546D+0
        BIPF(8,5) = -0.0546D+0
        BIPF(5,9) = 0.D+0
        BIPF(9,5) = 0.D+0
        BIPF(5,10) = 0.0118D+0
        BIPF(10,5) = 0.0118D+0
!
!---    Propane sequence  ---
!
        BIPF(6,1) = 0.1438D+0
        BIPF(1,6) = 0.1438D+0
        BIPF(6,3) = 0.0671D+0
        BIPF(3,6) = 0.0671D+0
        BIPF(6,7) = 0.0021D+0
        BIPF(7,6) = 0.0021D+0
        BIPF(6,8) = -0.0462D+0
        BIPF(8,6) = -0.0462D+0
        BIPF(6,9) = -0.0036D+0
        BIPF(9,6) = -0.0036D+0
        BIPF(6,10) = -0.0446D+0
        BIPF(10,6) = -0.0446D+0
!
!---    i-Butane sequence  ---
!
        BIPF(7,1) = 0.1518D+0
        BIPF(1,7) = 0.1518D+0
        BIPF(7,3) = 0.0570D+0
        BIPF(3,7) = 0.0570D+0
        BIPF(7,8) = -0.0081D+0
        BIPF(8,7) = -0.0081D+0
        BIPF(7,9) = 0.D+0
        BIPF(9,7) = 0.D+0
        BIPF(7,10) = 0.D+0
        BIPF(10,7) = 0.D+0
!
!---    n-Butane sequence  ---
!
        BIPF(8,1) = 0.1422D+0
        BIPF(1,8) = 0.1422D+0
        BIPF(8,3) = 0.0677D+0
        BIPF(3,8) = 0.0677D+0
        BIPF(8,9) = 0.D+0
        BIPF(9,8) = 0.D+0
        BIPF(8,10) = 0.0054D+0
        BIPF(10,8) = 0.0054D+0
!
!---    i-Pentane sequence  ---
!
        BIPF(9,1) = 0.1281D+0
        BIPF(1,9) = 0.1281D+0
        BIPF(9,3) = 0.1565D+0
        BIPF(3,9) = 0.1565D+0
        BIPF(9,10) = 0.D+0
        BIPF(10,9) = 0.D+0
!
!---    n-Pentane sequence  ---
!
        BIPF(10,1) = 0.1480D+0
        BIPF(1,10) = 0.1480D+0
        BIPF(10,3) = 0.0934D+0
        BIPF(3,10) = 0.0934D+0
!
!---    Nitrogen sequence  ---
!
        BIPF(3,1) = -0.0198D+0
        BIPF(1,3) = -0.0198D+0
!
!---  Peng-Robinson equation of state  ---
!
      ELSE
!
!---    Methane sequence  ---
!
        BIPF(2,1) = 0.1094D+0
        BIPF(1,2) = 0.1094D+0
        BIPF(2,3) = 0.0388D+0
        BIPF(3,2) = 0.0388D+0
        BIPF(2,5) = 0.0079D+0
        BIPF(5,2) = 0.0079D+0
        BIPF(2,6) = 0.0128D+0
        BIPF(6,2) = 0.0128D+0
        BIPF(2,7) = 0.0496D+0
        BIPF(7,2) = 0.0496D+0
        BIPF(2,8) = 0.0190D+0
        BIPF(8,2) = 0.0190D+0
        BIPF(2,9) = 0.0550D+0
        BIPF(9,2) = 0.0550D+0
        BIPF(2,10) = 0.0269D+0
        BIPF(10,2) = 0.0269D+0
!
!---    Ethane sequence  ---
!
        BIPF(5,1) = 0.1275D+0
        BIPF(1,5) = 0.1275D+0
        BIPF(5,3) = 0.0530D+0
        BIPF(3,5) = 0.0530D+0
        BIPF(5,6) = 0.0034D+0
        BIPF(6,5) = 0.0034D+0
        BIPF(5,7) = 0.0126D+0
        BIPF(7,5) = 0.0126D+0
        BIPF(5,8) = 0.0964D+0
        BIPF(8,5) = 0.0964D+0
        BIPF(5,9) = 0.D+0
        BIPF(9,5) = 0.D+0
        BIPF(5,10) = 0.0112D+0
        BIPF(10,5) = 0.0112D+0
!
!---    Propane sequence  ---
!
        BIPF(6,1) = 0.1362D+0
        BIPF(1,6) = 0.1362D+0
        BIPF(6,3) = 0.0842D+0
        BIPF(3,6) = 0.0842D+0
        BIPF(6,7) = 0.0027D+0
        BIPF(7,6) = 0.0027D+0
        BIPF(6,8) = -0.0483D+0
        BIPF(8,6) = -0.0483D+0
        BIPF(6,9) = -0.0048D+0
        BIPF(9,6) = -0.0048D+0
        BIPF(6,10) = -0.0396D+0
        BIPF(10,6) = -0.0396D+0
!
!---    i-Butane sequence  ---
!
        BIPF(7,1) = 0.1485D+0
        BIPF(1,7) = 0.1485D+0
        BIPF(7,3) = 0.0800D+0
        BIPF(3,7) = 0.0800D+0
        BIPF(7,8) = -0.0031D+0
        BIPF(8,7) = -0.0031D+0
        BIPF(7,9) = 0.D+0
        BIPF(9,7) = 0.D+0
        BIPF(7,10) = 0.D+0
        BIPF(10,7) = 0.D+0
!
!---    n-Butane sequence  ---
!
        BIPF(8,1) = 0.1362D+0
        BIPF(1,8) = 0.1362D+0
        BIPF(8,3) = 0.0920D+0
        BIPF(3,8) = 0.0920D+0
        BIPF(8,9) = 0.D+0
        BIPF(9,8) = 0.D+0
        BIPF(8,10) = 0.0052D+0
        BIPF(10,8) = 0.0052D+0
!
!---    i-Pentane sequence  ---
!
        BIPF(9,1) = 0.1161D+0
        BIPF(1,9) = 0.1161D+0
        BIPF(9,3) = 0.1706D+0
        BIPF(3,9) = 0.1706D+0
        BIPF(9,10) = 0.D+0
        BIPF(10,9) = 0.D+0
!
!---    n-Pentane sequence  ---
!
        BIPF(10,1) = 0.1454D+0
        BIPF(1,10) = 0.1454D+0
        BIPF(10,3) = 0.1140D+0
        BIPF(3,10) = 0.1140D+0
!
!---    Nitrogen sequence  ---
!
        BIPF(3,1) = -0.0044D+0
        BIPF(1,3) = -0.0044D+0
      ENDIF
!
!---  Binary interaction parameters between petroleum components  ---
!
      IF( ISLC(69).EQ.0 ) THEN
        DO 660 IGC = 1,NGC+2
          DO 650 JGC = 1,NGC+2
            IF( JGC.LT.IGC ) THEN
              BIPC(IGC,JGC) = BIPC(JGC,IGC)
            ELSEIF( JGC.EQ.IGC ) THEN
              BIPC(IGC,JGC) = 0.D+0
            ELSE
              IF( IGC.LE.2 ) THEN
                IF( JGC.LE.2 ) THEN
                  BIPC(IGC,JGC) = BIPF(IGC,JGC)
                ELSE
                  IF( NPCF(JGC).EQ.0 ) THEN
                    BIPC(IGC,JGC) = 1.D+0 -
     &                8.D+0*SQRT( GCPP(5,IGC)*GCPP(5,JGC) )/
     &                (((GCPP(5,IGC)**(1.D+0/3.D+0)) +
     &                (GCPP(5,JGC)**(1.D+0/3.D+0)))**3)
                  ELSE
                    DO 600 JX = 1,NPCF(JGC)
                      BIPC(IGC,JGC) = BIPC(IGC,JGC) +
     &                  XMPCF(JX,JGC)*(1.D+0-BIPF(IGC,IPCF(JX,JGC)))
  600               CONTINUE
                    BIPC(IGC,JGC) = 1.D+0 - BIPC(IGC,JGC)
                  ENDIF
                ENDIF
              ELSE
                IF( NPCF(IGC).EQ.0 ) THEN
                  IF( NPCF(JGC).EQ.0 ) THEN
                    BIPC(IGC,JGC) = 1.D+0 -
     &                8.D+0*SQRT( GCPP(5,IGC)*GCPP(5,JGC) )/
     &                (((GCPP(5,IGC)**(1.D+0/3.D+0)) +
     &                (GCPP(5,JGC)**(1.D+0/3.D+0)))**3)
                    IF( BIPC(IGC,JGC).LT.EPSL ) BIPC(IGC,JGC) = 0.D+0
                  ELSE
                    DO 610 JX = 1,NPCF(JGC)
                      BIPFX = 1.D+0 -
     &                  8.D+0*SQRT( GCPP(5,IGC)*PFPP(5,JX) )/
     &                  (((GCPP(5,IGC)**(1.D+0/3.D+0)) +
     &                  (PFPP(5,JX)**(1.D+0/3.D+0)))**3)
                      IF( BIPFX.LT.EPSL ) BIPFX = 0.D+0
                      BIPC(IGC,JGC) = BIPC(IGC,JGC) +
     &                    XMPCF(JX,JGC)*(1.D+0-BIPFX)
  610               CONTINUE
                    BIPC(IGC,JGC) = 1.D+0 - BIPC(IGC,JGC)
                  ENDIF
                ELSE
                  IF( NPCF(JGC).EQ.0 ) THEN
                    DO 620 IX = 1,NPCF(IGC)
                      BIPFX = 1.D+0 -
     &                  8.D+0*SQRT( PFPP(5,IX)*GCPP(5,JGC) )/
     &                  (((PFPP(5,IX)**(1.D+0/3.D+0)) +
     &                  (GCPP(5,JGC)**(1.D+0/3.D+0)))**3)
                      BIPC(IGC,JGC) = BIPC(IGC,JGC) +
     &                    XMPCF(IX,IGC)*(1.D+0-BIPFX)
  620               CONTINUE
                    BIPC(IGC,JGC) = 1.D+0 - BIPC(IGC,JGC)
                  ELSE
                    DO 640 IX = 1,NPCF(IGC)
                      DO 630 JX = 1,NPCF(JGC)
                        BIPC(IGC,JGC) = BIPC(IGC,JGC) +
     &                    XMPCF(IX,IGC)*XMPCF(JX,JGC)*
     &                    (1.D+0-BIPF(IPCF(IX,IGC),IPCF(JX,JGC)))
  630                 CONTINUE
  640               CONTINUE
                    BIPC(IGC,JGC) = 1.D+0 - BIPC(IGC,JGC)
                  ENDIF
                ENDIF
              ENDIF
            ENDIF
  650     CONTINUE
  660   CONTINUE
!        CALL BIP_TRNS
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of RDPCP_EOR group ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE RDSF_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Read input file surface flux information.
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, March 17, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE TRNSPT
      USE SOLTN
      USE REACT
      USE OUTPU
      USE GRID
      USE GLB_PAR
      USE FILES
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      CHARACTER*64 ADUM,BDUM,FDUM,GDUM
      CHARACTER*512 CHDUM,CHDUMX
      LOGICAL FLG_CHK
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//RDSF_EOR'
!
!---  Write card information to ouput file  ---
!
      CARD = 'Surface Flux Card'
      ICD = INDEX( CARD,'  ' )-1
      WRITE(IWR,'(//,3A)') ' ~ ',CARD(1:ICD),': '
!
!---  Read surface flux card information  ---
!
      CALL RDINPL( CHDUM )
      CALL LCASE( CHDUM )
      ISTART = 1
      VARB = 'Number of Surface Flux Inputs'
      CALL RDINT(ISTART,ICOMMA,CHDUM,NSF)
      IF( NSF.GT.LSF ) THEN
        INDX = 5
        CHMSG = 'Number of Surface Flux Domains > Parameter LSF'
        CALL WRMSGS( INDX )
      ENDIF
      NC = 0
      DO 100 NS = 1, NSF
        IF( NS.NE.1 ) WRITE(IWR, '(/)')
        CALL RDINPL( CHDUM )
        CHDUMX = CHDUM
        CALL LCASE( CHDUM )
        ISTART = 1
!
!---  Check for specified surface flux filename  ---
!
        NSFF = 0
        CALL CHKINT(ISTART,ICOMMA,CHDUM,INDX)
        IF( INDX .EQ. 1 ) THEN
          VARB = 'Number of Surface Flux Inputs for the Specified File'
          CALL RDINT(ISTART,ICOMMA,CHDUMX,NSFF)
          IF( NSFF.LT.1 ) THEN
            INDX = 4
            CHMSG = 'Number of Surface Flux Inputs < 1'
            CALL WRMSGS( INDX )
          ENDIF
          VARB = 'Surface Output Filename: '
          CALL RDCHR(ISTART,ICOMMA,NCH,CHDUMX,ADUM)
          NSFGP = NSFGP + 1
          ISFGP(NSFGP) = NSFF
          IF( NSFGP.GT.LSF ) THEN
            INDX = 4
            CHMSG = 'Number of Surface Flux Files > LSF'
            CALL WRMSGS( INDX )
          ENDIF
          NC = 0
          FNSF(NSFGP) = ADUM
          CALL RDINPL( CHDUM )
          CALL LCASE( CHDUM )
          ISTART = 1
        ENDIF
        NC = NC + 1
        IF( (NSFF-NC).GE.0 )THEN
          ISFF(NS) = NSFGP
        ELSE
          ISFF(NS) = 1
          ISFGP(1) = ISFGP(1) + 1
        ENDIF
!
!---  Read surface flux type  ---
!
        VARB = 'Surface Flux Type'
        CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,ADUM)
        WRITE(IWR,'(/,A,$)') VARB(1:IVR),': '
        IF( INDEX(ADUM(1:),'heat flux').NE.0) THEN
          ISFT(NS) = 1
          WRITE(IWR,'(A)') 'Heat Flux Surface'
          UNSF(1,NS) = 'w'
          UNSF(2,NS) = 'j'
        ELSEIF( INDEX(ADUM(1:),'gas').NE.0 ) THEN
          IF( INDEX(ADUM(1:),'volum').NE.0) THEN
            ISFT(NS) = 3
            WRITE(IWR,'(A)') 'Gas Volumetric Flux Surface'
            UNSF(1,NS) = 'm^3/s'
            UNSF(2,NS) = 'm^3'
          ELSEIF( INDEX(ADUM(1:),'component').NE.0 ) THEN
            ISFT(NS) = 62
            CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
            IGCX = 0
            DO 10 IGC = 1,NGC+2
              IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
              IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IGCX = IGC
   10       CONTINUE
            IF( IGCX.EQ.0 ) THEN
              INDX = 4
              CHMSG = 'Unrecognized Petroleum Component Name: '
     &          // BDUM(1:NCHB)
              CALL WRMSGS( INDX )
            ENDIF
            ISFGC(NS) = IGCX
            WRITE(IWR,'(3A)') 'Gas Component ',GCNM(IGC)(1:IDB),
     &        ' Mass Flux Surface'
            UNSF(1,NS) = 'kg/s'
            UNSF(2,NS) = 'kg'
          ELSEIF( INDEX(ADUM(1:),'water').NE.0 .OR.
     &      INDEX(ADUM(1:),'h2o').NE.0 ) THEN
            ISFT(NS) = 44
            WRITE(IWR,'(A)') 'Gas Water Mass Flux Surface'
            UNSF(1,NS) = 'kg/s'
            UNSF(2,NS) = 'kg'
          ELSE
            ISFT(NS) = 6
            WRITE(IWR,'(A)') 'Gas Mass Flux Surface'
            UNSF(1,NS) = 'kg/s'
            UNSF(2,NS) = 'kg'
          ENDIF
        ELSEIF( INDEX(ADUM(1:),'nonaqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'non-aqueous').NE.0 .OR.
     &    INDEX(ADUM(1:),'napl').NE.0 ) THEN
          IF( INDEX(ADUM(1:),'volum').NE.0) THEN
            ISFT(NS) = 4
            WRITE(IWR,'(A)') 'Nonaqueous-Liquid Volumetric Flux Surface'
            UNSF(1,NS) = 'm^3/s'
            UNSF(2,NS) = 'm^3'
          ELSEIF( INDEX(ADUM(1:),'component').NE.0 ) THEN
            ISFT(NS) = 64
            CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
            IGCX = 0
            DO 20 IGC = 1,NGC+2
              IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
              IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IGCX = IGC
   20       CONTINUE
            IF( IGCX.EQ.0 ) THEN
              INDX = 4
              CHMSG = 'Unrecognized Petroleum Component Name: '
     &          // BDUM(1:NCHB)
              CALL WRMSGS( INDX )
            ENDIF
            ISFGC(NS) = IGCX
            WRITE(IWR,'(3A)') 'Nonaqueous-Liquid ',GCNM(IGC)(1:IDB),
     &        ' Mass Flux Surface'
            UNSF(1,NS) = 'kg/s'
            UNSF(2,NS) = 'kg'
          ELSE
            ISFT(NS) = 7
            WRITE(IWR,'(A)') 'Nonaqueous-Liquid Mass Flux Surface'
            UNSF(1,NS) = 'kg/s'
            UNSF(2,NS) = 'kg'
          ENDIF
        ELSEIF( INDEX(ADUM(1:),'aqueous').NE.0) THEN
          IF( INDEX(ADUM(1:),'volum').NE.0) THEN
            ISFT(NS) = 2
            WRITE(IWR,'(A)') 'Aqueous Volumetric Flux Surface'
            UNSF(1,NS) = 'm^3/s'
            UNSF(2,NS) = 'm^3'
          ELSEIF( INDEX(ADUM(1:),'component').NE.0 ) THEN
            ISFT(NS) = 63
            CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
            IGCX = 0
            DO 30 IGC = 1,NGC+2
              IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
              IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IGCX = IGC
   30       CONTINUE
            IF( IGCX.NE.1 ) THEN
              INDX = 4
              CHMSG = 'Petroleum Component Name not CO2: '
     &          // BDUM(1:NCHB)
              CALL WRMSGS( INDX )
            ENDIF
            ISFGC(NS) = IGCX
            WRITE(IWR,'(3A)') 'Aqueous ',GCNM(IGC)(1:IDB),
     &        ' Mass Flux Surface'
            UNSF(1,NS) = 'kg/s'
            UNSF(2,NS) = 'kg'
          ELSEIF( INDEX(ADUM(1:),'water').NE.0 .OR.
     &      INDEX(ADUM(1:),'h2o').NE.0 ) THEN
            ISFT(NS) = 43
            WRITE(IWR,'(A)') 'Aqueous Water Mass Flux Surface'
            UNSF(1,NS) = 'kg/s'
            UNSF(2,NS) = 'kg'
          ELSE
            ISFT(NS) = 5
            WRITE(IWR,'(A)') 'Aqueous Mass Flux Surface'
            UNSF(1,NS) = 'kg/s'
            UNSF(2,NS) = 'kg'
          ENDIF
        ELSEIF( INDEX(ADUM(1:),'total').NE.0 .AND.
     &    INDEX(ADUM(1:),'component').NE.0 ) THEN
          ISFT(NS) = 65
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          IGCX = 0
          DO 40 IGC = 1,NGC+2
            IDB = INDEX(GCNM(IGC)(1:),'  ') - 1
            IF( BDUM(1:NCHB).EQ.GCNM(IGC)(1:IDB) ) IGCX = IGC
   40     CONTINUE
          IF( IGCX.EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Unrecognized Petroleum Component Name: '
     &        // BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
          ISFGC(NS) = IGCX
          WRITE(IWR,'(3A)') 'Total ',GCNM(IGC)(1:IDB),
     &      ' Mass Flux Surface'
          UNSF(1,NS) = 'kg/s'
          UNSF(2,NS) = 'kg'
         ELSEIF( INDEX(ADUM(1:),'salt').NE.0) THEN
          ISFT(NS) = 8
          WRITE(IWR,'(A)') 'Salt-Mass Flux Surface'
          UNSF(1,NS) = 'kg/s'
          UNSF(2,NS) = 'kg'
        ELSEIF( INDEX(ADUM(1:),'carbon').NE.0 .OR.
     &    INDEX(ADUM(1:),'co2').NE.0 ) THEN
          ISFT(NS) = 30
          WRITE(IWR,'(A)') 'CO2-Mass Flux Surface'
          UNSF(1,NS) = 'kg/s'
          UNSF(2,NS) = 'kg'
        ELSEIF( INDEX(ADUM(1:),'water').NE.0 .OR.
     &    INDEX(ADUM(1:),'h2o').NE.0 ) THEN
          ISFT(NS) = 45
          WRITE(IWR,'(A)') 'Water-Mass Flux Surface'
          UNSF(1,NS) = 'kg/s'
          UNSF(2,NS) = 'kg'
        ELSEIF( INDEX(ADUM(1:),'solute').NE.0 ) THEN
          VARB = 'Solute Name: '
          CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,BDUM)
          DO 50 NSL = 1,NSOLU
            IDB = INDEX(SOLUT(NSL)(1:),'  ')
            IF( INDEX(BDUM(1:),SOLUT(NSL)(1:IDB)).NE.0 ) THEN
              ISFT(NS) = NSL+100
              WRITE(IWR,'(2X,2A)') SOLUT(NSL),' Flux Surface'
              UNSF(1,NS) = 'sol/s'
              UNSF(2,NS) = 'sol'
              GOTO 52
            ENDIF
   50     CONTINUE
            INDX = 4
            CHMSG = 'Unrecognized Solute Name: '//BDUM
            CALL WRMSGS( INDX )
   52     CONTINUE
#ifdef ecke
!
!---    Conservation-component species surface flux input  ---
!
        ELSEIF( INDEX(ADUM(1:),'conservation').NE.0 .AND.
     &    INDEX(ADUM(1:),'component').NE.0 ) THEN
          VARB = 'Conservation-Component Species Name: '
          CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,BDUM)
          DO 140NSL = NSOLU+1,NSOLU+NEQC
            IDB = INDEX(SOLUT(NSL)(1:),'  ')
            IF( BDUM(1:IDB).EQ.SOLUT(NSL)(1:IDB) ) THEN
              ISFT(NS) = NSL+100
              WRITE(IWR,'(2X,2A)') SOLUT(NSL),' Flux Surface'
              UNSF(1,NS) = 'mol/s'
              UNSF(2,NS) = 'mol'
              GOTO 160
            ENDIF
  140     CONTINUE
            INDX = 4
            CHMSG = 'Unrecognized Conservation-Component ' //
     &       'Species Name: '//BDUM
            CALL WRMSGS( INDX )
  160     CONTINUE
!
!---    Kinetic-component species surface flux input  ---
!
        ELSEIF( INDEX(ADUM(1:),'kinetic').NE.0 .AND.
     &    INDEX(ADUM(1:),'component').NE.0 ) THEN
          VARB = 'Kinetic-Component Species Name: '
          CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,BDUM)
          DO 180 NSL = NSOLU+NEQC+1,NSOLU+NEQC+NEQK
            IDB = INDEX(SOLUT(NSL)(1:),'  ')
            IF( BDUM(1:IDB).EQ.SOLUT(NSL)(1:IDB) ) THEN
              ISFT(NS) = NSL+100
              WRITE(IWR,'(2X,2A)') SOLUT(NSL),' Flux Surface'
              UNSF(1,NS) = 'mol/s'
              UNSF(2,NS) = 'mol'
              GOTO 200
            ENDIF
  180     CONTINUE
            INDX = 4
            CHMSG = 'Unrecognized Kinetic-Component ' //
     &       'Species Name: '//BDUM
            CALL WRMSGS( INDX )
  200     CONTINUE
#endif
        ELSE
          INDX = 4
          CHMSG = 'Unrecognized Surface Flux Type: '//ADUM
          CALL WRMSGS( INDX )
        ENDIF
!
!---  Read surface flux variable units  ---
!
        IDFLT = 1
        VARB = 'Surface Flux Rate Variable Unit'
        CALL RDCHR(ISTART,ICOMMA,NCU,CHDUM,UNSF(1,NS))
        CALL RDSFUN( ISFT(NS) )
        VAR = 0.D+0
        INDX = 0
        CALL RDUNIT(UNSF(1,NS),VAR,INDX)
        IDFLT = 1
        VARB = 'Surface Flux Integral Variable Unit'
        CALL RDCHR(ISTART,ICOMMA,NCU,CHDUM,UNSF(2,NS))
        INDX = -ISFT(NS)
        CALL RDSFUN( INDX )
        VAR = 0.D+0
        INDX = 0
        CALL RDUNIT(UNSF(2,NS),VAR,INDX)
!
!---  Read surface flux orientation  ---
!
        VARB = 'Surface Flux Orientation'
        CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,ADUM)
        WRITE(IWR,'(2A,$)') VARB(1:IVR),': '
        ISFSN(NS) = 0
        IF( INDEX(ADUM(1:),'surface normal').NE.0 )  ISFSN(NS) = 1
        IF( INDEX(ADUM(1:),'west').NE.0) THEN
          ISFD(NS) = -1
          WRITE(IWR,'(A)') 'X-Direction: West Surface'
        ELSEIF( INDEX(ADUM(1:),'east').NE.0) THEN
          ISFD(NS) = 1
          WRITE(IWR,'(A)') 'X-Direction: East Surface'
        ELSEIF( INDEX(ADUM(1:),'south').NE.0) THEN
          ISFD(NS) = -2
          WRITE(IWR,'(A)') 'Y-Direction: South Surface'
        ELSEIF( INDEX(ADUM(1:),'north').NE.0) THEN
          ISFD(NS) = 2
          WRITE(IWR,'(A)') 'Y-Direction: North Surface'
        ELSEIF( INDEX(ADUM(1:),'bottom').NE.0) THEN
          ISFD(NS) = -3
          WRITE(IWR,'(A)') 'Z-Direction: Bottom Surface'
        ELSEIF( INDEX(ADUM(1:),'top').NE.0) THEN
          ISFD(NS) = 3
          WRITE(IWR,'(A)') 'Z-Direction: Top Surface'
        ELSEIF( INDEX(ADUM(1:),'file').NE.0 ) THEN
          CALL RDCHR(ISTART,ICOMMA,NCHF,CHDUM,FDUM)
          NCHF = INDEX(FDUM,'  ')-1
          INQUIRE( FILE=FDUM(1:NCHF), FORM=GDUM, EXIST=FLG_CHK )
          IF( .NOT.FLG_CHK ) THEN
            INDX = 4
            CHMSG = 'Surface-Flux-Domain File: '
     &        // FDUM(1:NCHF)
            CALL WRMSGS( INDX )
          ELSEIF( GDUM.EQ.'UNFORMATTED' ) THEN
            INDX = 4
            CHMSG = 'Unformatted Surface-Flux-Domain File: '
     &        // FDUM(1:NCHF)
            CALL WRMSGS( INDX )
          ENDIF
          OPEN(UNIT=26,FILE=FDUM(1:NCHF),STATUS='OLD',FORM='FORMATTED')
          WRITE(IWR,'(/,2A)') 'Surface-Flux-Domain File: ',
     &      FDUM(1:NCHF)
          ISFD(NS) = 4
          ISFC(1,NS) = 1
          ISFC(2,NS) = 1
          ISFC(3,NS) = 1
          ISFC(4,NS) = 1
          ISFC(5,NS) = 1
          ISFC(6,NS) = 1
          NC = 0
   60     CONTINUE
          READ(26,*,END=70) IX,JX,KX,ISFDX
          NC = NC + 1
          IF( NC.GT.LSFDOM ) THEN
            INDX = 5
            CHMSG = 'Number of Surface-Flux-Domain Surfaces ' //
     &        '> Parameter LSFDOM'
            CALL WRMSGS( INDX )
          ENDIF
          ISFDOM(1,NC,NS) = IX
          ISFDOM(2,NC,NS) = JX
          ISFDOM(3,NC,NS) = KX
          ISFDOM(4,NC,NS) = ISFDX
          GOTO 60
   70     CONTINUE
          NSFDOM(NS) = NC
          CLOSE(26)
        ENDIF
!
!---    Check surface flux domain  ---
!
        IF( INDEX(ADUM(1:),'file').NE.0 ) THEN
          DO 80 NC = 1,NSFDOM(NS)
            IX = ISFDOM(1,NC,NS)
            JX = ISFDOM(2,NC,NS)
            KX = ISFDOM(3,NC,NS)
            ISFDX = ISFDOM(4,NC,NS)
            IF( IX.LT.1 .OR. IX.GT.IFLD ) THEN
              INDX = 4
              CHMSG = 'Illegal Surface Flux Domain: I Index'
              CALL WRMSGS( INDX )
            ENDIF
            IF( JX.LT.1 .OR. JX.GT.JFLD ) THEN
              INDX = 4
              CHMSG = 'Illegal Surface Flux Domain: J Index'
              CALL WRMSGS( INDX )
            ENDIF
            IF( KX.LT.1 .OR. KX.GT.KFLD ) THEN
              INDX = 4
              CHMSG = 'Illegal Surface Flux Domain: K Index'
              CALL WRMSGS( INDX )
            ENDIF
   80     CONTINUE  

        ELSE
!
!---  Read and check surface flux domain  ---
!
          VARB = 'Surface Flux Domain: '
          CALL RDINT(ISTART,ICOMMA,CHDUM,ISFC(1,NS))
          CALL RDINT(ISTART,ICOMMA,CHDUM,ISFC(2,NS))
          CALL RDINT(ISTART,ICOMMA,CHDUM,ISFC(3,NS))
          CALL RDINT(ISTART,ICOMMA,CHDUM,ISFC(4,NS))
          CALL RDINT(ISTART,ICOMMA,CHDUM,ISFC(5,NS))
          CALL RDINT(ISTART,ICOMMA,CHDUM,ISFC(6,NS))
          IF( ISFC(1,NS).LT.1 .OR. ISFC(1,NS).GT.IFLD .OR.
     &      ISFC(2,NS).LT.1 .OR. ISFC(2,NS).GT.IFLD .OR.
     &      ISFC(1,NS).GT.ISFC(2,NS) ) THEN
            INDX = 4
            CHMSG = 'Illegal Surface Flux Domain: I Indices'
            CALL WRMSGS( INDX )
          ENDIF
          IF( ISFC(3,NS).LT.1 .OR. ISFC(3,NS).GT.JFLD .OR.
     &      ISFC(4,NS).LT.1 .OR. ISFC(4,NS).GT.JFLD .OR.
     &      ISFC(3,NS).GT.ISFC(4,NS) ) THEN
            INDX = 4
            CHMSG = 'Illegal Surface Flux Domain: J Indices'
            CALL WRMSGS( INDX )
          ENDIF
          IF( ISFC(5,NS).LT.1 .OR. ISFC(5,NS).GT.KFLD .OR.
     &      ISFC(6,NS).LT.1 .OR. ISFC(6,NS).GT.KFLD .OR.
     &      ISFC(5,NS).GT.ISFC(6,NS) ) THEN
            INDX = 4
            CHMSG = 'Illegal Surface Flux Domain: K Indices'
            CALL WRMSGS( INDX )
          ENDIF
          ISFC(1,NS) = MAX( 1,ISFC(1,NS) )
          ISFC(1,NS) = MIN( IFLD,ISFC(1,NS),ISFC(2,NS) )
          ISFC(2,NS) = MAX( 1,ISFC(1,NS),ISFC(2,NS) )
          ISFC(2,NS) = MIN( IFLD,ISFC(2,NS) )
          ISFC(3,NS) = MAX( 1,ISFC(3,NS) )
          ISFC(3,NS) = MIN( JFLD,ISFC(3,NS),ISFC(4,NS) )
          ISFC(4,NS) = MAX( 1,ISFC(3,NS),ISFC(4,NS) )
          ISFC(4,NS) = MIN( JFLD,ISFC(4,NS) )
          ISFC(5,NS) = MAX( 1,ISFC(5,NS) )
          ISFC(5,NS) = MIN( KFLD,ISFC(5,NS),ISFC(6,NS) )
          ISFC(6,NS) = MAX( 1,ISFC(5,NS),ISFC(6,NS) )
          ISFC(6,NS) = MIN( KFLD,ISFC(6,NS) )
          WRITE(IWR,'(/,A)') VARB(1:IVR)
          WRITE(IWR, '(2X,2(A,I6))') 'I = ',ISFC(1,NS),' to ',ISFC(2,NS)
          WRITE(IWR, '(2X,2(A,I6))') 'J = ',ISFC(3,NS),' to ',ISFC(4,NS)
          WRITE(IWR, '(2X,2(A,I6))') 'K = ',ISFC(5,NS),' to ',ISFC(6,NS)
        ENDIF
  100 CONTINUE
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of RDSF_EOR group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE RDSP_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Read input file for rock/soil saturation function information.
!
!     SCHR(1,IZN) van Genuchten alpha, 1/m
!     SCHR(2,IZN) Brooks and Corey psi, m
!     SCHR(3,IZN) van Genuchten n
!     SCHR(3,IZN) Brooks and Corey lambda
!     SCHR(4,IZN) aqueous residual saturation
!     SCHR(5,IZN) nonaqueous-liquid residual saturation
!     SCHR(6,IZN) contact angle, rad
!     SCHR(7,IZN) Webb aqueous matching point saturation
!     SCHR(8,IZN) Webb aqueous matching point head, m
!     SCHR(9,IZN) Webb nonaqueous-liquid matching point saturation
!     SCHR(10,IZN) Webb nonaqueous-liquid matching point head, m
!     SCHR(11,IZN) Webb total-liquid matching point saturation
!     SCHR(12,IZN) Webb total-liquid matching point head, m
!     SCHR(13,IZN) mixed-wet b 
!     SCHR(14,IZN) van Genuchten m
!     SCHR(15,IZN) 
!     SCHR(16,IZN) 
!     SCHR(17,IZN) 
!     SCHR(18,IZN) 
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, March 17, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PORMED
      USE GRID
      USE GLB_PAR
      USE FILES
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      CHARACTER*64 ADUM,RDUM,UNTS
      CHARACTER*512 CHDUM
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//RDSP_EOR'
!
!---  Write card information to ouput file  ---
!
      CARD = 'Rock/Soil Saturation Function Card'
      ICD = INDEX( CARD,'  ' )-1
      WRITE(IWR,'(//,3A)') ' ~ ',CARD(1:ICD),': '
!
!---  Loop over the rock/soil saturation information lines  ---
!
      N = 0
   20 CONTINUE
      IJK = 0
      IF( N.GE.NROCK ) GOTO 500
      ISTART = 1
      VARB = 'Saturation Function: Rock Name: '
      CALL RDINPL( CHDUM )
      CALL LCASE( CHDUM )
      CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,RDUM)
!
!---  IJK, KIJ, or JKI indexing  ---
!
      IF( INDEX(RDUM(1:),'indexing').NE.0 ) THEN
        IF( INDEX(ROCK(1)(1:),'indexing').EQ.0 ) THEN
          INDX = 4
          CHMSG = 'Indexing Option Not Declared ' //
     &      'in Rock/Soil Zonation Card'
          CALL WRMSGS( INDX )
        ENDIF
        IF( INDEX(RDUM,'ijk').NE.0 ) THEN
          IJK = 1
        ELSEIF( INDEX(RDUM,'jki').NE.0 ) THEN
          IJK = 2
        ELSEIF( INDEX(RDUM,'kij').NE.0 ) THEN
          IJK = 3
        ELSE
          INDX = 4
          CHMSG = 'Unrecognized Indexing Option' // RDUM(1:NCH)
          CALL WRMSGS( INDX )
        ENDIF
        GOTO 220
      ENDIF
!
!---  Search known rock types for a matching type ---
!
      DO 100 M = 1, NROCK
        IF( RDUM.EQ.ROCK(M)) THEN
          IROCK = M
          GOTO 200
        ENDIF
  100 CONTINUE
!
!---  Search known scaling groups for a matching type ---
!
      IF( ISLC(19).EQ.1 ) THEN
        DO 110 M = 1,NSCALE
           IF( RDUM.EQ.SCALNM(M) ) THEN
              ISGRP = M
              IROCK = 1
              GOTO 200
           ENDIF
  110   CONTINUE
        INDX = 2
        CHMSG = 'Unrecognized Rock/Soil Type or Scaling Group: '
     &    // RDUM(1:NCH)
        CALL WRMSGS( INDX )
        GOTO 20
      ENDIF
      INDX = 2
      CHMSG = 'Unrecognized Rock/Soil Type: ' // RDUM(1:NCH)
      CALL WRMSGS( INDX )
      GOTO 20
  200 CONTINUE
!
!---  Loop over rock/soils within scaling group  ---
!
      IF( ISLC(19).EQ.1 .AND. ISGRP.NE.0 ) THEN
        DO 202 M = IROCK,NROCK
          IF( ISCALE(M).EQ.ISGRP ) THEN
            IROCK = M
            GOTO 204
          ENDIF
  202   CONTINUE
      ENDIF
  204 CONTINUE
!
!---  Write rock/soil name  ---
!
      WRITE (IWR,'(/,2A)') 'Rock/Soil Name: ',ROCK(IROCK)
      N = N + 1
  220 CONTINUE
!
!---  Read saturation/capillary pressure function  ---
!
      VARB = 'Saturation Function Type: '
      CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,ADUM)
      ISMX = 0
      IF( INDEX(ADUM(1:),'webb').NE.0 ) ISMX = 2
      IF( INDEX(ADUM(1:),'van genuchten').NE.0 ) THEN
        ISCHRX = 1
      ELSEIF( INDEX(ADUM(1:),'brooks').NE.0 .AND.
     &  INDEX(ADUM(1:),'corey').NE.0 ) THEN
        ISCHRX = 2
      ELSEIF( INDEX(ADUM(1:),'zero').NE.0 .AND.
     &  INDEX(ADUM(1:),'capillary').NE.0 ) THEN
        ISCHRX = 3
        ISMX = 0
      ELSE
        INDX = 4
        CHMSG = 'Unrecognized Saturation Function: '//ADUM
        CALL WRMSGS( INDX )
      ENDIF
      IF( IJK.GT.0 ) THEN
        DO 230 NC = 1,NFLD
          ISCHR(IZ(NC)) = ISCHRX
          ISM(IZ(NC)) = ISMX
  230   CONTINUE
      ELSE
        ISCHR(IROCK) = ISCHRX
        ISM(IROCK) = ISMX
      ENDIF
!
!---  van Genuchten Function  ---
!
      IF( ISCHRX.EQ.1 ) THEN
        WRITE(IWR,'(A)') 'van Genuchten Function'
        VARB = 'van Genuchten (alpha)'
        IF( IJK.GT.0 ) THEN
          INDX = 1
          LNDX = LSCHR
          UNTS = '1/m'
          IUNM = -1
          CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,SCHR,INDX,LNDX )
        ELSE
          CALL RDDPR(ISTART,ICOMMA,CHDUM,SCHR(1,IROCK))
          CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
          WRITE(IWR,'(2X,4A,1PE11.4,$)') VARB(1:IVR),', ',UNTS(1:NCH),
     &      ': ',SCHR(1,IROCK)
          INDX = 0
          IUNM = -1
          CALL RDUNIT(UNTS,SCHR(1,IROCK),INDX)
          WRITE(IWR,'(A,1PE11.4,A)') ' (',SCHR(1,IROCK),', 1/m)'
        ENDIF
        VARB = 'van Genuchten (n): '
        IF( IJK.GT.0 ) THEN
          INDX = 3
          LNDX = LSCHR
          UNTS = 'null'
          CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,SCHR,INDX,LNDX )
        ELSE
          CALL RDDPR(ISTART,ICOMMA,CHDUM,SCHR(3,IROCK))
          WRITE(IWR,'(2X,A,1PE11.4)') VARB(1:IVR),SCHR(3,IROCK)
        ENDIF
        VARB = 'van Genuchten (m)'
        IF( IJK.GT.0 ) THEN
          INDX = 14
          LNDX = LSCHR
          UNTS = 'null'
          CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,SCHR,INDX,LNDX )
        ELSE
          CALL RDDPR(ISTART,ICOMMA,CHDUM,SCHR(14,IROCK))
          WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',SCHR(14,IROCK)
        ENDIF
        VARB = 'van Genuchten (aqueous residual saturation): '
        IF( IJK.GT.0 ) THEN
          INDX = 4
          LNDX = LSCHR
          UNTS = 'null'
          CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,SCHR,INDX,LNDX )
        ELSE
          CALL RDDPR(ISTART,ICOMMA,CHDUM,SCHR(4,IROCK))
          WRITE(IWR,'(2X,A,1PE11.4)') VARB(1:IVR),SCHR(4,IROCK)
        ENDIF
        VARB = 'van Genuchten (nonaqueous residual saturation): '
        IF( IJK.GT.0 ) THEN
          INDX = 5
          LNDX = LSCHR
          UNTS = 'null'
          CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,SCHR,INDX,LNDX )
        ELSE
          CALL RDDPR(ISTART,ICOMMA,CHDUM,SCHR(5,IROCK))
          WRITE(IWR,'(2X,A,1PE11.4)') VARB(1:IVR),SCHR(5,IROCK)
        ENDIF
        VARB = 'van Genuchten (contact angle): '
        IF( IJK.GT.0 ) THEN
          INDX = 6
          LNDX = LSCHR
          UNTS = 'rad'
          CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,SCHR,INDX,LNDX )
        ELSE
          CALL RDDPR(ISTART,ICOMMA,CHDUM,SCHR(6,IROCK))
          CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
          WRITE(IWR,'(2X,4A,1PE11.4,$)') VARB(1:IVR),', ',UNTS(1:NCH),
     &      ': ',SCHR(6,IROCK)
          INDX = 0
          CALL RDUNIT(UNTS,SCHR(6,IROCK),INDX)
          WRITE(IWR,'(A,1PE11.4,A)') ' (',SCHR(6,IROCK),', rad)'
        ENDIF
        VARB = 'Mixed-wet (b)'
        IF( IJK.GT.0 ) THEN
          INDX = 13
          LNDX = LSCHR
          UNTS = 'null'
          CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,SCHR,INDX,LNDX )
        ELSE
          CALL RDDPR(ISTART,ICOMMA,CHDUM,SCHR(13,IROCK))
          WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',SCHR(13,IROCK)
        ENDIF
!
!---  Brooks and Corey Function  ---
!
      ELSEIF( ISCHRX.EQ.2 ) THEN
        WRITE(IWR,'(A)') 'Brooks and Corey Function'
        VARB = 'Brooks and Corey (psi): '
        IF( IJK.GT.0 ) THEN
          INDX = 2
          LNDX = LSCHR
          UNTS = 'm'
          IUNM = 1
          CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,SCHR,INDX,LNDX )
        ELSE
          CALL RDDPR(ISTART,ICOMMA,CHDUM,SCHR(2,IROCK))
          CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
          WRITE(IWR,'(2X,4A,1PE11.4,$)') VARB(1:IVR),', ',UNTS(1:NCH),
     &      ': ',SCHR(2,IROCK)
          INDX = 0
          IUNM = 1
          CALL RDUNIT(UNTS,SCHR(2,IROCK),INDX)
          WRITE(IWR,'(A,1PE11.4,A)') ' (',SCHR(2,IROCK),', m)'
        ENDIF
        VARB = 'Brooks and Corey (lambda): '
        IF( IJK.GT.0 ) THEN
          INDX = 3
          LNDX = LSCHR
          UNTS = 'null'
          CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,SCHR,INDX,LNDX )
        ELSE
          CALL RDDPR(ISTART,ICOMMA,CHDUM,SCHR(3,IROCK))
          WRITE(IWR,'(2X,A,1PE11.4)') VARB(1:IVR),SCHR(3,IROCK)
        ENDIF
        VARB = 'Brooks and Corey (aqueous residual saturation): '
        IF( IJK.GT.0 ) THEN
          INDX = 4
          LNDX = LSCHR
          UNTS = 'null'
          CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,SCHR,INDX,LNDX )
        ELSE
          CALL RDDPR(ISTART,ICOMMA,CHDUM,SCHR(4,IROCK))
          WRITE(IWR,'(2X,A,1PE11.4)') VARB(1:IVR),SCHR(4,IROCK)
        ENDIF
        VARB = 'Brooks and Corey (nonaqueous residual saturation): '
        IF( IJK.GT.0 ) THEN
          INDX = 5
          LNDX = LSCHR
          UNTS = 'null'
          CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,SCHR,INDX,LNDX )
        ELSE
          CALL RDDPR(ISTART,ICOMMA,CHDUM,SCHR(5,IROCK))
          WRITE(IWR,'(2X,A,1PE11.4)') VARB(1:IVR),SCHR(5,IROCK)
        ENDIF
        VARB = 'Brooks and Corey (contact angle): '
        IF( IJK.GT.0 ) THEN
          INDX = 6
          LNDX = LSCHR
          UNTS = 'rad'
          CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,SCHR,INDX,LNDX )
        ELSE
          CALL RDDPR(ISTART,ICOMMA,CHDUM,SCHR(6,IROCK))
          CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
          WRITE(IWR,'(2X,4A,1PE11.4,$)') VARB(1:IVR),', ',UNTS(1:NCH),
     &      ': ',SCHR(6,IROCK)
          INDX = 0
          CALL RDUNIT(UNTS,SCHR(6,IROCK),INDX)
          WRITE(IWR,'(A,1PE11.4,A)') ' (',SCHR(6,IROCK),', rad)'
        ENDIF
        VARB = 'Mixed-wet (b)'
        IF( IJK.GT.0 ) THEN
          INDX = 13
          LNDX = LSCHR
          UNTS = 'null'
          CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,SCHR,INDX,LNDX )
        ELSE
          CALL RDDPR(ISTART,ICOMMA,CHDUM,SCHR(13,IROCK))
          WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',SCHR(13,IROCK)
        ENDIF
!
!---  Zero Capillary Pressure Function  ---
!
      ELSEIF( ISCHRX.EQ.3 ) THEN
        WRITE(IWR,'(A)') 'Zero Capillary Pressure Function'
      ENDIF
!
!---  Loop over remaining rock/soils within scaling group  ---
!
      IF( ISLC(19).EQ.1 .AND. IROCK.LT.NROCK ) THEN
        DO 490 M = IROCK+1,NROCK
          IF( ISCALE(M).EQ.ISGRP ) THEN
            N = N+1
            ISM(M) = ISM(IROCK)
            ISCHR(M) = ISCHR(IROCK)
            DO 480 L = 1,LSCHR
              SCHR(L,M) = SCHR(L,IROCK)
  480       CONTINUE
            DO 482 L = 1,2
              ISLTBL(L,M) = ISLTBL(L,IROCK)
  482       CONTINUE
          ENDIF
  490   CONTINUE
      ENDIF
!
!---  Read next rock/soil type or scaling group  ---
!
      IF( IJK.GT.0 ) N = N + NFLD
      IF( N.LT.NROCK ) WRITE(IWR,'(/)')
      GOTO 20
 500  CONTINUE
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of RDSP_EOR group ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE RDSR_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Read input file for source information.
!
!     Source types
!
!     1 - Power, W
!     2 - Power density, W/m^3
!     122 - Fluid mass, kg/s, state #1, salt rel. sat., CO2 rel. sat.
!     123 - Fluid mass, kg/s, state #1, salt rel. sat., CO2 mass frac.
!     132 - Fluid mass, kg/s, state #1, salt mass frac., CO2 rel. sat.
!     133 - Fluid mass, kg/s, state #1, salt mass frac., CO2 mass frac.
!     220 - Fluid mass, kg/s, state #2, salt rel. sat.
!     230 - Fluid mass, kg/s, state #2, salt mass frac.
!     300 - Fluid mass, kg/s, state #3
!     422 - Fluid vol., m^3/s, state #1, salt rel. sat., CO2 rel. sat.
!     423 - Fluid vol., m^3/s, state #1, salt rel. sat., CO2 mass frac.
!     432 - Fluid vol., m^3/s, state #1, salt mass frac., CO2 rel. sat.
!     433 - Fluid vol., m^3/s, state #1, salt mass frac., CO2 mass frac.
!     520 - Fluid vol., m^3/s, state #2, salt rel. sat.
!     530 - Fluid vol., m^3/s, state #2, salt mass frac.
!     600 - Fluid vol., m^3/s, state #3
!
!     Source variables
!
!     SRC(1,NTM,NSR) - time, s
!     SRC(2,NTM,NSR) - power, W
!     SRC(2,NTM,NSR) - power density, W/m^3
!     SRC(2,NTM,NSR) - fluid mass rate, kg/s
!     SRC(2,NTM,NSR) - fluid volumetric rate, m^3/s
!     SRC(3,NTM,NSR) - fluid temperature, C
!     SRC(4,NTM,NSR) - aqueous CO2 relative saturation
!     SRC(4,NTM,NSR) - aqueous CO2 mass fraction
!     SRC(4,NTM,NSR) - aqueous saturation
!     SRC(4,NTM,NSR) - solute rate, 1/s
!     SRC(4,NTM,NSR) - solute density rate, 1/s m^3
!     SRC(5,NTM,NSR) - aqueous salt relative saturation
!     SRC(5,NTM,NSR) - aqueous salt mass fraction
!     SRC(6,NTM,NSR) - CO2 nonaqueous mole fraction
!     SRC(7,NTM,NSR) - CH4 nonaqueous mole fraction
!     SRC(7+I,NTM,NSR) - petroleum component I nonaqueous mole fraction
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, August 29, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE TRNSPT
      USE SOURC
      USE SOLTN
      USE GRID
      USE GLB_PAR
      USE FILES
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      CHARACTER*64 ADUM,BDUM(3),UNTS
      CHARACTER*512 CHDUM
      REAL*8 VAR(LSTM,8+LNGC+LSOLU)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//RDSR_EOR'
      I1X = 0
      I2X = 0
      J1X = 0
      J2X = 0
      K1X = 0
      K2X = 0
!
!---  Write card information to ouput file  ---
!
      CARD = 'Source Card'
      ICD = INDEX( CARD,'  ' )-1
      WRITE(IWR,'(//,3A)') ' ~ ',CARD(1:ICD),': '
      NSR = 0
      CALL RDINPL( CHDUM )
      CALL LCASE( CHDUM )
      ISTART = 1
      VARB = 'Number of Sources'
      CALL RDINT(ISTART,ICOMMA,CHDUM,NLIN)
      DO 300 NS = 1, NLIN
        CALL RDINPL( CHDUM )
        CALL LCASE( CHDUM )
        ISTART = 1
!
!---  Read source type  ---
!
        VARB = 'Source Type'
        CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,ADUM)
        WRITE(IWR,'(/,2A,$)') VARB(1:IVR),': '
        IF( INDEX(ADUM(1:),'power density').NE.0 ) THEN
          WRITE(IWR,'(2X,A)') 'Power Density Source'
          ISRTX = 2
        ELSEIF( INDEX(ADUM(1:),'power').NE.0 ) THEN
          WRITE(IWR,'(2X,A)') 'Power Source'
          ISRTX = 1
        ELSEIF( INDEX(ADUM(1:),'fluid').NE.0 .AND.
     &    INDEX(ADUM(1:),'mass').NE.0 ) THEN
          WRITE(IWR,'(2X,A)') 'Fluid Mass Source'
          VARB = 'Source State'
          CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,BDUM(1))
          IF( INDEX(BDUM(1)(1:),'sr1').NE.0 ) THEN
            ISRTX = 100
            WRITE(IWR,'(2X,A)') 'Source State: #1'
!
!---        Read aqueous CO2 option  ---
!
            VARB = 'Aqueous CO2 Option'
            CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,BDUM(2))
            IF( INDEX(BDUM(2)(1:),'co2').NE.0 .AND.
     &        INDEX(BDUM(2)(1:),'rel').NE.0 .AND.
     &        INDEX(BDUM(2)(1:),'sat').NE.0 ) THEN
              ISRTX = ISRTX + 2
              WRITE(IWR,'(2X,2A)') 'Aqueous CO2: Relative Saturation'
            ELSEIF( INDEX(BDUM(2)(1:),'co2').NE.0 .AND.
     &        INDEX(BDUM(2)(1:),'mass').NE.0 .AND.
     &        INDEX(BDUM(2)(1:),'frac').NE.0 ) THEN
              ISRTX = ISRTX + 3
              WRITE(IWR,'(2X,2A)') 'Aqueous CO2: Mass Fraction'
            ELSE
              INDX = 4
              CHMSG = 'Unrecognized Aqueous CO2 Option: '
     &          // BDUM(2)
              CALL WRMSGS( INDX )
            ENDIF
!
!---        Read aqueous salt option  ---
!
            VARB = 'Aqueous Salt Option'
            CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,BDUM(3))
            IF( INDEX(BDUM(3)(1:),'salt').NE.0 .AND.
     &        INDEX(BDUM(3)(1:),'rel').NE.0 .AND.
     &        INDEX(BDUM(3)(1:),'sat').NE.0 ) THEN
              ISRTX = ISRTX + 20
              WRITE(IWR,'(2X,2A)') 'Aqueous Salt: Relative Saturation'
            ELSEIF( INDEX(BDUM(3)(1:),'salt').NE.0 .AND.
     &        INDEX(BDUM(3)(1:),'mass').NE.0 .AND.
     &        INDEX(BDUM(3)(1:),'frac').NE.0 ) THEN
              ISRTX = ISRTX + 30
              WRITE(IWR,'(2X,2A)') 'Aqueous Salt: Mass Fraction'
            ELSE
              INDX = 4
              CHMSG = 'Unrecognized Aqueous Salt Option: '
     &          // BDUM(3)
              CALL WRMSGS( INDX )
            ENDIF
          ELSEIF( INDEX(BDUM(1)(1:),'sr2').NE.0 ) THEN
            ISRTX = 200
            WRITE(IWR,'(2X,2A)') 'Source State: #2'
!
!---        Read aqueous salt option  ---
!
            VARB = 'Aqueous Salt Option'
            CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,BDUM(3))
            IF( INDEX(BDUM(3)(1:),'salt').NE.0 .AND.
     &        INDEX(BDUM(3)(1:),'rel').NE.0 .AND.
     &        INDEX(BDUM(3)(1:),'sat').NE.0 ) THEN
              ISRTX = ISRTX + 20
              WRITE(IWR,'(2X,2A)') 'Aqueous Salt: Relative Saturation'
            ELSEIF( INDEX(BDUM(3)(1:),'salt').NE.0 .AND.
     &        INDEX(BDUM(3)(1:),'mass').NE.0 .AND.
     &        INDEX(BDUM(3)(1:),'frac').NE.0 ) THEN
              ISRTX = ISRTX + 30
              WRITE(IWR,'(2X,2A)') 'Aqueous Salt: Mass Fraction'
            ELSE
              INDX = 4
              CHMSG = 'Unrecognized Aqueous Salt Option: '
     &          // BDUM(3)
              CALL WRMSGS( INDX )
            ENDIF
          ELSEIF( INDEX(BDUM(1)(1:),'sr3').NE.0 ) THEN
             ISRTX = 300
            WRITE(IWR,'(2X,2A)') 'Source State: #3'
          ELSE
            INDX = 4
            CHMSG = 'Unrecognized Source State: ' // BDUM(1)
            CALL WRMSGS( INDX )
          ENDIF
        ELSEIF( INDEX(ADUM(1:),'fluid').NE.0 .AND.
     &    INDEX(ADUM(1:),'volum').NE.0 ) THEN
          WRITE(IWR,'(2X,A)') 'Fluid Volumetric Source'
          VARB = 'Source State'
          CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,BDUM(1))
          IF( INDEX(BDUM(1)(1:),'sr1').NE.0 ) THEN
            ISRTX = 400
            WRITE(IWR,'(2X,A)') 'Source State: #1'
!
!---        Read aqueous CO2 option  ---
!
            VARB = 'Aqueous CO2 Option'
            CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,BDUM(2))
            IF( INDEX(BDUM(2)(1:),'co2').NE.0 .AND.
     &        INDEX(BDUM(2)(1:),'rel').NE.0 .AND.
     &        INDEX(BDUM(2)(1:),'sat').NE.0 ) THEN
              ISRTX = ISRTX + 2
              WRITE(IWR,'(2X,2A)') 'Aqueous CO2: Relative Saturation'
            ELSEIF( INDEX(BDUM(2)(1:),'co2').NE.0 .AND.
     &        INDEX(BDUM(2)(1:),'mass').NE.0 .AND.
     &        INDEX(BDUM(2)(1:),'frac').NE.0 ) THEN
              ISRTX = ISRTX + 3
              WRITE(IWR,'(2X,2A)') 'Aqueous CO2: Mass Fraction'
            ELSE
              INDX = 4
              CHMSG = 'Unrecognized Aqueous CO2 Option: '
     &          // BDUM(2)
              CALL WRMSGS( INDX )
            ENDIF
!
!---        Read aqueous salt option  ---
!
            VARB = 'Aqueous Salt Option'
            CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,BDUM(3))
            IF( INDEX(BDUM(3)(1:),'salt').NE.0 .AND.
     &        INDEX(BDUM(3)(1:),'rel').NE.0 .AND.
     &        INDEX(BDUM(3)(1:),'sat').NE.0 ) THEN
              ISRTX = ISRTX + 20
              WRITE(IWR,'(2X,2A)') 'Aqueous Salt: Relative Saturation'
            ELSEIF( INDEX(BDUM(3)(1:),'salt').NE.0 .AND.
     &        INDEX(BDUM(3)(1:),'mass').NE.0 .AND.
     &        INDEX(BDUM(3)(1:),'frac').NE.0 ) THEN
              ISRTX = ISRTX + 20
              WRITE(IWR,'(2X,2A)') 'Aqueous Salt: Mass Fraction'
            ELSE
              INDX = 4
              CHMSG = 'Unrecognized Aqueous Salt Option: '
     &          // BDUM(3)
              CALL WRMSGS( INDX )
            ENDIF
          ELSEIF( INDEX(BDUM(1)(1:),'sr2').NE.0 ) THEN
            ISRTX = 500
            WRITE(IWR,'(2X,2A)') 'Source State: #2'
!
!---        Read aqueous salt option  ---
!
            VARB = 'Aqueous Salt Option'
            CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,BDUM(3))
            IF( INDEX(BDUM(3)(1:),'salt').NE.0 .AND.
     &        INDEX(BDUM(3)(1:),'rel').NE.0 .AND.
     &        INDEX(BDUM(3)(1:),'sat').NE.0 ) THEN
              ISRTX = ISRTX + 20
              WRITE(IWR,'(2X,2A)') 'Aqueous Salt: Relative Saturation'
            ELSEIF( INDEX(BDUM(3)(1:),'salt').NE.0 .AND.
     &        INDEX(BDUM(3)(1:),'mass').NE.0 .AND.
     &        INDEX(BDUM(3)(1:),'frac').NE.0 ) THEN
              ISRTX = ISRTX + 30
              WRITE(IWR,'(2X,2A)') 'Aqueous Salt: Mass Fraction'
            ELSE
              INDX = 4
              CHMSG = 'Unrecognized Aqueous Salt Option: '
     &          // BDUM(3)
              CALL WRMSGS( INDX )
            ENDIF
          ELSEIF( INDEX(BDUM(1)(1:),'sr3').NE.0 ) THEN
             ISRTX = 600
            WRITE(IWR,'(2X,2A)') 'Source State: #3'
          ELSE
            INDX = 4
            CHMSG = 'Unrecognized Source State: ' // BDUM(1)
            CALL WRMSGS( INDX )
          ENDIF
        ELSEIF( IEQC.NE.0 .AND. INDEX(ADUM(1:),'solute').NE.0 ) THEN
          VARB = 'Solute Name: '
          CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,BDUM(1))
          DO 30 NSL = 1,NSOLU
            IDB = INDEX(SOLUT(NSL)(1:),'  ')
            IF( INDEX(BDUM(1)(1:),SOLUT(NSL)(1:IDB)).NE.0 ) THEN
              IF( INDEX(ADUM(1:),'density').NE.0 ) THEN
                ISRTX = -(NSL+NSOLU)
                WRITE(IWR,'(2X,2A)')'Solute Source Density: ',SOLUT(NSL)
              ELSE
                ISRTX = -NSL
                WRITE(IWR,'(2X,2A)')'Solute Source: ',SOLUT(NSL)
              ENDIF
              GOTO 32
            ENDIF
   30     CONTINUE
          INDX = 4
          CHMSG = 'Unrecognized Solute Name: '//ADUM
          CALL WRMSGS( INDX )
   32     CONTINUE
        ELSE
          INDX = 4
          CHMSG = 'Unrecognized Source Type: '//ADUM
          CALL WRMSGS( INDX )
        ENDIF
!
!---    Read source domain indices  ---
!
        VARB = 'Source Domain Index'
        ISX = ISTART
        CALL RDINT(ISTART,ICOMMA,CHDUM,I1X)
        CALL RDINT(ISTART,ICOMMA,CHDUM,I2X)
        CALL RDINT(ISTART,ICOMMA,CHDUM,J1X)
        CALL RDINT(ISTART,ICOMMA,CHDUM,J2X)
        CALL RDINT(ISTART,ICOMMA,CHDUM,K1X)
        CALL RDINT(ISTART,ICOMMA,CHDUM,K2X)
        ICX = ISTART
        WRITE(IWR,'(/,2X,A)') 'Source Domain:'
        WRITE(IWR,'(4X,A,I6,A,I6)') 'I = ',I1X,' to ',I2X
        WRITE(IWR,'(4X,A,I6,A,I6)') 'J = ',J1X,' to ',J2X
        WRITE(IWR,'(4X,A,I6,A,I6)') 'K = ',K1X,' to ',K2X
!
!---    Check for ill-defined source domains  ---
!
        IF( I1X.LT.1 .OR. I1X.GT.IFLD .OR. I2X.LT.1 .OR.
     &    I2X.GT.IFLD .OR. I2X.LT.I1X ) THEN
          INDX = 4
          CHMSG = 'Invalid Source Domain: ' // CHDUM(ISX:ICX)
          CALL WRMSGS( INDX )
        ENDIF
        IF( J1X.LT.1 .OR. J1X.GT.JFLD .OR. J2X.LT.1 .OR.
     &    J2X.GT.JFLD .OR. J2X.LT.J1X ) THEN
          INDX = 4
          CHMSG = 'Invalid Source Domain: ' // CHDUM(ISX:ICX)
          CALL WRMSGS( INDX )
        ENDIF
        IF( K1X.LT.1 .OR. K1X.GT.KFLD .OR. K2X.LT.1 .OR.
     &    K2X.GT.KFLD .OR. K2X.LT.K1X ) THEN
          INDX = 4
          CHMSG = 'Invalid Source Domain: ' // CHDUM(ISX:ICX)
          CALL WRMSGS( INDX )
        ENDIF
!
!---    Check for sources applied to inactive nodes  ---
!
        DO K = K1X,K2X
        DO J = J1X,J2X
        DO I = I1X,I2X
          IF( IXP(ND(I,J,K)).EQ.0 ) THEN
            INDX = 7
            IMSG = ND(I,J,K)
            CHMSG = 'Source Applied to an Inactive Node: '
            CALL WRMSGS( INDX )
          ENDIF
        ENDDO
        ENDDO
        ENDDO
!
!---    Read number of source times  ---
!
        VARB = 'Number of Source Times'
        CALL RDINT(ISTART,ICOMMA,CHDUM,ISRM(NS))
        IF( ISRM(NS).GT.LSTM ) THEN
          INDX = 5
          CHMSG = 'Number of Source Times > Parameter LSTM'
          CALL WRMSGS( INDX )
        ENDIF
        SRTMO = -SMALL
!
!---    Loop over number of source times  ---
!
        DO 200 NTM = 1,ISRM(NS)
          DO 60 M = 1,8+NGC+NSOLU
            VAR(NTM,M) = 0.D+0
   60     CONTINUE
!
!---      Read and write source values and units  ---
!
          CALL RDINPL( CHDUM )
          CALL LCASE( CHDUM )
          ISTART = 1
          VARB = 'Source Time'
          CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,1))
          CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
          WRITE(IWR,'(/,4A,1PE11.4)') VARB(1:IVR),', ',
     &      UNTS(1:NCH),': ',VAR(NTM,1)
          INDX = 0
          IUNS = 1
          CALL RDUNIT(UNTS,VAR(NTM,1),INDX)
!
!---      Power Source  ---
!
          IF( ISRTX.EQ.1 ) THEN
            VARB = 'Source: Power'
            CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,2))
            CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
            WRITE(IWR,'(/,4A,1PE11.4)') VARB(1:IVR),', ',
     &        UNTS(1:NCH),': ',VAR(NTM,2)
            INDX = 0
            IUNM = 2
            IUNKG = 1
            IUNS = -3
            CALL RDUNIT(UNTS,VAR(NTM,2),INDX)
!
!---      Power-Density Source  ---
!
          ELSEIF( ISRTX.EQ.2 ) THEN
            VARB = 'Source: Power Density'
            CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,2))
            CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
            WRITE(IWR,'(/,4A,1PE11.4)') VARB(1:IVR),', ',
     &        UNTS(1:NCH),': ',VAR(NTM,2)
            INDX = 0
            IUNM = -1
            IUNKG = 1
            IUNS = -3
            CALL RDUNIT(UNTS,VAR(NTM,2),INDX)
!
!---      Fluid Mass Source  ---
!
          ELSEIF( ISRTX/100.GE.1 .AND. ISRTX/100.LE.3 ) THEN
!
!---        Check for isothermal option, otherwise read fluid
!           temperature  ---
!
            IF( ISLC(30).EQ.0 ) THEN
              VARB = 'Source: Temperature'
              CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,3))
              CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
              WRITE(IWR,'(2X,4A,1PE11.4,$)') VARB(1:IVR),', ',
     &          UNTS(1:NCH),': ',VAR(NTM,3)
              INDX = 0
              IUNK = 1
              CALL RDUNIT(UNTS,VAR(NTM,3),INDX)
              WRITE(IWR,'(A,1PE11.4,A)') ' (',VAR(NTM,3),', C)'
            ENDIF
!
!---        Fluid mass rate  ---
!
            VARB = 'Source: Fluid Mass Rate'
            CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,2))
            CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
            WRITE(IWR,'(/,4A,1PE11.4,$)') VARB(1:IVR),', ',
     &        UNTS(1:NCH),': ',VAR(NTM,2)
            INDX = 0
            IUNKG = 1
            IUNS = -1
            CALL RDUNIT(UNTS,VAR(NTM,2),INDX)
            WRITE(IWR,'(2X,A,1PE11.4,A)') ' (',VAR(NTM,2),', kg/s)'
            IF( VAR(NTM,2).LT.0.D+0 ) GOTO 190
!
!---        Source state #1  ---
!
!           SL = 1.0
!           SG+SN = 0.0
!
!           Declared variables:
!
!           SRC(4,NTM,NSR) - aqueous CO2 relative saturation, or
!                            aqueous CO2 mass fraction
!           SRC(5,NTM,NSR) - aqueous salt relative saturation, or
!                            aqueous salt mass fraction
!
            IF( ISRTX/100.EQ.1 ) THEN
!
!---          Read aqueous CO2  ---
!
              IF( MOD(ISRTX,10).EQ.2 ) THEN
                VARB = 'Aqueous CO2 Relative Saturation'
                CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,4))
                WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),
     &            ': ',VAR(NTM,4)
              ELSEIF( MOD(ISRTX,10).EQ.3 ) THEN
                VARB = 'Aqueous CO2 Mass Fraction'
                CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,4))
                WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),
     &            ': ',VAR(NTM,4)
              ENDIF
!
!---          Read aqueous salt  ---
!
              IF( MOD(ISRTX/10,10).EQ.2 ) THEN
                VARB = 'Aqueous Salt Relative Saturation'
                CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,5))
                WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),
     &            ': ',VAR(NTM,5)
              ELSEIF( MOD(ISRTX/10,10).EQ.3 ) THEN
                VARB = 'Aqueous Salt Mass Fraction'
                CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,5))
                WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),
     &            ': ',VAR(NTM,5)
              ENDIF
!
!---        Source state #2  ---
!
!           SL < 1.0
!           SG+SN > 0.0
!
!           Declared variables:
!
!           SRC(4,NTM,NSR) - aqueous saturation
!           SRC(5,NTM,NSR) - aqueous salt relative saturation, or
!                            aqueous salt mass fraction
!           SRC(6,NTM,NSR) - total mole fraction of petroleum components
!           SRC(7+NGC,NTM,NSR) - total mole fraction of petroleum comp.
!
            ELSEIF( ISRTX/100.EQ.2 ) THEN
!
!---          Read aqueous saturation  ---
!
              VARB = 'Aqueous Saturation'
              CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,4))
              WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),
     &          ': ',VAR(NTM,4)
!
!---          Read aqueous salt  ---
!
              IF( MOD(ISRTX/10,10).EQ.2 ) THEN
                VARB = 'Aqueous Salt Relative Saturation'
                CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,5))
                WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),
     &            ': ',VAR(NTM,5)
              ELSEIF( MOD(ISRTX/10,10).EQ.3 ) THEN
                VARB = 'Aqueous Salt Mass Fraction'
                CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,5))
                WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),
     &            ': ',VAR(NTM,5)
              ENDIF
!
!---          Read total mole fraction of petroleum components  ---
!
              SZMCX = 0.D+0
              DO 70 IGC = 1,NGC+2
                JGC = 5 + IGC
                VARB = 'Total Mole Fraction of ' // GCNM(IGC)
                CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,JGC))
                WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),
     &            ': ',VAR(NTM,JGC)
                SZMCX = SZMCX + VAR(NTM,JGC)
   70         CONTINUE
              IF( ABS(1.D+0-SZMCX).GT.EPSL ) THEN
                INDX = 9
                RLMSG = SZMCX
                CHMSG = 'Summation of Total Mole Fraction ' // 
     &            'of Petroleum Components'
                CALL WRMSGS( INDX )
              ELSE
                DO 72 IGC = 1,NGC+2
                  VAR(NTM,JGC) = VAR(NTM,JGC)/SZMCX
   72           CONTINUE
              ENDIF
!
!---        Source state #3  ---
!
!           SL = 0.0
!           SG+SN = 1.0
!
!           Declared variables:
!
!           SRC(5,NTM,NSR) - water vapor relative saturation
!           SRC(6+,NTM,NSR) - total mole fraction of petroleum comp.
!          
            ELSEIF( ISRTX/100.EQ.3 ) THEN
!
!---          Read water vapor relative saturation  ---
!
              VARB = 'Water Vapor Relative Saturation'
              CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,5))
              WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',VAR(NTM,5)
!
!---          Read total mole fraction of petroleum components  ---
!
              SZMCX = 0.D+0
              DO 80 IGC = 1,NGC+2
                JGC = 5 + IGC
                VARB = 'Total Mole Fraction of ' // GCNM(IGC)
                CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,JGC))
                WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),
     &            ': ',VAR(NTM,JGC)
                SZMCX = SZMCX + VAR(NTM,JGC)
   80         CONTINUE
              IF( ABS(1.D+0-SZMCX).GT.EPSL ) THEN
                INDX = 9
                RLMSG = SZMCX
                CHMSG = 'Summation of Total Mole Fraction ' // 
     &            'of Petroleum Components'
                CALL WRMSGS( INDX )
              ELSE
                DO 82 IGC = 1,NGC+2
                  VAR(NTM,JGC) = VAR(NTM,JGC)/SZMCX
   82           CONTINUE
              ENDIF
            ENDIF
!
!---      Fluid Volumetric Source  ---
!
          ELSEIF( ISRTX/100.GE.4 .AND. ISRTX/100.LE.6 ) THEN
            VARB = 'Source: Fluid Volumetric Rate'
            CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,2))
            CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
            WRITE(IWR,'(/,4A,1PE11.4,$)') VARB(1:IVR),', ',
     &        UNTS(1:NCH),': ',VAR(NTM,2)
            INDX = 0
            IUNM = 3
            IUNS = -1
            CALL RDUNIT(UNTS,VAR(NTM,2),INDX)
            WRITE(IWR,'(2X,A,1PE11.4,A)') ' (',VAR(NTM,2),', m^3/s)'
            IF( VAR(NTM,2).LT.0.D+0 ) GOTO 190
!
!---        Isothermal option  ---
!
            IF( ISLC(30).EQ.0 ) THEN
              VARB = 'Source: Temperature'
              CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,3))
              CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
              WRITE(IWR,'(2X,4A,1PE11.4,$)') VARB(1:IVR),', ',
     &          UNTS(1:NCH),': ',VAR(NTM,3)
              INDX = 0
              IUNK = 1
              CALL RDUNIT(UNTS,VAR(NTM,3),INDX)
              WRITE(IWR,'(A,1PE11.4,A)') ' (',VAR(NTM,3),', C)'
            ENDIF
!
!---        Source state #1  ---
!
!           SL = 1.0
!           SG+SN = 0.0
!
!           Declared variables:
!
!           SRC(4,NTM,NSR) - aqueous CO2 relative saturation, or
!                            aqueous CO2 mass fraction
!           SRC(5,NTM,NSR) - aqueous salt relative saturation, or
!                            aqueous salt mass fraction
!
            IF( ISRTX/100.EQ.4 ) THEN
!
!---          Read aqueous CO2  ---
!
              IF( MOD(ISRTX,10).EQ.2 ) THEN
                VARB = 'Aqueous CO2 Relative Saturation'
                CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,4))
                WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),
     &            ': ',VAR(NTM,4)
              ELSEIF( MOD(ISRTX,10).EQ.3 ) THEN
                VARB = 'Aqueous CO2 Mass Fraction'
                CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,4))
                WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),
     &            ': ',VAR(NTM,4)
              ENDIF
!
!---          Read aqueous salt  ---
!
              IF( MOD(ISRTX/10,10).EQ.2 ) THEN
                VARB = 'Aqueous Salt Relative Saturation'
                CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,5))
                WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),
     &            ': ',VAR(NTM,5)
              ELSEIF( MOD(ISRTX/10,10).EQ.3 ) THEN
                VARB = 'Aqueous Salt Mass Fraction'
                CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,5))
                WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),
     &            ': ',VAR(NTM,5)
              ENDIF
!
!---        Source state #2  ---
!
!           SL < 1.0
!           SG+SN > 0.0
!
!           Declared variables:
!
!           SRC(4,NTM,NSR) - aqueous saturation
!           SRC(5,NTM,NSR) - aqueous salt relative saturation, or
!                            aqueous salt mass fraction
!           SRC(6,NTM,NSR) - total mole fraction of petroleum components
!           SRC(7+NGC,NTM,NSR) - total mole fraction of petroleum comp.
!
            ELSEIF( ISRTX/100.EQ.5 ) THEN
!
!---          Read aqueous saturation  ---
!
              VARB = 'Aqueous Saturation'
              CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,4))
              WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),
     &          ': ',VAR(NTM,4)
!
!---          Read aqueous salt  ---
!
              IF( MOD(ISRTX/10,10).EQ.2 ) THEN
                VARB = 'Aqueous Salt Relative Saturation'
                CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,5))
                WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),
     &            ': ',VAR(NTM,5)
              ELSEIF( MOD(ISRTX/10,10).EQ.3 ) THEN
                VARB = 'Aqueous Salt Mass Fraction'
                CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,5))
                WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),
     &            ': ',VAR(NTM,5)
              ENDIF
!
!---          Read total mole fraction of petroleum components  ---
!
              SZMCX = 0.D+0
              DO 90 IGC = 1,NGC+2
                JGC = 5 + IGC
                VARB = 'Total Mole Fraction of ' // GCNM(IGC)
                CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,JGC))
                WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),
     &            ': ',VAR(NTM,JGC)
                SZMCX = SZMCX + VAR(NTM,JGC)
   90         CONTINUE
              IF( ABS(1.D+0-SZMCX).GT.EPSL ) THEN
                INDX = 9
                RLMSG = SZMCX
                CHMSG = 'Summation of Total Mole Fraction ' // 
     &            'of Petroleum Components'
                CALL WRMSGS( INDX )
              ELSE
                DO 92 IGC = 1,NGC+2
                  VAR(NTM,JGC) = VAR(NTM,JGC)/SZMCX
   92           CONTINUE
              ENDIF
!
!---        Source state #3  ---
!
!           SL = 0.0
!           SG+SN = 1.0
!
!           Declared variables:
!
!           SRC(5,NTM,NSR) - water vapor relative saturation
!           SRC(6+,NTM,NSR) - total mole fraction of petroleum comp.
!          
            ELSEIF( ISRTX/100.EQ.6 ) THEN
!
!---          Read water vapor relative saturation  ---
!
              VARB = 'Water Vapor Relative Saturation'
              CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,5))
              WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),': ',VAR(NTM,5)
!
!---          Read total mole fraction of petroleum components  ---
!
              SZMCX = 0.D+0
              DO 100 IGC = 1,NGC+2
                JGC = 5 + IGC
                VARB = 'Total Mole Fraction of ' // GCNM(IGC)
                CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,JGC))
                WRITE(IWR,'(2X,2A,1PE11.4)') VARB(1:IVR),
     &            ': ',VAR(NTM,JGC)
                SZMCX = SZMCX + VAR(NTM,JGC)
  100         CONTINUE
              IF( ABS(1.D+0-SZMCX).GT.EPSL ) THEN
                INDX = 9
                RLMSG = SZMCX
                CHMSG = 'Summation of Total Mole Fraction ' // 
     &            'of Petroleum Components'
                CALL WRMSGS( INDX )
              ELSE
                DO 102 IGC = 1,NGC+2
                  VAR(NTM,JGC) = VAR(NTM,JGC)/SZMCX
  102           CONTINUE
              ENDIF
            ENDIF
!
!---      Solute Source  ---
!
          ELSEIF( ISRTX.LT.0 .AND. ISRTX.GE.-NSOLU ) THEN
            VARB = 'Source Solute Rate'
            CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,4))
            CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
            WRITE(IWR,'(/,4A,1PE11.4)') VARB(1:IVR),', ',
     &        UNTS(1:NCH),': ',VAR(NTM,4)
            INDX = 0
            IUNS = -1
            CALL RDUNIT(UNTS,VAR(NTM,4),INDX)
          ELSEIF( ISRTX.LT.-NSOLU .AND. ISRTX.GE.-2*NSOLU ) THEN
            VARB = 'Source Solute Density Rate'
            CALL RDDPR(ISTART,ICOMMA,CHDUM,VAR(NTM,4))
            CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
            WRITE(IWR,'(/,4A,1PE11.4)') VARB(1:IVR),', ',
     &        UNTS(1:NCH),': ',VAR(NTM,4)
            INDX = 0
            IUNS = -1
            IUNM = -3
            CALL RDUNIT(UNTS,VAR(NTM,4),INDX)
          ENDIF
  190     CONTINUE
!
!---      Check for nonascending source times  ---
!
          IF( VAR(NTM,1).LT.SRTMO ) THEN
            INDX = 4
            CHMSG = 'Source Time Sequencing'
            CALL WRMSGS( INDX )
          ENDIF
          SRTMO = VAR(NTM,1)
  200   CONTINUE
!
!---  Assign values to source variables  ---
!
        NSR = NSR + 1
        IF( NSR.GT.LSR ) THEN
          INDX = 5
          CHMSG = 'Number of Sources > Parameter LSR'
          CALL WRMSGS( INDX )
        ENDIF
        ISRDM(1,NSR) = I1X
        ISRDM(2,NSR) = I2X
        ISRDM(3,NSR) = J1X
        ISRDM(4,NSR) = J2X
        ISRDM(5,NSR) = K1X
        ISRDM(6,NSR) = K2X
        ISRT(NSR) = ISRTX
        DO 230 NTM = 1,ISRM(NS)
          DO 220 M = 1,8+NGC+NSOLU
            SRC(M,NTM,NSR) = VAR(NTM,M)
  220     CONTINUE
  230   CONTINUE
  300 CONTINUE
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of RDSR_EOR group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE RDST_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Reads the salt transport card dispersivities.
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, March 17, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE TRNSPT
      USE SOLTN
      USE PORMED
      USE GRID
      USE GLB_PAR
      USE FILES
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      CHARACTER*64 RDUM,UNTS
      CHARACTER*512 CHDUM
      INTEGER NCH
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//RDST_EOR'
!
!---  Write card information to output file  ---
!
      CARD = 'Salt Transport Card'
      ICD = INDEX( CARD,'  ' )-1
      WRITE(IWR,'(//,3A)') ' ~ ',CARD(1:ICD),': '
      IDSPS = 0
!
!---  Salt name  ---
!
      WRITE(IWR,'(A)') 'Sodium Chloride Salt'
      WTMS = 58.4428
      WRITE(IWR,'(2X,A,1PE11.4)')  'Molecular Weight, kg/kg_mol: ',WTMS
      IEDLS = 1
      WRITE( IWR,'(A)' ) 'Conventional Diffusion Model'
!
!---  Loop over the rock/soil saturation information lines  ---
!
      N = 0
   10 CONTINUE
      IJK = 0
      IF( N.GE.NROCK ) GOTO 600
      ISTART = 1
      VARB = 'Rock Name: '
      CALL RDINPL( CHDUM )
      CALL LCASE( CHDUM )
      CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,RDUM)
!
!---  IJK, KIJ, or JKI indexing  ---
!
      IF( INDEX(RDUM(1:),'indexing').NE.0 ) THEN
        IF( INDEX(ROCK(1)(1:),'indexing').EQ.0 ) THEN
          INDX = 4
          CHMSG = 'Indexing Option Not Declared ' //
     &      'in Rock/Soil Zonation Card'
          CALL WRMSGS( INDX )
        ENDIF
        IF( INDEX(RDUM,'ijk').NE.0 ) THEN
          IJK = 1
        ELSEIF( INDEX(RDUM,'jki').NE.0 ) THEN
          IJK = 2
        ELSEIF( INDEX(RDUM,'kij').NE.0 ) THEN
          IJK = 3
        ELSE
          INDX = 4
          CHMSG = 'Unrecognized Indexing Option' // RDUM(1:NCH)
          CALL WRMSGS( INDX )
        ENDIF
        GOTO 220
      ENDIF
!
!---  Search known rock types for a matching type ---
!
      DO 100 M = 1, NROCK
        IF( RDUM.EQ.ROCK(M)) THEN
          IROCK = M
          GOTO 200
        ENDIF
  100 CONTINUE
!
!---  Search known scaling groups for a matching type ---
!
      IF( ISLC(19).EQ.1 ) THEN
        DO 110 M = 1,NSCALE
           IF( RDUM.EQ.SCALNM(M) ) THEN
              ISGRP = M
              IROCK = 1
              GOTO 200
           ENDIF
  110   CONTINUE
        INDX = 2
        CHMSG = 'Unrecognized Rock/Soil Type or Scaling Group: '
     &    // RDUM(1:NCH)
        CALL WRMSGS( INDX )
        GOTO 10
      ENDIF
      INDX = 2
      CHMSG = 'Unrecognized Rock/Soil Type: ' // RDUM(1:NCH)
      CALL WRMSGS( INDX )
      GOTO 10
  200 CONTINUE
!
!---  Loop over rock/soils within scaling group  ---
!
      IF( ISLC(19).EQ.1 .AND. ISGRP.NE.0 ) THEN
        DO 202 M = IROCK,NROCK
          IF( ISCALE(M).EQ.ISGRP ) THEN
            IROCK = M
            GOTO 204
          ENDIF
  202   CONTINUE
      ENDIF
  204 CONTINUE
!
!---  Write rock/soil name  ---
!
      WRITE (IWR,'(/,2A)') 'Rock/Soil Name: ',ROCK(IROCK)
      N = N + 1
  220 CONTINUE
!
!---  Longitudinal dispersivity  ---
!
      VARB = 'Longitudinal Dispersivity: '
      IF( IJK.GT.0 ) THEN
        UNTS = 'm'
        IUNM = 1
        CALL RDIJK( ISTART,IJK,CHDUM,UNTS,DPLGS )
        IDSPS = 1
      ELSE
        CALL RDDPR(ISTART,ICOMMA,CHDUM,DPLGS(IROCK))
        CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
        WRITE(IWR,'(3A,1PE11.4)') VARB(1:IVR),UNTS(1:NCH),': ',
     &    DPLGS(IROCK)
        INDX = 0
        IUNM = 1
        CALL RDUNIT(UNTS,DPLGS(IROCK),INDX)
        IF( DPLGS(IROCK).GE.SMALL ) IDSPS = 1
      ENDIF
!
!---  Transverse dispersivity  ---
!
      VARB = 'Transverse Dispersivity: '
      IF( IJK.GT.0 ) THEN
        UNTS = 'm'
        IUNM = 1
        CALL RDIJK( ISTART,IJK,CHDUM,UNTS,DPTRS )
        IDSPS = 1
      ELSE
        CALL RDDPR(ISTART,ICOMMA,CHDUM,DPTRS(IROCK))
        CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
        WRITE(IWR,'(3A,1PE11.4)') VARB(1:IVR),UNTS(1:NCH),': ',
     &    DPTRS(IROCK)
        INDX = 0
        IUNM = 1
        CALL RDUNIT(UNTS,DPTRS(IROCK),INDX)
        IF( DPTRS(IROCK).GE.SMALL ) IDSPS = 1
      ENDIF
!
!---  Read next rock/soil type or scaling group  ---
!
      IF( IJK.GT.0 ) N = N + NFLD
      IF( N.LT.NROCK ) WRITE(IWR,'(/)')
      GOTO 10
  600 CONTINUE
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of RDST_EOR group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE RDTF_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Reads solute/fluid interaction card for diffusion and partition
!     coefficients, and internodal diffusion term averaging scheme for
!     single phase (aqueous) solute transport equation.
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, March 17, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE TRNSPT
      USE SOLTN
      USE GLB_PAR
      USE FILES
      USE FDVP
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      CHARACTER*64 ADUM,BDUM,UNTS
      CHARACTER*512 CHDUM
      INTEGER, DIMENSION(:,:), ALLOCATABLE :: ICDSX
      INTEGER, DIMENSION(:), ALLOCATABLE :: ICLX
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//RDTF_EOR'
!
!---  Write card information to output file  ---
!
      CARD = 'Solute/Fluid Interaction Card'
      ICD = INDEX( CARD,'  ' )-1
      WRITE(IWR,'(//,3A)') ' ~ ',CARD(1:ICD),': '
!
!---  Read number of different solutes  ---
!
      CALL RDINPL( CHDUM )
      CALL LCASE( CHDUM )
      ISTART = 1
      VARB = 'Number of Solutes'
      CALL RDINT(ISTART,ICOMMA,CHDUM,NLIN)
      NSOLU = 0
      DO 200 NL = 1, NLIN
        CALL RDINPL( CHDUM )
        CALL LCASE( CHDUM )
        ISTART = 1
        ADUM(1:) = ' '
        VARB = 'Solute Name'
        CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,ADUM)
        DO 100 NSL = 1,NSOLU
          IF( SOLUT(NSL).EQ.ADUM ) GOTO 110
  100   CONTINUE
        NSOLU = NSOLU + 1
        IF( NSOLU.GT.LSOLU ) THEN
          INDX = 5
          CHMSG = 'Number of Solutes > Parameter LSOLU'
          CALL WRMSGS( INDX )
        ENDIF
        SOLUT(NSOLU) = ADUM
        NSL = NSOLU
  110   CONTINUE
        WRITE(IWR,'(/,3A)') VARB(1:IVR),': ',ADUM
!
!---    Aqueous molecular diffusion coefficient  ---
!
        VARB = 'Aqueous Molecular Diffusion Coefficient'
        CALL RDDPR(ISTART,ICOMMA,CHDUM,SMDL(NSL))
        CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
        WRITE(IWR,'(4A,1PE11.4)') VARB(1:IVR),', ',
     &    UNTS(1:NCH),': ',SMDL(NSL)
        INDX = 0
        IUNM = 2
        IUNS = -1
        CALL RDUNIT(UNTS,SMDL(NSL),INDX)
!
!---    Gas molecular diffusion coefficient  ---
!
        VARB = 'Gas Molecular Diffusion Coefficient'
        CALL RDDPR(ISTART,ICOMMA,CHDUM,SMDG(NSL))
        CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
        WRITE(IWR,'(4A,1PE11.4)') VARB(1:IVR),', ',
     &    UNTS(1:NCH),': ',SMDG(NSL)
        INDX = 0
        IUNM = 2
        IUNS = -1
        CALL RDUNIT(UNTS,SMDG(NSL),INDX)
!
!---    Nonaqueous-liquid-phase molecular diffusion coefficient  ---
!
        VARB = 'Nonaqueous-Liquid Molecular Diffusion Coefficient'
        CALL RDDPR(ISTART,ICOMMA,CHDUM,SMDN(NSL))
        CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
        WRITE(IWR,'(4A,1PE11.4)') VARB(1:IVR),', ',
     &    UNTS(1:NCH),': ',SMDN(NSL)
        INDX = 0
        IUNM = 2
        IUNS = -1
        CALL RDUNIT(UNTS,SMDN(NSL),INDX)
!
!---    Gas-aqueous partition coefficient option  ---
!
        VARB = 'Gas-Aqueous Partition Function'
        CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,ADUM)
        WRITE( IWR,'(/,A,$)' ) VARB(1:IVR)
        IF( INDEX(ADUM(1:),'constant').NE.0 )  THEN
          IPCGL(NSL) = 0
          WRITE( IWR,'(A)' ) ': Constant'
          VARB = 'Gas-Aqueous Partition Coefficient'
          IDFLT = 1
          CALL RDDPR(ISTART,ICOMMA,CHDUM,PCGL(1,NSL))
          CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
          WRITE(IWR,'(4A,1PE11.4)') VARB(1:IVR),', ',UNTS(1:NCH),': '
     &      ,PCGL(1,NSL)
          INDX = 0
          CALL RDUNIT(UNTS,PCGL(1,NSL),INDX)
        ELSEIF( INDEX(ADUM(1:),'temperature').NE.0 )  THEN
          IPCGL(NSL) = 1
          WRITE( IWR,'(A)' ) ': Temperature Dependent'
          WRITE( IWR,'(A)' ) 'ln( Kgl ) = a + b/T + c ln(T) + dT + eT^2'
          VARB = 'Gas-Aqueous Partition Function Coefficients: '
          IDFLT = 1
          CALL RDDPR(ISTART,ICOMMA,CHDUM,PCGL(1,NSL))
          IDFLT = 1
          CALL RDDPR(ISTART,ICOMMA,CHDUM,PCGL(2,NSL))
          IDFLT = 1
          CALL RDDPR(ISTART,ICOMMA,CHDUM,PCGL(3,NSL))
          IDFLT = 1
          CALL RDDPR(ISTART,ICOMMA,CHDUM,PCGL(4,NSL))
          IDFLT = 1
          CALL RDDPR(ISTART,ICOMMA,CHDUM,PCGL(5,NSL))
          WRITE(IWR,'(2X,A,1PE11.4)') 'Constant a: ',PCGL(1,NSL)
          WRITE(IWR,'(2X,A,1PE11.4)') 'Constant b: ',PCGL(2,NSL)
          WRITE(IWR,'(2X,A,1PE11.4)') 'Constant c: ',PCGL(3,NSL)
          WRITE(IWR,'(2X,A,1PE11.4)') 'Constant d: ',PCGL(4,NSL)
          WRITE(IWR,'(2X,A,1PE11.4)') 'Constant e: ',PCGL(5,NSL)
        ELSEIF( INDEX(ADUM(1:),'water').NE.0 .AND.
     &    INDEX(ADUM(1:),'vapor').NE.0 )  THEN
          IPCGL(NSL) = 2
          WRITE( IWR,'(A)' ) ': Water Vapor Equilibrium'
        ELSE
          INDX = 4
          CHMSG = 'Unrecognized Gas-Aqueous Partition Option: '
     &      // ADUM(1:NCH)
          CALL WRMSGS( INDX )
        ENDIF
!
!---  Aqueous-NAPL partition coefficient  ---
!
        IDFLT = 1
        VARB = 'Aqueous-NAPL Partition Coefficient: '
        CALL RDDPR(ISTART,ICOMMA,CHDUM,PCLN(1,NSL))
        CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
        WRITE(IWR,'(3A,1PE11.4)') VARB(1:IVR),UNTS(1:NCH),': '
     &,PCLN(1,NSL)
        INDX = 0
        CALL RDUNIT(UNTS,PCLN(1,NSL),INDX)
        PCLN(1,NSL) = MAX( PCLN(1,NSL),1.D-20 )
        PCLN(1,NSL) = MIN( PCLN(1,NSL),1.D+20 )
#ifdef radioactive
!
!---    Half-life  ---
!
        IDFLT = 1
        VARB = 'Radioactive Half-Life'
        CALL RDDPR(ISTART,ICOMMA,CHDUM,HLF(NSL))
        CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
        WRITE(IWR,'(4A,1PE11.4)') VARB(1:IVR),', ',
     &    UNTS(1:NCH),': ',HLF(NSL)
        INDX = 0
        IUNS = 1
        CALL RDUNIT(UNTS,HLF(NSL),INDX)
        HLF(NSL) = MAX( HLF(NSL),SMALL )
  200 CONTINUE
!
!---  Read number of lines of chain decay information  ---
!
      ISTART = 1
      CALL RDINPL( CHDUM )
      CALL LCASE( CHDUM )
      VARB = ''
      CALL RDINT(ISTART,ICOMMA,CHDUM,NLIN)
      IF( NLIN.GT.0 ) THEN
        WRITE(IWR,'(/,A)') 'Chain Decay Fractions:'
        ALLOCATE( ICDSX(1:2,1:NLIN),STAT=ISTAT )
        IF( ISTAT.NE.0 ) THEN
          INDX = 3
          CHMSG = 'Allocation Error: ICDSX'
          CALL WRMSGP( INDX )
        ENDIF
        ALLOCATE( ICLX(1:NSOLU),STAT=ISTAT )
        IF( ISTAT.NE.0 ) THEN
          INDX = 3
          CHMSG = 'Allocation Error: ICLX'
          CALL WRMSGP( INDX )
        ENDIF
        DO NL = 1, NLIN
          ISTART = 1
          CALL RDINPL( CHDUM )
          CALL LCASE( CHDUM )
          ADUM(1:) = ' '
          VARB = 'Parent Solute Name'
          NPSL = 0
          CALL RDCHR(ISTART,ICOMMA,NCHA,CHDUM,ADUM)
          DO NSL = 1,NSOLU
            IF( SOLUT(NSL).EQ.ADUM ) NPSL = NSL
          ENDDO
          BDUM(1:) = ' '
          VARB = 'Daughter Solute Name'
          NDSL = 0
          CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
          DO NSL = 1,NSOLU
            IF( SOLUT(NSL).EQ.BDUM ) NDSL = NSL
          ENDDO
          IF( NPSL.EQ.0 .OR. NDSL.EQ.0 ) THEN
            INDX = 4
            CHMSG = 'Invalid Chain Decay: '//
     &        ADUM(1:NCHA)//': '//BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ELSEIF( NPSL.EQ.NDSL ) THEN
            INDX = 4
            CHMSG = 'Invalid Chain Decay (Parent = Progeny): '//
     &        ADUM(1:NCHA)//': '//BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ELSEIF( NPSL.GT.NDSL ) THEN
            INDX = 4
            CHMSG = 'Invalid Chain Decay (Parent # > Progeny #): '//
     &        ADUM(1:NCHA)//': '//BDUM(1:NCHB)
            CALL WRMSGS( INDX )
          ENDIF
          VARB = 'Chain Decay Fraction'
          CALL RDDPR(ISTART,ICOMMA,CHDUM,CHDF(NPSL,NDSL))
          WRITE(IWR,'(2X,5A,1PE11.4)') 'From ',
     &      ADUM(1:NCHA),' to ',BDUM(1:NCHB),': ',CHDF(NPSL,NDSL)
          ICDSX(1,NL) = NPSL
          ICDSX(2,NL) = NDSL
        ENDDO
        DO NPSL = 1,NSOLU
          CHDFX = 0.D+0
          DO NDSL = NPSL+1,NSOLU
            CHDFX = CHDFX + CHDF(NPSL,NDSL)        
          ENDDO
          IF( ABS(CHDFX-1.D+0)/EPSL.GT.EPSL .AND. 
     &      ABS(CHDFX)/EPSL.GT.EPSL ) THEN
            INDX = 4
            CHMSG = 'Chain Decay Fraction Summation \= 1.0 and \= 0.0'
            CALL WRMSGS( INDX )
          ENDIF
        ENDDO
!
!---    Find chain decay series  ---
!
        NC = 0
        MC = 0
        DO
          MC = MC + 1
          MC0 = MC
!
!---      Zero indices of chain decay list  ---
!
          DO NSL = 1,NSOLU
            ICLX(NSL) = 0
          ENDDO
!
!---      Find the lowest numbered parent  ---
!
          NP = NSOLU+1
          DO NL = 1,NLIN
            IF( ICDSX(1,NL).LE.NP ) THEN
              NP = ICDSX(1,NL)
            ENDIF
          ENDDO
          IF( NP.EQ.NSOLU+1 ) EXIT
          NC = NC + 1
          ICLX(NP) = 1
!
!---      Follow the chain decay from the parent  ---
!
          DO NP = 1,NSOLU
            IF( ICLX(NP).EQ.0 ) CYCLE
            DO NL = 1,NLIN
              IF( NP.EQ.ICDSX(1,NL) ) THEN
                ICLX(ICDSX(1,NL)) = 1
                ICDSX(1,NL) = NSOLU+2
                ICLX(ICDSX(2,NL)) = 1
                ICDSX(2,NL) = NSOLU+2
              ENDIF
            ENDDO
          ENDDO
          DO NP = 1,NSOLU
            IF( ICLX(NP).EQ.0 ) CYCLE
            MC = MC + 1
            IBCDS(MC) = NP
          ENDDO
          IBCDS(MC0) = MC - MC0
        ENDDO
        NBCDS = NC+1
!
!---    Put all solutes not part of a chain-decay series in the
!       the last chain decay series, to be treated as individual
!       decays  ---
!
        MC0 = MC
!
!---    Loop over all solutes checking for those not in a chain-decay
!       series  ---
!
        DO NSL = 1,NSOLU
          IFIND = 0
          KC = 0
!
!---      Loop over the number of active chain-decay series  ---
!
          DO NC = 1,NBCDS-1
            KC = KC + 1
            KC0 = KC
            DO M = 1,IBCDS(KC0)
              KC = KC + 1
              IF( NSL.EQ.IBCDS(KC) ) IFIND = 1
            ENDDO
          ENDDO
          IF( IFIND.EQ.0 ) THEN
            MC = MC + 1
            IBCDS(MC) = NSL
          ENDIF
        ENDDO
        IBCDS(MC0) = MC - MC0
        IF( ALLOCATED(ICDSX) ) THEN
          DEALLOCATE( ICDSX,STAT=ISTAT )
          IF( ISTAT.NE.0 ) THEN
            INDX = 3
            CHMSG = 'Deallocation Error: ICDSX'
            CALL WRMSGS( INDX )
          ENDIF
        ENDIF
!
!---  No chain decay series  ---
!
      ELSE
        NBCDS = 0
        IBCDS(1) = NSOLU
        DO NSL = 1,NSOLU
          IBCDS(NSL+1) = NSL
        ENDDO
      ENDIF
#endif
#ifdef reactive
!
!---  First-order reaction rates  ---
!
        VARB = 'Number of reactions'
        CALL RDINT(ISTART,ICOMMA,CHDUM,NCHEM(NSL))
        IF( NCHEM(NSL).GT.LCHEM ) THEN
          INDX = 5
          CHMSG = 'Number of Reactions > Parameter LCHEM'
          CALL WRMSGS( INDX )
        ENDIF
        DO 120 NCHM = 1,NCHEM(NSL)
          IDFLT = 1
          VARB = 'First-Order Reaction Rate Constant'
          CALL RDDPR(ISTART,ICOMMA,CHDUM,RHLF(NSL,NCHM))
          CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
          WRITE(IWR,'(4A,1PE11.4)') VARB(1:IVR),', ',UNTS(1:NCH),
     &      ': ',RHLF(NSL,NCHM)
          INDX = 0
          IUNS = 1
          CALL RDUNIT(UNTS,RHLF(NSL,NCHM),INDX)
          RHLF(NSL,NCHM) = MAX( RHLF(NSL,NCHM),SMALL )
          RCHDF(NSL,NSL,NCHM) = -1.D+0
  120   CONTINUE
  200 CONTINUE
!
!---  Read number of lines of reaction information  ---
!
      CALL RDINPL( CHDUM )
      CALL LCASE( CHDUM )
      ISTART = 1
      VARB = 'Number of Reaction Lines'
      CALL RDINT(ISTART,ICOMMA,CHDUM,NLIN)
      IF( NLIN.GT.0 ) THEN
        WRITE(IWR,'(/,A)') 'Reaction Data:'
      ENDIF
      DO 400 NL = 1, NLIN
!
!---  Read new line  ---
!
        CALL RDINPL( CHDUM )
        CALL LCASE( CHDUM )
        ISTART = 1
        ADUM(1:) = ' '
        VARB = 'Parent Solute Name'
        NPSL = 0
        CALL RDCHR(ISTART,ICOMMA,NCHA,CHDUM,ADUM)
        DO 300 NSL = 1,NSOLU
          IF( SOLUT(NSL).EQ.ADUM ) NPSL = NSL
  300   CONTINUE
        IF( NCHEM(NPSL).LE.0 ) THEN
          INDX = 4
          CHMSG = 'Unrecognized Solute Name: '//SOLUT(NSL)
          CALL WRMSGS( INDX )
        ENDIF
        BDUM(1:) = ' '
        VARB = 'Daughter Solute Name'
        NDSL = 0
        CALL RDCHR(ISTART,ICOMMA,NCHB,CHDUM,BDUM)
        DO 310 NSL = 1,NSOLU
          IF( SOLUT(NSL).EQ.BDUM ) NDSL = NSL
  310   CONTINUE
        IF( NPSL.EQ.0 .OR. NDSL.EQ.0 ) THEN
          INDX = 4
          CHMSG = 'Reaction Solute: '//
     &      ADUM(1:NCHA)//': '//BDUM(1:NCHB)
          CALL WRMSGS( INDX )
        ELSEIF( NPSL.EQ.NDSL ) THEN
          INDX = 4
          CHMSG = 'Parent Solute = Progeny Solute: '//
     &      ADUM(1:NCHA)//': '//BDUM(1:NCHB)
          CALL WRMSGS( INDX )
        ENDIF
        VARB = 'Reaction Number'
        CALL RDINT(ISTART,ICOMMA,CHDUM,NCHM)
        VARB = 'Reaction Stoichiometry (Fraction)'
        CALL RDDPR(ISTART,ICOMMA,CHDUM,RCHDF(NPSL,NDSL,NCHM))
        WRITE(IWR,'(2X,4A,I2,A,1PE11.4)') ADUM(1:NCHA),' to ',
        WRITE(IWR,'(2X,4A,I2,A,1PE11.4)') ADUM(1:NCHA),' to ',
     &    BDUM(1:NCHB),'; Reaction = #',NCHM,
     &    '; Stoichiometry = ',RCHDF(NPSL,NDSL,NCHM)
  400 CONTINUE
#endif
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of RDTF_EOR group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE RDTP_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Reads the solute/porous media interaction card for the
!     dispersivities, half-lives, and partition coefficients.
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, March 17, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE TRNSPT
      USE SOLTN
      USE PORMED
      USE GRID
      USE GLB_PAR
      USE FILES
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      CHARACTER*64 ADUM,RDUM,UNTS
      CHARACTER*512 CHDUM
      INTEGER NCH
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//RDTP_EOR'
!
!---  Write card information to output file  ---
!
      CARD = 'Solute/Porous Media Interaction Card'
      ICD = INDEX( CARD,'  ' )-1
      WRITE(IWR,'(//,3A)') ' ~ ',CARD(1:ICD),': '
      IDISP = 0
!
!---  Loop over the rock/soil saturation information lines  ---
!
      N = 0
   10 CONTINUE
      IJK = 0
      IF( N.GE.NROCK ) GOTO 600
      ISTART = 1
      VARB = 'Rock Name: '
      CALL RDINPL( CHDUM )
      CALL LCASE( CHDUM )
      CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,RDUM)
!
!---  IJK, KIJ, or JKI indexing  ---
!
      IF( INDEX(RDUM(1:),'indexing').NE.0 ) THEN
        IF( INDEX(ROCK(1)(1:),'indexing').EQ.0 ) THEN
          INDX = 4
          CHMSG = 'Indexing Option Not Declared ' //
     &      'in Rock/Soil Zonation Card'
          CALL WRMSGS( INDX )
        ENDIF
        IF( INDEX(RDUM,'ijk').NE.0 ) THEN
          IJK = 1
        ELSEIF( INDEX(RDUM,'jki').NE.0 ) THEN
          IJK = 2
        ELSEIF( INDEX(RDUM,'kij').NE.0 ) THEN
          IJK = 3
        ELSE
          INDX = 4
          CHMSG = 'Unrecognized Indexing Option' // RDUM(1:NCH)
          CALL WRMSGS( INDX )
        ENDIF
        GOTO 220
      ENDIF
!
!---  Search known rock types for a matching type ---
!
      DO 100 M = 1, NROCK
        IF( RDUM.EQ.ROCK(M)) THEN
          IROCK = M
          GOTO 200
        ENDIF
  100 CONTINUE
!
!---  Search known scaling groups for a matching type ---
!
      IF( ISLC(19).EQ.1 ) THEN
        DO 110 M = 1,NSCALE
           IF( RDUM.EQ.SCALNM(M) ) THEN
              ISGRP = M
              IROCK = 1
              GOTO 200
           ENDIF
  110   CONTINUE
        INDX = 2
        CHMSG = 'Unrecognized Rock/Soil Type or Scaling Group: '
     &    // RDUM(1:NCH)
        CALL WRMSGS( INDX )
        GOTO 10
      ENDIF
      INDX = 2
      CHMSG = 'Unrecognized Rock/Soil Type: ' // RDUM(1:NCH)
      CALL WRMSGS( INDX )
      GOTO 10
  200 CONTINUE
!
!---  Loop over rock/soils within scaling group  ---
!
      IF( ISLC(19).EQ.1 .AND. ISGRP.NE.0 ) THEN
        DO 202 M = IROCK,NROCK
          IF( ISCALE(M).EQ.ISGRP ) THEN
            IROCK = M
            GOTO 204
          ENDIF
  202   CONTINUE
      ENDIF
  204 CONTINUE
!
!---  Write rock/soil name  ---
!
      WRITE (IWR,'(/,2A)') 'Rock/Soil Name: ',ROCK(IROCK)
      N = N + 1
  220 CONTINUE
!
!---  Longitudinal dispersivity  ---
!
      VARB = 'Longitudinal Dispersivity: '
      IF( IJK.GT.0 ) THEN
        UNTS = 'm'
        IUNM = 1
        CALL RDIJK( ISTART,IJK,CHDUM,UNTS,DISPL )
        IDISP = 1
      ELSE
        CALL RDDPR(ISTART,ICOMMA,CHDUM,DISPL(IROCK))
        CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
        WRITE(IWR,'(2X,4A,1PE11.4)') VARB(1:IVR),', ',UNTS(1:NCH),
     &    ': ',DISPL(IROCK)
        INDX = 0
        IUNM = 1
        CALL RDUNIT(UNTS,DISPL(IROCK),INDX)
        WRITE(IWR,'(A,1PE11.4,A)') ' (',DISPL(IROCK),', m)'
        IF( DISPL(IROCK).GE.SMALL ) IDISP = 1
      ENDIF
!
!---  Transverse dispersivity  ---
!
      VARB = 'Transverse Dispersivity: '
      IF( IJK.GT.0 ) THEN
        UNTS = 'm'
        IUNM = 1
        CALL RDIJK( ISTART,IJK,CHDUM,UNTS,DISPT )
        IDISP = 1
      ELSE
        CALL RDDPR(ISTART,ICOMMA,CHDUM,DISPT(IROCK))
        CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
        WRITE(IWR,'(2X,4A,1PE11.4)') VARB(1:IVR),', ',UNTS(1:NCH),
     &    ': ',DISPT(IROCK)
        INDX = 0
        IUNM = 1
        CALL RDUNIT(UNTS,DISPT(IROCK),INDX)
        WRITE(IWR,'(A,1PE11.4,A)') ' (',DISPT(IROCK),', m)'
        IF( DISPT(IROCK).GE.SMALL ) IDISP = 1
      ENDIF
!
!---  Loop over number of solutes or radionuclides  ---
!
      DO 500 NS = 1,NSOLU
        CALL RDINPL( CHDUM )
        CALL LCASE( CHDUM )
        ISTART = 1
        VARB = 'Solute Name'
        CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,ADUM)
!
!---  Search known solutes for matching name  ---
!
        DO 300 NSL = 1,NSOLU
          IF( ADUM.EQ.SOLUT(NSL)) GOTO 400
  300   CONTINUE
        INDX = 4
        CHMSG = 'Unrecognized Solute Name: '//ADUM
        CALL WRMSGS( INDX )
  400   CONTINUE
        WRITE(IWR,'(/,2A)') 'Solute Name:',SOLUT(NSL)
!
!---  Solid-aqueous partition coefficient  ---
!
        WRITE(IWR,'(A)') 'Linear Isotherm w/ Kd'
        UNTS = 'm^3/kg'
        IUNM = 3
        IUNKG = -1
        IF( IJK.GT.0 ) THEN
          INDX = 1
          LNDX = 5
          CALL RDIJKD( ISTART,IJK,CHDUM,UNTS,PCSL(1,1,NSL),INDX,LNDX )
          DO IROCK = 1,NFLD
            PCSL(1,IROCK,NSL) = MAX( PCSL(1,IROCK,NSL),1.D-20 )
          ENDDO
        ELSE
         IDFLT = 1
         VARB = 'Solid-Aqueous Partition Coefficient'
         CALL RDDPR(ISTART,ICOMMA,CHDUM,PCSL(1,IROCK,NSL))
          CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,UNTS)
          WRITE(IWR,'(4A,1PE11.4,$)') VARB(1:IVR),', ',
     &      UNTS(1:NCH),': ',PCSL(1,IROCK,NSL)
          INDX = 0
          CALL RDUNIT(UNTS,PCSL(1,IROCK,NSL),INDX)
          WRITE(IWR,'(A,1PE11.4,A)') ' (',PCSL(1,IROCK,NSL),
     &      ', m^3/kg)'
          PCSL(1,IROCK,NSL) = MAX( PCSL(1,IROCK,NSL),1.D-20 )
        ENDIF
  500 CONTINUE
!
!---  Read next rock/soil type or scaling group  ---
!
      IF( IJK.GT.0 ) N = N + NFLD
      IF( N.LT.NROCK ) WRITE(IWR,'(/)')
      GOTO 10
  600 CONTINUE
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of RDTP_EOR group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE RKG_EOR( RKGX,SLX,SNX,IZN )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Gas relative permeability
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, March 17, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PORMED
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//RKG_EOR'
!
!---  Stone-I 3-phase relative permeability model  ---
!
      IF( IRPN(IZN).EQ.1 ) THEN
!
!---    Corey submodel  ---
!
        IF( MOD(IRPG(IZN),10).EQ.1 ) THEN
          STX = SLX + SNX
          STRX = RPGC(3,IZN)
          SGRX = RPGC(4,IZN)
          ESTX = MIN( MAX( (STX-STRX)/(1.D+0-STRX-SGRX),0.D+0 ),1.D+0 )
          RKGX = RPGC(1,IZN)*((1.D+0-ESTX)**RPGC(2,IZN))
!
!---    LET submodel  ---
!
        ELSEIF( MOD(IRPG(IZN),10).EQ.2 ) THEN
          STX = SLX + SNX
          STRX = RPGC(3,IZN)
          SGRX = RPGC(4,IZN)
          ESTX = MIN( MAX( (STX-STRX)/(1.D+0-STRX-SGRX),0.D+0 ),1.D+0 )
          VARX = (1.D+0-ESTX)**RPGC(2,IZN)
          RKGX = RPGC(1,IZN)*VARX/
     &      (VARX + RPGC(5,IZN)*(ESTX**RPGC(6,IZN)))
!
!---    Unrecognized gas relative permeability submodel  ---
!
        ELSE
          CHMSG = 'Unrecognized Gas Relative Permeability' //
     &        ' Submodel: IRPG(IZN) = '
          INDX = 12
          IMSG = IRPG(IZN)
          CALL WRMSGS( INDX )
        ENDIF
!
!---  Stone-II 3-phase relative permeability model  ---
!
      ELSEIF( IRPN(IZN).EQ.2 ) THEN
!
!---    Corey submodel  ---
!
        IF( MOD(IRPG(IZN),10).EQ.1 ) THEN
          STX = SLX + SNX
          STRX = RPGC(3,IZN)
          SGRX = RPGC(4,IZN)
          ESTX = MIN( MAX( (STX-STRX)/(1.D+0-STRX-SGRX),0.D+0 ),1.D+0 )
          RKGX = RPGC(1,IZN)*((1.D+0-ESTX)**RPGC(2,IZN))
!
!---    LET submodel  ---
!
        ELSEIF( MOD(IRPG(IZN),10).EQ.2 ) THEN
          STX = SLX + SNX
          STRX = RPGC(3,IZN)
          SGRX = RPGC(4,IZN)
          ESTX = MIN( MAX( (STX-STRX)/(1.D+0-STRX-SGRX),0.D+0 ),1.D+0 )
          VARX = (1.D+0-ESTX)**RPGC(2,IZN)
          RKGX = RPGC(1,IZN)*VARX/
     &      (VARX + RPGC(5,IZN)*(ESTX**RPGC(6,IZN)))
!
!---    Unrecognized gas relative permeability submodel  ---
!
        ELSE
          CHMSG = 'Unrecognized Gas Relative Permeability' //
     &        ' Submodel: IRPG(IZN) = '
          INDX = 12
          IMSG = IRPG(IZN)
          CALL WRMSGS( INDX )
        ENDIF
!
!---  Baker 3-phase relative permeability model  ---
!
      ELSEIF( IRPN(IZN).EQ.3 ) THEN
!
!---    Corey submodel  ---
!
        IF( MOD(IRPG(IZN),10).EQ.1 ) THEN
          STX = SLX + SNX
          STRX = RPGC(3,IZN)
          SGRX = RPGC(4,IZN)
          ESTX = MIN( MAX( (STX-STRX)/(1.D+0-STRX-SGRX),0.D+0 ),1.D+0 )
          RKGX = RPGC(1,IZN)*((1.D+0-ESTX)**RPGC(2,IZN))
!
!---    LET submodel  ---
!
        ELSEIF( MOD(IRPG(IZN),10).EQ.2 ) THEN
          STX = SLX + SNX
          STRX = RPGC(3,IZN)
          SGRX = RPGC(4,IZN)
          ESTX = MIN( MAX( (STX-STRX)/(1.D+0-STRX-SGRX),0.D+0 ),1.D+0 )
          VARX = (1.D+0-ESTX)**RPGC(2,IZN)
          RKGX = RPGC(1,IZN)*VARX/
     &      (VARX + RPGC(5,IZN)*(ESTX**RPGC(6,IZN)))
!
!---    Unrecognized gas relative permeability submodel  ---
!
        ELSE
          CHMSG = 'Unrecognized Gas Relative Permeability' //
     &        ' Submodel: IRPG(IZN) = '
          INDX = 12
          IMSG = IRPG(IZN)
          CALL WRMSGS( INDX )
        ENDIF
!
!---  Unrecognized 3-Phase relative permeability model  ---
!
      ELSE
        CHMSG = 'Unrecognized 3-Phase Relative Permeability' //
     &      ' Model: IRPN(IZN) = '
        INDX = 12
        IMSG = IRPN(IZN)
        CALL WRMSGS( INDX )
      ENDIF
      RKGX = MAX( RKGX,0.D+0 )
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of RKG_EOR group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE RKL_EOR( RKLX,SLX,IZN )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Aqueous relative permeability
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, March 17, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PORMED
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 RKLX(3)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//RKL_EOR'
!
!---  Stone-I 3-phase relative permeability model  ---
!
      IF( IRPN(IZN).EQ.1 ) THEN
!
!---    Corey aqueous relative permeability vs
!       aqueous saturaton submodel  ---
!
        IF( MOD(IRPL(IZN),10).EQ.1 ) THEN
          SLRX = RPLC(3,IZN)
          SNRX = RPLC(4,IZN)
          ESLX = MIN( MAX( (SLX-SLRX)/(1.D+0-SLRX-SNRX),0.D+0 ),1.D+0 )
          RKLX(1) = RPLC(1,IZN)*(ESLX**RPLC(2,IZN))
!
!---    LET aqueous relative permeability vs
!       aqueous saturaton submodel  ---
!
        ELSEIF( MOD(IRPL(IZN),10).EQ.2 ) THEN
          SLRX = RPLC(3,IZN)
          SNRX = RPLC(4,IZN)
          ESLX = MIN( MAX( (SLX-SLRX)/(1.D+0-SLRX-SNRX),0.D+0 ),1.D+0 )
          VARX = ESLX**RPLC(2,IZN)
          RKLX(1) = RPLC(1,IZN)*VARX/
     &      (VARX + RPLC(5,IZN)*((1.D+0-ESLX)**RPLC(6,IZN)))
!
!---    Unrecognized aqueous relative permeability submodel  ---
!
        ELSE
          CHMSG = 'Unrecognized Aqueous Relative Permeability' //
     &        ' Submodel: IRPL(IZN) = '
          INDX = 12
          IMSG = IRPL(IZN)
          CALL WRMSGS( INDX )
        ENDIF
!
!---  Stone-II 3-phase relative permeability model  ---
!
      ELSEIF( IRPN(IZN).EQ.2 ) THEN
!
!---    Corey aqueous relative permeability vs
!       aqueous saturaton submodel  ---
!
        IF( MOD(IRPL(IZN),10).EQ.1 ) THEN
          SLRX = RPLC(3,IZN)
          SNRX = RPLC(4,IZN)
          ESLX = MIN( MAX( (SLX-SLRX)/(1.D+0-SLRX-SNRX),0.D+0 ),1.D+0 )
          RKLX(1) = RPLC(1,IZN)*(ESLX**RPLC(2,IZN))
!
!---    LET aqueous relative permeability vs
!       aqueous saturaton submodel  ---
!
        ELSEIF( MOD(IRPL(IZN),10).EQ.2 ) THEN
          SLRX = RPLC(3,IZN)
          SNRX = RPLC(4,IZN)
          ESLX = MIN( MAX( (SLX-SLRX)/(1.D+0-SLRX-SNRX),0.D+0 ),1.D+0 )
          VARX = ESLX**RPLC(2,IZN)
          RKLX(1) = RPLC(1,IZN)*VARX/
     &      (VARX + RPLC(5,IZN)*((1.D+0-ESLX)**RPLC(6,IZN)))
!
!---    Unrecognized aqueous relative permeability submodel  ---
!
        ELSE
          CHMSG = 'Unrecognized Aqueous Relative Permeability' //
     &        ' Submodel: IRPL(IZN) = '
          INDX = 12
          IMSG = IRPL(IZN)
          CALL WRMSGS( INDX )
        ENDIF
!
!---  Baker 3-phase relative permeability model  ---
!
      ELSEIF( IRPN(IZN).EQ.3 ) THEN
!
!---    Corey aqueous relative permeability vs
!       aqueous saturaton submodel  ---
!
        IF( MOD(IRPL(IZN),10).EQ.1 ) THEN
          SLRX = RPLC(3,IZN)
          SNRX = RPLC(4,IZN)
          ESLX = MIN( MAX( (SLX-SLRX)/(1.D+0-SLRX-SNRX),0.D+0 ),1.D+0 )
          RKLX(1) = RPLC(1,IZN)*(ESLX**RPLC(2,IZN))
!
!---    LET aqueous relative permeability vs
!       aqueous saturaton submodel  ---
!
        ELSEIF( MOD(IRPL(IZN),10).EQ.2 ) THEN
          SLRX = RPLC(3,IZN)
          SNRX = RPLC(4,IZN)
          ESLX = MIN( MAX( (SLX-SLRX)/(1.D+0-SLRX-SNRX),0.D+0 ),1.D+0 )
          VARX = ESLX**RPLC(2,IZN)
          RKLX(1) = RPLC(1,IZN)*VARX/
     &      (VARX + RPLC(5,IZN)*((1.D+0-ESLX)**RPLC(6,IZN)))
!
!---    Unrecognized aqueous relative permeability submodel  ---
!
        ELSE
          CHMSG = 'Unrecognized Aqueous Relative Permeability' //
     &        ' Submodel: IRPL(IZN) = '
          INDX = 12
          IMSG = IRPL(IZN)
          CALL WRMSGS( INDX )
        ENDIF
!
!---  Unrecognized 3-phase permeability model  ---
!
      ELSE
        CHMSG = 'Unrecognized 3-Phase Relative Permeability' //
     &      ' Model: IRPN(IZN) = '
        INDX = 12
        IMSG = IRPN(IZN)
        CALL WRMSGS( INDX )
      ENDIF
!
!---  End of RKL_EOR group  ---
!
      RKLX(1) = MAX( RKLX(1),0.D+0 )
      RKLX(2) = MAX( RKLX(1),0.D+0 )
      RKLX(3) = MAX( RKLX(1),0.D+0 )
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of RKL_EOR group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE RKN_EOR( RKGX,RKLX,RKNX,SGX,SLX,SNX,IZN )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Nonaqueous-liquid relative permeability
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, March 17, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PORMED
      USE GLB_PAR
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 RKLX(3)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//RKN_EOR'
!
!---  Stone-I 3-phase relative permeability model  ---
!
      IF( IRPN(IZN).EQ.1 ) THEN
!
!---    Nonaqueous liquid-gas Corey submodel  ---
!
        IF( IRPG(IZN)/10.EQ.1 ) THEN
          STX = SLX + SNX
          STRX = RPNC(3,IZN)
          SGRX = RPNC(4,IZN)
          ESTX = MIN( MAX( (STX-STRX)/(1.D+0-STRX-SGRX),0.D+0 ),1.D+0 )
          RKNGX = RPNC(1,IZN)*(ESTX**RPNC(2,IZN))
!
!---    Nonaqueous liquid-gas LET submodel  ---
!
        ELSEIF( IRPG(IZN)/10.EQ.2 ) THEN
          STX = SLX + SNX
          STRX = RPNC(3,IZN)
          SGRX = RPNC(4,IZN)
          ESTX = MIN( MAX( (STX-STRX)/(1.D+0-STRX-SGRX),0.D+0 ),1.D+0 )
          VARX = ESTX**RPNC(2,IZN)
          RKNGX = RPNC(1,IZN)*VARX/
     &      (VARX + RPNC(5,IZN)*((1.D+0-ESTX)**RPNC(6,IZN)))
!
!---    Unrecognized nonaqueous liquid-gas rel. perm. submodel  ---
!
        ELSE
          CHMSG = 'Unrecognized Nonaqueous Liquid-Gas Relative' //
     &        ' Permeability Submodel: IRPG(IZN)/10 = '
          INDX = 12
          IMSG = IRPG(IZN)/10
          CALL WRMSGS( INDX )
        ENDIF
!
!---    Nonaqueous liquid-aqueous Corey submodel  ---
!
        IF( IRPL(IZN)/10.EQ.1 ) THEN
          SLRX = RPLC(9,IZN)
          SNRX = RPLC(10,IZN)
          ESLX = MIN( MAX( (SLX-SLRX)/(1.D+0-SLRX-SNRX),0.D+0 ),1.D+0 )
          RKNLX = RPLC(7,IZN)*((1.D+0-ESLX)**RPLC(8,IZN))
!
!---    Nonaqueous liquid-aqueous LET submodel  ---
!
        ELSEIF( IRPL(IZN)/10.EQ.2 ) THEN
          SLRX = RPLC(9,IZN)
          SNRX = RPLC(10,IZN)
          ESLX = MIN( MAX( (SLX-SLRX)/(1.D+0-SLRX-SNRX),0.D+0 ),1.D+0 )
          VARX = (1.D+0-ESLX)**RPLC(8,IZN)
          RKNLX = RPLC(7,IZN)*VARX/
     &      (VARX + RPLC(11,IZN)*(ESTX**RPLC(12,IZN)))
!
!---    Unrecognized nonaqueous liquid-gas rel. perm. submodel  ---
!
        ELSE
          CHMSG = 'Unrecognized Nonaqueous Liquid-Gas Relative' //
     &        ' Permeability Submodel: IRPG(IZN)/10 = '
          INDX = 12
          IMSG = IRPG(IZN)/10
          CALL WRMSGS( INDX )
        ENDIF
        SNMX = MIN( SLRX/3.D+0,SLRX,STRX )
        SNSX = MAX( MIN( (SNX-SNMX)/(1.D+0-SLRX-SNMX),1.D+0 ),0.D+0 )
        SLSX = MAX( MIN( (SLX-SLRX)/(1.D+0-SLRX-SNMX),1.D+0 ),0.D+0 )
        SGSX = MAX( MIN( SGX/(1.D+0-SLRX-SNMX),1.D+0 ),0.D+0 )
        VARX = ((1.D+0-SLSX)*(1.D+0-SGSX)*RPLC(7,IZN))
        IF( SNSX.LT.EPSL .OR. VARX.LT.EPSL ) THEN
          RKNX = 0.D+0
        ELSE
          RKNX = SNSX*RKNLX*RKNGX/((1.D+0-SLSX)*(1.D+0-SGSX)*
     &      RPLC(7,IZN))
        ENDIF
!
!---  Stone-II 3-phase relative permeability model  ---
!
      ELSEIF( IRPN(IZN).EQ.2 ) THEN
!
!---    Nonaqueous liquid-gas Corey submodel  ---
!
        IF( IRPG(IZN)/10.EQ.1 ) THEN
          STX = SLX + SNX
          STRX = RPNC(3,IZN)
          SGRX = RPNC(4,IZN)
          ESTX = MIN( MAX( (STX-STRX)/(1.D+0-STRX-SGRX),0.D+0 ),1.D+0 )
          RKNGX = RPNC(1,IZN)*(ESTX**RPNC(2,IZN))
!
!---    Nonaqueous liquid-gas LET submodel  ---
!
        ELSEIF( IRPG(IZN)/10.EQ.2 ) THEN
          STX = SLX + SNX
          STRX = RPNC(3,IZN)
          SGRX = RPNC(4,IZN)
          ESTX = MIN( MAX( (STX-STRX)/(1.D+0-STRX-SGRX),0.D+0 ),1.D+0 )
          VARX = ESTX**RPNC(2,IZN)
          RKNGX = RPNC(1,IZN)*VARX/
     &      (VARX + RPNC(5,IZN)*((1.D+0-ESTX)**RPNC(6,IZN)))
!
!---    Unrecognized nonaqueous liquid-gas rel. perm. submodel  ---
!
        ELSE
          CHMSG = 'Unrecognized Nonaqueous Liquid-Gas Relative' //
     &        ' Permeability Submodel: IRPG(IZN)/10 = '
          INDX = 12
          IMSG = IRPG(IZN)/10
          CALL WRMSGS( INDX )
        ENDIF
!
!---    Nonaqueous liquid-aqueous Corey submodel  ---
!
        IF( IRPL(IZN)/10.EQ.1 ) THEN
          SLRX = RPLC(9,IZN)
          SNRX = RPLC(10,IZN)
          ESLX = MIN( MAX( (SLX-SLRX)/(1.D+0-SLRX-SNRX),0.D+0 ),1.D+0 )
          RKNLX = RPLC(7,IZN)*((1.D+0-ESLX)**RPLC(8,IZN))
!
!---    Nonaqueous liquid-aqueous LET submodel  ---
!
        ELSEIF( IRPL(IZN)/10.EQ.2 ) THEN
          SLRX = RPLC(9,IZN)
          SNRX = RPLC(10,IZN)
          ESLX = MIN( MAX( (SLX-SLRX)/(1.D+0-SLRX-SNRX),0.D+0 ),1.D+0 )
          VARX = (1.D+0-ESLX)**RPLC(8,IZN)
          RKNLX = RPLC(7,IZN)*VARX/
     &      (VARX + RPLC(11,IZN)*(ESTX**RPLC(12,IZN)))
!
!---    Unrecognized nonaqueous liquid-gas rel. perm. submodel  ---
!
        ELSE
          CHMSG = 'Unrecognized Nonaqueous Liquid-Gas Relative' //
     &        ' Permeability Submodel: IRPG(IZN)/10 = '
          INDX = 12
          IMSG = IRPG(IZN)/10
          CALL WRMSGS( INDX )
        ENDIF
        IF( RPLC(7,IZN).LT.EPSL ) THEN
          RKNX = 0.D+0
        ELSE
          RKNX = RPLC(7,IZN)*(((RKNLX/RPLC(7,IZN))+RKLX(1))*
     &      ((RKNGX/RPLC(7,IZN))+RKGX) - (RKLX(1)+RKGX))
        ENDIF
!
!---  Baker 3-phase relative permeability model  ---
!
      ELSEIF( IRPN(IZN).EQ.3 ) THEN
!
!---    Nonaqueous liquid-gas Corey submodel  ---
!
        IF( IRPG(IZN)/10.EQ.1 ) THEN
          STX = SLX + SNX
          STRX = RPNC(3,IZN)
          SGRX = RPNC(4,IZN)
          ESTX = MIN( MAX( (STX-STRX)/(1.D+0-STRX-SGRX),0.D+0 ),1.D+0 )
          RKNGX = RPNC(1,IZN)*(ESTX**RPNC(2,IZN))
!
!---    Nonaqueous liquid-gas LET submodel  ---
!
        ELSEIF( IRPG(IZN)/10.EQ.2 ) THEN
          STX = SLX + SNX
          STRX = RPNC(3,IZN)
          SGRX = RPNC(4,IZN)
          ESTX = MIN( MAX( (STX-STRX)/(1.D+0-STRX-SGRX),0.D+0 ),1.D+0 )
          VARX = ESTX**RPNC(2,IZN)
          RKNGX = RPNC(1,IZN)*VARX/
     &      (VARX + RPNC(5,IZN)*((1.D+0-ESTX)**RPNC(6,IZN)))
!
!---    Unrecognized nonaqueous liquid-gas rel. perm. submodel  ---
!
        ELSE
          CHMSG = 'Unrecognized Nonaqueous Liquid-Gas Relative' //
     &        ' Permeability Submodel: IRPG(IZN)/10 = '
          INDX = 12
          IMSG = IRPG(IZN)/10
          CALL WRMSGS( INDX )
        ENDIF
!
!---    Nonaqueous liquid-aqueous Corey submodel  ---
!
        IF( IRPL(IZN)/10.EQ.1 ) THEN
          SLRX = RPLC(9,IZN)
          SNRX = RPLC(10,IZN)
          ESLX = MIN( MAX( (SLX-SLRX)/(1.D+0-SLRX-SNRX),0.D+0 ),1.D+0 )
          RKNLX = RPLC(7,IZN)*((1.D+0-ESLX)**RPLC(8,IZN))
!
!---    Nonaqueous liquid-aqueous LET submodel  ---
!
        ELSEIF( IRPL(IZN)/10.EQ.2 ) THEN
          SLRX = RPLC(9,IZN)
          SNRX = RPLC(10,IZN)
          ESLX = MIN( MAX( (SLX-SLRX)/(1.D+0-SLRX-SNRX),0.D+0 ),1.D+0 )
          VARX = (1.D+0-ESLX)**RPLC(8,IZN)
          RKNLX = RPLC(7,IZN)*VARX/
     &      (VARX + RPLC(11,IZN)*(ESTX**RPLC(12,IZN)))
!
!---    Unrecognized nonaqueous liquid-gas rel. perm. submodel  ---
!
        ELSE
          CHMSG = 'Unrecognized Nonaqueous Liquid-Gas Relative' //
     &        ' Permeability Submodel: IRPG(IZN)/10 = '
          INDX = 12
          IMSG = IRPG(IZN)/10
          CALL WRMSGS( INDX )
        ENDIF
        DSLX = MAX((SLX-SLRX),0.D+0)
        DSGX = MAX((SGX-SGRX),0.D+0)
        IF( (DSLX+DSGX).GT.EPSL ) THEN
          RKNX = (DSLX*RKNLX + DSGX*RKNGX)/(DSLX+DSGX)
        ELSE
          RKNX = 5.D-1*(RKNLX+RKNGX)
        ENDIF
!
!---  Unrecognized 3-Phase relative permeability model  ---
!
      ELSE
        CHMSG = 'Unrecognized 3-Phase Relative Permeability' //
     &      ' Model: IRPN(IZN) = '
        INDX = 12
        IMSG = IRPN(IZN)
        CALL WRMSGS( INDX )
      ENDIF
      RKNX = MAX( RKNX,0.D+0 )
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of RKN_EOR group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE RSDL_BO
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Compute the maximum relative residuals for the black-oil option
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, 3 June 2014
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PORMED
      USE OUTPU
      USE JACOB
      USE HYST
      USE GRID
      USE GLB_PAR
      USE GEOM_FRC
      USE FILES
      USE FDVS_FRC
      USE FDVS
      USE FDVP_FRC
      USE FDVP
      USE FDVGC_FRC
      USE FDVGC
      USE COUP_WELL
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      CHARACTER*128 PH_CND(5)
      REAL*8 DPC(LNGC)
      INTEGER MPC(LNGC)
!
!----------------------Data Statements---------------------------------!
!
      SAVE PH_CND
      DATA PH_CND /'Phase Condition #1, SL = 1.0, SG+SN = 0.0',
     &  'Phase Condition #2, SL < 1.0, ST > 0.0, SG = 0.0',
     &  'Phase Condition #3, SL < 1.0, ST > 0.0, SG > 0.0',
     &  'Phase Condition #4, SL = 0.0, ST = 1.0, SG = 0.0',
     &  'Phase Condition #5, SL = 0.0, ST = 1.0, SG > 0.0'/
!
!----------------------Executable Lines--------------------------------!
!
      IF( ICNV.EQ.1 .OR. ICNV.EQ.4 ) RETURN
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//RSDL_BO'
!
!---  Zero maximum residuals  ---
!
      DO M = 1,ISVC
        RSD(M) = 0.D+0
        NSD(M) = 0
      ENDDO
!
!---  Update primary variables
!
      DO N = 1,NFBN
        N_DB = N
        IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) CYCLE
        NMD = IXP(N)
        IZN = IZ(N)
!
!---    Water mass equation  ---
!
        MPW = IM(IEQW,NMD)
        DPW = BLU(MPW)
!
!---    Gas mass equation  ---
!
        MPC(1) = IM(IEQGC(1),NMD)
        DPC(1) = BLU(MPC(1))
!
!---    Oil mass equation  ---
!
        MPC(2) = IM(IEQGC(2),NMD)
        DPC(2) = BLU(MPC(2))
!
!---    Salt mass equation  ---
!
        IF( ISLC(32).EQ.0 ) THEN
          MPS = IM(IEQS,NMD)
          DPS = BLU(MPS)
        ELSE
          DPS = 0.D+0
        ENDIF
!
!---    Skip selected nodes in the residual calculation  ---
!
        IF( ISKP(IZN).EQ.1 ) CYCLE
!
!---    Absolute system pressure  ---
!
        PX = PSO(2,N) + PATM
!
!---    Phase condition #1  ---
!
!       SL = 1.0
!       SG+SN = 0.0
!       Aqueuous saturated
!
!       water mass - aqueous (system) pressure, Pa gauge - PL,PSO
!       gas mass - total gas mass - TMC(1,2,N)
!       oil mass - total oil mass - TMC(2,2,N)
!       salt mass - total salt brine mass fraction - YLS
!
        IF( MOD(NPHAZ(2,N),10).EQ.1 ) THEN
!
!---      Water mass equation residual  ---
!
          ACP = PORD(2,N)*(RHOL(2,N)*SL(2,N)*XLW(2,N) +
     &      RHOG(2,N)*SG(2,N)*XGW(2,N))*DTI*VOL(N)
          RSDX = MIN( ABS(DPW)/PX,
     &      ABS(RSDL(IEQW,N)/(ACP+SMALL)) )
          IF( RSDX.GT.RSD(IEQW) ) THEN
            RSD(IEQW) = RSDX
            NSD(IEQW) = N
          ENDIF
!
!---      Gas mass equation residual  ---
!
          ACP = PORD(2,N)*(RHOG(2,N)*SG(2,N)*XGC(1,2,N) +
     &      RHON(2,N)*SN(2,N)*XNC(1,2,N))*DTI*VOL(N)
          RSDX = MIN( ABS(DPC(1))/PX,
     &      ABS(RSDL(IEQGC(1),N)/(ACP+SMALL)) )
          IF( RSDX.GT.RSD(IEQGC(1)) ) THEN
            RSD(IEQGC(1)) = RSDX
            NSD(IEQGC(1)) = N
          ENDIF
!
!---      Oil mass equation residual  ---
!
          ACP = PORD(2,N)*(RHON(2,N)*SN(2,N)*XNC(2,2,N))*DTI*VOL(N)
          RSDX = MIN( ABS(DPC(2))/PX,
     &      ABS(RSDL(IEQGC(2),N)/(ACP+SMALL)) )
          IF( RSDX.GT.RSD(IEQGC(2)) ) THEN
            RSD(IEQGC(2)) = RSDX
            NSD(IEQGC(2)) = N
          ENDIF
!
!---      Salt mass equation residual  ---
!
          IF( ISLC(32).EQ.0 ) THEN
            ACP = TMS(2,N)*DTI*VOL(N)
            CALL SOL_LS( T(2,N),XLSMX )
            RSDX = MIN( (ABS(DPS)/XLSMX),
     &        ABS(RSDL(IEQS,N)/(ACP+SMALL)) )
            RSDX = RSDX*1.D-1
            IF( RSDX.GT.RSD(IEQS) ) THEN
              RSD(IEQS) = RSDX
              NSD(IEQS) = N
            ENDIF
          ENDIF
!
!---    Phase condition #2  ---
!
!       SG = 0.0
!       SL > 0.0
!       SN > 0.0
!       Aqueous and nonaqueous liquid saturated
!
!       water mass - aqueous saturation, SL
!       gas mass - gas to oil ratio, POSM
!       oil mass - nonaqueous (system) pressure, Pa gauge - PN,PSO
!       salt mass - total salt brine mass fraction - YLS
!
        ELSEIF( MOD(NPHAZ(2,N),10).EQ.2 ) THEN
!
!---      Water mass equation residual  ---
!
          ACP = PORD(2,N)*(RHOL(2,N)*SL(2,N)*XLW(2,N) +
     &      RHOG(2,N)*SG(2,N)*XGW(2,N))*DTI*VOL(N)
          RSDX = MIN( ABS(DPW),
     &      ABS(RSDL(IEQW,N)/(ACP+SMALL)) )
          IF( RSDX.GT.RSD(IEQW) ) THEN
            RSD(IEQW) = RSDX
            NSD(IEQW) = N
          ENDIF
!
!---      Gas mass equation residual  ---
!
          ACP = PORD(2,N)*(RHOG(2,N)*SG(2,N)*XGC(1,2,N) +
     &      RHON(2,N)*SN(2,N)*XNC(1,2,N))*DTI*VOL(N)
          RSDX = MIN( ABS(DPC(1)),
     &      ABS(RSDL(IEQGC(1),N)/(ACP+SMALL)) )
          IF( RSDX.GT.RSD(IEQGC(1)) ) THEN
            RSD(IEQGC(1)) = RSDX
            NSD(IEQGC(1)) = N
          ENDIF
!
!---      Oil mass equation residual  ---
!
          ACP = PORD(2,N)*(RHON(2,N)*SN(2,N)*XNC(2,2,N))*DTI*VOL(N)
          RSDX = MIN( ABS(DPC(2))/PX,
     &      ABS(RSDL(IEQGC(2),N)/(ACP+SMALL)) )
          IF( RSDX.GT.RSD(IEQGC(2)) ) THEN
            RSD(IEQGC(2)) = RSDX
            NSD(IEQGC(2)) = N
          ENDIF
!
!---      Salt mass equation residual  ---
!
          IF( ISLC(32).EQ.0 ) THEN
            ACP = TMS(2,N)*DTI*VOL(N)
            CALL SOL_LS( T(2,N),XLSMX )
            RSDX = MIN( (ABS(DPS)/XLSMX),
     &        ABS(RSDL(IEQS,N)/(ACP+SMALL)) )
            RSDX = RSDX*1.D-1
            IF( RSDX.GT.RSD(IEQS) ) THEN
              RSD(IEQS) = RSDX
              NSD(IEQS) = N
            ENDIF
          ENDIF
!
!---    Phase condition #3  ---
!
!       SG > 0.0
!       SL > 0.0
!       SN > 0.0
!       Three-phase
!
!       water mass - aqueous saturation, SL
!       gas mass - gas saturation, SG
!       oil mass - gas (system) pressure, Pa gauge - PG,PSO
!       salt mass - total salt brine mass fraction - YLS
!
        ELSEIF( MOD(NPHAZ(2,N),10).EQ.3 ) THEN
!
!---      Water mass equation residual  ---
!
          ACP = PORD(2,N)*(RHOL(2,N)*SL(2,N)*XLW(2,N) +
     &      RHOG(2,N)*SG(2,N)*XGW(2,N))*DTI*VOL(N)
          RSDX = MIN( ABS(DPW),
     &      ABS(RSDL(IEQW,N)/(ACP+SMALL)) )
          IF( RSDX.GT.RSD(IEQW) ) THEN
            RSD(IEQW) = RSDX
            NSD(IEQW) = N
          ENDIF
!
!---      Gas mass equation residual  ---
!
          ACP = PORD(2,N)*(RHOG(2,N)*SG(2,N)*XGC(1,2,N) +
     &      RHON(2,N)*SN(2,N)*XNC(1,2,N))*DTI*VOL(N)
          RSDX = MIN( ABS(DPC(1))/PX,
     &      ABS(RSDL(IEQGC(1),N)/(ACP+SMALL)) )
          IF( RSDX.GT.RSD(IEQGC(1)) ) THEN
            RSD(IEQGC(1)) = RSDX
            NSD(IEQGC(1)) = N
          ENDIF
!
!---      Oil mass equation residual  ---
!
          ACP = PORD(2,N)*(RHON(2,N)*SN(2,N)*XNC(2,2,N))*DTI*VOL(N)
          RSDX = MIN( ABS(DPC(2)),
     &      ABS(RSDL(IEQGC(2),N)/(ACP+SMALL)) )
          IF( RSDX.GT.RSD(IEQGC(2)) ) THEN
            RSD(IEQGC(2)) = RSDX
            NSD(IEQGC(2)) = N
          ENDIF
!
!---      Salt mass equation residual  ---
!
          IF( ISLC(32).EQ.0 ) THEN
            ACP = TMS(2,N)*DTI*VOL(N)
            CALL SOL_LS( T(2,N),XLSMX )
            RSDX = MIN( (ABS(DPS)/XLSMX),
     &        ABS(RSDL(IEQS,N)/(ACP+SMALL)) )
            RSDX = RSDX*1.D-1
            IF( RSDX.GT.RSD(IEQS) ) THEN
              RSD(IEQS) = RSDX
              NSD(IEQS) = N
            ENDIF
          ENDIF
!
!---    Phase condition #4  ---
!
!       SG = 0.0
!       SL = 0.0
!       SN = 1.0
!       Nonaqueous liquid saturated
!
!       water mass - aqueous saturation, SL
!       gas mass - gas to oil ratio, POSM
!       oil mass - nonaqueous (system) pressure, Pa gauge - PN,PSO
!       salt mass - total salt mass - TMS(2,N)
!
        ELSEIF( MOD(NPHAZ(2,N),10).EQ.4 ) THEN
!
!---      Water mass equation residual  ---
!
          ACP = PORD(2,N)*(RHOL(2,N)*SL(2,N)*XLW(2,N) +
     &      RHOG(2,N)*SG(2,N)*XGW(2,N))*DTI*VOL(N)
          RSDX = MIN( ABS(DPW),
     &      ABS(RSDL(IEQW,N)/(ACP+SMALL)) )
          IF( RSDX.GT.RSD(IEQW) ) THEN
            RSD(IEQW) = RSDX
            NSD(IEQW) = N
          ENDIF
!
!---      Gas mass equation residual  ---
!
          ACP = PORD(2,N)*(RHOG(2,N)*SG(2,N)*XGC(1,2,N) +
     &      RHON(2,N)*SN(2,N)*XNC(1,2,N))*DTI*VOL(N)
          RSDX = MIN( ABS(DPC(1)),
     &      ABS(RSDL(IEQGC(1),N)/(ACP+SMALL)) )
          IF( RSDX.GT.RSD(IEQGC(1)) ) THEN
            RSD(IEQGC(1)) = RSDX
            NSD(IEQGC(1)) = N
          ENDIF
!
!---      Oil mass equation residual  ---
!
          ACP = PORD(2,N)*(RHON(2,N)*SN(2,N)*XNC(2,2,N))*DTI*VOL(N)
          RSDX = MIN( ABS(DPC(2))/PX,
     &      ABS(RSDL(IEQGC(2),N)/(ACP+SMALL)) )
          IF( RSDX.GT.RSD(IEQGC(2)) ) THEN
            RSD(IEQGC(2)) = RSDX
            NSD(IEQGC(2)) = N
          ENDIF
!
!---      Salt mass equation residual  ---
!
          IF( ISLC(32).EQ.0 ) THEN
            ACP = TMS(2,N)*DTI*VOL(N)
            RSDX = MIN( ABS(DPS),
     &        ABS(RSDL(IEQS,N)/(ACP+SMALL)) )
            RSDX = RSDX*1.D-1
            IF( RSDX.GT.RSD(IEQS) ) THEN
              RSD(IEQS) = RSDX
              NSD(IEQS) = N
            ENDIF
          ENDIF
!
!---    Phase condition #5  ---
!
!       SG > 0.0
!       SL = 0.0
!       SN > 0.0
!       Nonaqueous liquid and gas saturated
!
!       water mass - aqueous saturation, SL
!       gas mass - gas saturation, SG
!       oil mass - gas (system) pressure, Pa gauge - PG,PSO
!       salt mass - total salt mass - TMS(2,N)
!
        ELSEIF( MOD(NPHAZ(2,N),10).EQ.5 ) THEN
!
!---      Water mass equation residual  ---
!
          ACP = PORD(2,N)*(RHOL(2,N)*SL(2,N)*XLW(2,N) +
     &      RHOG(2,N)*SG(2,N)*XGW(2,N))*DTI*VOL(N)
          RSDX = MIN( ABS(DPW),
     &      ABS(RSDL(IEQW,N)/(ACP+SMALL)) )
          IF( RSDX.GT.RSD(IEQW) ) THEN
            RSD(IEQW) = RSDX
            NSD(IEQW) = N
          ENDIF
!
!---      Gas mass equation residual  ---
!
          ACP = PORD(2,N)*(RHOG(2,N)*SG(2,N)*XGC(1,2,N) +
     &      RHON(2,N)*SN(2,N)*XNC(1,2,N))*DTI*VOL(N)
          RSDX = MIN( ABS(DPC(1))/PX,
     &      ABS(RSDL(IEQGC(1),N)/(ACP+SMALL)) )
          IF( RSDX.GT.RSD(IEQGC(1)) ) THEN
            RSD(IEQGC(1)) = RSDX
            NSD(IEQGC(1)) = N
          ENDIF
!
!---      Oil mass equation residual  ---
!
          ACP = PORD(2,N)*(RHON(2,N)*SN(2,N)*XNC(2,2,N))*DTI*VOL(N)
          RSDX = MIN( ABS(DPC(2)),
     &      ABS(RSDL(IEQGC(2),N)/(ACP+SMALL)) )
          IF( RSDX.GT.RSD(IEQGC(2)) ) THEN
            RSD(IEQGC(2)) = RSDX
            NSD(IEQGC(2)) = N
          ENDIF
!
!---      Salt mass equation residual  ---
!
          IF( ISLC(32).EQ.0 ) THEN
            ACP = TMS(2,N)*DTI*VOL(N)
            RSDX = MIN( ABS(DPS),
     &        ABS(RSDL(IEQS,N)/(ACP+SMALL)) )
            RSDX = RSDX*1.D-1
            IF( RSDX.GT.RSD(IEQS) ) THEN
              RSD(IEQS) = RSDX
              NSD(IEQS) = N
            ENDIF
          ENDIF
        ENDIF
      ENDDO
!
!---  Assign a convergence index  ---
!
      RSDX = 0.D+0
      DO M = 1,ISVC
        RSDX = MAX( RSD(M),RSDX )
        IF( RSD(M).GT.RSDMX ) ICNV = 2
      ENDDO
      IF( ICNV.EQ.2 .AND. NITER.GE.NRIMX ) ICNV = 1
      IF( RSDX.GE.1.D+2 ) ICNV = 1
!
!---  Unconverged solution Newton-Raphson iteration limit exceeded  ---
!
      IF( ICNV.EQ.1 ) THEN
        IF( RSDX.GE.1.D+2 ) THEN
          WRITE(ISC,'(10X,A)') '---  Excessive Residual  ---'
          WRITE(IWR,'(10X,A)') '---  Excessive Residual  ---'
        ELSE
          WRITE(ISC,'(10X,A)') '---  Convergence Failure  ---'
          WRITE(IWR,'(10X,A)') '---  Convergence Failure  ---'
        ENDIF
!
!---    Water mass equation  ---
!
        NX = NSD(IEQW)
        IF( NX.GT.0 ) THEN
          NPX = NPHAZ(2,NX)
          NCHX = INDEX( PH_CND(NPX),'  ') - 1
          WRITE(ISC,'(4X,A,1PE11.4,A,I6,2A)')
     &      'Water Mass Equation Maximum Residual = ',RSD(IEQW),
     &      ': Node = ',NX,
     &      ': Phase Condition = ',PH_CND(NPX)(1:NCHX)
          WRITE(IWR,'(4X,A,1PE11.4,A,I6,2A)')
     &      'Water Mass Equation Maximum Residual = ',RSD(IEQW),
     &      ': Node = ',NX,
     &      ': Phase Condition = ',PH_CND(NPX)(1:NCHX)
        ENDIF
!
!---    Gas mass equation  ---
!
        NX = NSD(IEQGC(1))
        IF( NX.GT.0 ) THEN
          NPX = NPHAZ(2,NX)
          NCAX = INDEX( PH_CND(NPX),'  ') - 1
          WRITE(ISC,'(4X,A,1PE11.4,A,I6,2A)')
     &      'Gas Mass Equation Maximum Residual = ',
     &      RSD(IEQGC(1)),': Node = ',NX,
     &      ': Phase Condition = ',PH_CND(NPX)(1:NCAX)
          WRITE(IWR,'(4X,A,1PE11.4,A,I6,2A)')
     &      'Gas Mass Equation Maximum Residual = ',
     &      RSD(IEQGC(1)),': Node = ',NX,
     &      ': Phase Condition = ',PH_CND(NPX)(1:NCAX)
        ENDIF
!
!---    Oil mass equation  ---
!
        NX = NSD(IEQGC(2))
        IF( NX.GT.0 ) THEN
          NPX = NPHAZ(2,NX)
          NCAX = INDEX( PH_CND(NPX),'  ') - 1
          WRITE(ISC,'(4X,A,1PE11.4,A,I6,2A)')
     &      'Oil Mass Equation Maximum Residual = ',
     &      RSD(IEQGC(2)),': Node = ',NX,
     &      ': Phase Condition = ',PH_CND(NPX)(1:NCAX)
          WRITE(IWR,'(4X,A,1PE11.4,A,I6,2A)')
     &      'Oil Mass Equation Maximum Residual = ',
     &      RSD(IEQGC(2)),': Node = ',NX,
     &      ': Phase Condition = ',PH_CND(NPX)(1:NCAX)
        ENDIF
!
!---    Isobrine option  ---
!
        IF( ISLC(32).EQ.0 ) THEN
          NX = NSD(IEQS)
          IF( NX.GT.0 ) THEN
            NPX = MOD(NPHAZ(2,NX),100)+1
            NCHX = INDEX( PH_CND(NPX),'  ') - 1
            WRITE(ISC,'(4X,A,1PE11.4,A,I6,2A)')
     &        'Salt Equation Maximum Residual = ',RSD(IEQS),
     &        ': Node = ',NX,
     &        ': Phase Condition = ',PH_CND(NPX)(1:NCHX)
            WRITE(IWR,'(4X,A,1PE11.4,A,I6,2A)')
     &        'Salt Equation Maximum Residual = ',RSD(IEQS),
     &         ': Node = ',NX,
     &        ': Phase Condition = ',PH_CND(NPX)(1:NCHX)
          ENDIF
        ENDIF
!
!---  Reduce time step  ---
!
        IF( NTSR.LT.4 .OR. (DTCF*DT).GT.DTMN ) THEN
          NTSR = NTSR + 1
          DTX = DT
          TM = TM - (1.D+0-DTCF)*DT
          DT = DTCF*DT
          DTO = DT
          DTI = 1.D+0/DT
          VAR = DT
          VARX = DTX
          IF( UNTM.NE.'null' ) THEN
            INDX = 1
            IUNS = 1
            CALL RDUNIT(UNTM,VAR,INDX)
            IUNS = 1
            CALL RDUNIT(UNTM,VARX,INDX)
            NCH = INDEX( UNTM,'  ')-1
          ENDIF
          WRITE(ISC,'(4X,A,1PE11.4,1X,2A,1PE11.4,1X,A)')
     &      'Time Step Reduced From ',VARX,UNTM(1:NCH),' to ',
     &      VAR,UNTM(1:NCH)
          WRITE(IWR,'(4X,A,1PE11.4,1X,2A,1PE11.4,1X,A)')
     &      'Time Step Reduced From ',VARX,UNTM(1:NCH),' to ',
     &      VAR,UNTM(1:NCH)
          DO N = 1,NFBN
            IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) CYCLE
            T(2,N) = T(1,N)
            PL(2,N) = PL(1,N)
            PG(2,N) = PG(1,N)
            PN(2,N) = PN(1,N)
            POSM(2,N) = POSM(1,N)
            PSO(2,N) = PSO(1,N)
            SG(2,N) = SG(1,N)
            SL(2,N) = SL(1,N)
            SN(2,N) = SN(1,N)
            YLS(2,N) = YLS(1,N)
            TMS(2,N) = TMS(1,N)
            NPHAZ(2,N) = NPHAZ(1,N)
            DO IGC = 1,NGC+2
              TMC(IGC,2,N) = TMC(IGC,1,N)
            ENDDO
          ENDDO
!
!---      Coupled-well pressure  ---
!
          DO NCW = 1,N_CW
            P_CW(2,NCW) = P_CW(1,NCW)
          ENDDO
          NITER = 1
!
!---      Fault flow and transport solution  ---
!
          IF( ISLC(74).EQ.1 .OR. ISLC(74).EQ.3 ) THEN
!
!---        Loop over faults  ---
!
            DO NFX = 1,NF_FRC
!
!---        Loop over fracture triangles  ---
!
            DO NTX = IP_FRC(1,NFX),IP_FRC(2,NFX)
!
!---          Skip inactive triangles  ---
!
              IF( IXP_FRC(NTX).EQ.0 ) CYCLE
              T_FRC(2,NTX) = T_FRC(1,NTX)
              PL_FRC(2,NTX) = PL_FRC(1,NTX)
              PG_FRC(2,NTX) = PG_FRC(1,NTX)
              PN_FRC(2,NTX) = PN_FRC(1,NTX)
              POSM_FRC(2,NTX) = POSM_FRC(1,NTX)
              PSO_FRC(2,NTX) = PSO_FRC(1,NTX)
              SG_FRC(2,NTX) = SG_FRC(1,NTX)
              SL_FRC(2,NTX) = SL_FRC(1,NTX)
              SN_FRC(2,NTX) = SN_FRC(1,NTX)
              YLS_FRC(2,NTX) = YLS_FRC(1,NTX)
              TMS_FRC(2,NTX) = TMS_FRC(1,NTX)
              NPHAZ_FRC(2,NTX) = NPHAZ_FRC(1,NTX)
              DO IGC = 1,NGC+2
                TMC_FRC(IGC,2,NTX) = TMC_FRC(IGC,1,NTX)
              ENDDO
            ENDDO
            ENDDO
          ENDIF
!
!---  Number of time step reductions failure: stop simulation  ---
!
        ELSE
          WRITE(ISC,'(10X,A)') '---  Time Step Reduction Limit Exceeded
     & ---'
          WRITE(IWR,'(10X,A)') '---  Time Step Reduction Limit Exceeded
     & ---'
          ICNV = 4
        ENDIF
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of RSDL_BO group
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE RSDL_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Compute the maximum relative residuals
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, September 24, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PORMED
      USE OUTPU
      USE JACOB
      USE HYST
      USE GRID
      USE GLB_PAR
      USE GEOM_FRC
      USE FILES
      USE FDVS_FRC
      USE FDVS
      USE FDVP_FRC
      USE FDVP
      USE FDVGC_FRC
      USE FDVGC
      USE COUP_WELL
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      CHARACTER*128 PH_CND(5)
      REAL*8 DPC(LNGC)
      INTEGER MPC(LNGC)
!
!----------------------Data Statements---------------------------------!
!
      DATA PH_CND /'Phase Condition #1, SL = 1.0, SG+SN = 0.0',
     &  'Phase Condition #2, SL < 1.0, ST > 0.0, SG = 0.0',
     &  'Phase Condition #3, SL < 1.0, ST > 0.0, SG > 0.0',
     &  'Phase Condition #4, SL = 0.0, ST = 1.0, SG = 0.0',
     &  'Phase Condition #5, SL = 0.0, ST = 1.0, SG > 0.0'/
!
!----------------------Executable Lines--------------------------------!
!
      IF( ICNV.EQ.1 .OR. ICNV.EQ.4 ) RETURN
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//RSDL_EOR'
!
!---  Black-oil option  ---
!
      IF( ISLC(68).EQ.0 ) THEN
        CALL RSDL_BO
        ISUB_LOG = ISUB_LOG-1
        RETURN
      ENDIF
!
!---  Compositional option  ---
!
!
!---  Zero maximum residuals  ---
!
      DO M = 1,ISVC
        RSD(M) = 0.D+0
        NSD(M) = 0
        RSDAVG(M) = 0.D+0
      ENDDO
!
!---  Find maximum residuals
!
      DO N = 1,NFBN
        N_DB = N
        IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) CYCLE
        NMD = IXP(N)
        IZN = IZ(N)
!
!---    Energy equation  ---
!
        IF( ISLC(30).EQ.0 ) THEN
          MPT = IM(IEQT,NMD)
          DPT = BLU(MPT)
        ELSE
          DPT = 0.D+0
        ENDIF
!
!---    Water mass equation  ---
!
        MPW = IM(IEQW,NMD)
        DPW = BLU(MPW)
!
!---    CO2 mass equation  ---
!
        IF( ISLC(45).EQ.0 ) THEN
          MPC(1) = IM(IEQGC(1),NMD)
          DPC(1) = BLU(MPC(1))
        ELSE
          DPC(1) = 0.D+0
        ENDIF
!
!---    CH4 mass equation  ---
!
        IF( ISLC(64).EQ.0 ) THEN
          MPC(2) = IM(IEQGC(2),NMD)
          DPC(2) = BLU(MPC(2))
        ELSE
          DPC(2) = 0.D+0
        ENDIF
!
!---    Petroleum component mass equation  ---
!
        DO IGC = 3,NGC+2
          MPC(IGC) = IM(IEQGC(IGC),NMD)
          DPC(IGC) = BLU(MPC(IGC))
        ENDDO
!
!---    Salt mass equation  ---
!
        IF( ISLC(32).EQ.0 ) THEN
          MPS = IM(IEQS,NMD)
          DPS = BLU(MPS)
        ELSE
          DPS = 0.D+0
        ENDIF
!
!---    Total fluid and salt mass density, kg/m^3 rock volume  ---
!
        TMX = PORD(2,N)*(SL(2,N)*RHOL(2,N) + SG(2,N)*RHOG(2,N) + 
     &    SN(2,N)*RHON(2,N) + SS(2,N)*RHOSP(2,N))
!
!---    Skip selected nodes in the residual calculation  ---
!
        IF( ISKP(IZN).EQ.1 ) CYCLE
        IF( ZMC(1,2,N).GT.9.D-1 ) CYCLE
!
!---    Absolute system pressure  ---
!
        PX = PSO(2,N) + PATM
!
!---    Phase condition #1  ---
!
!       SL = 1.0, SG+SN = 0.0
!
!       energy - temperature, C - T
!       water mass - aqueous (system) pressure, Pa gauge - PL,PSO
!       CO2 mass - CO2 vapor pressure - PVA
!       CH4 mass - total CH4 mass - TMC
!       petroleum component mass - total petroleum component mass - TMC
!       salt mass - total salt brine mass fraction - YLS
!
        IF( MOD(NPHAZ(2,N),10).EQ.1 ) THEN
!
!---      Energy equation residual  ---
!
          IF( ISLC(30).EQ.0 ) THEN
            RSDX = 1.D-2*ABS(DPT)/TABS
            RSDAVG(IEQT) = RSDAVG(IEQT) + RSDX
            IF( RSDX.GT.RSD(IEQT) ) THEN
              RSD(IEQT) = RSDX
              NSD(IEQT) = N
            ENDIF
          ENDIF
!
!---      Water mass equation residual  ---
!
          ACP = PORD(2,N)*(RHOL(2,N)*SL(2,N)*XLW(2,N) +
     &      RHOG(2,N)*SG(2,N)*XGW(2,N))*DTI*VOL(N)
          ACP = TMX*DTI*VOL(N)
          RSDX = 1.D-2*MIN( ABS(DPW)/PX,
     &      1.D-1*ABS(RSDL(IEQW,N)/(ACP+SMALL)) )
          RSDAVG(IEQW) = RSDAVG(IEQW) + RSDX
          IF( RSDX.GT.RSD(IEQW) ) THEN
            RSD(IEQW) = RSDX
            NSD(IEQW) = N
          ENDIF
!
!---      CO2 mass equation residual  ---
!
          IF( ISLC(45).EQ.0 ) THEN
            IF( PVA(2,N).GT.(1.D-6*PX) ) THEN
              ACP = PORD(2,N)*(RHOG(2,N)*SG(2,N)*XGA(2,N) +
     &          RHOL(2,N)*SL(2,N)*XLA(2,N) +
     &          RHON(2,N)*SN(2,N)*XNC(1,2,N))*DTI*VOL(N)
              RSDX = 1.D-2*MIN( ABS(DPC(1))/PX,
     &          ABS(RSDL(IEQGC(1),N)/(ACP+SMALL)) )
              RSDAVG(IEQGC(1)) = RSDAVG(IEQGC(1)) + RSDX
              IF( RSDX.GT.RSD(IEQGC(1)) ) THEN
                RSD(IEQGC(1)) = RSDX
                NSD(IEQGC(1)) = N
              ENDIF
            ENDIF
          ENDIF
!
!---      CH4 mass equation residual  ---
!
          IF( ISLC(64).EQ.0 ) THEN
            ACP = PORD(2,N)*(RHOG(2,N)*SG(2,N)*XGO(2,N) +
     &        RHON(2,N)*SN(2,N)*XNC(2,2,N))*DTI*VOL(N)
            ACP = TMX*DTI*VOL(N)
            RSDX = 1.D-2*MIN( ABS(DPC(2))/PX,
     &        1.D-1*ABS(RSDL(IEQGC(2),N)/(ACP+SMALL)) )
            RSDAVG(IEQGC(2)) = RSDAVG(IEQGC(2)) + RSDX
            IF( RSDX.GT.RSD(IEQGC(2)) ) THEN
              RSD(IEQGC(2)) = RSDX
              NSD(IEQGC(2)) = N
            ENDIF
          ENDIF
!
!---      Petroleum component mass equation residual  ---
!
          DO IGC = 3,NGC+2
            ACP = PORD(2,N)*(RHOG(2,N)*SG(2,N)*XGC(IGC,2,N) +
     &        RHON(2,N)*SN(2,N)*XNC(IGC,2,N))*DTI*VOL(N)
            ACP = TMX*DTI*VOL(N)
            RSDX = 1.D-2*MIN( ABS(DPC(IGC))/PX,
     &        1.D-1*ABS(RSDL(IEQGC(IGC),N)/(ACP+SMALL)) )
            RSDAVG(IEQGC(IGC)) = RSDAVG(IEQGC(IGC)) + RSDX
            IF( RSDX.GT.RSD(IEQGC(IGC)) ) THEN
              RSD(IEQGC(IGC)) = RSDX
              NSD(IEQGC(IGC)) = N
            ENDIF
          ENDDO
!
!---      Salt mass equation residual  ---
!
          IF( ISLC(32).EQ.0 ) THEN
            ACP = TMS(2,N)*DTI*VOL(N)
            ACP = TMX*DTI*VOL(N)
            CALL SOL_LS( T(2,N),XLSMX )
            RSDX = 1.D-2*MIN( (ABS(DPS)/XLSMX),
     &        1.D-1*ABS(RSDL(IEQS,N)/(ACP+SMALL)) )
            RSDX = RSDX*1.D-1
            RSDAVG(IEQS) = RSDAVG(IEQS) + RSDX
            IF( RSDX.GT.RSD(IEQS) ) THEN
              RSD(IEQS) = RSDX
              NSD(IEQS) = N
            ENDIF
          ENDIF
!
!---    Phase condition #2  ---
!
!       SL < 1.0, ST > 0.0, SG = 0.0
!
!       energy - temperature, C - T
!       water mass - aqueous saturation, SL
!       CO2 mass
!         if( ZMC(1,2,N) > max( ZMC(J,2,N) ) J /= 1
!           - nonaqueous (system) pressure, Pa gauge - PN,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(1,2,N)
!         endif
!       CH4 mass
!         if( ZMC(2,2,N) > max( ZMC(J,2,N) ) J /= 2
!           - nonaqueous (system) pressure, Pa gauge - PN,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(2,2,N)
!         endif
!       petroleum component mass
!         if( ZMC(I,2,N) > max( ZMC(J,2,N) ) J /= I
!           - nonaqueous (system) pressure, Pa gauge - PN,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(I,2,N)
!         endif
!       salt mass - total salt brine mass fraction - YLS
!
        ELSEIF( MOD(NPHAZ(2,N),10).EQ.2 ) THEN
!
!---      Energy equation residual  ---
!
          IF( ISLC(30).EQ.0 ) THEN
            RSDX = ABS(DPT)/TABS
            RSDAVG(IEQT) = RSDAVG(IEQT) + RSDX
            IF( RSDX.GT.RSD(IEQT) ) THEN
              RSD(IEQT) = RSDX
              NSD(IEQT) = N
            ENDIF
          ENDIF
!
!---      Water mass equation residual  ---
!
          ACP = PORD(2,N)*(RHOL(2,N)*SL(2,N)*XLW(2,N) +
     &      RHOG(2,N)*SG(2,N)*XGW(2,N))*DTI*VOL(N)
          ACP = TMX*DTI*VOL(N)
          IF( NPHAZ(2,N).GT.100 ) THEN
            RSDX = MIN( 1.D-1*ABS(DPW)/PX,
     &        1.D-1*ABS(RSDL(IEQW,N)/(ACP+SMALL)) )
          ELSE
            RSDX = MIN( 1.D-1*ABS(DPW),
     &        1.D-1*ABS(RSDL(IEQW,N)/(ACP+SMALL)) )
          ENDIF
          RSDAVG(IEQW) = RSDAVG(IEQW) + RSDX
          IF( RSDX.GT.RSD(IEQW) ) THEN
            RSD(IEQW) = RSDX
            NSD(IEQW) = N
          ENDIF
!
!---      Loop over all petroleum components, including CO2 and CH4  ---
!
          ACP = PORD(2,N)*(RHOG(2,N)*SG(2,N) +
     &      RHON(2,N)*SN(2,N))*DTI*VOL(N)
          ACP = TMX*DTI*VOL(N)
          DO IGC = 1,NGC+2
            IF( ISLC(45).NE.0 .AND. IGC.EQ.1 ) CYCLE
            IF( ISLC(64).NE.0 .AND. IGC.EQ.2 ) CYCLE
!
!---        Nonaqueous-liquid pressure  ---
!
            IF( IGC.EQ.IZMC(N) ) THEN
              IF( NPHAZ(2,N).GT.100 ) THEN
                RSDX = MIN( ABS(DPC(IGC)),
     &            1.D-1*ABS(RSDL(IEQGC(IGC),N)/(ACP+SMALL)) )
              ELSE
                RSDX = MIN( 1.D-1*ABS(DPC(IGC))/PX,
     &            1.D-1*ABS(RSDL(IEQGC(IGC),N)/(ACP+SMALL)) )
              ENDIF
!
!---        Petroleum component mole fraction  ---
!
            ELSE
              RSDX = MIN( 1.D-2*ABS(DPC(IGC)),
     &          1.D-1*ABS(RSDL(IEQGC(IGC),N)/(ACP+SMALL)) )
            ENDIF
            RSDAVG(IEQGC(IGC)) = RSDAVG(IEQGC(IGC)) + RSDX
            IF( RSDX.GT.RSD(IEQGC(IGC)) ) THEN
              RSD(IEQGC(IGC)) = RSDX
              NSD(IEQGC(IGC)) = N
            ENDIF
          ENDDO
!
!---      Salt mass equation residual  ---
!
          IF( ISLC(32).EQ.0 ) THEN
            ACP = TMS(2,N)*DTI*VOL(N)
            ACP = TMX*DTI*VOL(N)
            CALL SOL_LS( T(2,N),XLSMX )
            RSDX = MIN( (ABS(DPS)/XLSMX),
     &        1.D-1*ABS(RSDL(IEQS,N)/(ACP+SMALL)) )
            RSDX = RSDX*1.D-1
            RSDAVG(IEQS) = RSDAVG(IEQS) + RSDX
            IF( RSDX.GT.RSD(IEQS) ) THEN
              RSD(IEQS) = RSDX
              NSD(IEQS) = N
            ENDIF
          ENDIF
!
!---    Phase condition #3  ---
!
!       SL < 1.0, ST > 0.0, SG > 0.0
!
!       energy - temperature, C - T
!       water mass - aqueous saturation, SL
!       CO2 mass
!         if( ZMC(1,2,N) > max( ZMC(J,2,N) ) J /= 1
!           - gas (system) pressure, Pa gauge - PG,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(1,2,N)
!         endif
!       CH4 mass
!         if( ZMC(2,2,N) > max( ZMC(J,2,N) ) J /= 2
!           - gas (system) pressure, Pa gauge - PG,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(2,2,N)
!         endif
!       petroleum component mass
!         if( ZMC(I,2,N) > max( ZMC(J,2,N) ) J /= I
!           - gas (system) pressure, Pa gauge - PG,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(I,2,N)
!         endif
!       salt mass - total salt brine mass fraction - YLS
!
        ELSEIF( MOD(NPHAZ(2,N),10).EQ.3 ) THEN
!
!---      Energy equation residual  ---
!
          IF( ISLC(30).EQ.0 ) THEN
            RSDX = ABS(DPT)/TABS
            RSDAVG(IEQT) = RSDAVG(IEQT) + RSDX
            IF( RSDX.GT.RSD(IEQT) ) THEN
              RSD(IEQT) = RSDX
              NSD(IEQT) = N
            ENDIF
          ENDIF
!
!---      Water mass equation residual  ---
!
          ACP = PORD(2,N)*(RHOL(2,N)*SL(2,N)*XLW(2,N) +
     &      RHOG(2,N)*SG(2,N)*XGW(2,N))*DTI*VOL(N)
          ACP = TMX*DTI*VOL(N)
          IF( NPHAZ(2,N).GT.100 ) THEN
            RSDX = MIN( 1.D-1*ABS(DPW)/PX,
     &        1.D-1*ABS(RSDL(IEQW,N)/(ACP+SMALL)) )
          ELSE
            RSDX = MIN( 1.D-1*ABS(DPW),
     &        1.D-1*ABS(RSDL(IEQW,N)/(ACP+SMALL)) )
          ENDIF
          RSDAVG(IEQW) = RSDAVG(IEQW) + RSDX
          IF( RSDX.GT.RSD(IEQW) ) THEN
            RSD(IEQW) = RSDX
            NSD(IEQW) = N
          ENDIF
!
!---      Loop over all petroleum components, including CO2 and CH4  ---
!
          ACP = PORD(2,N)*(RHOG(2,N)*SG(2,N) +
     &      RHON(2,N)*SN(2,N))*DTI*VOL(N)
          ACP = TMX*DTI*VOL(N)
          DO IGC = 1,NGC+2
            IF( ISLC(45).NE.0 .AND. IGC.EQ.1 ) CYCLE
            IF( ISLC(64).NE.0 .AND. IGC.EQ.2 ) CYCLE
!
!---        Nonaqueous-liquid pressure  ---
!
            IF( IGC.EQ.IZMC(N) ) THEN
              IF( NPHAZ(2,N).GT.100 ) THEN
                RSDX = MIN( 1.D-1*ABS(DPC(IGC))/PX,
     &            1.D-1*ABS(RSDL(IEQGC(IGC),N)/(ACP+SMALL)) )
              ELSE
                RSDX = MIN( 1.D-1*ABS(DPC(IGC))/PX,
     &            1.D-1*ABS(RSDL(IEQGC(IGC),N)/(ACP+SMALL)) )
              ENDIF
!
!---        Petroleum component mole fraction  ---
!
            ELSE
              RSDX = MIN( 1.D-2*ABS(DPC(IGC)),
     &          1.D-1*ABS(RSDL(IEQGC(IGC),N)/(ACP+SMALL)) )
            ENDIF
            RSDAVG(IEQGC(IGC)) = RSDAVG(IEQGC(IGC)) + RSDX
            IF( RSDX.GT.RSD(IEQGC(IGC)) ) THEN
              RSD(IEQGC(IGC)) = RSDX
              NSD(IEQGC(IGC)) = N
            ENDIF
          ENDDO
!
!---      Salt mass equation residual  ---
!
          IF( ISLC(32).EQ.0 ) THEN
            ACP = TMS(2,N)*DTI*VOL(N)
            ACP = TMX*DTI*VOL(N)
            CALL SOL_LS( T(2,N),XLSMX )
            RSDX = MIN( (ABS(DPS)/XLSMX),
     &        1.D-1*ABS(RSDL(IEQS,N)/(ACP+SMALL)) )
            RSDX = RSDX*1.D-1
            RSDAVG(IEQS) = RSDAVG(IEQS) + RSDX
            IF( RSDX.GT.RSD(IEQS) ) THEN
              RSD(IEQS) = RSDX
              NSD(IEQS) = N
            ENDIF
          ENDIF
!
!---    Phase condition #4  ---
!
!       SL = 0.0, ST = 1.0, SG = 0.0
!
!       energy - temperature, C - T
!       water mass - aqueous saturation, SL
!       CO2 mass
!         if( ZMC(1,2,N) > max( ZMC(J,2,N) ) J /= 1
!           - nonaqueous (system) pressure, Pa gauge - PN,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(1,2,N)
!         endif
!       CH4 mass
!         if( ZMC(2,2,N) > max( ZMC(J,2,N) ) J /= 2
!           - nonaqueous (system) pressure, Pa gauge - PN,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(2,2,N)
!         endif
!       petroleum component mass
!         if( ZMC(I,2,N) > max( ZMC(J,2,N) ) J /= I
!           - nonaqueous (system) pressure, Pa gauge - PN,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(I,2,N)
!         endif
!       salt mass - total salt mass - TMS(2,N)
!
        ELSEIF( MOD(NPHAZ(2,N),10).EQ.4 ) THEN
!
!---      Energy equation residual  ---
!
          IF( ISLC(30).EQ.0 ) THEN
            RSDX = ABS(DPT)/TABS
            RSDAVG(IEQT) = RSDAVG(IEQT) + RSDX
            IF( RSDX.GT.RSD(IEQT) ) THEN
              RSD(IEQT) = RSDX
              NSD(IEQT) = N
            ENDIF
          ENDIF
!
!---      Water mass equation residual  ---
!
          ACP = PORD(2,N)*(RHOL(2,N)*SL(2,N)*XLW(2,N) +
     &      RHOG(2,N)*SG(2,N)*XGW(2,N))*DTI*VOL(N)
          ACP = TMX*DTI*VOL(N)
          IF( NPHAZ(2,N).GT.100 ) THEN
            RSDX = MIN( 1.D-1*ABS(DPW)/PX,
     &        1.D-1*ABS(RSDL(IEQW,N)/(ACP+SMALL)) )
          ELSE
            RSDX = MIN( 1.D-1*ABS(DPW),
     &        1.D-1*ABS(RSDL(IEQW,N)/(ACP+SMALL)) )
          ENDIF
          RSDAVG(IEQW) = RSDAVG(IEQW) + RSDX
          IF( RSDX.GT.RSD(IEQW) ) THEN
            RSD(IEQW) = RSDX
            NSD(IEQW) = N
          ENDIF
!
!---      Loop over all petroleum components, including CO2 and CH4  ---
!
          ACP = PORD(2,N)*(RHOG(2,N)*SG(2,N) +
     &      RHON(2,N)*SN(2,N))*DTI*VOL(N)
          ACP = TMX*DTI*VOL(N)
          DO IGC = 1,NGC+2
            IF( ISLC(45).NE.0 .AND. IGC.EQ.1 ) CYCLE
            IF( ISLC(64).NE.0 .AND. IGC.EQ.2 ) CYCLE
!
!---        Nonaqueous-liquid pressure  ---
!
            IF( IGC.EQ.IZMC(N) ) THEN
              IF( NPHAZ(2,N).GT.100 ) THEN
                RSDX = MIN( ABS(DPC(IGC)),
     &            1.D-1*ABS(RSDL(IEQGC(IGC),N)/(ACP+SMALL)) )
              ELSE
                RSDX = MIN( 1.D-1*ABS(DPC(IGC))/PX,
     &            1.D-1*ABS(RSDL(IEQGC(IGC),N)/(ACP+SMALL)) )
              ENDIF
!
!---        Petroleum component mole fraction  ---
!
            ELSE
              RSDX = MIN( 1.D-2*ABS(DPC(IGC)),
     &          1.D-1*ABS(RSDL(IEQGC(IGC),N)/(ACP+SMALL)) )
            ENDIF
            RSDAVG(IEQGC(IGC)) = RSDAVG(IEQGC(IGC)) + RSDX
            IF( RSDX.GT.RSD(IEQGC(IGC)) ) THEN
              RSD(IEQGC(IGC)) = RSDX
              NSD(IEQGC(IGC)) = N
            ENDIF
          ENDDO
!
!---      Salt mass equation residual  ---
!
          IF( ISLC(32).EQ.0 ) THEN
            ACP = TMS(2,N)*DTI*VOL(N)
            ACP = TMX*DTI*VOL(N)
            RSDX = MIN( ABS(DPS),
     &        1.D-1*ABS(RSDL(IEQS,N)/(ACP+SMALL)) )
            RSDX = RSDX*1.D-1
            RSDAVG(IEQS) = RSDAVG(IEQS) + RSDX
            IF( RSDX.GT.RSD(IEQS) ) THEN
              RSD(IEQS) = RSDX
              NSD(IEQS) = N
            ENDIF
          ENDIF
!
!---    Phase condition #5  ---
!
!       SL = 0.0, ST >= 0.0, SG > 0.0
!
!       energy - temperature, C - T
!       water mass - aqueous saturation, SL
!       CO2 mass
!         if( ZMC(1,2,N) > max( ZMC(J,2,N) ) J /= 1
!           - gas (system) pressure, Pa gauge - PG,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(1,2,N)
!         endif
!       CH4 mass
!         if( ZMC(2,2,N) > max( ZMC(J,2,N) ) J /= 2
!           - gas (system) pressure, Pa gauge - PG,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(2,2,N)
!         endif
!       petroleum component mass
!         if( ZMC(I,2,N) > max( ZMC(J,2,N) ) J /= I
!           - gas (system) pressure, Pa gauge - PG,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(I,2,N)
!         endif
!       salt mass - total salt mass - TMS(2,N)
!
        ELSEIF( MOD(NPHAZ(2,N),10).EQ.5 ) THEN
!
!---      Energy equation residual  ---
!
          IF( ISLC(30).EQ.0 ) THEN
            RSDX = ABS(DPT)/TABS
            RSDAVG(IEQT) = RSDAVG(IEQT) + RSDX
            IF( RSDX.GT.RSD(IEQT) ) THEN
              RSD(IEQT) = RSDX
              NSD(IEQT) = N
            ENDIF
          ENDIF
!
!---      Water mass equation residual  ---
!
          ACP = PORD(2,N)*(RHOL(2,N)*SL(2,N)*XLW(2,N) +
     &      RHOG(2,N)*SG(2,N)*XGW(2,N))*DTI*VOL(N)
          ACP = TMX*DTI*VOL(N)
          IF( NPHAZ(2,N).GT.100 ) THEN
            RSDX = MIN( 1.D-1*ABS(DPW)/PX,
     &        1.D-1*ABS(RSDL(IEQW,N)/(ACP+SMALL)) )
          ELSE
            RSDX = MIN( 1.D-1*ABS(DPW),
     &        1.D-1*ABS(RSDL(IEQW,N)/(ACP+SMALL)) )
          ENDIF
          RSDAVG(IEQW) = RSDAVG(IEQW) + RSDX
          IF( RSDX.GT.RSD(IEQW) ) THEN
            RSD(IEQW) = RSDX
            NSD(IEQW) = N
          ENDIF
!
!---      Loop over all petroleum components, including CO2 and CH4  ---
!
          ACP = PORD(2,N)*(RHOG(2,N)*SG(2,N) +
     &      RHON(2,N)*SN(2,N))*DTI*VOL(N)
          ACP = TMX*DTI*VOL(N)
          DO IGC = 1,NGC+2
            IF( ISLC(45).NE.0 .AND. IGC.EQ.1 ) CYCLE
            IF( ISLC(64).NE.0 .AND. IGC.EQ.2 ) CYCLE
!
!---        Nonaqueous-liquid pressure  ---
!
            IF( IGC.EQ.IZMC(N) ) THEN
              IF( NPHAZ(2,N).GT.100 ) THEN
                RSDX = MIN( ABS(DPC(IGC)),
     &            1.D-1*ABS(RSDL(IEQGC(IGC),N)/(ACP+SMALL)) )
              ELSE
                RSDX = MIN( 1.D-1*ABS(DPC(IGC))/PX,
     &            1.D-1*ABS(RSDL(IEQGC(IGC),N)/(ACP+SMALL)) )
              ENDIF
!
!---        Petroleum component mole fraction  ---
!
            ELSE
              RSDX = MIN( 1.D-2*ABS(DPC(IGC)),
     &          1.D-1*ABS(RSDL(IEQGC(IGC),N)/(ACP+SMALL)) )
            ENDIF
            RSDAVG(IEQGC(IGC)) = RSDAVG(IEQGC(IGC)) + RSDX
            IF( RSDX.GT.RSD(IEQGC(IGC)) ) THEN
              RSD(IEQGC(IGC)) = RSDX
              NSD(IEQGC(IGC)) = N
            ENDIF
          ENDDO
!
!---      Salt mass equation residual  ---
!
          IF( ISLC(32).EQ.0 ) THEN
            ACP = TMS(2,N)*DTI*VOL(N)
            ACP = TMX*DTI*VOL(N)
            RSDX = MIN( ABS(DPS),
     &        1.D-1*ABS(RSDL(IEQS,N)/(ACP+SMALL)) )
            RSDX = RSDX*1.D-1
            RSDAVG(IEQS) = RSDAVG(IEQS) + RSDX
            IF( RSDX.GT.RSD(IEQS) ) THEN
              RSD(IEQS) = RSDX
              NSD(IEQS) = N
            ENDIF
          ENDIF
        ENDIF
      ENDDO
!
!---  Assign a convergence index  ---
!
      DO M = 1,ISVC
        RSDAVG(M) = 1.D+1*RSDAVG(M)/REAL(NFBN-NXP)
      ENDDO
      RSDX = 0.D+0
      DO M = 1,ISVC
        RSDX = MAX( RSD(M),RSDX )
        IF( RSD(M).GT.RSDMX ) ICNV = 2
      ENDDO
      IF( ICNV.EQ.2 .AND. NITER.GE.NRIMX ) ICNV = 1
      IF( RSDX.GE.1.D+2 ) ICNV = 1
!
!---  Unconverged solution Newton-Raphson iteration limit exceeded  ---
!
      IF( ICNV.EQ.1 ) THEN
        IF( RSDX.GE.1.D+2 ) THEN
          WRITE(ISC,'(10X,A)') '---  Excessive Residual  ---'
          WRITE(IWR,'(10X,A)') '---  Excessive Residual  ---'
        ELSE
          WRITE(ISC,'(10X,A)') '---  Convergence Failure  ---'
          WRITE(IWR,'(10X,A)') '---  Convergence Failure  ---'
        ENDIF
!
!---    Energy equation  ---
!
        IF( ISLC(30).EQ.0 ) THEN
          NX = NSD(IEQT)
          IF( NX.GT.0 ) THEN
            NPX = MOD(NPHAZ(2,NX),10)
            NCHX = INDEX( PH_CND(NPX),'  ') - 1
            WRITE(ISC,'(4X,A,1PE11.4,A,I6,2A)')
     &        'Energy Equation Maximum Residual = ',RSD(IEQT),
     &        ': Node = ',NX,
     &        ': Phase Condition = ',PH_CND(NPX)(1:NCHX)
            WRITE(IWR,'(4X,A,1PE11.4,A,I6,2A)')
     &        'Energy Equation Maximum Residual = ',RSD(IEQT),
     &        ': Node = ',NX,
     &        ': Phase Condition = ',PH_CND(NPX)(1:NCHX)
          ENDIF
        ENDIF
!
!---    Water mass equation  ---
!
        NX = NSD(IEQW)
        IF( NX.GT.0 ) THEN
          NPX = MOD(NPHAZ(2,NX),10)
          NCHX = INDEX( PH_CND(NPX),'  ') - 1
          WRITE(ISC,'(4X,A,1PE11.4,A,I6,2A)')
     &      'Water Mass Equation Maximum Residual = ',RSD(IEQW),
     &      ': Node = ',NX,
     &      ': Phase Condition = ',PH_CND(NPX)(1:NCHX)
          WRITE(IWR,'(4X,A,1PE11.4,A,I6,2A)')
     &      'Water Mass Equation Maximum Residual = ',RSD(IEQW),
     &      ': Node = ',NX,
     &      ': Phase Condition = ',PH_CND(NPX)(1:NCHX)
        ENDIF
!
!---    CO2 mass equation  ---
!
        IF( ISLC(45).EQ.0 ) THEN
          NX = NSD(IEQGC(1))
          IF( NX.GT.0 ) THEN
            NPX = MOD(NPHAZ(2,NX),10)
            NCHX = INDEX( PH_CND(NPX),'  ') - 1
            WRITE(ISC,'(4X,A,1PE11.4,A,I6,2A)')
     &        'CO2 Mass Equation Maximum Residual = ',
     &        RSD(IEQGC(1)),': Node = ',NX,
     &        ': Phase Condition = ',PH_CND(NPX)(1:NCHX)
            WRITE(IWR,'(4X,A,1PE11.4,A,I6,2A)')
     &        'CO2 Mass Equation Maximum Residual = ',
     &        RSD(IEQGC(1)),': Node = ',NX,
     &        ': Phase Condition = ',PH_CND(NPX)(1:NCHX)
          ENDIF
        ENDIF
!
!---    CH4 mass equation  ---
!
        IF( ISLC(64).EQ.0 ) THEN
          NX = NSD(IEQGC(2))
          IF( NX.GT.0 ) THEN
            NPX = MOD(NPHAZ(2,NX),10)
            NCHX = INDEX( PH_CND(NPX),'  ') - 1
            WRITE(ISC,'(4X,A,1PE11.4,A,I6,2A)')
     &        'CH4 Mass Equation Maximum Residual = ',
     &        RSD(IEQGC(2)),': Node = ',NX,
     &        ': Phase Condition = ',PH_CND(NPX)(1:NCHX)
            WRITE(IWR,'(4X,A,1PE11.4,A,I6,2A)')
     &        'CH4 Mass Equation Maximum Residual = ',
     &        RSD(IEQGC(2)),': Node = ',NX,
     &        ': Phase Condition = ',PH_CND(NPX)(1:NCHX)
          ENDIF
        ENDIF
!
!---    Petroleum component mass equation  ---
!
        DO IGC = 3,NGC+2
          NX = NSD(IEQGC(IGC))
          IF( NX.GT.0 ) THEN
            NPX = MOD(NPHAZ(2,NX),10)
            NCAX = INDEX( PH_CND(NPX),'  ') - 1
            NCBX = INDEX( GCNM(IGC),'  ') - 1
            WRITE(ISC,'(4X,2A,1PE11.4,A,I6,2A)')
     &        GCNM(IGC)(1:NCBX),' Mass Equation Maximum Residual = ',
     &        RSD(IEQGC(IGC)),': Node = ',NX,
     &        ': Phase Condition = ',PH_CND(NPX)(1:NCAX)
            WRITE(IWR,'(4X,2A,1PE11.4,A,I6,2A)')
     &        GCNM(IGC)(1:NCBX),' Mass Equation Maximum Residual = ',
     &        RSD(IEQGC(IGC)),': Node = ',NX,
     &        ': Phase Condition = ',PH_CND(NPX)(1:NCAX)
          ENDIF
        ENDDO
!
!---    Isobrine option  ---
!
        IF( ISLC(32).EQ.0 ) THEN
          NX = NSD(IEQS)
          IF( NX.GT.0 ) THEN
            NPX = MOD(NPHAZ(2,NX),10)
            NCHX = INDEX( PH_CND(NPX),'  ') - 1
            WRITE(ISC,'(4X,A,1PE11.4,A,I6,2A)')
     &        'Salt Equation Maximum Residual = ',RSD(IEQS),
     &        ': Node = ',NX,
     &        ': Phase Condition = ',PH_CND(NPX)(1:NCHX)
            WRITE(IWR,'(4X,A,1PE11.4,A,I6,2A)')
     &        'Salt Equation Maximum Residual = ',RSD(IEQS),
     &         ': Node = ',NX,
     &        ': Phase Condition = ',PH_CND(NPX)(1:NCHX)
          ENDIF
        ENDIF
!
!---  Reduce time step  ---
!
        IF( NTSR.LT.4 .OR. (DTCF*DT).GT.DTMN ) THEN
          NTSR = NTSR + 1
          DTX = DT
          TM = TM - (1.D+0-DTCF)*DT
          DT = DTCF*DT
          DTO = DT
          DTI = 1.D+0/DT
          VAR = DT
          VARX = DTX
          IF( UNTM.NE.'null' ) THEN
            INDX = 1
            IUNS = 1
            CALL RDUNIT(UNTM,VAR,INDX)
            IUNS = 1
            CALL RDUNIT(UNTM,VARX,INDX)
            NCH = INDEX( UNTM,'  ')-1
          ENDIF
          WRITE(ISC,'(4X,A,1PE11.4,1X,2A,1PE11.4,1X,A)')
     &      'Time Step Reduced From ',VARX,UNTM(1:NCH),' to ',
     &      VAR,UNTM(1:NCH)
          WRITE(IWR,'(4X,A,1PE11.4,1X,2A,1PE11.4,1X,A)')
     &      'Time Step Reduced From ',VARX,UNTM(1:NCH),' to ',
     &      VAR,UNTM(1:NCH)
          DO N = 1,NFBN
            IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) CYCLE
            DO M = 1,6
              BETA(M,N) = 0.D+0
            ENDDO
            IBETA(N) = 0
            T(2,N) = T(1,N)
            PL(2,N) = PL(1,N)
            PG(2,N) = PG(1,N)
            PN(2,N) = PN(1,N)
            PSO(2,N) = PSO(1,N)
            PVA(2,N) = PVA(1,N)
            SG(2,N) = SG(1,N)
            SL(2,N) = SL(1,N)
            SN(2,N) = SN(1,N)
            YLS(2,N) = YLS(1,N)
            TMS(2,N) = TMS(1,N)
            NPHAZ(2,N) = NPHAZ(1,N)
            DO IGC = 1,NGC+2
              TMC(IGC,2,N) = TMC(IGC,1,N)
              ZMC(IGC,2,N) = ZMC(IGC,1,N)
            ENDDO
          ENDDO
!
!---      Coupled-well pressure  ---
!
          DO NCW = 1,N_CW
            P_CW(2,NCW) = P_CW(1,NCW)
          ENDDO
          NITER = 1
!
!---      Fault flow and transport solution  ---
!
          IF( ISLC(74).EQ.1 .OR. ISLC(74).EQ.3 ) THEN
!
!---        Loop over fractures  ---
!
            DO NFX = 1,NF_FRC
!
!---        Loop over fracture triangles  ---
!
            DO NTX = IP_FRC(1,NFX),IP_FRC(2,NFX)
!
!---          Skip inactive triangles  ---
!
              IF( IXP_FRC(NTX).EQ.0 ) CYCLE
              DO M = 1,6
                BETA_FRC(M,NTX) = 0.D+0
              ENDDO
              IBETA_FRC(NTX) = 0
              T_FRC(2,NTX) = T_FRC(1,NTX)
              PL_FRC(2,NTX) = PL_FRC(1,NTX)
              PG_FRC(2,NTX) = PG_FRC(1,NTX)
              PN_FRC(2,NTX) = PN_FRC(1,NTX)
              PSO_FRC(2,NTX) = PSO_FRC(1,NTX)
              PVA_FRC(2,NTX) = PVA_FRC(1,NTX)
              SG_FRC(2,NTX) = SG_FRC(1,NTX)
              SL_FRC(2,NTX) = SL_FRC(1,NTX)
              SN_FRC(2,NTX) = SN_FRC(1,NTX)
              YLS_FRC(2,NTX) = YLS_FRC(1,NTX)
              TMS_FRC(2,NTX) = TMS_FRC(1,NTX)
              NPHAZ_FRC(2,NTX) = NPHAZ_FRC(1,NTX)
              DO IGC = 1,NGC+2
                TMC_FRC(IGC,2,NTX) = TMC_FRC(IGC,1,NTX)
                ZMC_FRC(IGC,2,NTX) = ZMC_FRC(IGC,1,NTX)
              ENDDO
            ENDDO
            ENDDO
          ENDIF
!
!---  Number of time step reductions failure: stop simulation  ---
!
        ELSE
          WRITE(ISC,'(10X,A)') '---  Time Step Reduction Limit Exceeded
     & ---'
          WRITE(IWR,'(10X,A)') '---  Time Step Reduction Limit Exceeded
     & ---'
          ICNV = 4
        ENDIF
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of RSDL_EOR group
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE SBND_EOR( NSL )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Modify the Jacobian matrix for the solute transport equation
!     to incorporate boundary conditions.
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, March 17, 2013
!
#ifdef petsc
!
!----------------------PETSc Modules-----------------------------------!
!
      USE PETSC_STOMP
#endif
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE TRNSPT
      USE SOLTN
      USE REACT
      USE PORMED
      USE JACOB
      USE HYST
      USE GRID
      USE GLB_PAR
      USE FLUXP
      USE FLUXN
      USE FDVP
      USE FDVN
      USE FDVG
      USE CONST
      USE BCVP
      USE BCVN
      USE BCVG
      USE BCV
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
#ifdef petsc
#include "include/finclude/petscsys.h"
#include "include/finclude/petscvec.h"
#include "include/finclude/petscvec.h90"
#include "include/finclude/petscmat.h"
#include "include/finclude/petscmat.h90"
#endif
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 BCX(LSPBC+1)
#ifdef petsc
      INTEGER :: IROW
      PetscErrorCode :: IERR
#endif
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//SBND_EOR'
!
!---  Loop over number of specified boundary conditions  ---
!
      DO 200 NB = 1,NBC
!
!---    Zero flux boundary condition  ---
!
        IF( IBCT(NSL+LUK,NB).EQ.3 ) GOTO 200
        TMZ = TM
        IF( NSTEP-NRST.EQ.0 ) TMZ = TMZ*(1.D+0+EPSL)+EPSL
        MB = IBCIN(NB)
        IF( IBCC(NB).EQ.1 ) TMZ = MOD( TM,BC(1,IBCM(NB),MB) )
        IF( TMZ.LE.BC(1,1,MB) ) GOTO 200
        IF( IBCM(NB).GT.1 .AND. TMZ.GT.BC(1,IBCM(NB),MB) ) GOTO 200
#ifdef ecke
!
!---    Solute transport  ---
!
        IF( NSL.LE.NSOLU ) THEN
#endif
          IBCTX = IBCT(NSL+LUK,NB)
#ifdef ecke
!
!---    Reactive species transport  ---
!
        ELSE
          IBCTX = IBCT(NSOLU+LUK+1,NB)
        ENDIF
#endif
!
!---    Zero flux boundary condition  ---
!
        IF( IBCTX.EQ.3 ) GOTO 200
!
!---    Single boundary condition time  ---
!
        IF( IBCM(NB).EQ.1 ) THEN
#ifdef ecke
!
!---      Solute transport  ---
!
          IF( NSL.LE.NSOLU ) THEN
#endif
            JGC = 9 + NGC
            BCX(1) = BC(NSL+JGC,1,MB)
            IF( IBCTX.EQ.12 ) BCX(1) = CBO(NB,NSL)
#ifdef ecke
!
!---      Reactive species transport  ---
!
          ELSE
            BCX(1) = 0.D+0
            JGC = 9 + NGC
            DO NSPX = 1,IBCSP(1,NB)
              NSP = IBCSP(NSPX+1,NB)
              MX = NSOLU+JGC+NSPX
              BCX(NSPX+1) = BC(MX,1,MB)
!
!---          Initial condition type boundary condition ---
!
              IF( IBCT(NSOLU+LUK+1,NB).EQ.12 ) 
     &          BCX(NSPX+1) = SP_CBO(NB,NSP)
            ENDDO
          ENDIF
#endif
!
!---    Multiple boundary condition times  ---
!
        ELSE
          JGC = 9 + NGC
          DO 100 M = 2,IBCM(NB)
            IF( TMZ.LE.BC(1,M,MB) ) THEN
              TDBC = (BC(1,M,MB)-BC(1,M-1,MB))
              DTBC = MIN( BC(1,M,MB)-TMZ,DT )
              TFBC = (TMZ-5.D-1*DTBC-BC(1,M-1,MB))/TDBC
#ifdef ecke
!
!---          Solute transport  ---
!
              IF( NSL.LE.NSOLU ) THEN
#endif
                BCX(1) = BC(NSL+JGC,M-1,MB) +
     &            TFBC*(BC(NSL+JGC,M,MB)-BC(NSL+JGC,M-1,MB))
                IF( IBCT(NSL+LUK,NB).EQ.12 ) BCX(1) = CBO(NB,NSL)
#ifdef ecke
!
!---          Reactive species transport  ---
!
              ELSE
                BCX(1) = 0.D+0
                JGC = 9 + NGC
                DO NSPX = 1,IBCSP(1,NB)
                  NSP = IBCSP(NSPX+1,NB)
                  MX = NSOLU+JGC+NSPX
                  BCX(NSPX+1) = BC(MX,M-1,MB) +
     &              TFBC*(BC(MX,M,MB)-BC(MX,M-1,MB))
!
!---              Initial condition type boundary condition ---
!
                  IF( IBCT(NSOLU+LUK+1,NB).EQ.12 ) 
     &              BCX(NSPX+1) = SP_CBO(NB,NSP)
                ENDDO
              ENDIF
#endif
              GOTO 110
            ENDIF
  100     CONTINUE
          GOTO 200
        ENDIF
  110   CONTINUE
        N = IBCN(NB)
        IZN = IZ(N)
        MF = 1
        MP = IXP(N)
        I = ID(N)
        J = JD(N)
        K = KD(N)
        IF( ILES.EQ.1 ) THEN
          MCOL = MP
          MROW = MDT
        ELSEIF( ILES.EQ.3 .OR. ILES.EQ.4 ) THEN
          MA = 1
          MCOL = KLUC(MP,MA)
          MA = MA + 1
#ifdef petsc
        ELSEIF( ILES.EQ.5 ) THEN
          IROW = petsc_offset(N)
#endif
        ENDIF
!
!---    Diffusion coefficients at node adjacent to boundary  ---
!
        TCOR = (T(2,N)+TABS)/TSPRF
        SMDLP = SMDL(NSL)*TCOR*(VISRL/VISL(2,N))
        DLP = TORL(2,N)*SL(2,N)*PORD(2,N)*SMDLP
        PCOR = (PG(2,N)+PATM)/PATM
        SMDGP = SMDG(NSL)*(TCOR**1.75)/PCOR
        DGP = TORG(2,N)*SG(2,N)*PORD(2,N)*SMDGP
        PCOR = (PN(2,N)+PATM)/PATM
        SMDNP = SMDN(NSL)*(TCOR**1.75)/PCOR
        DNP = TORN(2,N)*SN(2,N)*PORD(2,N)*SMDNP
!
!---    Phase fraction factors at node adjacent to boundary  ---
!
        FCLP = 0.D+0
        IF( SL(2,N).GT.SMALL ) FCLP = YL(N,NSL)/(SL(2,N)*PORD(2,N))
        FCGP = 0.D+0
        IF( SG(2,N).GT.SMALL ) FCGP = YG(N,NSL)/(SG(2,N)*PORD(2,N))
        FCNP = 0.D+0
        IF( SN(2,N).GT.SMALL ) FCNP = YN(N,NSL)/(SN(2,N)*PORD(2,N))
        XVLB = SLB(2,NB)*PORDB(2,NB)
        XVGB = SGB(2,NB)*PORDB(2,NB)
        XVNB = SNB(2,NB)*PORDB(2,NB)
#ifdef ecke
        IF( NSL.LE.NSOLU ) THEN
#endif
!
!---      Phase fraction factors at boundary  ---
!
          IF( IPCL(NSL).EQ.2 ) THEN
            XVSB = RHOS(IZN)*PCSL(1,IZN,NSL)*(1.D+0-PORT(2,N))*SLB(2,NB)
          ELSE
            XVSB = RHOS(IZN)*PCSL(1,IZN,NSL)*(1.D+0-PORT(2,N))
          ENDIF
!
!---      Constant gas-aqueous partition coefficient  ---
!
          IF( IPCGL(NSL).EQ.0 ) THEN
            PCGLX = PCGL(1,NSL)
!
!---      Temperature dependent gas-aqueous partition coefficient  ---
!
          ELSEIF( IPCGL(NSL).EQ.1 ) THEN
            TK = TB(2,NB)+TABS
            PCGLX = EXP( PCGL(1,NSL) + PCGL(2,NSL)/TK
     &        + PCGL(3,NSL)*LOG(TK)
     &        + PCGL(4,NSL)*TK + PCGL(5,NSL)*TK**2 )
!
!---      Water-vapor equilibrium gas-aqueous partition coefficient  ---
!
          ELSEIF( IPCGL(NSL).EQ.2 ) THEN
            PCGLX = RHOG(2,N)*XGW(2,N)/(RHOL(2,N)*XLW(2,N))
          ENDIF
          PCGLX = MAX( PCGLX,1.D-20 )
          PCGLX = MIN( PCGLX,1.D+20 )
!
!---      Constant aqueous-nonaqueous liquid partition coefficient  ---
!
          PCLNX = PCLN(1,NSL)
          PCLNX = MAX( PCLNX,1.D-20 )
          PCLNX = MIN( PCLNX,1.D+20 )
!
!---      Phase-volumetric concentration ratios  ---
!
          FCL = 1.D+0/(XVSB + XVLB + XVGB*PCGLX + XVNB/PCLNX )
          FCG = 1.D+0/((XVSB + XVLB + (XVNB/PCLNX))/PCGLX + XVGB)
          FCN = 1.D+0/(XVSB + XVLB + XVGB*PCGLX + XVNB/PCLNX )
!
!---      Phase mole fractions  ---
!
          YLB(NB,NSL) = XVLB*FCL
          YGB(NB,NSL) = XVGB*FCG
          YNB(NB,NSL) = XVNB*FCN
!
!---      Convert boundary phase concentrations to
!         volumetric concentrations  ---
!
          IF( IBCT(NSL+LUK,NB).EQ.8 ) THEN
            BCX(1) = BCX(1)/FCL
          ELSEIF( IBCT(NSL+LUK,NB).EQ.9 ) THEN
            BCX(1) = BCX(1)/FCG
          ELSEIF( IBCT(NSL+LUK,NB).EQ.10 ) THEN
            BCX(1) = BCX(1)/FCN
          ENDIF
          CB(NB,NSL) = BCX(1)
#ifdef ecke
        ELSE
!
!---      Convert species concentrations to total-component
!         concentrations  ---
!
          IF( NSL.LE.NSOLU+NEQC ) THEN
            NEQ = NSL-NSOLU
            YSPLX = 0.D+0
            YSPGX = 0.D+0
            YSPNX = 0.D+0
            DO NSP = 1,IEQ_C(1,NEQ)
              DO NSPX = 1,IBCSP(1,NB)
                IF( IBCSP(NSPX+1,NB).EQ.IEQ_C(NSP+1,NEQ) ) THEN
!
!---              Aqueous species ---
!
                  IF( IEQ_C(NSP+1,NEQ).LE.NSPL ) THEN
                    IF( IBCT(NSOLU+LUK+1,NB).EQ.8 .OR.
     &                IBCT(NSOLU+LUK+1,NB).EQ.14 .OR.
     &                IBCT(NSOLU+LUK+1,NB).EQ.23 ) THEN
                      BCX(NSPX+1) = BCX(NSPX+1)*XVLB
                      YSPLX = YSPLX + EQ_C(NSP,NEQ)*BCX(NSPX+1)
                      BCX(1) = BCX(1) + EQ_C(NSP,NEQ)*BCX(NSPX+1)
                    ENDIF
!
!---              Gas species ---
!
                  ELSEIF( IEQ_C(NSP+1,NEQ).LE.NSPL+NSPG ) THEN
                    IF( IBCT(NSOLU+LUK+2,NB).EQ.8 .OR.
     &                IBCT(NSOLU+LUK+2,NB).EQ.14 .OR.
     &                IBCT(NSOLU+LUK+2,NB).EQ.23 ) THEN
                      BCX(NSPX+1) = BCX(NSPX+1)*XVGB
                      YSPGX = YSPGX + EQ_C(NSP,NEQ)*BCX(NSPX+1)
                      BCX(1) = BCX(1) + EQ_C(NSP,NEQ)*BCX(NSPX+1)
                    ENDIF
!
!---              Nonaqueous-liquid species ---
!
                  ELSE
                    IF( IBCT(NSOLU+LUK+2,NB).EQ.8 .OR.
     &                IBCT(NSOLU+LUK+2,NB).EQ.14 .OR.
     &                IBCT(NSOLU+LUK+2,NB).EQ.23 ) THEN
                      BCX(NSPX+1) = BCX(NSPX+1)*XVNB
                      YSPNX = YSPNX + EQ_C(NSP,NEQ)*BCX(NSPX+1)
                      BCX(1) = BCX(1) + EQ_C(NSP,NEQ)*BCX(NSPX+1)
                    ENDIF
                  ENDIF                    
                ENDIF
              ENDDO
            ENDDO
!
!---        Linked aqueous CO2   ---
!
            IF( ISPLK(6).EQ.NSL ) BCX(1) = 1.D+3*XLAB(2,NB)*
     &          RHOLB(2,N)*SLB(2,NB)*PORDB(2,NB)/WTMA
!
!---      Convert species concentrations to total-kinetic
!         concentrations  ---
!
          ELSEIF( NSL.LE.NSOLU+NEQC+NEQK ) THEN
            NEQ = NSL-NSOLU-NEQC
            YSPLX = 0.D+0
            YSPGX = 0.D+0
            YSPNX = 0.D+0
            DO NSP = 1,IEQ_K(1,NEQ)
              DO NSPX = 1,IBCSP(1,NB)
                IF( IBCSP(NSPX+1,NB).EQ.IEQ_K(NSP+1,NEQ) ) THEN
!
!---              Aqueous species ---
!
                  IF( IEQ_K(NSP+1,NEQ).LE.NSPL ) THEN
                    IF( IBCT(NSOLU+LUK+1,NB).EQ.8 .OR.
     &                IBCT(NSOLU+LUK+1,NB).EQ.14 .OR.
     &                IBCT(NSOLU+LUK+1,NB).EQ.23 ) THEN
                      BCX(NSPX+1) = BCX(NSPX+1)*XVLB
                      YSPLX = YSPLX + EQ_K(NSP,NEQ)*BCX(NSPX+1)
                      BCX(1) = BCX(1) + EQ_K(NSP,NEQ)*BCX(NSPX+1)
                    ENDIF
!
!---              Gas species ---
!
                  ELSEIF( IEQ_K(NSP+1,NEQ).LE.NSPL+NSPG ) THEN
                    IF( IBCT(NSOLU+LUK+2,NB).EQ.8 .OR.
     &                IBCT(NSOLU+LUK+2,NB).EQ.14 .OR.
     &                IBCT(NSOLU+LUK+2,NB).EQ.23 ) THEN
                      BCX(NSPX+1) = BCX(NSPX+1)*XVLB
                      YSPGX = YSPGX + EQ_K(NSP,NEQ)*BCX(NSPX+1)
                      BCX(1) = BCX(1) + EQ_K(NSP,NEQ)*BCX(NSPX+1)
                    ENDIF
!
!---              Nonaqueous-liquid species ---
!
                  ELSE
                    IF( IBCT(NSOLU+LUK+2,NB).EQ.8 .OR.
     &                IBCT(NSOLU+LUK+2,NB).EQ.14 .OR.
     &                IBCT(NSOLU+LUK+2,NB).EQ.23 ) THEN
                      BCX(NSPX+1) = BCX(NSPX+1)*XVNB
                      YSPNX = YSPNX + EQ_C(NSP,NEQ)*BCX(NSPX+1)
                      BCX(1) = BCX(1) + EQ_K(NSP,NEQ)*BCX(NSPX+1)
                    ENDIF
                  ENDIF                    
                ENDIF
              ENDDO
            ENDDO
!
!---        Linked aqueous CO2   ---
!
            IF( ISPLK(6).EQ.NSL ) BCX(1) = 1.D+3*XLAB(2,NB)*
     &          RHOLB(2,N)*SLB(2,NB)*PORDB(2,NB)/WTMA
          ENDIF
          IF( ABS(BCX(1))/EPSL.LT.EPSL ) THEN
            YSPLX = 0.D+0
            YSPGX = 0.D+0
            YSPNX = 0.D+0
          ELSE
            YSPLX = YSPLX/BCX(1)
            YSPGX = YSPGX/BCX(1)
            YSPNX = YSPNX/BCX(1)
          ENDIF
!
!---      Phase-volumetric concentration ratios  ---
!
          YLBX = MAX( MIN( 1.D+0,YSPLX ),0.D+0 )
          YGBX = MAX( MIN( 1.D+0,YSPGX ),0.D+0 )
          YNBX = MAX( MIN( 1.D+0,YSPNX ),0.D+0 )
          FCL = 0.D+0
          IF( XVLB/EPSL.GT.EPSL ) FCL = YLBX/XVLB
          FCG = 0.D+0
          IF( XVGB/EPSL.GT.EPSL ) FCG = YGBX/XVGB
          FCN = 0.D+0
          IF( XVNB/EPSL.GT.EPSL ) FCN = YNBX/XVNB
!
!---      Phase mole fractions  ---
!
          YLB(NB,NSL) = YLBX
          YGB(NB,NSL) = YGBX
          YNB(NB,NSL) = YNBX
          CB(NB,NSL) = BCX(1)
        ENDIF
#endif
!
!---  Bottom boundary  ---
!
        IF( IBCD(NB).EQ.-3 ) THEN
          NPZ = NSZ(N)
!
!---      Hydraulic dispersion  ---
!
          IF( IDISP.EQ.1 ) THEN
            CALL ADVBB( PORD(2,N),PORDB(2,NB),SL(2,N),SLB(2,NB),
     &        UL,VL,WL,ULBX,VLBX,WLBX,N,MF )
            CALL SHDP( WLBX,ULBX,VLBX,DISPL(IZN),DISPT(IZN),DPLB )
            CALL ADVBB( PORD(2,N),PORDB(2,NB),SG(2,N),SGB(2,NB),
     &        UG,VG,WG,UGBX,VGBX,WGBX,N,MF )
            CALL SHDP( WGBX,UGBX,VGBX,DISPL(IZN),DISPT(IZN),DPGB )
            CALL ADVBB( PORD(2,N),PORDB(2,NB),SN(2,N),SNB(2,NB),
     &        UN,VN,WN,UNBX,VNBX,WNBX,N,MF )
            CALL SHDP( WNBX,UNBX,VNBX,DISPL(IZN),DISPT(IZN),DPNB )
          ELSE
            DPLB = 0.D+0
            DPGB = 0.D+0
            DPNB = 0.D+0
          ENDIF
          FLB = AFZ(NPZ)*WL(1,NPZ)
          FGB = AFZ(NPZ)*WG(1,NPZ)
          FNB = AFZ(NPZ)*WN(1,NPZ)
          CRLB = ABS( WL(1,NPZ) )*DT/(DZGF(N)*XVLB+SMALL)
          CRGB = ABS( WG(1,NPZ) )*DT/(DZGF(N)*XVGB+SMALL)
          CRNB = ABS( WN(1,NPZ) )*DT/(DZGF(N)*XVNB+SMALL)
!
!---      Dirichlet ---
!
          IF( IBCT(NSL+LUK,NB).EQ.1 .OR. IBCT(NSL+LUK,NB).EQ.8 .OR.
     &      IBCT(NSL+LUK,NB).EQ.9 .OR. IBCT(NSL+LUK,NB).EQ.12 ) THEN
            TCOR = (TB(2,NB)+TABS)/TSPRF
            SMDLB = SMDL(NSL)*TCOR*(VISRL/VISLB(2,NB))
            DLB = TORLB(2,NB)*SLB(2,NB)*PORDB(2,NB)*SMDLB
            INDX = 16
            DLZ = DIFMN(DLB,DLP,DZGF(N),DZGF(N),WL(1,NPZ),INDX)
            DLZ = AFZ(NPZ)*(DLZ+DPLB)/(5.D-1*DZGF(N))
            PCOR = (PGB(2,NB)+PATM)/PATM
            SMDGB = SMDG(NSL)*(TCOR**1.75)/PCOR
            DGB = TORGB(2,NB)*SGB(2,NB)*PORDB(2,NB)*SMDGB
            INDX = 16
            DGZ = DIFMN(DGB,DGP,DZGF(N),DZGF(N),WG(1,NPZ),INDX)
            DGZ = AFZ(NPZ)*(DGZ+DPGB)/(5.D-1*DZGF(N))
            PCOR = (PNB(2,NB)+PATM)/PATM
            SMDNB = SMDN(NSL)*(TCOR**1.75)/PCOR
            DNB = TORNB(2,NB)*SNB(2,NB)*PORDB(2,NB)*SMDNB
            INDX = 16
            DNZ = DIFMN(DNB,DNP,DZGF(N),DZGF(N),WN(1,NPZ),INDX)
            DNZ = AFZ(NPZ)*(DNZ+DPNB)/(5.D-1*DZGF(N))
!
!---        TVD Transport for the boundary surface  ---
!
            IF( ISLC(1).GE.1 )  THEN
              IF( FLB.GE.ZERO ) THEN
                WCLZ = BCX(1)*FCL*FLB
              ELSEIF( FLB.LT.ZERO .AND. K.LT.KFLD ) THEN
                NBT = N+IJFLD
                FCLT = YL(NBT,NSL)/(SL(2,NBT)*PORD(2,NBT)+SMALL)
                R = ((C(N,NSL)*FCLP-C(NBT,NSL)*FCLT)
     &            /(BCX(1)*FCL-C(N,NSL)*FCLP+SMALL))
     &            *(DZGF(N)/(DZGF(N)+DZGF(NBT)))
                THETA = FLIMIT( R,CRLB,ISLC(1) )
                WCLZ = BCX(1)*FLB*THETA*FCL
     &            + C(N,NSL)*FLB*(1.D+0-THETA)*FCLP
              ELSEIF( FLB.LT.ZERO .AND. K.EQ.KFLD ) THEN
                WCLZ = C(N,NSL)*FLB*FCLP
              ENDIF
              IF( FGB.GE.ZERO ) THEN
                WCGZ = BCX(1)*FCG*FGB
              ELSEIF( FGB.LT.ZERO .AND. K.LT.KFLD ) THEN
                NBT = N+IJFLD
                FCGT = YG(NBT,NSL)/(SG(2,NBT)*PORD(2,NBT)+SMALL)
                R = ((C(N,NSL)*FCGP-C(NBT,NSL)*FCGT)
     &            /(BCX(1)*FCG-C(N,NSL)*FCGP+SMALL))
     &            *(DZGF(N)/(DZGF(N)+DZGF(NBT)))
                THETA = FLIMIT( R,CRGB,ISLC(1) )
                WCGZ = BCX(1)*FGB*THETA*FCG
     &            + C(N,NSL)*FGB*(1.D+0-THETA)*FCGP
              ELSEIF( FGB.LT.ZERO .AND. K.EQ.KFLD ) THEN
                WCGZ = C(N,NSL)*FGB*FCGP
              ENDIF
              IF( FNB.GE.ZERO ) THEN
                WCNZ = BCX(1)*FCN*FNB
              ELSEIF( FNB.LT.ZERO .AND. K.LT.KFLD ) THEN
                NBT = N+IJFLD
                FCNT = YN(NBT,NSL)/(SN(2,NBT)*PORD(2,NBT)+SMALL)
                R = ((C(N,NSL)*FCNP-C(NBT,NSL)*FCNT)
     &            /(BCX(1)*FCN-C(N,NSL)*FCNP+SMALL))
     &            *(DZGF(N)/(DZGF(N)+DZGF(NBT)))
                THETA = FLIMIT( R,CRNB,ISLC(1) )
                WCNZ = BCX(1)*FNB*THETA*FCN
     &            + C(N,NSL)*FNB*(1.D+0-THETA)*FCNP
              ELSEIF( FNB.LT.ZERO .AND. K.EQ.KFLD ) THEN
                WCNZ = C(N,NSL)*FNB*FCNP
              ENDIF
              AB = DLZ*FCL + DGZ*FCG + DNZ*FCN
              AP = DLZ*FCLP + DGZ*FCGP + DNZ*FCNP
              WC(NPZ,NSL) = WC(NPZ,NSL) + (WCLZ+WCGZ+WCNZ)/AFZ(NPZ)
              BLU(MP) = BLU(MP) + WCLZ + WCGZ + WCNZ
!
!---          TVD Transport for interior surface adjacent to boundary  ---
!
              NQZ = NPZ+IJFLD
              FLT = AFZ(NQZ)*WL(1,NQZ)
              IF( FLT.GE.ZERO ) THEN
                NBT = N+IJFLD
                XVLX = SL(2,NBT)*PORD(2,NBT)
                FCLT = YL(NBT,NSL)/(XVLX+SMALL)
                CRLT = ABS( WL(1,NQZ) )*DT/(DZGP(NQZ)*XVLX+SMALL)
                R = ((C(N,NSL)*FCLP-BCX(1)*FCL)
     &            /(C(NBT,NSL)*FCLT-C(N,NSL)*FCLP+SMALL))
     &            *((DZGF(NBT)+DZGF(N))/DZGF(N))
                THETA = FLIMIT( R,CRLT,ISLC(1) )
                DZF = DZGF(N)/(DZGF(N)+DZGF(NBT))
                WCLZ = C(N,NSL)*FLT*(1.D+0-THETA*DZF)*FCLP
     &            + C(NBT,NSL)*FLT*THETA*DZF*FCLT
                WCLZF = CO(N,NSL)*FLT*FCLP
                WC(NQZ,NSL) = WC(NQZ,NSL) + (WCLZ-WCLZF)/AFZ(NQZ)
                BLU(MP) = BLU(MP) - WCLZ + WCLZF
                BLU(IXP(NBT)) = BLU(IXP(NBT)) + WCLZ - WCLZF
              ENDIF
              FGT = AFZ(NQZ)*WG(1,NQZ)
              IF( FGT.GE.ZERO ) THEN
                NBT = N+IJFLD
                XVGX = SG(2,NBT)*PORD(2,NBT)
                FCGT = YG(NBT,NSL)/(XVGX+SMALL)
                CRGT = ABS( WG(1,NQZ) )*DT/(DZGP(NQZ)*XVGX+SMALL)
                R = ((C(N,NSL)*FCGP-BCX(1)*FCG)
     &            /(C(NBT,NSL)*FCGT-C(N,NSL)*FCGP+SMALL))
     &            *((DZGF(NBT)+DZGF(N))/DZGF(N))
                THETA = FLIMIT( R,CRGT,ISLC(1) )
                DZF = DZGF(N)/(DZGF(N)+DZGF(NBT))
                WCGZ = C(N,NSL)*FGT*(1.D+0-THETA*DZF)*FCGP
     &            + C(NBT,NSL)*FGT*THETA*DZF*FCGT
                WCGZF = CO(N,NSL)*FGT*FCGP
                WC(NQZ,NSL) = WC(NQZ,NSL) + (WCGZ-WCGZF)/AFZ(NQZ)
                BLU(MP) = BLU(MP) - WCGZ + WCGZF
                BLU(IXP(NBT)) = BLU(IXP(NBT)) + WCGZ - WCGZF
              ENDIF
              FNT = AFZ(NQZ)*WN(1,NQZ)
              IF( FNT.GE.ZERO ) THEN
                NBT = N+IJFLD
                XVNX = SN(2,NBT)*PORD(2,NBT)
                FCNT = YN(NBT,NSL)/(XVNX+SMALL)
                CRNT = ABS( WN(1,NQZ) )*DT/(DZGP(NQZ)*XVNX+SMALL)
                R = ((C(N,NSL)*FCNP-BCX(1)*FCN)
     &            /(C(NBT,NSL)*FCNT-C(N,NSL)*FCNP+SMALL))
     &            *((DZGF(NBT)+DZGF(N))/DZGF(N))
                THETA = FLIMIT( R,CRNT,ISLC(1) )
                DZF = DZGF(N)/(DZGF(N)+DZGF(NBT))
                WCNZ = C(N,NSL)*FNT*(1.D+0-THETA*DZF)*FCNP
     &            + C(NBT,NSL)*FNT*THETA*DZF*FCNT
                WCNZF = CO(N,NSL)*FNT*FCNP
                WC(NQZ,NSL) = WC(NQZ,NSL) + (WCNZ-WCNZF)/AFZ(NQZ)
                BLU(MP) = BLU(MP) - WCNZ + WCNZF
                BLU(IXP(NBT)) = BLU(IXP(NBT)) + WCNZ - WCNZF
              ENDIF
            ELSE
              ALB = MAX( FLB,ZERO ) +
     &          DLZ*MAX((ONE-(TENTH*ABS(FLB)/(DLZ+SMALL)))**5,ZERO)
              AGB = MAX( FGB,ZERO ) +
     &          DGZ*MAX((ONE-(TENTH*ABS(FGB)/(DGZ+SMALL)))**5,ZERO)
              ANB = MAX( FNB,ZERO ) +
     &          DNZ*MAX((ONE-(TENTH*ABS(FNB)/(DNZ+SMALL)))**5,ZERO)
              AP = (ALB-FLB)*FCLP + (AGB-FGB)*FCGP + (ANB-FNB)*FCNP
              AB = ALB*FCL + AGB*FCG + ANB*FCN
            ENDIF
            BLU(MP) = BLU(MP) + AB*BCX(1)
!
!---      Outflow ---
!
          ELSEIF( IBCT(NSL+LUK,NB).EQ.7 ) THEN
            FLB = MIN( FLB,0.D+0 )
            FGB = MIN( FGB,0.D+0 )
            FNB = MIN( FNB,0.D+0 )
!
!---        TVD Transport for the boundary surface  ---
!
            IF( ISLC(1).GE.1 )  THEN
              WCLZ = 0.D+0
              IF( FLB.LT.ZERO .AND. K.LT.KFLD ) THEN
                NBT = N+IJFLD
                FCLT = YL(NBT,NSL)/(SL(2,NBT)*PORD(2,NBT)+SMALL)
                R = ((C(N,NSL)*FCLP-C(NBT,NSL)*FCLT)
     &            /(BCX(1)*FCL-C(N,NSL)*FCLP+SMALL))
     &            *(DZGF(N)/(DZGF(N)+DZGF(NBT)))
                THETA = FLIMIT( R,CRLB,ISLC(1) )
                WCLZ = BCX(1)*FLB*THETA*FCL
     &            + C(N,NSL)*FLB*(1.D+0-THETA)*FCLP
              ELSEIF( FLB.LT.ZERO .AND. K.EQ.KFLD ) THEN
                WCLZ = C(N,NSL)*FLB*FCLP
              ENDIF
              WCGZ = 0.D+0
              IF( FGB.LT.ZERO .AND. K.LT.KFLD ) THEN
                NBT = N+IJFLD
                FCGT = YG(NBT,NSL)/(SG(2,NBT)*PORD(2,NBT)+SMALL)
                R = ((C(N,NSL)*FCGP-C(NBT,NSL)*FCGT)
     &            /(BCX(1)*FCG-C(N,NSL)*FCGP+SMALL))
     &            *(DZGF(N)/(DZGF(N)+DZGF(NBT)))
                THETA = FLIMIT( R,CRGB,ISLC(1) )
                WCGZ = BCX(1)*FGB*THETA*FCG
     &            + C(N,NSL)*FGB*(1.D+0-THETA)*FCGP
              ELSEIF( FGB.LT.ZERO .AND. K.EQ.KFLD ) THEN
                WCGZ = C(N,NSL)*FGB*FCGP
              ENDIF
              WCNZ = 0.D+0
              IF( FNB.LT.ZERO .AND. K.LT.KFLD ) THEN
                NBT = N+IJFLD
                FCNT = YN(NBT,NSL)/(SN(2,NBT)*PORD(2,NBT)+SMALL)
                R = ((C(N,NSL)*FCNP-C(NBT,NSL)*FCNT)
     &            /(BCX(1)*FCN-C(N,NSL)*FCNP+SMALL))
     &            *(DZGF(N)/(DZGF(N)+DZGF(NBT)))
                THETA = FLIMIT( R,CRNB,ISLC(1) )
                WCNZ = BCX(1)*FNB*THETA*FCN
     &            + C(N,NSL)*FNB*(1.D+0-THETA)*FCNP
              ELSEIF( FNB.LT.ZERO .AND. K.EQ.KFLD ) THEN
                WCNZ = C(N,NSL)*FNB*FCNP
              ENDIF
              AB = 0.D+0
              AP = 0.D+0
              WC(NPZ,NSL) = WC(NPZ,NSL) + (WCLZ+WCGZ+WCNZ)/AFZ(NPZ)
              BLU(MP) = BLU(MP) + WCLZ + WCGZ + WCNZ
!
!---          TVD Transport for interior surface adjacent to boundary  ---
!
              NQZ = NPZ+IJFLD
              FLT = AFZ(NQZ)*WL(1,NQZ)
              IF( FLT.GE.ZERO ) THEN
                NBT = N+IJFLD
                XVLX = SL(2,NBT)*PORD(2,NBT)
                FCLT = YL(NBT,NSL)/(XVLX+SMALL)
                CRLT = ABS( WL(1,NQZ) )*DT/(DZGP(NQZ)*XVLX+SMALL)
                R = ((C(N,NSL)*FCLP-BCX(1)*FCL)
     &            /(C(NBT,NSL)*FCLT-C(N,NSL)*FCLP+SMALL))
     &            *((DZGF(NBT)+DZGF(N))/DZGF(N))
                THETA = FLIMIT( R,CRLT,ISLC(1) )
                DZF = DZGF(N)/(DZGF(N)+DZGF(NBT))
                WCLZ = C(N,NSL)*FLT*(1.D+0-THETA*DZF)*FCLP
     &            + C(NBT,NSL)*FLT*THETA*DZF*FCLT
                WCLZF = CO(N,NSL)*FLT*FCLP
                WC(NQZ,NSL) = WC(NQZ,NSL) + (WCLZ-WCLZF)/AFZ(NQZ)
                BLU(MP) = BLU(MP) - WCLZ + WCLZF
                BLU(IXP(NBT)) = BLU(IXP(NBT)) + WCLZ - WCLZF
              ENDIF
              FGT = AFZ(NQZ)*WG(1,NQZ)
              IF( FGT.GE.ZERO ) THEN
                NBT = N+IJFLD
                XVGX = SG(2,NBT)*PORD(2,NBT)
                FCGT = YG(NBT,NSL)/(XVGX+SMALL)
                CRGT = ABS( WG(1,NQZ) )*DT/(DZGP(NQZ)*XVGX+SMALL)
                R = ((C(N,NSL)*FCGP-BCX(1)*FCG)
     &            /(C(NBT,NSL)*FCGT-C(N,NSL)*FCGP+SMALL))
     &            *((DZGF(NBT)+DZGF(N))/DZGF(N))
                THETA = FLIMIT( R,CRGT,ISLC(1) )
                DZF = DZGF(N)/(DZGF(N)+DZGF(NBT))
                WCGZ = C(N,NSL)*FGT*(1.D+0-THETA*DZF)*FCGP
     &            + C(NBT,NSL)*FGT*THETA*DZF*FCGT
                WCGZF = CO(N,NSL)*FGT*FCGP
                WC(NQZ,NSL) = WC(NQZ,NSL) + (WCGZ-WCGZF)/AFZ(NQZ)
                BLU(MP) = BLU(MP) - WCGZ + WCGZF
                BLU(IXP(NBT)) = BLU(IXP(NBT)) + WCGZ - WCGZF
              ENDIF
              FNT = AFZ(NQZ)*WN(1,NQZ)
              IF( FNT.GE.ZERO ) THEN
                NBT = N+IJFLD
                XVNX = SN(2,NBT)*PORD(2,NBT)
                FCNT = YN(NBT,NSL)/(XVNX+SMALL)
                CRNT = ABS( WN(1,NQZ) )*DT/(DZGP(NQZ)*XVNX+SMALL)
                R = ((C(N,NSL)*FCNP-BCX(1)*FCN)
     &            /(C(NBT,NSL)*FCNT-C(N,NSL)*FCNP+SMALL))
     &            *((DZGF(NBT)+DZGF(N))/DZGF(N))
                THETA = FLIMIT( R,CRNT,ISLC(1) )
                DZF = DZGF(N)/(DZGF(N)+DZGF(NBT))
                WCNZ = C(N,NSL)*FNT*(1.D+0-THETA*DZF)*FCNP
     &            + C(NBT,NSL)*FNT*THETA*DZF*FCNT
                WCNZF = CO(N,NSL)*FNT*FCNP
                WC(NQZ,NSL) = WC(NQZ,NSL) + (WCNZ-WCNZF)/AFZ(NQZ)
                BLU(MP) = BLU(MP) - WCNZ + WCNZF
                BLU(IXP(NBT)) = BLU(IXP(NBT)) + WCNZ - WCNZF
              ENDIF
            ELSE
              ALB = MAX( FLB,ZERO )
              AGB = MAX( FGB,ZERO )
              ANB = MAX( FNB,ZERO )
              AP = (ALB-FLB)*FCLP + (AGB-FGB)*FCGP + (ANB-FNB)*FCNP
              AB = ALB*FCL + AGB*FCG + ANB*FCN
            ENDIF
            BLU(MP) = BLU(MP) + AB*BCX(1)
!
!---      Inflow ---
!
          ELSEIF( IBCT(NSL+LUK,NB).EQ.14 ) THEN
            FLB = MAX( FLB,0.D+0 )
            FGB = MAX( FGB,0.D+0 )
            FNB = MAX( FNB,0.D+0 )
!
!---        TVD Transport for the boundary surface  ---
!
            IF( ISLC(1).GE.1 )  THEN
              WCLZ = 0.D+0
              IF( FLB.GE.ZERO ) WCLZ = BCX(1)*FCL*FLB
              WCGZ = 0.D+0
              IF( FGB.GE.ZERO ) WCGZ = BCX(1)*FCG*FGB
              WCNZ = 0.D+0
              IF( FNB.GE.ZERO ) WCNZ = BCX(1)*FCN*FNB
              AB = 0.D+0
              AP = 0.D+0
              WC(NPZ,NSL) = WC(NPZ,NSL) + (WCLZ+WCGZ+WCNZ)/AFZ(NPZ)
              BLU(MP) = BLU(MP) + WCLZ + WCGZ + WCNZ
!
!---          TVD Transport for interior surface adjacent to boundary  ---
!
              NQZ = NPZ+IJFLD
              FLT = AFZ(NQZ)*WL(1,NQZ)
              IF( FLT.GE.ZERO ) THEN
                NBT = N+IJFLD
                XVLX = SL(2,NBT)*PORD(2,NBT)
                FCLT = YL(NBT,NSL)/(XVLX+SMALL)
                CRLT = ABS( WL(1,NQZ) )*DT/(DZGP(NQZ)*XVLX+SMALL)
                R = ((C(N,NSL)*FCLP-BCX(1)*FCL)
     &            /(C(NBT,NSL)*FCLT-C(N,NSL)*FCLP+SMALL))
     &            *((DZGF(NBT)+DZGF(N))/DZGF(N))
                THETA = FLIMIT( R,CRLT,ISLC(1) )
                DZF = DZGF(N)/(DZGF(N)+DZGF(NBT))
                WCLZ = C(N,NSL)*FLT*(1.D+0-THETA*DZF)*FCLP
     &            + C(NBT,NSL)*FLT*THETA*DZF*FCLT
                WCLZF = CO(N,NSL)*FLT*FCLP
                WC(NQZ,NSL) = WC(NQZ,NSL) + (WCLZ-WCLZF)/AFZ(NQZ)
                BLU(MP) = BLU(MP) - WCLZ + WCLZF
                BLU(IXP(NBT)) = BLU(IXP(NBT)) + WCLZ - WCLZF
              ENDIF
              FGT = AFZ(NQZ)*WG(1,NQZ)
              IF( FGT.GE.ZERO ) THEN
                NBT = N+IJFLD
                XVGX = SG(2,NBT)*PORD(2,NBT)
                FCGT = YG(NBT,NSL)/(XVGX+SMALL)
                CRGT = ABS( WG(1,NQZ) )*DT/(DZGP(NQZ)*XVGX+SMALL)
                R = ((C(N,NSL)*FCGP-BCX(1)*FCG)
     &            /(C(NBT,NSL)*FCGT-C(N,NSL)*FCGP+SMALL))
     &            *((DZGF(NBT)+DZGF(N))/DZGF(N))
                THETA = FLIMIT( R,CRGT,ISLC(1) )
                DZF = DZGF(N)/(DZGF(N)+DZGF(NBT))
                WCGZ = C(N,NSL)*FGT*(1.D+0-THETA*DZF)*FCGP
     &            + C(NBT,NSL)*FGT*THETA*DZF*FCGT
                WCGZF = CO(N,NSL)*FGT*FCGP
                WC(NQZ,NSL) = WC(NQZ,NSL) + (WCGZ-WCGZF)/AFZ(NQZ)
                BLU(MP) = BLU(MP) - WCGZ + WCGZF
                BLU(IXP(NBT)) = BLU(IXP(NBT)) + WCGZ - WCGZF
              ENDIF
              FNT = AFZ(NQZ)*WN(1,NQZ)
              IF( FNT.GE.ZERO ) THEN
                NBT = N+IJFLD
                XVNX = SN(2,NBT)*PORD(2,NBT)
                FCNT = YN(NBT,NSL)/(XVNX+SMALL)
                CRNT = ABS( WN(1,NQZ) )*DT/(DZGP(NQZ)*XVNX+SMALL)
                R = ((C(N,NSL)*FCNP-BCX(1)*FCN)
     &            /(C(NBT,NSL)*FCNT-C(N,NSL)*FCNP+SMALL))
     &            *((DZGF(NBT)+DZGF(N))/DZGF(N))
                THETA = FLIMIT( R,CRNT,ISLC(1) )
                DZF = DZGF(N)/(DZGF(N)+DZGF(NBT))
                WCNZ = C(N,NSL)*FNT*(1.D+0-THETA*DZF)*FCNP
     &            + C(NBT,NSL)*FNT*THETA*DZF*FCNT
                WCNZF = CO(N,NSL)*FNT*FCNP
                WC(NQZ,NSL) = WC(NQZ,NSL) + (WCNZ-WCNZF)/AFZ(NQZ)
                BLU(MP) = BLU(MP) - WCNZ + WCNZF
                BLU(IXP(NBT)) = BLU(IXP(NBT)) + WCNZ - WCNZF
              ENDIF
            ELSE
              ALB = MAX( FLB,ZERO )
              AGB = MAX( FGB,ZERO )
              ANB = MAX( FNB,ZERO )
              AP = (ALB-FLB)*FCLP + (AGB-FGB)*FCGP + (ANB-FNB)*FCNP
              AB = ALB*FCL + AGB*FCG + ANB*FCN
            ENDIF
            BLU(MP) = BLU(MP) + AB*BCX(1)
!
!---      Inflow-Outflow (no TVD Transport) ---
!
          ELSEIF( IBCT(NSL+LUK,NB).EQ.23 ) THEN
            ALB = MAX( FLB,ZERO )
            AGB = MAX( FGB,ZERO )
            ANB = MAX( FNB,ZERO )
            AP = (ALB-FLB)*FCLP + (AGB-FGB)*FCGP + (ANB-FNB)*FCNP
            AB = ALB*FCL + AGB*FCG + ANB*FCN
            BLU(MP) = BLU(MP) + AB*BCX(1)
          ENDIF
!
!---  South boundary  ---
!
        ELSEIF( IBCD(NB).EQ.-2 ) THEN
          NPY = NSY(N)
!
!---      Hydraulic dispersion  ---
!
          IF( IDISP.EQ.1 ) THEN
            CALL ADVSB( PORD(2,N),PORDB(2,NB),SL(2,N),SLB(2,NB),
     &        UL,VL,WL,ULSX,VLSX,WLSX,N,MF )
            CALL SHDP( VLSX,WLSX,ULSX,DISPL(IZN),DISPT(IZN),DPLS )
            CALL ADVSB( PORD(2,N),PORDB(2,NB),SG(2,N),SGB(2,NB),
     &        UG,VG,WG,UGSX,VGSX,WGSX,N,MF )
            CALL SHDP( VGSX,WGSX,UGSX,DISPL(IZN),DISPT(IZN),DPGS )
            CALL ADVSB( PORD(2,N),PORDB(2,NB),SN(2,N),SNB(2,NB),
     &        UN,VN,WN,UNSX,VNSX,WNSX,N,MF )
            CALL SHDP( VNSX,WNSX,UNSX,DISPL(IZN),DISPT(IZN),DPNS )
          ELSE
            DPLS = 0.D+0
            DPGS = 0.D+0
            DPNS = 0.D+0
          ENDIF
          FLS = AFY(NPY)*VL(1,NPY)
          FGS = AFY(NPY)*VG(1,NPY)
          FNS = AFY(NPY)*VN(1,NPY)
          CRLS = ABS( VL(1,NPY) )*DT/(RP(I)*DYGF(N)*XVLB+SMALL)
          CRGS = ABS( VG(1,NPY) )*DT/(RP(I)*DYGF(N)*XVGB+SMALL)
          CRNS = ABS( VN(1,NPY) )*DT/(RP(I)*DYGF(N)*XVNB+SMALL)
!
!---  Dirichlet ---
!
          IF( IBCT(NSL+LUK,NB).EQ.1 .OR. IBCT(NSL+LUK,NB).EQ.8 .OR.
     &      IBCT(NSL+LUK,NB).EQ.9 .OR. IBCT(NSL+LUK,NB).EQ.12 ) THEN
            TCOR = (TB(2,NB)+TABS)/TSPRF
            SMDLB = SMDL(NSL)*TCOR*(VISRL/VISLB(2,NB))
            DLB = TORLB(2,NB)*SLB(2,NB)*PORDB(2,NB)*SMDLB
            INDX = 16
            DLY = DIFMN(DLB,DLP,DYGF(N),DYGF(N),VL(1,NPY),INDX)
            DLY = AFY(NPY)*(DLY+DPLS)/RP(I)/(5.D-1*DYGF(N))
            PCOR = (PGB(2,NB)+PATM)/PATM
            SMDGB = SMDG(NSL)*(TCOR**1.75)/PCOR
            DGB = TORGB(2,NB)*SGB(2,NB)*PORDB(2,NB)*SMDGB
            INDX = 16
            DGY = DIFMN(DGB,DGP,DYGF(N),DYGF(N),VG(1,NPY),INDX)
            DGY = AFY(NPY)*(DGY+DPGS)/RP(I)/(5.D-1*DYGF(N))
            PCOR = (PNB(2,NB)+PATM)/PATM
            SMDNB = SMDN(NSL)*(TCOR**1.75)/PCOR
            DNB = TORNB(2,NB)*SNB(2,NB)*PORDB(2,NB)*SMDNB
            INDX = 16
            DNY = DIFMN(DNB,DNP,DYGF(N),DYGF(N),VN(1,NPY),INDX)
            DNY = AFY(NPY)*(DNY+DPNS)/RP(I)/(5.D-1*DYGF(N))
!
!---  TVD Transport for the boundary surface  ---
!
            IF( ISLC(1).GE.1 )  THEN
              IF( FLS.GE.ZERO ) THEN
                VCLY = BCX(1)*FCL*FLS
              ELSEIF( FLS.LT.ZERO .AND. J.LT.JFLD ) THEN
                NBN = N+IFLD
                FCLN = YL(NBN,NSL)/(SL(2,NBN)*PORD(2,NBN)+SMALL)
                R = ((C(N,NSL)*FCLP-C(NBN,NSL)*FCLN)
     &            /(BCX(1)*FCL-C(N,NSL)*FCLP+SMALL))
     &            *(DYGF(N)/(DYGF(N)+DYGF(NBN)))
                THETA = FLIMIT( R,CRLS,ISLC(1) )
                VCLY = BCX(1)*FLS*THETA*FCL
     &            + C(N,NSL)*FLS*(1.D+0-THETA)*FCLP
              ELSEIF( FLS.LT.ZERO .AND. J.EQ.JFLD ) THEN
                 VCLY = C(N,NSL)*FLS*FCLP
              ENDIF
              IF( FGS.GE.ZERO ) THEN
                VCGY = BCX(1)*FCG*FGS
              ELSEIF( FGS.LT.ZERO .AND. J.LT.JFLD ) THEN
                NBN = N+IFLD
                FCGN = YG(NBN,NSL)/(SG(2,NBN)*PORD(2,NBN)+SMALL)
                R = ((C(N,NSL)*FCGP-C(NBN,NSL)*FCGN)
     &            /(BCX(1)*FCG-C(N,NSL)*FCGP+SMALL))
     &            *(DYGF(N)/(DYGF(N)+DYGF(NBN)))
                THETA = FLIMIT( R,CRGS,ISLC(1) )
                VCGY = BCX(1)*FGS*THETA*FCG
     &            + C(N,NSL)*FGS*(1.D+0-THETA)*FCGP
              ELSEIF( FGS.LT.ZERO .AND. J.EQ.JFLD ) THEN
                VCGY = C(N,NSL)*FGS*FCGP
              ENDIF
              IF( FNS.GE.ZERO ) THEN
                VCNY = BCX(1)*FCN*FNS
              ELSEIF( FNS.LT.ZERO .AND. J.LT.JFLD ) THEN
                NBN = N+IFLD
                FCNN = YN(NBN,NSL)/(SN(2,NBN)*PORD(2,NBN)+SMALL)
                R = ((C(N,NSL)*FCNP-C(NBN,NSL)*FCNN)
     &            /(BCX(1)*FCN-C(N,NSL)*FCNP+SMALL))
     &            *(DYGF(N)/(DYGF(N)+DYGF(NBN)))
                THETA = FLIMIT( R,CRNS,ISLC(1) )
                VCNY = BCX(1)*FNS*THETA*FCN
     &            + C(N,NSL)*FNS*(1.D+0-THETA)*FCNP
              ELSEIF( FNS.LT.ZERO .AND. J.EQ.JFLD ) THEN
                VCNY = C(N,NSL)*FNS*FCNP
              ENDIF
              AS = DLY*FCL + DGY*FCG + DNY*FCN
              AP = DLY*FCLP + DGY*FCGP + DNY*FCNP
              VC(NPY,NSL) = VC(NPY,NSL) + (VCLY+VCGY+VCNY)/AFY(NPY)
              BLU(MP) = BLU(MP) + VCLY + VCGY + VCNY
!
!---  TVD Transport for interior surface adjacent to boundary  ---
!
              NQY = NPY+IFLD
              FLN = AFY(NQY)*VL(1,NQY)
              IF( FLN.GE.ZERO ) THEN
                NBN = N+IFLD
                XVLX = SL(2,NBN)*PORD(2,NBN)
                FCLN = YL(NBN,NSL)/(XVLX+SMALL)
                CRLN = ABS( VL(1,NQY) )*DT/(DYGP(NQY)*RP(I)*XVLX+SMALL)
                R = ((C(N,NSL)*FCLP-BCX(1)*FCL)
     &            /(C(NBN,NSL)*FCLN-C(N,NSL)*FCLP+SMALL))
     &            *((DYGF(NBN)+DYGF(N))/DYGF(N))
                THETA = FLIMIT( R,CRLN,ISLC(1) )
                DYF = DYGF(N)/(DYGF(N)+DYGF(NBN))
                VCLY = C(N,NSL)*FLN*(1.D+0-THETA*DYF)*FCLP
     &            + C(NBN,NSL)*FLN*THETA*DYF*FCLN
                VCLYF = CO(N,NSL)*FLN*FCLP
                VC(NQY,NSL) = VC(NQY,NSL) + (VCLY-VCLYF)/AFY(NQY)
                BLU(MP) = BLU(MP) - VCLY + VCLYF
                BLU(IXP(NBN)) = BLU(IXP(NBN)) + VCLY - VCLYF
              ENDIF
              FGN = AFY(NQY)*VG(1,NQY)
              IF( FGN.GE.ZERO ) THEN
                NBN = N+IFLD
                XVGX = SG(2,NBN)*PORD(2,NBN)
                FCGN = YG(NBN,NSL)/(XVGX+SMALL)
                CRGN = ABS( VG(1,NQY) )*DT/(DYGP(NQY)*RP(I)*XVGX+SMALL)
                R = ((C(N,NSL)*FCGP-BCX(1)*FCG)
     &            /(C(NBN,NSL)*FCGN-C(N,NSL)*FCGP+SMALL))
     &            *((DYGF(NBN)+DYGF(N))/DYGF(N))
                THETA = FLIMIT( R,CRGN,ISLC(1) )
                DYF = DYGF(N)/(DYGF(N)+DYGF(NBN))
                VCGY = C(N,NSL)*FGN*(1.D+0-THETA*DYF)*FCGP
     &            + C(NBN,NSL)*FGN*THETA*DYF*FCGN
                VCGYF = CO(N,NSL)*FGN*FCGP
                VC(NQY,NSL) = VC(NQY,NSL) + (VCGY-VCGYF)/AFY(NQY)
                BLU(MP) = BLU(MP) - VCGY + VCGYF
                BLU(IXP(NBN)) = BLU(IXP(NBN)) + VCGY - VCGYF
              ENDIF
              FNN = AFY(NQY)*VN(1,NQY)
              IF( FNN.GE.ZERO ) THEN
                NBN = N+IFLD
                XVNX = SN(2,NBN)*PORD(2,NBN)
                FCNN = YN(NBN,NSL)/(XVNX+SMALL)
                CRNN = ABS( VN(1,NQY) )*DT/(DYGP(NQY)*RP(I)*XVNX+SMALL)
                R = ((C(N,NSL)*FCNP-BCX(1)*FCN)
     &            /(C(NBN,NSL)*FCNN-C(N,NSL)*FCNP+SMALL))
     &            *((DYGF(NBN)+DYGF(N))/DYGF(N))
                THETA = FLIMIT( R,CRNN,ISLC(1) )
                DYF = DYGF(N)/(DYGF(N)+DYGF(NBN))
                VCNY = C(N,NSL)*FNN*(1.D+0-THETA*DYF)*FCNP
     &            + C(NBN,NSL)*FNN*THETA*DYF*FCNN
                VCNYF = CO(N,NSL)*FNN*FCNP
                VC(NQY,NSL) = VC(NQY,NSL) + (VCNY-VCNYF)/AFY(NQY)
                BLU(MP) = BLU(MP) - VCNY + VCNYF
                BLU(IXP(NBN)) = BLU(IXP(NBN)) + VCNY - VCNYF
              ENDIF
            ELSE
              ALS = MAX( FLS,ZERO ) +
     &          DLY*MAX((ONE-(TENTH*ABS(FLS)/(DLY+SMALL)))**5,ZERO)
              AGS = MAX( FGS,ZERO ) +
     &          DGY*MAX((ONE-(TENTH*ABS(FGS)/(DGY+SMALL)))**5,ZERO)
              ANS = MAX( FNS,ZERO ) +
     &          DNY*MAX((ONE-(TENTH*ABS(FNS)/(DNY+SMALL)))**5,ZERO)
              AP = (ALS-FLS)*FCLP + (AGS-FGS)*FCGP + (ANS-FNS)*FCNP
              AS = ALS*FCL + AGS*FCG + ANS*FCN
            ENDIF
            BLU(MP) = BLU(MP) + AS*BCX(1)
!
!---  Outflow ---
!
          ELSEIF( IBCT(NSL+LUK,NB).EQ.7 ) THEN
            FLS = MIN( FLS,0.D+0 )
            FGS = MIN( FGS,0.D+0 )
            FNS = MIN( FNS,0.D+0 )
!
!---  TVD Transport for the boundary surface  ---
!
            IF( ISLC(1).GE.1 )  THEN
              VCLY = 0.D+0
              IF( FLS.LT.ZERO .AND. J.LT.JFLD ) THEN
                NBN = N+IFLD
                FCLN = YL(NBN,NSL)/(SL(2,NBN)*PORD(2,NBN)+SMALL)
                R = ((C(N,NSL)*FCLP-C(NBN,NSL)*FCLN)
     &            /(BCX(1)*FCL-C(N,NSL)*FCLP+SMALL))
     &            *(DYGF(N)/(DYGF(N)+DYGF(NBN)))
                THETA = FLIMIT( R,CRLS,ISLC(1) )
                VCLY = BCX(1)*FLS*THETA*FCL
     &            + C(N,NSL)*FLS*(1.D+0-THETA)*FCLP
              ELSEIF( FLS.LT.ZERO .AND. J.EQ.JFLD ) THEN
                 VCLY = C(N,NSL)*FLS*FCLP
              ENDIF
              VCGY = 0.D+0
              IF( FGS.LT.ZERO .AND. J.LT.JFLD ) THEN
                NBN = N+IFLD
                FCGN = YG(NBN,NSL)/(SG(2,NBN)*PORD(2,NBN)+SMALL)
                R = ((C(N,NSL)*FCGP-C(NBN,NSL)*FCGN)
     &            /(BCX(1)*FCG-C(N,NSL)*FCGP+SMALL))
     &            *(DYGF(N)/(DYGF(N)+DYGF(NBN)))
                THETA = FLIMIT( R,CRGS,ISLC(1) )
                VCGY = BCX(1)*FGS*THETA*FCG
     &            + C(N,NSL)*FGS*(1.D+0-THETA)*FCGP
              ELSEIF( FGS.LT.ZERO .AND. J.EQ.JFLD ) THEN
                VCGY = C(N,NSL)*FGS*FCGP
              ENDIF
              VCNY = 0.D+0
              IF( FNS.LT.ZERO .AND. J.LT.JFLD ) THEN
                NBN = N+IFLD
                FCNN = YN(NBN,NSL)/(SN(2,NBN)*PORD(2,NBN)+SMALL)
                R = ((C(N,NSL)*FCNP-C(NBN,NSL)*FCNN)
     &            /(BCX(1)*FCN-C(N,NSL)*FCNP+SMALL))
     &            *(DYGF(N)/(DYGF(N)+DYGF(NBN)))
                THETA = FLIMIT( R,CRNS,ISLC(1) )
                VCNY = BCX(1)*FNS*THETA*FCN
     &            + C(N,NSL)*FNS*(1.D+0-THETA)*FCNP
              ELSEIF( FNS.LT.ZERO .AND. J.EQ.JFLD ) THEN
                VCNY = C(N,NSL)*FNS*FCNP
              ENDIF
              AS = 0.D+0
              AP = 0.D+0
              VC(NPY,NSL) = VC(NPY,NSL) + (VCLY+VCGY+VCNY)/AFY(NPY)
              BLU(MP) = BLU(MP) + VCLY + VCGY + VCNY
!
!---  TVD Transport for interior surface adjacent to boundary  ---
!
              NQY = NPY+IFLD
              FLN = AFY(NQY)*VL(1,NQY)
              IF( FLN.GE.ZERO ) THEN
                NBN = N+IFLD
                XVLX = SL(2,NBN)*PORD(2,NBN)
                FCLN = YL(NBN,NSL)/(XVLX+SMALL)
                CRLN = ABS( VL(1,NQY) )*DT/(DYGP(NQY)*RP(I)*XVLX+SMALL)
                R = ((C(N,NSL)*FCLP-BCX(1)*FCL)
     &            /(C(NBN,NSL)*FCLN-C(N,NSL)*FCLP+SMALL))
     &            *((DYGF(NBN)+DYGF(N))/DYGF(N))
                THETA = FLIMIT( R,CRLN,ISLC(1) )
                DYF = DYGF(N)/(DYGF(N)+DYGF(NBN))
                VCLY = C(N,NSL)*FLN*(1.D+0-THETA*DYF)*FCLP
     &            + C(NBN,NSL)*FLN*THETA*DYF*FCLN
                VCLYF = CO(N,NSL)*FLN*FCLP
                VC(NQY,NSL) = VC(NQY,NSL) + (VCLY-VCLYF)/AFY(NQY)
                BLU(MP) = BLU(MP) - VCLY + VCLYF
                BLU(IXP(NBN)) = BLU(IXP(NBN)) + VCLY - VCLYF
              ENDIF
              FGN = AFY(NQY)*VG(1,NQY)
              IF( FGN.GE.ZERO ) THEN
                NBN = N+IFLD
                XVGX = SG(2,NBN)*PORD(2,NBN)
                FCGN = YG(NBN,NSL)/(XVGX+SMALL)
                CRGN = ABS( VG(1,NQY) )*DT/(DYGP(NQY)*RP(I)*XVGX+SMALL)
                R = ((C(N,NSL)*FCGP-BCX(1)*FCG)
     &            /(C(NBN,NSL)*FCGN-C(N,NSL)*FCGP+SMALL))
     &            *((DYGF(NBN)+DYGF(N))/DYGF(N))
                THETA = FLIMIT( R,CRGN,ISLC(1) )
                DYF = DYGF(N)/(DYGF(N)+DYGF(NBN))
                VCGY = C(N,NSL)*FGN*(1.D+0-THETA*DYF)*FCGP
     &            + C(NBN,NSL)*FGN*THETA*DYF*FCGN
                VCGYF = CO(N,NSL)*FGN*FCGP
                VC(NQY,NSL) = VC(NQY,NSL) + (VCGY-VCGYF)/AFY(NQY)
                BLU(MP) = BLU(MP) - VCGY + VCGYF
                BLU(IXP(NBN)) = BLU(IXP(NBN)) + VCGY - VCGYF
              ENDIF
              FNN = AFY(NQY)*VN(1,NQY)
              IF( FNN.GE.ZERO ) THEN
                NBN = N+IFLD
                XVNX = SN(2,NBN)*PORD(2,NBN)
                FCNN = YN(NBN,NSL)/(XVNX+SMALL)
                CRNN = ABS( VN(1,NQY) )*DT/(DYGP(NQY)*RP(I)*XVNX+SMALL)
                R = ((C(N,NSL)*FCNP-BCX(1)*FCN)
     &            /(C(NBN,NSL)*FCNN-C(N,NSL)*FCNP+SMALL))
     &            *((DYGF(NBN)+DYGF(N))/DYGF(N))
                THETA = FLIMIT( R,CRNN,ISLC(1) )
                DYF = DYGF(N)/(DYGF(N)+DYGF(NBN))
                VCNY = C(N,NSL)*FNN*(1.D+0-THETA*DYF)*FCNP
     &            + C(NBN,NSL)*FNN*THETA*DYF*FCNN
                VCNYF = CO(N,NSL)*FNN*FCNP
                VC(NQY,NSL) = VC(NQY,NSL) + (VCNY-VCNYF)/AFY(NQY)
                BLU(MP) = BLU(MP) - VCNY + VCNYF
                BLU(IXP(NBN)) = BLU(IXP(NBN)) + VCNY - VCNYF
              ENDIF
            ELSE
              ALS = MAX( FLS,ZERO )
              AGS = MAX( FGS,ZERO )
              AGS = MAX( FNS,ZERO )
              AP = (ALS-FLS)*FCLP + (AGS-FGS)*FCGP + (ANS-FNS)*FCNP
              AS = ALS*FCL + AGS*FCG + ANS*FCN
            ENDIF
            BLU(MP) = BLU(MP) + AS*BCX(1)
!
!--- Inflow ---
!
          ELSEIF( IBCT(NSL+LUK,NB).EQ.14 ) THEN
            FLS = MAX( FLS,0.D+0 )
            FGS = MAX( FGS,0.D+0 )
            FNS = MAX( FNS,0.D+0 )
!
!---  TVD Transport for the boundary surface  ---
!
            IF( ISLC(1).GE.1 )  THEN
              VCLY = 0.D+0
              IF( FLS.GE.ZERO ) VCLY = BCX(1)*FCL*FLS
              VCGY = 0.D+0
              IF( FGS.GE.ZERO ) VCGY = BCX(1)*FCG*FGS
              VCNY = 0.D+0
              IF( FNS.GE.ZERO ) VCNY = BCX(1)*FCN*FNS
              AS = 0.D+0
              AP = 0.D+0
              VC(NPY,NSL) = VC(NPY,NSL) + (VCLY+VCGY+VCNY)/AFY(NPY)
              BLU(MP) = BLU(MP) + VCLY + VCGY + VCNY
!
!---  TVD Transport for interior surface adjacent to boundary  ---
!
              NQY = NPY+IFLD
              FLN = AFY(NQY)*VL(1,NQY)
              IF( FLN.GE.ZERO ) THEN
                NBN = N+IFLD
                XVLX = SL(2,NBN)*PORD(2,NBN)
                FCLN = YL(NBN,NSL)/(XVLX+SMALL)
                CRLN = ABS( VL(1,NQY) )*DT/(DYGP(NQY)*RP(I)*XVLX+SMALL)
                R = ((C(N,NSL)*FCLP-BCX(1)*FCL)
     &            /(C(NBN,NSL)*FCLN-C(N,NSL)*FCLP+SMALL))
     &            *((DYGF(NBN)+DYGF(N))/DYGF(N))
                THETA = FLIMIT( R,CRLN,ISLC(1) )
                DYF = DYGF(N)/(DYGF(N)+DYGF(NBN))
                VCLY = C(N,NSL)*FLN*(1.D+0-THETA*DYF)*FCLP
     &            + C(NBN,NSL)*FLN*THETA*DYF*FCLN
                VCLYF = CO(N,NSL)*FLN*FCLP
                VC(NQY,NSL) = VC(NQY,NSL) + (VCLY-VCLYF)/AFY(NQY)
                BLU(MP) = BLU(MP) - VCLY + VCLYF
                BLU(IXP(NBN)) = BLU(IXP(NBN)) + VCLY - VCLYF
              ENDIF
              FGN = AFY(NQY)*VG(1,NQY)
              IF( FGN.GE.ZERO ) THEN
                NBN = N+IFLD
                XVGX = SG(2,NBN)*PORD(2,NBN)
                FCGN = YG(NBN,NSL)/(XVGX+SMALL)
                CRGN = ABS( VG(1,NQY) )*DT/(DYGP(NQY)*RP(I)*XVGX+SMALL)
                R = ((C(N,NSL)*FCGP-BCX(1)*FCG)
     &            /(C(NBN,NSL)*FCGN-C(N,NSL)*FCGP+SMALL))
     &            *((DYGF(NBN)+DYGF(N))/DYGF(N))
                THETA = FLIMIT( R,CRGN,ISLC(1) )
                DYF = DYGF(N)/(DYGF(N)+DYGF(NBN))
                VCGY = C(N,NSL)*FGN*(1.D+0-THETA*DYF)*FCGP
     &            + C(NBN,NSL)*FGN*THETA*DYF*FCGN
                VCGYF = CO(N,NSL)*FGN*FCGP
                VC(NQY,NSL) = VC(NQY,NSL) + (VCGY-VCGYF)/AFY(NQY)
                BLU(MP) = BLU(MP) - VCGY + VCGYF
                BLU(IXP(NBN)) = BLU(IXP(NBN)) + VCGY - VCGYF
              ENDIF
              FNN = AFY(NQY)*VN(1,NQY)
              IF( FNN.GE.ZERO ) THEN
                NBN = N+IFLD
                XVNX = SN(2,NBN)*PORD(2,NBN)
                FCNN = YN(NBN,NSL)/(XVNX+SMALL)
                CRNN = ABS( VN(1,NQY) )*DT/(DYGP(NQY)*RP(I)*XVNX+SMALL)
                R = ((C(N,NSL)*FCNP-BCX(1)*FCN)
     &            /(C(NBN,NSL)*FCNN-C(N,NSL)*FCNP+SMALL))
     &            *((DYGF(NBN)+DYGF(N))/DYGF(N))
                THETA = FLIMIT( R,CRNN,ISLC(1) )
                DYF = DYGF(N)/(DYGF(N)+DYGF(NBN))
                VCNY = C(N,NSL)*FNN*(1.D+0-THETA*DYF)*FCNP
     &            + C(NBN,NSL)*FNN*THETA*DYF*FCNN
                VCNYF = CO(N,NSL)*FNN*FCNP
                VC(NQY,NSL) = VC(NQY,NSL) + (VCNY-VCNYF)/AFY(NQY)
                BLU(MP) = BLU(MP) - VCNY + VCNYF
                BLU(IXP(NBN)) = BLU(IXP(NBN)) + VCNY - VCNYF
              ENDIF
            ELSE
              ALS = MAX( FLS,ZERO )
              AGS = MAX( FGS,ZERO )
              ANS = MAX( FNS,ZERO )
              AP = (ALS-FLS)*FCLP + (AGS-FGS)*FCGP + (ANS-FNS)*FCNP
              AS = ALS*FCL + AGS*FCG + ANS*FCN
            ENDIF
            BLU(MP) = BLU(MP) + AS*BCX(1)
!
!--- Inflow-Outflow (no TVD Transport) ---
!
          ELSEIF( IBCT(NSL+LUK,NB).EQ.23 ) THEN
            ALS = MAX( FLS,ZERO )
            AGS = MAX( FGS,ZERO )
            ANS = MAX( FNS,ZERO )
            AP = (ALS-FLS)*FCLP + (AGS-FGS)*FCGP + (ANS-FNS)*FCNP
            AS = ALS*FCL + AGS*FCG + ANS*FCN
            BLU(MP) = BLU(MP) + AS*BCX(1)
          ENDIF
!
!---  West boundary  ---
!
        ELSEIF( IBCD(NB).EQ.-1 ) THEN
          NPX = NSX(N)
!
!---      Hydraulic dispersion  ---
!
          IF( IDISP.EQ.1 ) THEN
            CALL ADVWB( PORD(2,N),PORDB(2,NB),SL(2,N),SLB(2,NB),
     &        UL,VL,WL,ULWX,VLWX,WLWX,N,MF )
            CALL SHDP( ULWX,VLWX,WLWX,DISPL(IZN),DISPT(IZN),DPLW )
            CALL ADVWB( PORD(2,N),PORDB(2,NB),SG(2,N),SGB(2,NB),
     &        UG,VG,WG,UGWX,VGWX,WGWX,N,MF )
            CALL SHDP( UGWX,VGWX,WGWX,DISPL(IZN),DISPT(IZN),DPGW )
            CALL ADVWB( PORD(2,N),PORDB(2,NB),SN(2,N),SNB(2,NB),
     &        UN,VN,WN,UNWX,VNWX,WNWX,N,MF )
            CALL SHDP( UNWX,VNWX,WNWX,DISPL(IZN),DISPT(IZN),DPNW )
          ELSE
            DPLW = 0.D+0
            DPGW = 0.D+0
            DPNW = 0.D+0
          ENDIF
          FLW = AFX(NPX)*UL(1,NPX)
          FGW = AFX(NPX)*UG(1,NPX)
          FNW = AFX(NPX)*UN(1,NPX)
          CRLW = ABS( UL(1,NPX) )*DT/(DXGF(N)*XVLB+SMALL)
          CRGW = ABS( UG(1,NPX) )*DT/(DXGF(N)*XVGB+SMALL)
          CRNW = ABS( UN(1,NPX) )*DT/(DXGF(N)*XVNB+SMALL)
!
!---  Dirichlet ---
!
          IF( IBCT(NSL+LUK,NB).EQ.1 .OR. IBCT(NSL+LUK,NB).EQ.8 .OR.
     &      IBCT(NSL+LUK,NB).EQ.9 .OR. IBCT(NSL+LUK,NB).EQ.12 ) THEN
            TCOR = (TB(2,NB)+TABS)/TSPRF
            SMDLB = SMDL(NSL)*TCOR*(VISRL/VISLB(2,NB))
            DLB = TORLB(2,NB)*SLB(2,NB)*PORDB(2,NB)*SMDLB
            INDX = 16
            DLX = DIFMN(DLB,DLP,DXGF(N),DXGF(N),UL(1,NPX),INDX)
            DLX = AFX(NPX)*(DLX+DPLW)/(5.D-1*DXGF(N))
            PCOR = (PGB(2,NB)+PATM)/PATM
            SMDGB = SMDG(NSL)*(TCOR**1.75)/PCOR
            DGB = TORGB(2,NB)*SGB(2,NB)*PORDB(2,NB)*SMDGB
            INDX = 16
            DGX = DIFMN(DGB,DGP,DXGF(N),DXGF(N),UG(1,NPX),INDX)
            DGX = AFX(NPX)*(DGX+DPGW)/(5.D-1*DXGF(N))
            PCOR = (PNB(2,NB)+PATM)/PATM
            SMDNB = SMDN(NSL)*(TCOR**1.75)/PCOR
            DNB = TORNB(2,NB)*SNB(2,NB)*PORDB(2,NB)*SMDNB
            INDX = 16
            DNX = DIFMN(DNB,DNP,DXGF(N),DXGF(N),UN(1,NPX),INDX)
            DNX = AFX(NPX)*(DNX+DPNW)/(5.D-1*DXGF(N))
!
!---  TVD Transport for the boundary surface  ---
!
            IF( ISLC(1).GE.1 )  THEN
              IF( FLW.GE.ZERO ) THEN
                UCLX = BCX(1)*FCL*FLW
              ELSEIF( FLW.LT.ZERO .AND. I.LT.IFLD ) THEN
                NBE = N+1
                FCLE = YL(NBE,NSL)/(SL(2,NBE)*PORD(2,NBE)+SMALL)
                R = ((C(N,NSL)*FCLP-C(NBE,NSL)*FCLE)
     &            /(BCX(1)*FCL-C(N,NSL)*FCLP+SMALL))
     &            *(DXGF(N)/(DXGF(N)+DXGF(NBE)))
                THETA = FLIMIT( R,CRLW,ISLC(1) )
                UCLX = C(N,NSL)*FLW*(1.D+0-THETA)*FCLP
     &            + BCX(1)*FLW*THETA*FCL
              ELSEIF( FLW.LT.ZERO .AND. I.EQ.IFLD ) THEN
                UCLX = C(N,NSL)*FLW*FCLP
              ENDIF
              IF( FGW.GE.ZERO ) THEN
                UCGX = BCX(1)*FCG*FGW
              ELSEIF( FGW.LT.ZERO .AND. I.LT.IFLD ) THEN
                NBE = N+1
                FCGE = YG(NBE,NSL)/(SG(2,NBE)*PORD(2,NBE)+SMALL)
                R = ((C(N,NSL)*FCGP-C(NBE,NSL)*FCGE)
     &            /(BCX(1)*FCG-C(N,NSL)*FCGP+SMALL))
     &            *(DXGF(N)/(DXGF(N)+DXGF(NBE)))
                THETA = FLIMIT( R,CRGW,ISLC(1) )
                UCGX = C(N,NSL)*FGW*(1.D+0-THETA)*FCGP
     &            + BCX(1)*FGW*THETA*FCG
              ELSEIF( FGW.LT.ZERO .AND. I.EQ.IFLD ) THEN
                UCGX = C(N,NSL)*FGW*FCGP
              ENDIF
              IF( FNW.GE.ZERO ) THEN
                UCNX = BCX(1)*FCN*FNW
              ELSEIF( FNW.LT.ZERO .AND. I.LT.IFLD ) THEN
                NBE = N+1
                FCNE = YN(NBE,NSL)/(SN(2,NBE)*PORD(2,NBE)+SMALL)
                R = ((C(N,NSL)*FCNP-C(NBE,NSL)*FCNE)
     &            /(BCX(1)*FCN-C(N,NSL)*FCNP+SMALL))
     &            *(DXGF(N)/(DXGF(N)+DXGF(NBE)))
                THETA = FLIMIT( R,CRNW,ISLC(1) )
                UCNX = C(N,NSL)*FNW*(1.D+0-THETA)*FCNP
     &            + BCX(1)*FNW*THETA*FCN
              ELSEIF( FNW.LT.ZERO .AND. I.EQ.IFLD ) THEN
                UCNX = C(N,NSL)*FNW*FCNP
              ENDIF
              AW = DLX*FCL + DGX*FCG + DNX*FCN
              AP = DLX*FCLP + DGX*FCGP + DNX*FCNP
              UC(NPX,NSL) = UC(NPX,NSL) + (UCLX+UCGX+UCNX)/AFX(NPX)
              BLU(MP) = BLU(MP) + UCLX + UCGX + UCNX
!
!---  TVD Transport for interior surface adjacent to boundary  ---
!
              NQX = NPX+1
              FLE = AFX(NQX)*UL(1,NQX)
              IF( FLE.GE.ZERO ) THEN
                NBE = N+1
                XVLX = SL(2,NBE)*PORD(2,NBE)
                FCLE = YL(NBE,NSL)/(XVLX+SMALL)
                CRLE = ABS( UL(1,NQX) )*DT/(DXGP(NQX)*XVLX+SMALL)
                R = ((C(N,NSL)*FCLP-BCX(1)*FCL)
     &            /(C(NBE,NSL)*FCLE-C(N,NSL)*FCLP+SMALL))
     &            *((DXGF(NBE)+DXGF(N))/DXGF(N))
                THETA = FLIMIT( R,CRLE,ISLC(1) )
                DXF = DXGF(N)/(DXGF(N)+DXGF(NBE))
                UCLX = C(N,NSL)*FLE*(1.D+0-THETA*DXF)*FCLP
     &            + C(NBE,NSL)*FLE*THETA*DXF*FCLE
                UCLXF = CO(N,NSL)*FLE*FCLP
                UC(NQX,NSL) = UC(NQX,NSL) + (UCLX-UCLXF)/AFX(NQX)
                BLU(MP) = BLU(MP) - UCLX + UCLXF
                BLU(IXP(NBE)) = BLU(IXP(NBE)) + UCLX - UCLXF
              ENDIF
              FGE = AFX(NQX)*UG(1,NQX)
              IF( FGE.GE.ZERO ) THEN
                NBE = N+1
                XVGX = SG(2,NBE)*PORD(2,NBE)
                FCGE = YG(NBE,NSL)/(XVGX+SMALL)
                CRGE = ABS( UG(1,NQX) )*DT/(DXGP(NQX)*XVGX+SMALL)
                R = ((C(N,NSL)*FCGP-BCX(1)*FCG)
     &            /(C(NBE,NSL)*FCGE-C(N,NSL)*FCGP+SMALL))
     &            *((DXGF(NBE)+DXGF(N))/DXGF(N))
                THETA = FLIMIT( R,CRGE,ISLC(1) )
                DXF = DXGF(N)/(DXGF(N)+DXGF(NBE))
                UCGX = C(N,NSL)*FGE*(1.D+0-THETA*DXF)*FCGP
     &            + C(NBE,NSL)*FGE*THETA*DXF*FCGE
                UCGXF = CO(N,NSL)*FGE*FCGP
                UC(NQX,NSL) = UC(NQX,NSL) + (UCGX-UCGXF)/AFX(NQX)
                BLU(MP) = BLU(MP) - UCGX + UCGXF
                BLU(IXP(NBE)) = BLU(IXP(NBE)) + UCGX - UCGXF
              ENDIF
              FNE = AFX(NQX)*UN(1,NQX)
              IF( FNE.GE.ZERO ) THEN
                NBE = N+1
                XVNX = SN(2,NBE)*PORD(2,NBE)
                FCNE = YN(NBE,NSL)/(XVNX+SMALL)
                CRNE = ABS( UN(1,NQX) )*DT/(DXGP(NQX)*XVNX+SMALL)
                R = ((C(N,NSL)*FCNP-BCX(1)*FCN)
     &            /(C(NBE,NSL)*FCNE-C(N,NSL)*FCNP+SMALL))
     &            *((DXGF(NBE)+DXGF(N))/DXGF(N))
                THETA = FLIMIT( R,CRNE,ISLC(1) )
                DXF = DXGF(N)/(DXGF(N)+DXGF(NBE))
                UCNX = C(N,NSL)*FNE*(1.D+0-THETA*DXF)*FCNP
     &            + C(NBE,NSL)*FNE*THETA*DXF*FCNE
                UCNXF = CO(N,NSL)*FNE*FCNP
                UC(NQX,NSL) = UC(NQX,NSL) + (UCNX-UCNXF)/AFX(NQX)
                BLU(MP) = BLU(MP) - UCNX + UCNXF
                BLU(IXP(NBE)) = BLU(IXP(NBE)) + UCNX - UCNXF
              ENDIF
            ELSE
              ALW = MAX(FLW,ZERO)
     &          + DLX*MAX((ONE-(TENTH*ABS(FLW)/(DLX+SMALL)))**5,ZERO)
              AGW = MAX(FGW,ZERO)
     &          + DGX*MAX((ONE-(TENTH*ABS(FGW)/(DGX+SMALL)))**5,ZERO)
              ANW = MAX(FNW,ZERO)
     &          + DNX*MAX((ONE-(TENTH*ABS(FNW)/(DNX+SMALL)))**5,ZERO)
              AP = (ALW-FLW)*FCLP + (AGW-FGW)*FCGP + (ANW-FNW)*FCNP
              AW = ALW*FCL + AGW*FCG + ANW*FCN
            ENDIF
            BLU(MP) = BLU(MP) + AW*BCX(1)
!
!---  Outflow ---
!
          ELSEIF( IBCT(NSL+LUK,NB).EQ.7 ) THEN
            FLW = MIN( FLW,0.D+0 )
            FGW = MIN( FGW,0.D+0 )
            FNW = MIN( FNW,0.D+0 )
!
!---  TVD Transport for the boundary surface  ---
!
            IF( ISLC(1).GE.1 )  THEN
              UCLX = 0.D+0
              IF( FLW.LT.ZERO .AND. I.LT.IFLD ) THEN
                NBE = N+1
                FCLE = YL(NBE,NSL)/(SL(2,NBE)*PORD(2,NBE)+SMALL)
                R = ((C(N,NSL)*FCLP-C(NBE,NSL)*FCLE)
     &            /(BCX(1)*FCL-C(N,NSL)*FCLP+SMALL))
     &            *(DXGF(N)/(DXGF(N)+DXGF(NBE)))
                THETA = FLIMIT( R,CRLW,ISLC(1) )
                UCLX = C(N,NSL)*FLW*(1.D+0-THETA)*FCLP
     &            + BCX(1)*FLW*THETA*FCL
              ELSEIF( FLW.LT.ZERO .AND. I.EQ.IFLD ) THEN
                UCLX = C(N,NSL)*FLW*FCLP
              ENDIF
              UCGX = 0.D+0
              IF( FGW.LT.ZERO .AND. I.LT.IFLD ) THEN
                NBE = N+1
                FCGE = YG(NBE,NSL)/(SG(2,NBE)*PORD(2,NBE)+SMALL)
                R = ((C(N,NSL)*FCGP-C(NBE,NSL)*FCGE)
     &            /(BCX(1)*FCG-C(N,NSL)*FCGP+SMALL))
     &            *(DXGF(N)/(DXGF(N)+DXGF(NBE)))
                THETA = FLIMIT( R,CRGW,ISLC(1) )
                UCGX = C(N,NSL)*FGW*(1.D+0-THETA)*FCGP
     &            + BCX(1)*FGW*THETA*FCG
              ELSEIF( FGW.LT.ZERO .AND. I.EQ.IFLD ) THEN
                UCGX = C(N,NSL)*FGW*FCGP
              ENDIF
              UCNX = 0.D+0
              IF( FNW.LT.ZERO .AND. I.LT.IFLD ) THEN
                NBE = N+1
                FCNE = YN(NBE,NSL)/(SN(2,NBE)*PORD(2,NBE)+SMALL)
                R = ((C(N,NSL)*FCNP-C(NBE,NSL)*FCNE)
     &            /(BCX(1)*FCN-C(N,NSL)*FCNP+SMALL))
     &            *(DXGF(N)/(DXGF(N)+DXGF(NBE)))
                THETA = FLIMIT( R,CRNW,ISLC(1) )
                UCNX = C(N,NSL)*FNW*(1.D+0-THETA)*FCNP
     &            + BCX(1)*FNW*THETA*FCN
              ELSEIF( FNW.LT.ZERO .AND. I.EQ.IFLD ) THEN
                UCNX = C(N,NSL)*FNW*FCNP
              ENDIF
              AW = 0.D+0
              AP = 0.D+0
              UC(NPX,NSL) = UC(NPX,NSL) + (UCLX+UCGX+UCNX)/AFX(NPX)
              BLU(MP) = BLU(MP) + UCLX + UCGX + UCNX
!
!---  TVD Transport for interior surface adjacent to boundary  ---
!
              NQX = NPX+1
              FLE = AFX(NQX)*UL(1,NQX)
              IF( FLE.GE.ZERO ) THEN
                NBE = N+1
                XVLX = SL(2,NBE)*PORD(2,NBE)
                FCLE = YL(NBE,NSL)/(XVLX+SMALL)
                CRLE = ABS( UL(1,NQX) )*DT/(DXGP(NQX)*XVLX+SMALL)
                R = ((C(N,NSL)*FCLP-BCX(1)*FCL)
     &            /(C(NBE,NSL)*FCLE-C(N,NSL)*FCLP+SMALL))
     &            *((DXGF(NBE)+DXGF(N))/DXGF(N))
                THETA = FLIMIT( R,CRLE,ISLC(1) )
                DXF = DXGF(N)/(DXGF(N)+DXGF(NBE))
                UCLX = C(N,NSL)*FLE*(1.D+0-THETA*DXF)*FCLP
     &            + C(NBE,NSL)*FLE*THETA*DXF*FCLE
                UCLXF = CO(N,NSL)*FLE*FCLP
                UC(NQX,NSL) = UC(NQX,NSL) + (UCLX-UCLXF)/AFX(NQX)
                BLU(MP) = BLU(MP) - UCLX + UCLXF
                BLU(IXP(NBE)) = BLU(IXP(NBE)) + UCLX - UCLXF
              ENDIF
              FGE = AFX(NQX)*UG(1,NQX)
              IF( FGE.GE.ZERO ) THEN
                NBE = N+1
                XVGX = SG(2,NBE)*PORD(2,NBE)
                FCGE = YG(NBE,NSL)/(XVGX+SMALL)
                CRGE = ABS( UG(1,NQX) )*DT/(DXGP(NQX)*XVGX+SMALL)
                R = ((C(N,NSL)*FCGP-BCX(1)*FCG)
     &            /(C(NBE,NSL)*FCGE-C(N,NSL)*FCGP+SMALL))
     &            *((DXGF(NBE)+DXGF(N))/DXGF(N))
                THETA = FLIMIT( R,CRGE,ISLC(1) )
                DXF = DXGF(N)/(DXGF(N)+DXGF(NBE))
                UCGX = C(N,NSL)*FGE*(1.D+0-THETA*DXF)*FCGP
     &            + C(NBE,NSL)*FGE*THETA*DXF*FCGE
                UCGXF = CO(N,NSL)*FGE*FCGP
                UC(NQX,NSL) = UC(NQX,NSL) + (UCGX-UCGXF)/AFX(NQX)
                BLU(MP) = BLU(MP) - UCGX + UCGXF
                BLU(IXP(NBE)) = BLU(IXP(NBE)) + UCGX - UCGXF
              ENDIF
              FNE = AFX(NQX)*UN(1,NQX)
              IF( FNE.GE.ZERO ) THEN
                NBE = N+1
                XVNX = SN(2,NBE)*PORD(2,NBE)
                FCNE = YN(NBE,NSL)/(XVNX+SMALL)
                CRNE = ABS( UN(1,NQX) )*DT/(DXGP(NQX)*XVNX+SMALL)
                R = ((C(N,NSL)*FCNP-BCX(1)*FCN)
     &            /(C(NBE,NSL)*FCNE-C(N,NSL)*FCNP+SMALL))
     &            *((DXGF(NBE)+DXGF(N))/DXGF(N))
                THETA = FLIMIT( R,CRNE,ISLC(1) )
                DXF = DXGF(N)/(DXGF(N)+DXGF(NBE))
                UCNX = C(N,NSL)*FNE*(1.D+0-THETA*DXF)*FCNP
     &            + C(NBE,NSL)*FNE*THETA*DXF*FCNE
                UCNXF = CO(N,NSL)*FNE*FCNP
                UC(NQX,NSL) = UC(NQX,NSL) + (UCNX-UCNXF)/AFX(NQX)
                BLU(MP) = BLU(MP) - UCNX + UCNXF
                BLU(IXP(NBE)) = BLU(IXP(NBE)) + UCNX - UCNXF
              ENDIF
            ELSE
              ALW = MAX(FLW,ZERO)
              AGW = MAX(FGW,ZERO)
              ANW = MAX(FNW,ZERO)
              AP = (ALW-FLW)*FCLP + (AGW-FGW)*FCGP + (ANW-FNW)*FCNP
              AW = ALW*FCL + AGW*FCG + ANW*FCN
            ENDIF
            BLU(MP) = BLU(MP) + AW*BCX(1)
!
!--- Inflow ---
!
          ELSEIF( IBCT(NSL+LUK,NB).EQ.14 ) THEN
            FLW = MAX( FLW,0.D+0 )
            FGW = MAX( FGW,0.D+0 )
            FNW = MAX( FNW,0.D+0 )
!
!---  TVD Transport for the boundary surface  ---
!
            IF( ISLC(1).GE.1 )  THEN
              UCLX = 0.D+0
              IF( FLW.GE.ZERO ) UCLX = BCX(1)*FCL*FLW
              UCGX = 0.D+0
              IF( FGW.GE.ZERO ) UCGX = BCX(1)*FCG*FGW
              UCNX = 0.D+0
              IF( FNW.GE.ZERO ) UCNX = BCX(1)*FCN*FNW
              AW = 0.D+0
              AP = 0.D+0
              UC(NPX,NSL) = UC(NPX,NSL) + (UCLX+UCGX+UCNX)/AFX(NPX)
              BLU(MP) = BLU(MP) + UCLX + UCGX + UCNX
!
!---  TVD Transport for interior surface adjacent to boundary  ---
!
              NQX = NPX+1
              FLE = AFX(NQX)*UL(1,NQX)
              IF( FLE.GE.ZERO ) THEN
                NBE = N+1
                XVLX = SL(2,NBE)*PORD(2,NBE)
                FCLE = YL(NBE,NSL)/(XVLX+SMALL)
                CRLE = ABS( UL(1,NQX) )*DT/(DXGP(NQX)*XVLX+SMALL)
                R = ((C(N,NSL)*FCLP-BCX(1)*FCL)
     &            /(C(NBE,NSL)*FCLE-C(N,NSL)*FCLP+SMALL))
     &            *((DXGF(NBE)+DXGF(N))/DXGF(N))
                THETA = FLIMIT( R,CRLE,ISLC(1) )
                DXF = DXGF(N)/(DXGF(N)+DXGF(NBE))
                UCLX = C(N,NSL)*FLE*(1.D+0-THETA*DXF)*FCLP
     &            + C(NBE,NSL)*FLE*THETA*DXF*FCLE
                UCLXF = CO(N,NSL)*FLE*FCLP
                UC(NQX,NSL) = UC(NQX,NSL) + (UCLX-UCLXF)/AFX(NQX)
                BLU(MP) = BLU(MP) - UCLX + UCLXF
                BLU(IXP(NBE)) = BLU(IXP(NBE)) + UCLX - UCLXF
              ENDIF
              FGE = AFX(NQX)*UG(1,NQX)
              IF( FGE.GE.ZERO ) THEN
                NBE = N+1
                XVGX = SG(2,NBE)*PORD(2,NBE)
                FCGE = YG(NBE,NSL)/(XVGX+SMALL)
                CRGE = ABS( UG(1,NQX) )*DT/(DXGP(NQX)*XVGX+SMALL)
                R = ((C(N,NSL)*FCGP-BCX(1)*FCG)
     &            /(C(NBE,NSL)*FCGE-C(N,NSL)*FCGP+SMALL))
     &            *((DXGF(NBE)+DXGF(N))/DXGF(N))
                THETA = FLIMIT( R,CRGE,ISLC(1) )
                DXF = DXGF(N)/(DXGF(N)+DXGF(NBE))
                UCGX = C(N,NSL)*FGE*(1.D+0-THETA*DXF)*FCGP
     &            + C(NBE,NSL)*FGE*THETA*DXF*FCGE
                UCGXF = CO(N,NSL)*FGE*FCGP
                UC(NQX,NSL) = UC(NQX,NSL) + (UCGX-UCGXF)/AFX(NQX)
                BLU(MP) = BLU(MP) - UCGX + UCGXF
                BLU(IXP(NBE)) = BLU(IXP(NBE)) + UCGX - UCGXF
              ENDIF
              FNE = AFX(NQX)*UN(1,NQX)
              IF( FNE.GE.ZERO ) THEN
                NBE = N+1
                XVNX = SN(2,NBE)*PORD(2,NBE)
                FCNE = YN(NBE,NSL)/(XVNX+SMALL)
                CRNE = ABS( UN(1,NQX) )*DT/(DXGP(NQX)*XVNX+SMALL)
                R = ((C(N,NSL)*FCNP-BCX(1)*FCN)
     &            /(C(NBE,NSL)*FCNE-C(N,NSL)*FCNP+SMALL))
     &            *((DXGF(NBE)+DXGF(N))/DXGF(N))
                THETA = FLIMIT( R,CRNE,ISLC(1) )
                DXF = DXGF(N)/(DXGF(N)+DXGF(NBE))
                UCNX = C(N,NSL)*FNE*(1.D+0-THETA*DXF)*FCNP
     &            + C(NBE,NSL)*FNE*THETA*DXF*FCNE
                UCNXF = CO(N,NSL)*FNE*FCNP
                UC(NQX,NSL) = UC(NQX,NSL) + (UCNX-UCNXF)/AFX(NQX)
                BLU(MP) = BLU(MP) - UCNX + UCNXF
                BLU(IXP(NBE)) = BLU(IXP(NBE)) + UCNX - UCNXF
              ENDIF
            ELSE
              ALW = MAX(FLW,ZERO)
              AGW = MAX(FGW,ZERO)
              ANW = MAX(FNW,ZERO)
              AP = (ALW-FLW)*FCLP + (AGW-FGW)*FCGP + (ANW-FNW)*FCNP
              AW = ALW*FCL + AGW*FCG + ANW*FCN
            ENDIF
            BLU(MP) = BLU(MP) + AW*BCX(1)
!
!--- Inflow-Outflow (no TVD Transport) ---
!
          ELSEIF( IBCT(NSL+LUK,NB).EQ.23 ) THEN
            ALW = MAX(FLW,ZERO)
            AGW = MAX(FGW,ZERO)
            ANW = MAX(FNW,ZERO)
            AP = (ALW-FLW)*FCLP + (AGW-FGW)*FCGP + (ANW-FNW)*FCNP
            AW = ALW*FCL + AGW*FCG + ANW*FCN
            BLU(MP) = BLU(MP) + AW*BCX(1)
          ENDIF
!
!---  East boundary
!
        ELSEIF( IBCD(NB).EQ.1 ) THEN
          NQX = NSX(N) + 1
!
!---      Hydraulic dispersion  ---
!
          IF( IDISP.EQ.1 ) THEN
            CALL ADVEB( PORD(2,N),PORDB(2,NB),SL(2,N),SLB(2,NB),
     &        UL,VL,WL,ULEX,VLEX,WLEX,N,MF )
            CALL SHDP( ULEX,VLEX,WLEX,DISPL(IZN),DISPT(IZN),DPLE )
            CALL ADVEB( PORD(2,N),PORDB(2,NB),SG(2,N),SGB(2,NB),
     &        UG,VG,WG,UGEX,VGEX,WGEX,N,MF )
            CALL SHDP( UGEX,VGEX,WGEX,DISPL(IZN),DISPT(IZN),DPGE )
            CALL ADVEB( PORD(2,N),PORDB(2,NB),SN(2,N),SNB(2,NB),
     &        UN,VN,WN,UNEX,VNEX,WNEX,N,MF )
            CALL SHDP( UNEX,VNEX,WNEX,DISPL(IZN),DISPT(IZN),DPNE )
          ELSE
            DPLE = 0.D+0
            DPGE = 0.D+0
            DPNE = 0.D+0
          ENDIF
          FLE = AFX(NQX)*UL(1,NQX)
          FGE = AFX(NQX)*UG(1,NQX)
          FNE = AFX(NQX)*UN(1,NQX)
          CRLE = ABS( UL(1,NQX) )*DT/(DXGF(N)*XVLB+SMALL)
          CRGE = ABS( UG(1,NQX) )*DT/(DXGF(N)*XVGB+SMALL)
          CRNE = ABS( UN(1,NQX) )*DT/(DXGF(N)*XVNB+SMALL)
!
!---  Dirichlet ---
!
          IF( IBCT(NSL+LUK,NB).EQ.1 .OR. IBCT(NSL+LUK,NB).EQ.8 .OR.
     &      IBCT(NSL+LUK,NB).EQ.9 .OR. IBCT(NSL+LUK,NB).EQ.12 ) THEN
            TCOR = (TB(2,NB)+TABS)/TSPRF
            SMDLB = SMDL(NSL)*TCOR*(VISRL/VISLB(2,NB))
            DLB = TORLB(2,NB)*SLB(2,NB)*PORDB(2,NB)*SMDLB
            INDX = 16
            DLX = DIFMN(DLP,DLB,DXGF(N),DXGF(N),UL(1,NQX),INDX)
            DLX = AFX(NQX)*(DLX+DPLE)/(5.D-1*DXGF(N))
            PCOR = (PGB(2,NB)+PATM)/PATM
            SMDGB = SMDG(NSL)*(TCOR**1.75)/PCOR
            DGB = TORGB(2,NB)*SGB(2,NB)*PORDB(2,NB)*SMDGB
            INDX = 16
            DGX = DIFMN(DGP,DGB,DXGF(N),DXGF(N),UG(1,NQX),INDX)
            DGX = AFX(NQX)*(DGX+DPGE)/(5.D-1*DXGF(N))
            PCOR = (PNB(2,NB)+PATM)/PATM
            SMDNB = SMDN(NSL)*(TCOR**1.75)/PCOR
            DNB = TORNB(2,NB)*SNB(2,NB)*PORDB(2,NB)*SMDNB
            INDX = 16
            DNX = DIFMN(DNP,DNB,DXGF(N),DXGF(N),UN(1,NQX),INDX)
            DNX = AFX(NQX)*(DNX+DPNE)/(5.D-1*DXGF(N))
!
!--- TVD Transport for the boundary surface  ---
!
            IF( ISLC(1).GE.1 ) THEN
              IF( FLE.LT.ZERO ) THEN
                UCLX = BCX(1)*FCL*FLE
              ELSEIF( FLE.GE.ZERO .AND. I.GT.1 ) THEN
                NBW = N-1
                FCLW = YL(NBW,NSL)/(SL(2,NBW)*PORD(2,NBW)+SMALL)
                R = ((C(N,NSL)*FCLP-C(NBW,NSL)*FCLW)
     &            /(BCX(1)*FCL-C(N,NSL)*FCLP+SMALL))
     &            *(DXGF(N)/(DXGF(N)+DXGF(NBW)))
                THETA = FLIMIT( R,CRLE,ISLC(1) )
                UCLX =  C(N,NSL)*FLE*(1.D+0-THETA)*FCLP
     &          +  BCX(1)*FLE*THETA*FCL
              ELSEIF( FLE.GE.ZERO .AND. I.EQ.1 ) THEN
                UCLX =  C(N,NSL)*FLE*FCLP
              ENDIF
              IF( FGE.LT.ZERO ) THEN
                UCGX = BCX(1)*FCG*FGE
              ELSEIF( FGE.GE.ZERO .AND. I.GT.1 ) THEN
                NBW = N-1
                FCGW = YG(NBW,NSL)/(SG(2,NBW)*PORD(2,NBW)+SMALL)
                R = ((C(N,NSL)*FCGP-C(NBW,NSL)*FCGW)
     &            /(BCX(1)*FCG-C(N,NSL)*FCGP+SMALL))
     &            *(DXGF(N)/(DXGF(N)+DXGF(NBW)))
                THETA = FLIMIT( R,CRGE,ISLC(1) )
                UCGX =  C(N,NSL)*FGE*(1.D+0-THETA)*FCGP
     &          +  BCX(1)*FGE*THETA*FCG
              ELSEIF( FGE.GE.ZERO .AND. I.EQ.1 ) THEN
                UCGX =  C(N,NSL)*FGE*FCGP
              ENDIF
              IF( FNE.LT.ZERO ) THEN
                UCNX = BCX(1)*FCN*FNE
              ELSEIF( FNE.GE.ZERO .AND. I.GT.1 ) THEN
                NBW = N-1
                FCNW = YN(NBW,NSL)/(SN(2,NBW)*PORD(2,NBW)+SMALL)
                R = ((C(N,NSL)*FCNP-C(NBW,NSL)*FCNW)
     &            /(BCX(1)*FCN-C(N,NSL)*FCNP+SMALL))
     &            *(DXGF(N)/(DXGF(N)+DXGF(NBW)))
                THETA = FLIMIT( R,CRNE,ISLC(1) )
                UCNX =  C(N,NSL)*FNE*(1.D+0-THETA)*FCNP
     &          +  BCX(1)*FNE*THETA*FCN
              ELSEIF( FNE.GE.ZERO .AND. I.EQ.1 ) THEN
                UCNX =  C(N,NSL)*FNE*FCNP
              ENDIF
              AE = DLX*FCL + DGX*FCG + DNX*FCN
              AP = DLX*FCLP + DGX*FCGP + DNX*FCNP
              UC(NQX,NSL) = UC(NQX,NSL) + (UCLX+UCGX+UCNX)/AFX(NQX)
              BLU(MP) = BLU(MP) - UCLX - UCGX - UCNX
!
!--- TVD Transport for interior surface adjacent to boundary  ---
!
              NPX = NSX(N)
              FLW = AFX(NPX)*UL(1,NPX)
              IF( FLW.LT.ZERO ) THEN
                NBW = N-1
                XVLX = SL(2,NBW)*PORD(2,NBW)
                CRLW = ABS( UL(1,NPX) )*DT/(DXGP(NPX)*XVLX+SMALL)
                FCLW = YL(NBW,NSL)/(XVLX+SMALL)
                R = ((C(N,NSL)*FCLP-BCX(1)*FCL)
     &            /(C(NBW,NSL)*FCLW-C(N,NSL)*FCLP+SMALL))
     &            *((DXGF(NBW)+DXGF(N))/DXGF(N))
                THETA = FLIMIT( R,CRLW,ISLC(1) )
                DXF = DXGF(N)/(DXGF(N)+DXGF(NBW))
                UCLX = C(N,NSL)*FLW*(1.D+0-THETA*DXF)*FCLP
     &            + C(NBW,NSL)*FLW*THETA*DXF*FCLW
                UCLXF = CO(N,NSL)*FLW*FCLP
                UC(NPX,NSL) = UC(NPX,NSL) + (UCLX-UCLXF)/AFX(NPX)
                BLU(MP) = BLU(MP) + UCLX - UCLXF
                BLU(IXP(NBW)) = BLU(IXP(NBW)) - UCLX + UCLXF
              ENDIF
              IF( FGW.LT.ZERO ) THEN
                NBW = N-1
                XVGX = SG(2,NBW)*PORD(2,NBW)
                CRGW = ABS( UG(1,NPX) )*DT/(DXGP(NPX)*XVGX+SMALL)
                FCGW = YG(NBW,NSL)/(XVGX+SMALL)
                R = ((C(N,NSL)*FCGP-BCX(1)*FCG)
     &            /(C(NBW,NSL)*FCGW-C(N,NSL)*FCGP+SMALL))
     &            *((DXGF(NBW)+DXGF(N))/DXGF(N))
                THETA = FLIMIT( R,CRGW,ISLC(1) )
                DXF = DXGF(N)/(DXGF(N)+DXGF(NBW))
                UCGX = C(N,NSL)*FGW*(1.D+0-THETA*DXF)*FCGP
     &            + C(NBW,NSL)*FGW*THETA*DXF*FCGW
                UCGXF = CO(N,NSL)*FGW*FCGP
                UC(NPX,NSL) = UC(NPX,NSL) + (UCGX-UCGXF)/AFX(NPX)
                BLU(MP) = BLU(MP) + UCGX - UCGXF
                BLU(IXP(NBW)) = BLU(IXP(NBW)) - UCGX + UCGXF
              ENDIF
              IF( FNW.LT.ZERO ) THEN
                NBW = N-1
                XVNX = SN(2,NBW)*PORD(2,NBW)
                CRNW = ABS( UN(1,NPX) )*DT/(DXGP(NPX)*XVNX+SMALL)
                FCNW = YN(NBW,NSL)/(XVNX+SMALL)
                R = ((C(N,NSL)*FCNP-BCX(1)*FCN)
     &            /(C(NBW,NSL)*FCNW-C(N,NSL)*FCNP+SMALL))
     &            *((DXGF(NBW)+DXGF(N))/DXGF(N))
                THETA = FLIMIT( R,CRNW,ISLC(1) )
                DXF = DXGF(N)/(DXGF(N)+DXGF(NBW))
                UCNX = C(N,NSL)*FNW*(1.D+0-THETA*DXF)*FCNP
     &            + C(NBW,NSL)*FNW*THETA*DXF*FCNW
                UCNXF = CO(N,NSL)*FNW*FCNP
                UC(NPX,NSL) = UC(NPX,NSL) + (UCNX-UCNXF)/AFX(NPX)
                BLU(MP) = BLU(MP) + UCNX - UCNXF
                BLU(IXP(NBW)) = BLU(IXP(NBW)) - UCNX + UCNXF
              ENDIF
            ELSE
              ALE = MAX( -FLE,ZERO ) +
     &          DLX*MAX((ONE-(TENTH*ABS(FLE)/(DLX+SMALL)))**5,ZERO)
              AGE = MAX( -FGE,ZERO ) +
     &          DGX*MAX((ONE-(TENTH*ABS(FGE)/(DGX+SMALL)))**5,ZERO)
              ANE = MAX( -FNE,ZERO ) +
     &          DNX*MAX((ONE-(TENTH*ABS(FNE)/(DNX+SMALL)))**5,ZERO)
              AP = (ALE+FLE)*FCLP + (AGE+FGE)*FCGP + (ANE+FNE)*FCNP
              AE = ALE*FCL + AGE*FCG + ANE*FCN
            ENDIF
            BLU(MP) = BLU(MP) + AE*BCX(1)
!
!---  Outflow ---
!
          ELSEIF( IBCT(NSL+LUK,NB).EQ.7 ) THEN
            FLE = MAX( FLE,0.D+0 )
            FGE = MAX( FGE,0.D+0 )
            FNE = MAX( FNE,0.D+0 )
!
!--- TVD Transport for the boundary surface  ---
!
            IF( ISLC(1).GE.1 ) THEN
              UCLX = 0.D+0
              IF( FLE.GE.ZERO .AND. I.GT.1 ) THEN
                NBW = N-1
                FCLW = YL(NBW,NSL)/(SL(2,NBW)*PORD(2,NBW)+SMALL)
                R = ((C(N,NSL)*FCLP-C(NBW,NSL)*FCLW)
     &            /(BCX(1)*FCL-C(N,NSL)*FCLP+SMALL))
     &            *(DXGF(N)/(DXGF(N)+DXGF(NBW)))
                THETA = FLIMIT( R,CRLE,ISLC(1) )
                UCLX =  C(N,NSL)*FLE*(1.D+0-THETA)*FCLP
     &          +  BCX(1)*FLE*THETA*FCL
              ELSEIF( FLE.GE.ZERO .AND. I.EQ.1 ) THEN
                UCLX =  C(N,NSL)*FLE*FCLP
              ENDIF
              UCGX = 0.D+0
              IF( FGE.GE.ZERO .AND. I.GT.1 ) THEN
                NBW = N-1
                FCGW = YG(NBW,NSL)/(SG(2,NBW)*PORD(2,NBW)+SMALL)
                R = ((C(N,NSL)*FCGP-C(NBW,NSL)*FCGW)
     &            /(BCX(1)*FCG-C(N,NSL)*FCGP+SMALL))
     &            *(DXGF(N)/(DXGF(N)+DXGF(NBW)))
                THETA = FLIMIT( R,CRGE,ISLC(1) )
                UCGX =  C(N,NSL)*FGE*(1.D+0-THETA)*FCGP
     &          +  BCX(1)*FGE*THETA*FCG
              ELSEIF( FGE.GE.ZERO .AND. I.EQ.1 ) THEN
                UCGX =  C(N,NSL)*FGE*FCGP
              ENDIF
              UCNX = 0.D+0
              IF( FNE.GE.ZERO .AND. I.GT.1 ) THEN
                NBW = N-1
                FCNW = YN(NBW,NSL)/(SN(2,NBW)*PORD(2,NBW)+SMALL)
                R = ((C(N,NSL)*FCNP-C(NBW,NSL)*FCNW)
     &            /(BCX(1)*FCN-C(N,NSL)*FCNP+SMALL))
     &            *(DXGF(N)/(DXGF(N)+DXGF(NBW)))
                THETA = FLIMIT( R,CRNE,ISLC(1) )
                UCNX =  C(N,NSL)*FNE*(1.D+0-THETA)*FCNP
     &          +  BCX(1)*FNE*THETA*FCN
              ELSEIF( FNE.GE.ZERO .AND. I.EQ.1 ) THEN
                UCNX =  C(N,NSL)*FNE*FCNP
              ENDIF
              AE = 0.D+0
              AP = 0.D+0
              UC(NQX,NSL) = UC(NQX,NSL) + (UCLX+UCGX+UCNX)/AFX(NQX)
              BLU(MP) = BLU(MP) - UCLX - UCGX - UCNX
!
!--- TVD Transport for interior surface adjacent to boundary  ---
!
              NPX = NSX(N)
              FLW = AFX(NPX)*UL(1,NPX)
              IF( FLW.LT.ZERO ) THEN
                NBW = N-1
                XVLX = SL(2,NBW)*PORD(2,NBW)
                CRLW = ABS( UL(1,NPX) )*DT/(DXGP(NPX)*XVLX+SMALL)
                FCLW = YL(NBW,NSL)/(XVLX+SMALL)
                R = ((C(N,NSL)*FCLP-BCX(1)*FCL)
     &            /(C(NBW,NSL)*FCLW-C(N,NSL)*FCLP+SMALL))
     &            *((DXGF(NBW)+DXGF(N))/DXGF(N))
                THETA = FLIMIT( R,CRLW,ISLC(1) )
                DXF = DXGF(N)/(DXGF(N)+DXGF(NBW))
                UCLX = C(N,NSL)*FLW*(1.D+0-THETA*DXF)*FCLP
     &            + C(NBW,NSL)*FLW*THETA*DXF*FCLW
                UCLXF = CO(N,NSL)*FLW*FCLP
                UC(NPX,NSL) = UC(NPX,NSL) + (UCLX-UCLXF)/AFX(NPX)
                BLU(MP) = BLU(MP) + UCLX - UCLXF
                BLU(IXP(NBW)) = BLU(IXP(NBW)) - UCLX + UCLXF
              ENDIF
              IF( FGW.LT.ZERO ) THEN
                NBW = N-1
                XVGX = SG(2,NBW)*PORD(2,NBW)
                CRGW = ABS( UG(1,NPX) )*DT/(DXGP(NPX)*XVGX+SMALL)
                FCGW = YG(NBW,NSL)/(XVGX+SMALL)
                R = ((C(N,NSL)*FCGP-BCX(1)*FCG)
     &            /(C(NBW,NSL)*FCGW-C(N,NSL)*FCGP+SMALL))
     &            *((DXGF(NBW)+DXGF(N))/DXGF(N))
                THETA = FLIMIT( R,CRGW,ISLC(1) )
                DXF = DXGF(N)/(DXGF(N)+DXGF(NBW))
                UCGX = C(N,NSL)*FGW*(1.D+0-THETA*DXF)*FCGP
     &            + C(NBW,NSL)*FGW*THETA*DXF*FCGW
                UCGXF = CO(N,NSL)*FGW*FCGP
                UC(NPX,NSL) = UC(NPX,NSL) + (UCGX-UCGXF)/AFX(NPX)
                BLU(MP) = BLU(MP) + UCGX - UCGXF
                BLU(IXP(NBW)) = BLU(IXP(NBW)) - UCGX + UCGXF
              ENDIF
              IF( FNW.LT.ZERO ) THEN
                NBW = N-1
                XVNX = SN(2,NBW)*PORD(2,NBW)
                CRNW = ABS( UN(1,NPX) )*DT/(DXGP(NPX)*XVNX+SMALL)
                FCNW = YN(NBW,NSL)/(XVNX+SMALL)
                R = ((C(N,NSL)*FCNP-BCX(1)*FCN)
     &            /(C(NBW,NSL)*FCNW-C(N,NSL)*FCNP+SMALL))
     &            *((DXGF(NBW)+DXGF(N))/DXGF(N))
                THETA = FLIMIT( R,CRNW,ISLC(1) )
                DXF = DXGF(N)/(DXGF(N)+DXGF(NBW))
                UCNX = C(N,NSL)*FNW*(1.D+0-THETA*DXF)*FCNP
     &            + C(NBW,NSL)*FNW*THETA*DXF*FCNW
                UCNXF = CO(N,NSL)*FNW*FCNP
                UC(NPX,NSL) = UC(NPX,NSL) + (UCNX-UCNXF)/AFX(NPX)
                BLU(MP) = BLU(MP) + UCNX - UCNXF
                BLU(IXP(NBW)) = BLU(IXP(NBW)) - UCNX + UCNXF
              ENDIF
            ELSE
              ALE = MAX( -FLE,ZERO )
              AGE = MAX( -FGE,ZERO )
              ANE = MAX( -FNE,ZERO )
              AP = (ALE+FLE)*FCLP + (AGE+FGE)*FCGP + (ANE+FNE)*FCNP
              AE = ALE*FCL + AGE*FCG + ANE*FCN
            ENDIF
            BLU(MP) = BLU(MP) + AE*BCX(1)
!
!--- Inflow ---
!
          ELSEIF( IBCT(NSL+LUK,NB).EQ.14 ) THEN
            FLE = MIN( FLE,0.D+0 )
            FGE = MIN( FGE,0.D+0 )
            FNE = MIN( FNE,0.D+0 )
!
!--- TVD Transport for the boundary surface  ---
!
            IF( ISLC(1).GE.1 ) THEN
              UCLX = 0.D+0
              IF( FLE.LT.ZERO ) UCLX = BCX(1)*FCL*FLE
              UCGX = 0.D+0
              IF( FGE.LT.ZERO ) UCGX = BCX(1)*FCG*FGE
              UCNX = 0.D+0
              IF( FNE.LT.ZERO ) UCNX = BCX(1)*FCN*FNE
              AE = 0.D+0
              AP = 0.D+0
              UC(NQX,NSL) = UC(NQX,NSL) + (UCLX+UCGX+UCNX)/AFX(NQX)
              BLU(MP) = BLU(MP) - UCLX - UCGX - UCNX
!
!--- TVD Transport for interior surface adjacent to boundary  ---
!
              NPX = NSX(N)
              FLW = AFX(NPX)*UL(1,NPX)
              IF( FLW.LT.ZERO ) THEN
                NBW = N-1
                XVLX = SL(2,NBW)*PORD(2,NBW)
                CRLW = ABS( UL(1,NPX) )*DT/(DXGP(NPX)*XVLX+SMALL)
                FCLW = YL(NBW,NSL)/(XVLX+SMALL)
                R = ((C(N,NSL)*FCLP-BCX(1)*FCL)
     &            /(C(NBW,NSL)*FCLW-C(N,NSL)*FCLP+SMALL))
     &            *((DXGF(NBW)+DXGF(N))/DXGF(N))
                THETA = FLIMIT( R,CRLW,ISLC(1) )
                DXF = DXGF(N)/(DXGF(N)+DXGF(NBW))
                UCLX = C(N,NSL)*FLW*(1.D+0-THETA*DXF)*FCLP
     &            + C(NBW,NSL)*FLW*THETA*DXF*FCLW
                UCLXF = CO(N,NSL)*FLW*FCLP
                UC(NPX,NSL) = UC(NPX,NSL) + (UCLX-UCLXF)/AFX(NPX)
                BLU(MP) = BLU(MP) + UCLX - UCLXF
                BLU(IXP(NBW)) = BLU(IXP(NBW)) - UCLX + UCLXF
              ENDIF
              IF( FGW.LT.ZERO ) THEN
                NBW = N-1
                XVGX = SG(2,NBW)*PORD(2,NBW)
                CRGW = ABS( UG(1,NPX) )*DT/(DXGP(NPX)*XVGX+SMALL)
                FCGW = YG(NBW,NSL)/(XVGX+SMALL)
                R = ((C(N,NSL)*FCGP-BCX(1)*FCG)
     &            /(C(NBW,NSL)*FCGW-C(N,NSL)*FCGP+SMALL))
     &            *((DXGF(NBW)+DXGF(N))/DXGF(N))
                THETA = FLIMIT( R,CRGW,ISLC(1) )
                DXF = DXGF(N)/(DXGF(N)+DXGF(NBW))
                UCGX = C(N,NSL)*FGW*(1.D+0-THETA*DXF)*FCGP
     &            + C(NBW,NSL)*FGW*THETA*DXF*FCGW
                UCGXF = CO(N,NSL)*FGW*FCGP
                UC(NPX,NSL) = UC(NPX,NSL) + (UCGX-UCGXF)/AFX(NPX)
                BLU(MP) = BLU(MP) + UCGX - UCGXF
                BLU(IXP(NBW)) = BLU(IXP(NBW)) - UCGX + UCGXF
              ENDIF
              IF( FNW.LT.ZERO ) THEN
                NBW = N-1
                XVNX = SN(2,NBW)*PORD(2,NBW)
                CRNW = ABS( UN(1,NPX) )*DT/(DXGP(NPX)*XVNX+SMALL)
                FCNW = YN(NBW,NSL)/(XVNX+SMALL)
                R = ((C(N,NSL)*FCNP-BCX(1)*FCN)
     &            /(C(NBW,NSL)*FCNW-C(N,NSL)*FCNP+SMALL))
     &            *((DXGF(NBW)+DXGF(N))/DXGF(N))
                THETA = FLIMIT( R,CRNW,ISLC(1) )
                DXF = DXGF(N)/(DXGF(N)+DXGF(NBW))
                UCNX = C(N,NSL)*FNW*(1.D+0-THETA*DXF)*FCNP
     &            + C(NBW,NSL)*FNW*THETA*DXF*FCNW
                UCNXF = CO(N,NSL)*FNW*FCNP
                UC(NPX,NSL) = UC(NPX,NSL) + (UCNX-UCNXF)/AFX(NPX)
                BLU(MP) = BLU(MP) + UCNX - UCNXF
                BLU(IXP(NBW)) = BLU(IXP(NBW)) - UCNX + UCNXF
              ENDIF
            ELSE
              ALE = MAX( -FLE,ZERO )
              AGE = MAX( -FGE,ZERO )
              ANE = MAX( -FNE,ZERO )
              AP = (ALE+FLE)*FCLP + (AGE+FGE)*FCGP + (ANE+FNE)*FCNP
              AE = ALE*FCL + AGE*FCG + ANE*FCN
            ENDIF
            BLU(MP) = BLU(MP) + AE*BCX(1)
!
!--- Inflow-Outflow (no TVD Transport) ---
!
          ELSEIF( IBCT(NSL+LUK,NB).EQ.23 ) THEN
            ALE = MAX( -FLE,ZERO )
            AGE = MAX( -FGE,ZERO )
            ANE = MAX( -FNE,ZERO )
            AP = (ALE+FLE)*FCLP + (AGE+FGE)*FCGP + (ANE+FNE)*FCNP
            AE = ALE*FCL + AGE*FCG + ANE*FCN
            BLU(MP) = BLU(MP) + AE*BCX(1)
          ENDIF
!
!---  North boundary  ---
!
        ELSEIF( IBCD(NB).EQ.2 ) THEN
          NQY = NSY(N) + IFLD
!
!---      Hydraulic dispersion  ---
!
          IF( IDISP.EQ.1 ) THEN
            CALL ADVNB( PORD(2,N),PORDB(2,NB),SL(2,N),SLB(2,NB),
     &        UL,VL,WL,ULNX,VLNX,WLNX,N,MF )
            CALL SHDP( VLNX,WLNX,ULNX,DISPL(IZN),DISPT(IZN),DPLN )
            CALL ADVNB( PORD(2,N),PORDB(2,NB),SG(2,N),SGB(2,NB),
     &        UG,VG,WG,UGNX,VGNX,WGNX,N,MF )
            CALL SHDP( VGNX,WGNX,UGNX,DISPL(IZN),DISPT(IZN),DPGN )
            CALL ADVNB( PORD(2,N),PORDB(2,NB),SN(2,N),SNB(2,NB),
     &        UN,VN,WN,UNNX,VNNX,WNNX,N,MF )
            CALL SHDP( VNNX,WNNX,UNNX,DISPL(IZN),DISPT(IZN),DPNN )
          ELSE
            DPLN = 0.D+0
            DPGN = 0.D+0
            DPNN = 0.D+0
          ENDIF
          FLN = AFY(NQY)*VL(1,NQY)
          FGN = AFY(NQY)*VG(1,NQY)
          FNN = AFY(NQY)*VN(1,NQY)
          CRLN = ABS( VL(1,NQY) )*DT/(RP(I)*DYGF(N)*XVLB+SMALL)
          CRGN = ABS( VG(1,NQY) )*DT/(RP(I)*DYGF(N)*XVGB+SMALL)
          CRNN = ABS( VN(1,NQY) )*DT/(RP(I)*DYGF(N)*XVNB+SMALL)
!
!---  Dirichlet ---
!
          IF( IBCT(NSL+LUK,NB).EQ.1 .OR. IBCT(NSL+LUK,NB).EQ.8 .OR.
     &      IBCT(NSL+LUK,NB).EQ.9 .OR. IBCT(NSL+LUK,NB).EQ.12 ) THEN
            TCOR = (TB(2,NB)+TABS)/TSPRF
            SMDLB = SMDL(NSL)*TCOR*(VISRL/VISLB(2,NB))
            DLB = TORLB(2,NB)*SLB(2,NB)*PORDB(2,NB)*SMDLB
            INDX = 16
            DLY = DIFMN(DLP,DLB,DYGF(N),DYGF(N),VL(1,NQY),INDX)
            DLY = AFY(NQY)*(DLY+DPLN)/RP(I)/(5.D-1*DYGF(N))
            PCOR = (PGB(2,NB)+PATM)/PATM
            SMDGB = SMDG(NSL)*(TCOR**1.75)/PCOR
            DGB = TORGB(2,NB)*SGB(2,NB)*PORDB(2,NB)*SMDGB
            INDX = 16
            DGY = DIFMN(DGP,DGB,DYGF(N),DYGF(N),VG(1,NQY),INDX)
            DGY = AFY(NQY)*(DGY+DPGN)/RP(I)/(5.D-1*DYGF(N))
            PCOR = (PNB(2,NB)+PATM)/PATM
            SMDNB = SMDN(NSL)*(TCOR**1.75)/PCOR
            DNB = TORNB(2,NB)*SNB(2,NB)*PORDB(2,NB)*SMDNB
            INDX = 16
            DNY = DIFMN(DNP,DNB,DYGF(N),DYGF(N),VN(1,NQY),INDX)
            DNY = AFY(NQY)*(DNY+DPNN)/RP(I)/(5.D-1*DYGF(N))
!
!--- TVD Transport for the boundary surface  ---
!
            IF( ISLC(1).GE.1 ) THEN
              IF( FLN.LT.ZERO ) THEN
                VCLY = BCX(1)*FCL*FLN
              ELSEIF( FLN.GE.ZERO .AND. J.GT.1 ) THEN
                NBS = N-IFLD
                FCLS = YL(NBS,NSL)/(SL(2,NBS)*PORD(2,NBS)+SMALL)
                R = ((C(N,NSL)*FCLP-C(NBS,NSL)*FCLS)
     &            /(BCX(1)*FCL-C(N,NSL)*FCLP+SMALL))
     &            *(DYGF(N)/(DYGF(N)+DYGF(NBS)))
                THETA = FLIMIT( R,CRLN,ISLC(1) )
                VCLY =  BCX(1)*FLN*THETA*FCL
     &            + C(N,NSL)*FLN*(1.D+0-THETA)*FCLP
              ELSEIF( FLN.GE.ZERO .AND. J.EQ.1 ) THEN
                VCLY =  C(N,NSL)*FLN*FCLP
              ENDIF
              IF( FGN.LT.ZERO ) THEN
                VCGY = BCX(1)*FCG*FGN
              ELSEIF( FGN.GE.ZERO .AND. J.GT.1 ) THEN
                NBS = N-IFLD
                FCGS = YG(NBS,NSL)/(SG(2,NBS)*PORD(2,NBS)+SMALL)
                R = ((C(N,NSL)*FCGP-C(NBS,NSL)*FCGS)
     &            /(BCX(1)*FCG-C(N,NSL)*FCGP+SMALL))
     &            *(DYGF(N)/(DYGF(N)+DYGF(NBS)))
                THETA = FLIMIT( R,CRGN,ISLC(1) )
                VCGY =  BCX(1)*FGN*THETA*FCG
     &            + C(N,NSL)*FGN*(1.D+0-THETA)*FCGP
              ELSEIF( FGN.GE.ZERO .AND. J.EQ.1 ) THEN
                VCGY =  C(N,NSL)*FGN*(1.D+0-THETA)*FCGP
              ENDIF
              IF( FNN.LT.ZERO ) THEN
                VCNY = BCX(1)*FCN*FNN
              ELSEIF( FNN.GE.ZERO .AND. J.GT.1 ) THEN
                NBS = N-IFLD
                FCNS = YN(NBS,NSL)/(SN(2,NBS)*PORD(2,NBS)+SMALL)
                R = ((C(N,NSL)*FCNP-C(NBS,NSL)*FCNS)
     &            /(BCX(1)*FCN-C(N,NSL)*FCNP+SMALL))
     &            *(DYGF(N)/(DYGF(N)+DYGF(NBS)))
                THETA = FLIMIT( R,CRNN,ISLC(1) )
                VCNY =  BCX(1)*FNN*THETA*FCN
     &            + C(N,NSL)*FNN*(1.D+0-THETA)*FCNP
              ELSEIF( FNN.GE.ZERO .AND. J.EQ.1 ) THEN
                VCNY =  C(N,NSL)*FNN*(1.D+0-THETA)*FCNP
              ENDIF
              AN = DLY*FCL + DGY*FCG + DNY*FCN
              AP = DLY*FCLP + DGY*FCGP + DNY*FCNP
              VC(NQY,NSL) = VC(NQY,NSL) + (VCLY+VCGY+VCNY)/AFY(NQY)
              BLU(MP) = BLU(MP) - VCLY - VCGY - VCNY
!
!--- TVD Transport for interior surface adjacent to boundary  ---
!
              NPY = NSY(N)
              FLS = AFY(NPY)*VL(1,NPY)
              IF( FLS.LT.ZERO ) THEN
                NBS = N-IFLD
                XVLX = SL(2,NBS)*PORD(2,NBS)
                CRLS = ABS( VL(1,NPY) )*DT/(DYGP(NPY)*XVLX*RP(I)+SMALL)
                FCLS = YL(NBS,NSL)/(XVLX+SMALL)
                R = ((C(N,NSL)*FCLP-BCX(1)*FCL)
     &            /(C(NBS,NSL)*FCLS-C(N,NSL)*FCLP+SMALL))
     &            *((DYGF(NBS)-DYGF(N))/DYGF(N))
                THETA = FLIMIT( R,CRLS,ISLC(1) )
                DYF = DYGF(N)/(DYGF(N)+DYGF(NBS))
                VCLY = C(N,NSL)*FLS*(1.D+0-THETA*DYF)*FCLP
     &            + C(NBS,NSL)*FLS*THETA*DYF*FCLS
                VCLYF = CO(N,NSL)*FLS*FCLP
                VC(NPY,NSL) = VC(NPY,NSL) + (VCLY-VCLYF)/AFY(NPY)
                BLU(MP) = BLU(MP) + VCLY - VCLYF
                BLU(IXP(NBS)) = BLU(IXP(NBS)) - VCLY + VCLYF
              ENDIF
              FGS = AFY(NPY)*VG(1,NPY)
              IF( FGS.LT.ZERO ) THEN
                NBS = N-IFLD
                XVGX = SG(2,NBS)*PORD(2,NBS)
                CRGS = ABS( VG(1,NPY) )*DT/(DYGP(NPY)*XVGX*RP(I)+SMALL)
                FCGS = YG(NBS,NSL)/(XVGX+SMALL)
                R = ((C(N,NSL)*FCGP-BCX(1)*FCG)
     &            /(C(NBS,NSL)*FCGS-C(N,NSL)*FCGP+SMALL))
     &            *((DYGF(NBS)-DYGF(N))/DYGF(N))
                THETA = FLIMIT( R,CRGS,ISLC(1) )
                DYF = DYGF(N)/(DYGF(N)+DYGF(NBS))
                VCGY = C(N,NSL)*FGS*(1.D+0-THETA*DYF)*FCGP
     &            + C(NBS,NSL)*FGS*THETA*DYF*FCGS
                VCGYF = CO(N,NSL)*FGS*FCGP
                VC(NPY,NSL) = VC(NPY,NSL) + (VCGY-VCGYF)/AFY(NPY)
                BLU(MP) = BLU(MP) + VCGY - VCGYF
                BLU(IXP(NBS)) = BLU(IXP(NBS)) - VCGY + VCGYF
              ENDIF
              FNS = AFY(NPY)*VN(1,NPY)
              IF( FNS.LT.ZERO ) THEN
                NBS = N-IFLD
                XVNX = SN(2,NBS)*PORD(2,NBS)
                CRNS = ABS( VN(1,NPY) )*DT/(DYGP(NPY)*XVNX*RP(I)+SMALL)
                FCNS = YN(NBS,NSL)/(XVNX+SMALL)
                R = ((C(N,NSL)*FCNP-BCX(1)*FCN)
     &            /(C(NBS,NSL)*FCNS-C(N,NSL)*FCNP+SMALL))
     &            *((DYGF(NBS)-DYGF(N))/DYGF(N))
                THETA = FLIMIT( R,CRNS,ISLC(1) )
                DYF = DYGF(N)/(DYGF(N)+DYGF(NBS))
                VCNY = C(N,NSL)*FNS*(1.D+0-THETA*DYF)*FCNP
     &            + C(NBS,NSL)*FNS*THETA*DYF*FCNS
                VCNYF = CO(N,NSL)*FNS*FCNP
                VC(NPY,NSL) = VC(NPY,NSL) + (VCNY-VCNYF)/AFY(NPY)
                BLU(MP) = BLU(MP) + VCNY - VCNYF
                BLU(IXP(NBS)) = BLU(IXP(NBS)) - VCNY + VCNYF
              ENDIF
            ELSE
              ALN = MAX( -FLN,ZERO ) +
     &          DLY*MAX((ONE-(TENTH*ABS(FLN)/(DLY+SMALL)))**5,ZERO)
              AGN = MAX( -FGN,ZERO ) +
     &          DGY*MAX((ONE-(TENTH*ABS(FGN)/(DGY+SMALL)))**5,ZERO)
              ANN = MAX( -FNN,ZERO ) +
     &          DNY*MAX((ONE-(TENTH*ABS(FNN)/(DNY+SMALL)))**5,ZERO)
              AP = (ALN+FLN)*FCLP + (AGN+FGN)*FCGP + (ANN+FNN)*FCNP
              AN = ALN*FCL + AGN*FCG + ANN*FCN
            ENDIF
            BLU(MP) = BLU(MP) + AN*BCX(1)
!
!---  Outflow ---
!
          ELSEIF( IBCT(NSL+LUK,NB).EQ.7 ) THEN
            FLN = MAX( FLN,0.D+0 )
            FGN = MAX( FGN,0.D+0 )
            FNN = MAX( FNN,0.D+0 )
!
!--- TVD Transport for the boundary surface  ---
!
            IF( ISLC(1).GE.1 ) THEN
              VCLY = 0.D+0
              IF( FLN.GE.ZERO .AND. J.GT.1 ) THEN
                NBS = N-IFLD
                FCLS = YL(NBS,NSL)/(SL(2,NBS)*PORD(2,NBS)+SMALL)
                R = ((C(N,NSL)*FCLP-C(NBS,NSL)*FCLS)
     &            /(BCX(1)*FCL-C(N,NSL)*FCLP+SMALL))
     &            *(DYGF(N)/(DYGF(N)+DYGF(NBS)))
                THETA = FLIMIT( R,CRLN,ISLC(1) )
                VCLY =  BCX(1)*FLN*THETA*FCL
     &            + C(N,NSL)*FLN*(1.D+0-THETA)*FCLP
              ELSEIF( FLN.GE.ZERO .AND. J.EQ.1 ) THEN
                VCLY =  C(N,NSL)*FLN*FCLP
              ENDIF
              VCGY = 0.D+0
              IF( FGN.GE.ZERO .AND. J.GT.1 ) THEN
                NBS = N-IFLD
                FCGS = YG(NBS,NSL)/(SG(2,NBS)*PORD(2,NBS)+SMALL)
                R = ((C(N,NSL)*FCGP-C(NBS,NSL)*FCGS)
     &            /(BCX(1)*FCG-C(N,NSL)*FCGP+SMALL))
     &            *(DYGF(N)/(DYGF(N)+DYGF(NBS)))
                THETA = FLIMIT( R,CRGN,ISLC(1) )
                VCGY =  BCX(1)*FGN*THETA*FCG
     &            + C(N,NSL)*FGN*(1.D+0-THETA)*FCGP
              ELSEIF( FGN.GE.ZERO .AND. J.EQ.1 ) THEN
                VCGY =  C(N,NSL)*FGN*(1.D+0-THETA)*FCGP
              ENDIF
              VCNY = 0.D+0
              IF( FNN.GE.ZERO .AND. J.GT.1 ) THEN
                NBS = N-IFLD
                FCNS = YN(NBS,NSL)/(SN(2,NBS)*PORD(2,NBS)+SMALL)
                R = ((C(N,NSL)*FCNP-C(NBS,NSL)*FCNS)
     &            /(BCX(1)*FCN-C(N,NSL)*FCNP+SMALL))
     &            *(DYGF(N)/(DYGF(N)+DYGF(NBS)))
                THETA = FLIMIT( R,CRNN,ISLC(1) )
                VCNY =  BCX(1)*FNN*THETA*FCN
     &            + C(N,NSL)*FNN*(1.D+0-THETA)*FCNP
              ELSEIF( FNN.GE.ZERO .AND. J.EQ.1 ) THEN
                VCNY =  C(N,NSL)*FNN*(1.D+0-THETA)*FCNP
              ENDIF
              AN = 0.D+0
              AP = 0.D+0
              VC(NQY,NSL) = VC(NQY,NSL) + (VCLY+VCGY+VCNY)/AFY(NQY)
              BLU(MP) = BLU(MP) - VCLY - VCGY - VCNY
!
!--- TVD Transport for interior surface adjacent to boundary  ---
!
              NPY = NSY(N)
              FLS = AFY(NPY)*VL(1,NPY)
              IF( FLS.LT.ZERO ) THEN
                NBS = N-IFLD
                XVLX = SL(2,NBS)*PORD(2,NBS)
                CRLS = ABS( VL(1,NPY) )*DT/(DYGP(NPY)*XVLX*RP(I)+SMALL)
                FCLS = YL(NBS,NSL)/(XVLX+SMALL)
                R = ((C(N,NSL)*FCLP-BCX(1)*FCL)
     &            /(C(NBS,NSL)*FCLS-C(N,NSL)*FCLP+SMALL))
     &            *((DYGF(NBS)-DYGF(N))/DYGF(N))
                THETA = FLIMIT( R,CRLS,ISLC(1) )
                DYF = DYGF(N)/(DYGF(N)+DYGF(NBS))
                VCLY = C(N,NSL)*FLS*(1.D+0-THETA*DYF)*FCLP
     &            + C(NBS,NSL)*FLS*THETA*DYF*FCLS
                VCLYF = CO(N,NSL)*FLS*FCLP
                VC(NPY,NSL) = VC(NPY,NSL) + (VCLY-VCLYF)/AFY(NPY)
                BLU(MP) = BLU(MP) + VCLY - VCLYF
                BLU(IXP(NBS)) = BLU(IXP(NBS)) - VCLY + VCLYF
              ENDIF
              FGS = AFY(NPY)*VG(1,NPY)
              IF( FGS.LT.ZERO ) THEN
                NBS = N-IFLD
                XVGX = SG(2,NBS)*PORD(2,NBS)
                CRGS = ABS( VG(1,NPY) )*DT/(DYGP(NPY)*XVGX*RP(I)+SMALL)
                FCGS = YG(NBS,NSL)/(XVGX+SMALL)
                R = ((C(N,NSL)*FCGP-BCX(1)*FCG)
     &            /(C(NBS,NSL)*FCGS-C(N,NSL)*FCGP+SMALL))
     &            *((DYGF(NBS)-DYGF(N))/DYGF(N))
                THETA = FLIMIT( R,CRGS,ISLC(1) )
                DYF = DYGF(N)/(DYGF(N)+DYGF(NBS))
                VCGY = C(N,NSL)*FGS*(1.D+0-THETA*DYF)*FCGP
     &            + C(NBS,NSL)*FGS*THETA*DYF*FCGS
                VCGYF = CO(N,NSL)*FGS*FCGP
                VC(NPY,NSL) = VC(NPY,NSL) + (VCGY-VCGYF)/AFY(NPY)
                BLU(MP) = BLU(MP) + VCGY - VCGYF
                BLU(IXP(NBS)) = BLU(IXP(NBS)) - VCGY + VCGYF
              ENDIF
              FNS = AFY(NPY)*VN(1,NPY)
              IF( FNS.LT.ZERO ) THEN
                NBS = N-IFLD
                XVNX = SN(2,NBS)*PORD(2,NBS)
                CRNS = ABS( VN(1,NPY) )*DT/(DYGP(NPY)*XVNX*RP(I)+SMALL)
                FCNS = YN(NBS,NSL)/(XVNX+SMALL)
                R = ((C(N,NSL)*FCNP-BCX(1)*FCN)
     &            /(C(NBS,NSL)*FCNS-C(N,NSL)*FCNP+SMALL))
     &            *((DYGF(NBS)-DYGF(N))/DYGF(N))
                THETA = FLIMIT( R,CRNS,ISLC(1) )
                DYF = DYGF(N)/(DYGF(N)+DYGF(NBS))
                VCNY = C(N,NSL)*FNS*(1.D+0-THETA*DYF)*FCNP
     &            + C(NBS,NSL)*FNS*THETA*DYF*FCNS
                VCNYF = CO(N,NSL)*FNS*FCNP
                VC(NPY,NSL) = VC(NPY,NSL) + (VCNY-VCNYF)/AFY(NPY)
                BLU(MP) = BLU(MP) + VCNY - VCNYF
                BLU(IXP(NBS)) = BLU(IXP(NBS)) - VCNY + VCNYF
              ENDIF
            ELSE
              ALN = MAX( -FLN,ZERO )
              AGN = MAX( -FGN,ZERO )
              ANN = MAX( -FNN,ZERO )
              AP = (ALN+FLN)*FCLP + (AGN+FGN)*FCGP + (ANN+FNN)*FCNP
              AN = ALN*FCL + AGN*FCG + ANN*FCN
            ENDIF
            BLU(MP) = BLU(MP) + AN*BCX(1)
!
!--- Inflow ---
!
          ELSEIF( IBCT(NSL+LUK,NB).EQ.14 ) THEN
            FLN = MIN( FLN,0.D+0 )
            FGN = MIN( FGN,0.D+0 )
            FNN = MIN( FNN,0.D+0 )
!
!--- TVD Transport for the boundary surface  ---
!
            IF( ISLC(1).GE.1 ) THEN
              VCLY = 0.D+0
              IF( FLN.LT.ZERO ) VCLY = BCX(1)*FCL*FLN
              VCGY = 0.D+0
              IF( FGN.LT.ZERO ) VCGY = BCX(1)*FCG*FGN
              VCNY = 0.D+0
              IF( FNN.LT.ZERO ) VCNY = BCX(1)*FCN*FNN
              AN = 0.D+0
              AP = 0.D+0
              VC(NQY,NSL) = VC(NQY,NSL) + (VCLY+VCGY+VCNY)/AFY(NQY)
              BLU(MP) = BLU(MP) - VCLY - VCGY - VCNY
!
!--- TVD Transport for interior surface adjacent to boundary  ---
!
              NPY = NSY(N)
              FLS = AFY(NPY)*VL(1,NPY)
              IF( FLS.LT.ZERO ) THEN
                NBS = N-IFLD
                XVLX = SL(2,NBS)*PORD(2,NBS)
                CRLS = ABS( VL(1,NPY) )*DT/(DYGP(NPY)*XVLX*RP(I)+SMALL)
                FCLS = YL(NBS,NSL)/(XVLX+SMALL)
                R = ((C(N,NSL)*FCLP-BCX(1)*FCL)
     &            /(C(NBS,NSL)*FCLS-C(N,NSL)*FCLP+SMALL))
     &            *((DYGF(NBS)-DYGF(N))/DYGF(N))
                THETA = FLIMIT( R,CRLS,ISLC(1) )
                DYF = DYGF(N)/(DYGF(N)+DYGF(NBS))
                VCLY = C(N,NSL)*FLS*(1.D+0-THETA*DYF)*FCLP
     &            + C(NBS,NSL)*FLS*THETA*DYF*FCLS
                VCLYF = CO(N,NSL)*FLS*FCLP
                VC(NPY,NSL) = VC(NPY,NSL) + (VCLY-VCLYF)/AFY(NPY)
                BLU(MP) = BLU(MP) + VCLY - VCLYF
                BLU(IXP(NBS)) = BLU(IXP(NBS)) - VCLY + VCLYF
              ENDIF
              FGS = AFY(NPY)*VG(1,NPY)
              IF( FGS.LT.ZERO ) THEN
                NBS = N-IFLD
                XVGX = SG(2,NBS)*PORD(2,NBS)
                CRGS = ABS( VG(1,NPY) )*DT/(DYGP(NPY)*XVGX*RP(I)+SMALL)
                FCGS = YG(NBS,NSL)/(XVGX+SMALL)
                R = ((C(N,NSL)*FCGP-BCX(1)*FCG)
     &            /(C(NBS,NSL)*FCGS-C(N,NSL)*FCGP+SMALL))
     &            *((DYGF(NBS)-DYGF(N))/DYGF(N))
                THETA = FLIMIT( R,CRGS,ISLC(1) )
                DYF = DYGF(N)/(DYGF(N)+DYGF(NBS))
                VCGY = C(N,NSL)*FGS*(1.D+0-THETA*DYF)*FCGP
     &            + C(NBS,NSL)*FGS*THETA*DYF*FCGS
                VCGYF = CO(N,NSL)*FGS*FCGP
                VC(NPY,NSL) = VC(NPY,NSL) + (VCGY-VCGYF)/AFY(NPY)
                BLU(MP) = BLU(MP) + VCGY - VCGYF
                BLU(IXP(NBS)) = BLU(IXP(NBS)) - VCGY + VCGYF
              ENDIF
              FNS = AFY(NPY)*VN(1,NPY)
              IF( FNS.LT.ZERO ) THEN
                NBS = N-IFLD
                XVNX = SN(2,NBS)*PORD(2,NBS)
                CRNS = ABS( VN(1,NPY) )*DT/(DYGP(NPY)*XVNX*RP(I)+SMALL)
                FCNS = YN(NBS,NSL)/(XVNX+SMALL)
                R = ((C(N,NSL)*FCNP-BCX(1)*FCN)
     &            /(C(NBS,NSL)*FCNS-C(N,NSL)*FCNP+SMALL))
     &            *((DYGF(NBS)-DYGF(N))/DYGF(N))
                THETA = FLIMIT( R,CRNS,ISLC(1) )
                DYF = DYGF(N)/(DYGF(N)+DYGF(NBS))
                VCNY = C(N,NSL)*FNS*(1.D+0-THETA*DYF)*FCNP
     &            + C(NBS,NSL)*FNS*THETA*DYF*FCNS
                VCNYF = CO(N,NSL)*FNS*FCNP
                VC(NPY,NSL) = VC(NPY,NSL) + (VCNY-VCNYF)/AFY(NPY)
                BLU(MP) = BLU(MP) + VCNY - VCNYF
                BLU(IXP(NBS)) = BLU(IXP(NBS)) - VCNY + VCNYF
              ENDIF
            ELSE
              ALN = MAX( -FLN,ZERO )
              AGN = MAX( -FGN,ZERO )
              ANN = MAX( -FNN,ZERO )
              AP = (ALN+FLN)*FCLP + (AGN+FGN)*FCGP + (ANN+FNN)*FCNP
              AN = ALN*FCL + AGN*FCG + ANN*FCN
            ENDIF
            BLU(MP) = BLU(MP) + AN*BCX(1)
!
!--- Inflow-Outflow (no TVD Transport) ---
!
          ELSEIF( IBCT(NSL+LUK,NB).EQ.23 ) THEN
            ALN = MAX( -FLN,ZERO )
            AGN = MAX( -FGN,ZERO )
            ANN = MAX( -FNN,ZERO )
            AP = (ALN+FLN)*FCLP + (AGN+FGN)*FCGP + (ANN+FNN)*FCNP
            AN = ALN*FCL + AGN*FCG + ANN*FCN
            BLU(MP) = BLU(MP) + AN*BCX(1)
          ENDIF
!
!---  Top boundary
!
        ELSEIF( IBCD(NB).EQ.3 ) THEN
          NQZ = NSZ(N) + IJFLD
!
!---      Hydraulic dispersion  ---
!
          IF( IDISP.EQ.1 ) THEN
            CALL ADVTB( PORD(2,N),PORDB(2,NB),SL(2,N),SLB(2,NB),
     &        UL,VL,WL,ULTX,VLTX,WLTX,N,MF )
            CALL SHDP( WLTX,ULTX,VLTX,DISPL(IZN),DISPT(IZN),DPLT )
            CALL ADVTB( PORD(2,N),PORDB(2,NB),SG(2,N),SGB(2,NB),
     &        UG,VG,WG,UGTX,VGTX,WGTX,N,MF )
            CALL SHDP( WGTX,UGTX,VGTX,DISPL(IZN),DISPT(IZN),DPGT )
            CALL ADVTB( PORD(2,N),PORDB(2,NB),SN(2,N),SNB(2,NB),
     &        UN,VN,WN,UNTX,VNTX,WNTX,N,MF )
            CALL SHDP( WNTX,UNTX,VNTX,DISPL(IZN),DISPT(IZN),DPNT )
          ELSE
            DPLT = 0.D+0
            DPGT = 0.D+0
            DPNT = 0.D+0
          ENDIF
          FLT = AFZ(NQZ)*WL(1,NQZ)
          FGT = AFZ(NQZ)*WG(1,NQZ)
          FNT = AFZ(NQZ)*WN(1,NQZ)
          CRLT = ABS( WL(1,NQZ) )*DT/(DZGF(N)*XVLB+SMALL)
          CRGT = ABS( WG(1,NQZ) )*DT/(DZGF(N)*XVGB+SMALL)
          CRNT = ABS( WN(1,NQZ) )*DT/(DZGF(N)*XVNB+SMALL)
!
!---  Dirichlet ---
!
          IF( IBCT(NSL+LUK,NB).EQ.1 .OR.IBCT(NSL+LUK,NB).EQ.8 .OR.
     &      IBCT(NSL+LUK,NB).EQ.9 .OR. IBCT(NSL+LUK,NB).EQ.12 ) THEN
            TCOR = (TB(2,NB)+TABS)/TSPRF
            SMDLB = SMDL(NSL)*TCOR*(VISRL/VISLB(2,NB))
            DLB = TORLB(2,NB)*SLB(2,NB)*PORDB(2,NB)*SMDLB
            INDX = 16
            DLZ = DIFMN(DLP,DLB,DZGF(N),DZGF(N),WL(1,NQZ),INDX)
            DLZ = AFZ(NQZ)*(DLZ+DPLT)/(5.D-1*DZGF(N))
            PCOR = (PGB(2,NB)+PATM)/PATM
            SMDGB = SMDG(NSL)*(TCOR**1.75)/PCOR
            DGB = TORGB(2,NB)*SGB(2,NB)*PORDB(2,NB)*SMDGB
            INDX = 16
            DGZ = DIFMN(DGP,DGB,DZGF(N),DZGF(N),WG(1,NQZ),INDX)
            DGZ = AFZ(NQZ)*(DGZ+DPGT)/(5.D-1*DZGF(N))
            PCOR = (PNB(2,NB)+PATM)/PATM
            SMDNB = SMDN(NSL)*(TCOR**1.75)/PCOR
            DNB = TORNB(2,NB)*SNB(2,NB)*PORDB(2,NB)*SMDNB
            INDX = 16
            DNZ = DIFMN(DNP,DNB,DZGF(N),DZGF(N),WN(1,NQZ),INDX)
            DNZ = AFZ(NQZ)*(DNZ+DPNT)/(5.D-1*DZGF(N))
!
!--- TVD Transport for the boundary surface  ---
!
            IF( ISLC(1).GE.1 ) THEN
              IF( FLT.LT.ZERO ) THEN
                WCLZ = BCX(1)*FCL*FLT
              ELSEIF( FLT.GE.ZERO .AND. K.GT.1 ) THEN
                NBB = N-IJFLD
                FCLB = YL(NBB,NSL)/(SL(2,NBB)*PORD(2,NBB)+SMALL)
                R = ((C(N,NSL)*FCLP-C(NBB,NSL)*FCLB)
     &            /(BCX(1)*FCL-C(N,NSL)*FCLP+SMALL))
     &            *(DZGF(N)/(DZGF(N)+DZGF(NBB)))
                THETA = FLIMIT( R,CRLT,ISLC(1) )
                WCLZ =  C(N,NSL)*FLT*(1.D+0-THETA)*FCLP
     &            + BCX(1)*FLT*THETA*FCL
              ELSEIF( FLT.GE.ZERO .AND. K.EQ.1 ) THEN
                WCLZ =  C(N,NSL)*FLT*FCLP
              ENDIF
              IF( FGT.LT.ZERO ) THEN
                WCGZ = BCX(1)*FCG*FGT
              ELSEIF( FGT.GE.ZERO .AND. K.GT.1 ) THEN
                NBB = N-IJFLD
                FCGB = YG(NBB,NSL)/(SG(2,NBB)*PORD(2,NBB)+SMALL)
                R = ((C(N,NSL)*FCGP-C(NBB,NSL)*FCGB)
     &            /(BCX(1)*FCG-C(N,NSL)*FCGP+SMALL))
     &            *(DZGF(N)/(DZGF(N)+DZGF(NBB)))
                THETA = FLIMIT( R,CRGT,ISLC(1) )
                WCGZ =  C(N,NSL)*FGT*(1.D+0-THETA)*FCGP
     &            + BCX(1)*FGT*THETA*FCG
              ELSEIF( FGT.GE.ZERO .AND. K.EQ.1 ) THEN
                WCGZ =  C(N,NSL)*FGT*FCGP
              ENDIF
              IF( FNT.LT.ZERO ) THEN
                WCNZ = BCX(1)*FCN*FNT
              ELSEIF( FNT.GE.ZERO .AND. K.GT.1 ) THEN
                NBB = N-IJFLD
                FCNB = YN(NBB,NSL)/(SN(2,NBB)*PORD(2,NBB)+SMALL)
                R = ((C(N,NSL)*FCNP-C(NBB,NSL)*FCNB)
     &            /(BCX(1)*FCN-C(N,NSL)*FCNP+SMALL))
     &            *(DZGF(N)/(DZGF(N)+DZGF(NBB)))
                THETA = FLIMIT( R,CRNT,ISLC(1) )
                WCNZ =  C(N,NSL)*FNT*(1.D+0-THETA)*FCNP
     &            + BCX(1)*FNT*THETA*FCN
              ELSEIF( FNT.GE.ZERO .AND. K.EQ.1 ) THEN
                WCNZ =  C(N,NSL)*FNT*FCNP
              ENDIF
              AT = DLZ*FCL + DGZ*FCG + DNZ*FCN
              AP = DLZ*FCLP + DGZ*FCGP + DNZ*FCNP
              WC(NQZ,NSL) = WC(NQZ,NSL) + (WCLZ+WCGZ+WCNZ)/AFZ(NQZ)
              BLU(MP) = BLU(MP) - WCLZ - WCGZ - WCNZ
!
!--- TVD Transport for interior surface adjacent to boundary  ---
!
              NPZ = NSZ(N)
              FLB = AFZ(NPZ)*WL(1,NPZ)
              IF( FLB.LT.ZERO ) THEN
                NBB = N-IJFLD
                XVLX = SL(2,NBB)*PORD(2,NBB)
                CRLB = ABS( WL(1,NPZ) )*DT/(DZGP(NPZ)*XVLX+SMALL)
                FCLB = YL(NBB,NSL)/(XVLX+SMALL)
                R = ((C(N,NSL)*FCLP-BCX(1)*FCL)
     &            /(C(NBB,NSL)*FCLB-C(N,NSL)*FCLP+SMALL))
     &            *((DZGF(NBB)+DZGF(N))/DZGF(N))
                THETA = FLIMIT( R,CRLB,ISLC(1) )
                DZF = DZGF(N)/(DZGF(N)+DZGF(NBB))
                WCLZ = C(N,NSL)*FLB*(1.D+0-THETA*DZF)*FCLP
     &            + C(NBB,NSL)*FLB*THETA*DZF*FCLB
                WCLZF = CO(N,NSL)*FLB*FCLP
                WC(NPZ,NSL) = WC(NPZ,NSL) + (WCLZ-WCLZF)/AFZ(NPZ)
                BLU(MP) = BLU(MP) + WCLZ - WCLZF
                BLU(IXP(NBB)) = BLU(IXP(NBB)) - WCLZ + WCLZF
              ENDIF
              FGB = AFZ(NPZ)*WG(1,NPZ)
              IF( FGB.LT.ZERO ) THEN
                NBB = N-IJFLD
                XVGX = SG(2,NBB)*PORD(2,NBB)
                CRGB = ABS( WG(1,NPZ) )*DT/(DZGP(NPZ)*XVGX+SMALL)
                FCGB = YG(NBB,NSL)/(XVGX+SMALL)
                R = ((C(N,NSL)*FCGP-BCX(1)*FCG)
     &            /(C(NBB,NSL)*FCGB-C(N,NSL)*FCGP+SMALL))
     &            *((DZGF(NBB)+DZGF(N))/DZGF(N))
                THETA = FLIMIT( R,CRGB,ISLC(1) )
                DZF = DZGF(N)/(DZGF(N)+DZGF(NBB))
                WCGZ = C(N,NSL)*FGB*(1.D+0-THETA*DZF)*FCGP
     &            + C(NBB,NSL)*FGB*THETA*DZF*FCGB
                WCGZF = CO(N,NSL)*FGB*FCGP
                WC(NPZ,NSL) = WC(NPZ,NSL) + (WCGZ-WCGZF)/AFZ(NPZ)
                BLU(MP) = BLU(MP) + WCGZ - WCGZF
                BLU(IXP(NBB)) = BLU(IXP(NBB)) - WCGZ + WCGZF
              ENDIF
              FNB = AFZ(NPZ)*WN(1,NPZ)
              IF( FNB.LT.ZERO ) THEN
                NBB = N-IJFLD
                XVNX = SN(2,NBB)*PORD(2,NBB)
                CRNB = ABS( WN(1,NPZ) )*DT/(DZGP(NPZ)*XVNX+SMALL)
                FCNB = YN(NBB,NSL)/(XVNX+SMALL)
                R = ((C(N,NSL)*FCNP-BCX(1)*FCN)
     &            /(C(NBB,NSL)*FCNB-C(N,NSL)*FCNP+SMALL))
     &            *((DZGF(NBB)+DZGF(N))/DZGF(N))
                THETA = FLIMIT( R,CRNB,ISLC(1) )
                DZF = DZGF(N)/(DZGF(N)+DZGF(NBB))
                WCNZ = C(N,NSL)*FNB*(1.D+0-THETA*DZF)*FCNP
     &            + C(NBB,NSL)*FNB*THETA*DZF*FCNB
                WCNZF = CO(N,NSL)*FNB*FCNP
                WC(NPZ,NSL) = WC(NPZ,NSL) + (WCNZ-WCNZF)/AFZ(NPZ)
                BLU(MP) = BLU(MP) + WCNZ - WCNZF
                BLU(IXP(NBB)) = BLU(IXP(NBB)) - WCNZ + WCNZF
              ENDIF
            ELSE
              ALT = MAX( -FLT,ZERO ) +
     &          DLZ*MAX((ONE-(TENTH*ABS(FLT)/(DLZ+SMALL)))**5,ZERO)
              AGT = MAX( -FGT,ZERO ) +
     &          DGZ*MAX((ONE-(TENTH*ABS(FGT)/(DGZ+SMALL)))**5,ZERO)
              ANT = MAX( -FNT,ZERO ) +
     &          DNZ*MAX((ONE-(TENTH*ABS(FNT)/(DNZ+SMALL)))**5,ZERO)
              AP = (ALT+FLT)*FCLP + (AGT+FGT)*FCGP + (ANT+FNT)*FCNP
              AT = ALT*FCL + AGT*FCG + ANT*FCN
            ENDIF
            BLU(MP) = BLU(MP) + AT*BCX(1)
!
!---  Outflow ---
!
          ELSEIF( IBCT(NSL+LUK,NB).EQ.7 ) THEN
            FLT = MAX( FLT,0.D+0 )
            FGT = MAX( FGT,0.D+0 )
            FNT = MAX( FNT,0.D+0 )
!
!--- TVD Transport for the boundary surface  ---
!
            IF( ISLC(1).GE.1 ) THEN
              WCLZ = 0.D+0
              IF( FLT.GE.ZERO .AND. K.GT.1 ) THEN
                NBB = N-IJFLD
                FCLB = YL(NBB,NSL)/(SL(2,NBB)*PORD(2,NBB)+SMALL)
                R = ((C(N,NSL)*FCLP-C(NBB,NSL)*FCLB)
     &            /(BCX(1)*FCL-C(N,NSL)*FCLP+SMALL))
     &            *(DZGF(N)/(DZGF(N)+DZGF(NBB)))
                THETA = FLIMIT( R,CRLT,ISLC(1) )
                WCLZ =  C(N,NSL)*FLT*(1.D+0-THETA)*FCLP
     &            + BCX(1)*FLT*THETA*FCL
              ELSEIF( FLT.GE.ZERO .AND. K.EQ.1 ) THEN
                WCLZ =  C(N,NSL)*FLT*FCLP
              ENDIF
              WCGZ = 0.D+0
              IF( FGT.GE.ZERO .AND. K.GT.1 ) THEN
                NBB = N-IJFLD
                FCGB = YG(NBB,NSL)/(SG(2,NBB)*PORD(2,NBB)+SMALL)
                R = ((C(N,NSL)*FCGP-C(NBB,NSL)*FCGB)
     &            /(BCX(1)*FCG-C(N,NSL)*FCGP+SMALL))
     &            *(DZGF(N)/(DZGF(N)+DZGF(NBB)))
                THETA = FLIMIT( R,CRGT,ISLC(1) )
                WCGZ =  C(N,NSL)*FGT*(1.D+0-THETA)*FCGP
     &            + BCX(1)*FGT*THETA*FCG
              ELSEIF( FGT.GE.ZERO .AND. K.EQ.1 ) THEN
                WCGZ =  C(N,NSL)*FGT*FCGP
              ENDIF
              WCNZ = 0.D+0
              IF( FNT.GE.ZERO .AND. K.GT.1 ) THEN
                NBB = N-IJFLD
                FCNB = YN(NBB,NSL)/(SN(2,NBB)*PORD(2,NBB)+SMALL)
                R = ((C(N,NSL)*FCNP-C(NBB,NSL)*FCNB)
     &            /(BCX(1)*FCN-C(N,NSL)*FCNP+SMALL))
     &            *(DZGF(N)/(DZGF(N)+DZGF(NBB)))
                THETA = FLIMIT( R,CRNT,ISLC(1) )
                WCNZ =  C(N,NSL)*FNT*(1.D+0-THETA)*FCNP
     &            + BCX(1)*FNT*THETA*FCN
              ELSEIF( FNT.GE.ZERO .AND. K.EQ.1 ) THEN
                WCNZ =  C(N,NSL)*FNT*FCNP
              ENDIF
              AT = 0.D+0
              AP = 0.D+0
              WC(NQZ,NSL) = WC(NQZ,NSL) + (WCLZ+WCGZ+WCNZ)/AFZ(NQZ)
              BLU(MP) = BLU(MP) - WCLZ - WCGZ - WCNZ
!
!--- TVD Transport for interior surface adjacent to boundary  ---
!
              NPZ = NSZ(N)
              FLB = AFZ(NPZ)*WL(1,NPZ)
              IF( FLB.LT.ZERO ) THEN
                NBB = N-IJFLD
                XVLX = SL(2,NBB)*PORD(2,NBB)
                CRLB = ABS( WL(1,NPZ) )*DT/(DZGP(NPZ)*XVLX+SMALL)
                FCLB = YL(NBB,NSL)/(XVLX+SMALL)
                R = ((C(N,NSL)*FCLP-BCX(1)*FCL)
     &            /(C(NBB,NSL)*FCLB-C(N,NSL)*FCLP+SMALL))
     &            *((DZGF(NBB)+DZGF(N))/DZGF(N))
                THETA = FLIMIT( R,CRLB,ISLC(1) )
                DZF = DZGF(N)/(DZGF(N)+DZGF(NBB))
                WCLZ = C(N,NSL)*FLB*(1.D+0-THETA*DZF)*FCLP
     &            + C(NBB,NSL)*FLB*THETA*DZF*FCLB
                WCLZF = CO(N,NSL)*FLB*FCLP
                WC(NPZ,NSL) = WC(NPZ,NSL) + (WCLZ-WCLZF)/AFZ(NPZ)
                BLU(MP) = BLU(MP) + WCLZ - WCLZF
                BLU(IXP(NBB)) = BLU(IXP(NBB)) - WCLZ + WCLZF
              ENDIF
              FGB = AFZ(NPZ)*WG(1,NPZ)
              IF( FGB.LT.ZERO ) THEN
                NBB = N-IJFLD
                XVGX = SG(2,NBB)*PORD(2,NBB)
                CRGB = ABS( WG(1,NPZ) )*DT/(DZGP(NPZ)*XVGX+SMALL)
                FCGB = YG(NBB,NSL)/(XVGX+SMALL)
                R = ((C(N,NSL)*FCGP-BCX(1)*FCG)
     &            /(C(NBB,NSL)*FCGB-C(N,NSL)*FCGP+SMALL))
     &            *((DZGF(NBB)+DZGF(N))/DZGF(N))
                THETA = FLIMIT( R,CRGB,ISLC(1) )
                DZF = DZGF(N)/(DZGF(N)+DZGF(NBB))
                WCGZ = C(N,NSL)*FGB*(1.D+0-THETA*DZF)*FCGP
     &            + C(NBB,NSL)*FGB*THETA*DZF*FCGB
                WCGZF = CO(N,NSL)*FGB*FCGP
                WC(NPZ,NSL) = WC(NPZ,NSL) + (WCGZ-WCGZF)/AFZ(NPZ)
                BLU(MP) = BLU(MP) + WCGZ - WCGZF
                BLU(IXP(NBB)) = BLU(IXP(NBB)) - WCGZ + WCGZF
              ENDIF
              FNB = AFZ(NPZ)*WN(1,NPZ)
              IF( FNB.LT.ZERO ) THEN
                NBB = N-IJFLD
                XVNX = SN(2,NBB)*PORD(2,NBB)
                CRNB = ABS( WN(1,NPZ) )*DT/(DZGP(NPZ)*XVNX+SMALL)
                FCNB = YN(NBB,NSL)/(XVNX+SMALL)
                R = ((C(N,NSL)*FCNP-BCX(1)*FCN)
     &            /(C(NBB,NSL)*FCNB-C(N,NSL)*FCNP+SMALL))
     &            *((DZGF(NBB)+DZGF(N))/DZGF(N))
                THETA = FLIMIT( R,CRNB,ISLC(1) )
                DZF = DZGF(N)/(DZGF(N)+DZGF(NBB))
                WCNZ = C(N,NSL)*FNB*(1.D+0-THETA*DZF)*FCNP
     &            + C(NBB,NSL)*FNB*THETA*DZF*FCNB
                WCNZF = CO(N,NSL)*FNB*FCNP
                WC(NPZ,NSL) = WC(NPZ,NSL) + (WCNZ-WCNZF)/AFZ(NPZ)
                BLU(MP) = BLU(MP) + WCNZ - WCNZF
                BLU(IXP(NBB)) = BLU(IXP(NBB)) - WCNZ + WCNZF
              ENDIF
            ELSE
              ALT = MAX( -FLT,ZERO )
              AGT = MAX( -FGT,ZERO )
              ANT = MAX( -FNT,ZERO )
              AP = (ALT+FLT)*FCLP + (AGT+FGT)*FCGP + (ANT+FNT)*FCNP
              AT = ALT*FCL + AGT*FCG + ANT*FCN
            ENDIF
            BLU(MP) = BLU(MP) + AT*BCX(1)
!
!--- Inflow ---
!
          ELSEIF( IBCT(NSL+LUK,NB).EQ.14 ) THEN
            FLT = MIN( FLT,0.D+0 )
            FGT = MIN( FGT,0.D+0 )
            FNT = MIN( FNT,0.D+0 )
!
!--- TVD Transport for the boundary surface  ---
!
            IF( ISLC(1).GE.1 ) THEN
              WCLZ = 0.D+0
              IF( FLT.LT.ZERO ) WCLZ = BCX(1)*FCL*FLT
              WCGZ = 0.D+0
              IF( FGT.LT.ZERO ) WCGZ = BCX(1)*FCG*FGT
              WCNZ = 0.D+0
              IF( FNT.LT.ZERO ) WCNZ = BCX(1)*FCN*FNT
              AT = 0.D+0
              AP = 0.D+0
              WC(NQZ,NSL) = WC(NQZ,NSL) + (WCLZ+WCGZ+WCNZ)/AFZ(NQZ)
              BLU(MP) = BLU(MP) - WCLZ - WCGZ - WCNZ
!
!--- TVD Transport for interior surface adjacent to boundary  ---
!
              NPZ = NSZ(N)
              FLB = AFZ(NPZ)*WL(1,NPZ)
              IF( FLB.LT.ZERO ) THEN
                NBB = N-IJFLD
                XVLX = SL(2,NBB)*PORD(2,NBB)
                CRLB = ABS( WL(1,NPZ) )*DT/(DZGP(NPZ)*XVLX+SMALL)
                FCLB = YL(NBB,NSL)/(XVLX+SMALL)
                R = ((C(N,NSL)*FCLP-BCX(1)*FCL)
     &            /(C(NBB,NSL)*FCLB-C(N,NSL)*FCLP+SMALL))
     &            *((DZGF(NBB)+DZGF(N))/DZGF(N))
                THETA = FLIMIT( R,CRLB,ISLC(1) )
                DZF = DZGF(N)/(DZGF(N)+DZGF(NBB))
                WCLZ = C(N,NSL)*FLB*(1.D+0-THETA*DZF)*FCLP
     &            + C(NBB,NSL)*FLB*THETA*DZF*FCLB
                WCLZF = CO(N,NSL)*FLB*FCLP
                WC(NPZ,NSL) = WC(NPZ,NSL) + (WCLZ-WCLZF)/AFZ(NPZ)
                BLU(MP) = BLU(MP) + WCLZ - WCLZF
                BLU(IXP(NBB)) = BLU(IXP(NBB)) - WCLZ + WCLZF
              ENDIF
              FGB = AFZ(NPZ)*WG(1,NPZ)
              IF( FGB.LT.ZERO ) THEN
                NBB = N-IJFLD
                XVGX = SG(2,NBB)*PORD(2,NBB)
                CRGB = ABS( WG(1,NPZ) )*DT/(DZGP(NPZ)*XVGX+SMALL)
                FCGB = YG(NBB,NSL)/(XVGX+SMALL)
                R = ((C(N,NSL)*FCGP-BCX(1)*FCG)
     &            /(C(NBB,NSL)*FCGB-C(N,NSL)*FCGP+SMALL))
     &            *((DZGF(NBB)+DZGF(N))/DZGF(N))
                THETA = FLIMIT( R,CRGB,ISLC(1) )
                DZF = DZGF(N)/(DZGF(N)+DZGF(NBB))
                WCGZ = C(N,NSL)*FGB*(1.D+0-THETA*DZF)*FCGP
     &            + C(NBB,NSL)*FGB*THETA*DZF*FCGB
                WCGZF = CO(N,NSL)*FGB*FCGP
                WC(NPZ,NSL) = WC(NPZ,NSL) + (WCGZ-WCGZF)/AFZ(NPZ)
                BLU(MP) = BLU(MP) + WCGZ - WCGZF
                BLU(IXP(NBB)) = BLU(IXP(NBB)) - WCGZ + WCGZF
              ENDIF
              FNB = AFZ(NPZ)*WN(1,NPZ)
              IF( FNB.LT.ZERO ) THEN
                NBB = N-IJFLD
                XVNX = SN(2,NBB)*PORD(2,NBB)
                CRNB = ABS( WN(1,NPZ) )*DT/(DZGP(NPZ)*XVNX+SMALL)
                FCNB = YN(NBB,NSL)/(XVNX+SMALL)
                R = ((C(N,NSL)*FCNP-BCX(1)*FCN)
     &            /(C(NBB,NSL)*FCNB-C(N,NSL)*FCNP+SMALL))
     &            *((DZGF(NBB)+DZGF(N))/DZGF(N))
                THETA = FLIMIT( R,CRNB,ISLC(1) )
                DZF = DZGF(N)/(DZGF(N)+DZGF(NBB))
                WCNZ = C(N,NSL)*FNB*(1.D+0-THETA*DZF)*FCNP
     &            + C(NBB,NSL)*FNB*THETA*DZF*FCNB
                WCNZF = CO(N,NSL)*FNB*FCNP
                WC(NPZ,NSL) = WC(NPZ,NSL) + (WCNZ-WCNZF)/AFZ(NPZ)
                BLU(MP) = BLU(MP) + WCNZ - WCNZF
                BLU(IXP(NBB)) = BLU(IXP(NBB)) - WCNZ + WCNZF
              ENDIF
            ELSE
              ALT = MAX( -FLT,ZERO )
              AGT = MAX( -FGT,ZERO )
              ANT = MAX( -FNT,ZERO )
              AP = (ALT+FLT)*FCLP + (AGT+FGT)*FCGP + (ANT+FNT)*FCNP
              AT = ALT*FCL + AGT*FCG + ANT*FCN
            ENDIF
            BLU(MP) = BLU(MP) + AT*BCX(1)
!
!--- Inflow-Outflow (no TVD Transport) ---
!
          ELSEIF( IBCT(NSL+LUK,NB).EQ.23 ) THEN
            ALT = MAX( -FLT,ZERO )
            AGT = MAX( -FGT,ZERO )
            ANT = MAX( -FNT,ZERO )
            AP = (ALT+FLT)*FCLP + (AGT+FGT)*FCGP + (ANT+FNT)*FCNP
            AT = ALT*FCL + AGT*FCG + ANT*FCN
            BLU(MP) = BLU(MP) + AT*BCX(1)
          ENDIF
        ENDIF
        IF( ILES.EQ.1 ) THEN
          ALU(MROW,MCOL) = ALU(MROW,MCOL) + AP
        ELSEIF( ILES.EQ.3 .OR. ILES.EQ.4 ) THEN
          DLU(MCOL) = DLU(MCOL) + AP
#ifdef petsc
        ELSEIF( ILES.EQ.5 ) THEN
          CALL MatSetValues(T_MAT,1,IROW,1,IROW,AP,ADD_VALUES,IERR)
#endif
        ENDIF
  200 CONTINUE
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of SBND_EOR group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE SORC_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Compute source terms.
!
!     Source types
!
!     1 - Power, W
!     2 - Power density, W/m^3
!     122 - Fluid mass, kg/s, state #1, salt rel. sat., CO2 rel. sat.
!     123 - Fluid mass, kg/s, state #1, salt rel. sat., CO2 mass frac.
!     132 - Fluid mass, kg/s, state #1, salt mass frac., CO2 rel. sat.
!     133 - Fluid mass, kg/s, state #1, salt mass frac., CO2 mass frac.
!     220 - Fluid mass, kg/s, state #2, salt rel. sat.
!     230 - Fluid mass, kg/s, state #2, salt mass frac.
!     300 - Fluid mass, kg/s, state #3
!     422 - Fluid vol., m^3/s, state #1, salt rel. sat., CO2 rel. sat.
!     423 - Fluid vol., m^3/s, state #1, salt rel. sat., CO2 mass frac.
!     432 - Fluid vol., m^3/s, state #1, salt mass frac., CO2 rel. sat.
!     433 - Fluid vol., m^3/s, state #1, salt mass frac., CO2 mass frac.
!     520 - Fluid vol., m^3/s, state #2, salt rel. sat.
!     530 - Fluid vol., m^3/s, state #2, salt mass frac.
!     600 - Fluid vol., m^3/s, state #3
!
!     Source variables
!
!     SRC(1,NTM,NSR) - time, s
!     SRC(2,NTM,NSR) - power, W
!     SRC(2,NTM,NSR) - power density, W/m^3
!     SRC(2,NTM,NSR) - fluid mass rate, kg/s
!     SRC(2,NTM,NSR) - fluid volumetric rate, m^3/s
!     SRC(3,NTM,NSR) - fluid temperature, C
!     SRC(4,NTM,NSR) - aqueous CO2 relative saturation
!     SRC(4,NTM,NSR) - aqueous CO2 mass fraction
!     SRC(4,NTM,NSR) - aqueous saturation
!     SRC(4,NTM,NSR) - solute rate, 1/s
!     SRC(4,NTM,NSR) - solute density rate, 1/s m^3
!     SRC(5,NTM,NSR) - aqueous salt relative saturation
!     SRC(5,NTM,NSR) - aqueous salt mass fraction
!     SRC(6,NTM,NSR) - CO2 nonaqueous mole fraction
!     SRC(7,NTM,NSR) - CH4 nonaqueous mole fraction
!     SRC(7+I,NTM,NSR) - petroleum component I nonaqueous mole fraction
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, March 17, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE TRNSPT
      USE SOURC
      USE SOLTN
      USE REACT
      USE JACOB
      USE GRID
      USE GLB_PAR
      USE FDVS
      USE FDVP
      USE FDVN
      USE FDVGC
      USE FDVG
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 SRX(10+LSOLU+LNGC)
      REAL*8 ZMCX(LNGC)
      REAL*8 XGCX(LNGC),XNCX(LNGC),XMGCX(LNGC),XMNCX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//SORC_EOR'
!
!---  K-factors computed from fugacity coefficients  ---
!
      IFK = 0
#ifdef ecke
      DO 30 IGC = 1,NGC+2
!
!---  Load component sources for linked aqueous species   ---
!---                          or linked gaseous species   ---
!
        IF( ( ISPLK(14+NSPLK+IGC).NE.0 ) .OR.
     &      ( ISPLK(14+NSPLK+NGC+2+IGC).NE.0 ) ) THEN
!
!---    Load NGC sources associated with chemical
!       reactions  ---
!
          DO 20 N = 1,NFBN
            SRCGCX = SRCGC(IGC,1,N)*DTI
            DO 10 M = 2,ISVC+2
              SRCGC(IGC,M,N) = SRCGCX
   10       CONTINUE
   20     CONTINUE
        ENDIF
   30 CONTINUE
!
!---    Zero source terms  ---
!
      DO 60 NS = 1,NSR
        DO I = ISRDM(1,NS),ISRDM(2,NS)
          DO J = ISRDM(3,NS),ISRDM(4,NS)
            DO K = ISRDM(5,NS),ISRDM(6,NS)
              N = ND(I,J,K)
              DO M = 2,ISVC+2
                SRCW(M,N) = 0.D+0
                SRCS(M,N) = 0.D+0
                SRCT(M,N) = 0.D+0
              ENDDO
            ENDDO
          ENDDO
        ENDDO
   60 CONTINUE
#else
!
!---  Zero source terms  ---
!
      DO 60 NS = 1,NSR
        DO I = ISRDM(1,NS),ISRDM(2,NS)
          DO J = ISRDM(3,NS),ISRDM(4,NS)
            DO K = ISRDM(5,NS),ISRDM(6,NS)
              N = ND(I,J,K)
              DO M = 2,ISVC+2
                DO IGC = 1,NGC+2
                  SRCGC(IGC,M,N) = 0.D+0
                ENDDO
                SRCW(M,N) = 0.D+0
                SRCS(M,N) = 0.D+0
                SRCT(M,N) = 0.D+0
              ENDDO
            ENDDO
          ENDDO
        ENDDO
   60 CONTINUE
#endif
!
!---  Loop over sources  ---
!
      DO NS = 1,NSR
        IF( TM.LE.SRC(1,1,NS) ) CYCLE
        SRX(1) = TM
        IF( ISRM(NS).EQ.1 ) THEN
          DO N = 2,10+NSOLU+NGC
            SRX(N) = SRC(N,1,NS)
          ENDDO
        ELSE
          DO M = 2,ISRM(NS)
            IF( TM.LE.SRC(1,M,NS) ) THEN
             DTSR = MIN( SRC(1,M,NS)-TM,DT )
             TFSR = (TM-0.5D+0*DTSR-SRC(1,M-1,NS))/
     &         (SRC(1,M,NS)-SRC(1,M-1,NS))
             DO N = 2,10+NSOLU+NGC
               SRX(N) = SRC(N,M-1,NS) + TFSR*(SRC(N,M,NS)-SRC(N,M-1,NS))
             ENDDO
             GOTO 110
            ENDIF
          ENDDO
          CYCLE
        ENDIF
  110   CONTINUE
!
!---    Loop source domain  ---
!
        DO I = ISRDM(1,NS),ISRDM(2,NS)
        DO J = ISRDM(3,NS),ISRDM(4,NS)
        DO K = ISRDM(5,NS),ISRDM(6,NS)
          N = ND(I,J,K)
          IZN = IZ(N)
          NPHAZX = 0
          IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) CYCLE
          DO M = 2,ISVC+2
            TX = T(M,N)
            PX = PSO(M,N) + PATM
!
!---        Power  ---
!
            IF( ISRT(NS).EQ.1 ) THEN
              SRCT(M,N) = SRCT(M,N) + SRX(2)
!
!---        Power Density  ---
!
            ELSEIF( ISRT(NS).EQ.2 ) THEN
              SRCT(M,N) = SRCT(M,N) + SRX(2)*VOL(N)
!
!---        Fluid mass rate  ---
!
            ELSEIF( ISRT(NS)/100.GE.1 .AND. ISRT(NS)/100.LE.3 ) THEN
!
!---          Fluid withdrawl from grid cell  ---
!
              IF( SRX(2).LE.0.D+0 ) THEN
                FMGX = RKG(2,N)/VISG(2,N)
                FMLX = RKL(3,2,N)/VISL(2,N)
                FMNX = RKN(2,N)/VISN(2,N)
                SFMX = FMGX + FMLX + FMNX 
!
!---            Petroleum components from gas and 
!               nonaqueous liquid  ---
!
                DO IGC = 1,NGC+2
                  SRCGC(IGC,M,N) = SRCGC(IGC,M,N) + SRX(2)*
     &              (XGC(IGC,M,N)*FMGX + XNC(IGC,M,N)*FMNX)/SFMX
                ENDDO
!
!---            CO2 from aqueous  ---
!
                SRCGC(1,M,N) = SRCGC(1,M,N) + SRX(2)*
     &            XLA(M,N)*FMLX/SFMX
!
!---            Water from aqueous and gas  ---
!
                SRCW(M,N) = SRCW(M,N) + SRX(2)*(XGW(M,N)*FMGX +
     &            XLW(M,N)*FMLX)/SFMX
!
!---            Salt from aqueous  ---
!
                SRCS(M,N) = SRCS(M,N) + SRX(2)*XLS(M,N)*FMLX/SFMX
!
!---          Fluid injection into grid cell  ---
!
              ELSE
                IF( ISLC(30).EQ.0 ) TX = SRX(3)
!
!---            Source state #1  ---
!
!               SL = 1.0
!               SG+SN = 0.0
!
!               Declared variables:
!
!               SRX(4) - aqueous CO2 relative saturation, or
!                        aqueous CO2 mass fraction
!               SRX(5) - aqueous salt relative saturation, or
!                        aqueous salt mass fraction
!
                IF( ISRT(NS)/100.EQ.1 ) THEN
                  PVAX = SRX(4)
                  TMSX = SRX(5)
                  ISR4X = MOD(ISRT(NS),10)
                  ISR5X = MOD(ISRT(NS)/10,10)
                  CALL FLH_IC1( PX,PVAX,RHOLX,RHOMLX,TMSX,TX,XLAX,XLSX,
     &              XLWX,XMLAX,XMLSX,XMLWX,YLSX,ZMCX,ISR4X,ISR5X )
!
!---              CO2 from aqueous  ---
!
                  SRCGC(1,M,N) = SRCGC(1,M,N) + SRX(2)*XLAX
!
!---              Salt from aqueous  ---
!
                  SRCS(M,N) = SRCS(M,N) + SRX(2)*XLSX
!
!---              Water from aqueous  ---
!
                  SRCW(M,N) = SRCW(M,N) + SRX(2)*XLWX
!
!---            Source state #2  ---
!
!               SL < 1.0
!               SG+SN > 0.0
!
!               Declared variables:
!
!               SRX(4) - aqueous saturation
!               SRX(5) - aqueous salt relative saturation, or
!                         aqueous salt mass fraction
!               SRX(6+) - total mole fraction of petroleum components
!
                ELSEIF( ISRT(NS)/100.EQ.2 ) THEN
                  SLX = SRX(4)
                  TMSX = SRX(5)
                  ISR5X = MOD(ISRT(NS)/10,10)
                  DO IGC = 1,NGC+2
                    JGC = 5 + IGC
                    ZMCX(IGC) = SRX(JGC)
                  ENDDO
                  IZNX = 0
                  CALL FLH_IC2( PX,RHOGX,RHOMGX,RHOLX,RHOMLX,RHONX,
     &              RHOMNX,SGX,SLX,SNX,TMSX,TX,XGCX,XMGCX,XGWX,XMGWX,
     &              XLAX,XLSX,XLWX,XMLAX,XMLSX,XMLWX,XNCX,XMNCX,YLSX,
     &              ZGX,ZMCX,ZNX,ISR5X,IZNX,NPHAZX )
!
!---              Petroleum components from gas and 
!                 nonaqueous liquid  ---
!
                  DO IGC = 1,NGC+2
                    SRCGC(IGC,M,N) = SRCGC(IGC,M,N) + SRX(2)*
     &                (SGX*XGCX(IGC) + SNX*XNCX(IGC))
                  ENDDO
!
!---              CO2 from aqueous  ---
!
                  SRCGC(1,M,N) = SRCGC(1,M,N) + SRX(2)*SLX*XLAX
!
!---              Salt from aqueous  ---
!
                  SRCS(M,N) = SRCS(M,N) + SRX(2)*SLX*XLSX
!
!---              Water from aqueous and gas  ---
!
                  SRCW(M,N) = SRCW(M,N) + SRX(2)*(SGX*XGWX + SLX*XLWX)
!
!---            Source state #3  ---
!
!               SL = 0.0
!               SG+SN = 1.0
!
!               Declared variables:
!
!               SRX(5) - water vapor relative saturation
!               SRX(6+) - total mole fraction of petroleum comp.
!          
                ELSEIF( ISRT(NS)/100.EQ.3 ) THEN
                  DO IGC = 1,NGC+2
                    JGC = 6 + IGC
                    ZMCX(IGC) = SRX(JGC)
                  ENDDO
                  PVWX = SRX(5)
                  YLSX = 0.D+0
                  IZNX = 0
                  CALL FLH_IC3( PVWX,PX,RHOGX,RHOMGX,RHONX,RHOMNX,SGX,
     &              SNX,TX,XGCX,XGWX,XMGCX,XMGWX,XNCX,XMNCX,
     &              YLSX,ZGX,ZMCX,ZNX,IZNX,NPHAZX )
!
!---              Petroleum components from gas and 
!                 nonaqueous liquid  ---
!
                  DO IGC = 1,NGC+2
                    SRCGC(IGC,M,N) = SRCGC(IGC,M,N) + SRX(2)*
     &                (SGX*XGCX(IGC) + SNX*XNCX(IGC))
                  ENDDO
                ENDIF
              ENDIF
!
!---        Fluid volumetric rate  ---
!
            ELSEIF( ISRT(NS)/100.GE.4 .AND. ISRT(NS)/100.LE.6 ) THEN
!
!---          Fluid withdrawl from grid cell  ---
!
              IF( SRX(2).LE.0.D+0 ) THEN
                FMGX = RKG(2,N)/VISG(2,N)
                FMLX = RKL(3,2,N)/VISL(2,N)
                FMNX = RKN(2,N)/VISN(2,N)
                SFMX = FMGX + FMLX + FMNX 
!
!---            Petroleum components from gas and 
!               nonaqueous liquid  ---
!
                DO IGC = 1,NGC+2
                  SRCGC(IGC,M,N) = SRCGC(IGC,M,N) + SRX(2)*
     &              (XGC(IGC,M,N)*RHOG(M,N)*FMGX + 
     &              XNC(IGC,M,N)*RHON(M,N)*FMNX)/SFMX
                ENDDO
!
!---            CO2 from aqueous  ---
!
                SRCGC(1,M,N) = SRCGC(1,M,N) + SRX(2)*
     &            XLA(M,N)*RHOL(M,N)*FMLX/SFMX
!
!---            Water from aqueous and gas  ---
!
                SRCW(M,N) = SRCW(M,N) + SRX(2)*(XGW(M,N)*RHOG(M,N)*FMGX
     &            + XLW(M,N)*RHOL(M,N)*FMLX)/SFMX
!
!---            Salt from aqueous  ---
!
                SRCS(M,N) = SRCS(M,N) + SRX(2)*XLS(M,N)*RHOL(M,N)*
     &            FMLX/SFMX
!
!---          Fluid injection into grid cell  ---
!
              ELSE
                IF( ISLC(30).EQ.0 ) TX = SRX(3)
!
!---            Source state #1  ---
!
!               SL = 1.0
!               SG+SN = 0.0
!
!               Declared variables:
!
!               SRX(4) - aqueous CO2 relative saturation, or
!                        aqueous CO2 mass fraction
!               SRX(5) - aqueous salt relative saturation, or
!                        aqueous salt mass fraction
!
                IF( ISRT(NS)/100.EQ.4 ) THEN
                  PVAX = SRX(4)
                  TMSX = SRX(5)
                  ISR4X = MOD(ISRT(NS),10)
                  ISR5X = MOD(ISRT(NS)/10,10)
                  CALL FLH_IC1( PX,PVAX,RHOLX,RHOMLX,TMSX,TX,XLAX,XLSX,
     &              XLWX,XMLAX,XMLSX,XMLWX,YLSX,ZMCX,ISR4X,ISR5X )
!
!---              CO2 from aqueous  ---
!
                  SRCGC(1,M,N) = SRCGC(1,M,N) + SRX(2)*XLAX*RHOLX
!
!---              Salt from aqueous  ---
!
                  SRCS(M,N) = SRCS(M,N) + SRX(2)*XLSX*RHOLX
!
!---              Water from aqueous  ---
!
                  SRCW(M,N) = SRCW(M,N) + SRX(2)*XLWX*RHOLX
!
!---            Source state #2  ---
!
!               SL < 1.0
!               SG+SN > 0.0
!
!               Declared variables:
!
!               SRX(4) - aqueous saturation
!               SRX(5) - aqueous salt relative saturation, or
!                         aqueous salt mass fraction
!               SRX(6+) - total mole fraction of petroleum components
!
                ELSEIF( ISRT(NS)/100.EQ.5 ) THEN
                  SLX = SRX(4)
                  TMSX = SRX(5)
                  ISR5X = MOD(ISRT(NS)/10,10)
                  DO IGC = 1,NGC+2
                    JGC = 5 + IGC
                    ZMCX(IGC) = SRX(JGC)
                  ENDDO
                  IZNX = 0
                  CALL FLH_IC2( PX,RHOGX,RHOMGX,RHOLX,RHOMLX,RHONX,
     &              RHOMNX,SGX,SLX,SNX,TMSX,TX,XGCX,XMGCX,XGWX,XMGWX,
     &              XLAX,XLSX,XLWX,XMLAX,XMLSX,XMLWX,XNCX,XMNCX,YLSX,
     &              ZGX,ZMCX,ZNX,ISR5X,IZNX,NPHAZX )
!
!---              Petroleum components from gas and 
!                 nonaqueous liquid  ---
!
                  DO IGC = 1,NGC+2
                    SRCGC(IGC,M,N) = SRCGC(IGC,M,N) + SRX(2)*
     &                (SGX*XGCX(IGC)*RHOGX + SNX*XNCX(IGC)*RHONX)
                  ENDDO
!
!---              CO2 from aqueous  ---
!
                  SRCGC(1,M,N) = SRCGC(1,M,N) + SRX(2)*SLX*XLAX*RHOLX
!
!---              Salt from aqueous  ---
!
                  SRCS(M,N) = SRCS(M,N) + SRX(2)*SLX*XLSX*RHOLX
!
!---              Water from aqueous and gas  ---
!
                  SRCW(M,N) = SRCW(M,N) + SRX(2)*(SGX*XGWX*RHOGX + 
     &              SLX*XLWX*RHOLX)
!
!---            Source state #3  ---
!
!               SL = 0.0
!               SG+SN = 1.0
!
!               Declared variables:
!
!               SRX(5) - water vapor relative saturation
!               SRX(6+) - total mole fraction of petroleum comp.
!          
                ELSEIF( ISRT(NS)/100.EQ.6 ) THEN
                  DO IGC = 1,NGC+2
                    JGC = 6 + IGC
                    ZMCX(IGC) = SRX(JGC)
                  ENDDO
                  PVWX = SRX(5)
                  YLSX = 0.D+0
                  IZNX = 0
                  CALL FLH_IC3( PVWX,PX,RHOGX,RHOMGX,RHONX,RHOMNX,SGX,
     &              SNX,TX,XGCX,XGWX,XMGCX,XMGWX,XNCX,XMNCX,
     &              YLSX,ZGX,ZMCX,ZNX,IZNX,NPHAZX )
!
!---              Petroleum components from gas and 
!                 nonaqueous liquid  ---
!
                  DO IGC = 1,NGC+2
                    SRCGC(IGC,M,N) = SRCGC(IGC,M,N) + SRX(2)*
     &                (SGX*XGCX(IGC)*RHOGX + SNX*XNCX(IGC)*RHONX)
                  ENDDO
                ENDIF
              ENDIF
            ENDIF
          ENDDO
        ENDDO
        ENDDO
        ENDDO
      ENDDO
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of SORC_EOR group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE SORIC_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     STOMP-EOR
!
!     Compute coupled-equation source integrals.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 12 May 2009
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE COUP_WELL
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//SORIC_EOR'
!
!---  Integrate coupled-well rates  ---
!
      IF( L_CW.EQ.1 ) THEN
        DO 20 NCW = 1,N_CW
          QM_CW(2,NCW) = QM_CW(2,NCW) + QM_CW(1,NCW)*DT
          QM_CW(4,NCW) = QM_CW(4,NCW) + QM_CW(3,NCW)*DT
          QM_CW(6,NCW) = QM_CW(6,NCW) + QM_CW(5,NCW)*DT
          DO 10 IGC = 1,NGC+2
            QM_CW((8+(IGC-1)*2),NCW) = QM_CW((8+(IGC-1)*2),NCW) + 
     &        QM_CW((7+(IGC-1)*2),NCW)*DT
   10     CONTINUE
   20   CONTINUE
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of SORIC_EOR group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE SORIT_EOR( NSL )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Compute solute transport source integrals.
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, March 17, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE TRNSPT
      USE SOURC
      USE SOLTN
      USE GRID
      USE GLB_PAR
      USE FDVP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 SRX(8)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//SORIT_EOR'
!
!---  Loop over sources  ---
!
      DO 600 NS = 1,NSR
        IF( TM.LE.SRC(1,1,NS) ) GOTO 600
        SRX(1) = TM
        IF( ISRM(NS).EQ.1 ) THEN
          SRX(4) = SRC(4,1,NS)
        ELSE
          DO 100 M = 2,ISRM(NS)
            IF( TM.LE.SRC(1,M,NS) ) THEN
             DTSR = MIN( SRC(1,M,NS)-TM,DT )
             TFSR = (TM-0.5D+0*DTSR-SRC(1,M-1,NS))/
     &         (SRC(1,M,NS)-SRC(1,M-1,NS))
             SRX(4) = SRC(4,M-1,NS) + TFSR*(SRC(4,M,NS)-SRC(4,M-1,NS))
             GOTO 110
            ENDIF
  100     CONTINUE
          GOTO 600
        ENDIF
  110   CONTINUE
!
!---  Loop over source domain  ---
!
        DO I = ISRDM(1,NS),ISRDM(2,NS)
          DO J = ISRDM(3,NS),ISRDM(4,NS)
            DO K = ISRDM(5,NS),ISRDM(6,NS)
              N = ND(I,J,K)
              IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) CYCLE
!
!---  Aqueous Volumetric Sink  ---
!
              IF( ISRT(NS).EQ.3 .AND. SRX(4).LT.0.D+0 ) THEN
                SRCIC(N,NSL) = SRCIC(N,NSL) - C(N,NSL)*SRX(4)*
     &            YL(N,NSL)*DT/(PORD(2,N)*SL(2,N))
!
!---  Gas Volumetric Sink  ---
!
              ELSEIF( (ISRT(NS).EQ.4 .OR. ISRT(NS).EQ.5)
     &          .AND. SRX(4).LT.0.D+0 ) THEN
                SRCIC(N,NSL) = SRCIC(N,NSL) - C(N,NSL)*SRX(4)*
     &            YG(N,NSL)*DT/(PORD(2,N)*SG(2,N))
!
!---  Aqueous Mass Sink  ---
!
              ELSEIF( ISRT(NS).EQ.7 .AND. SRX(4).LT.0.D+0 ) THEN
                SRCIC(N,NSL) = SRCIC(N,NSL) - C(N,NSL)*SRX(4)*
     &            YL(N,NSL)*DT/(RHOL(2,N)*PORD(2,N)*SL(2,N))
!
!---  Gas Mass Sink  ---
!
              ELSEIF( (ISRT(NS).EQ.8 .OR. ISRT(NS).EQ.9)
     &          .AND. SRX(4).LT.0.D+0 ) THEN
                SRCIC(N,NSL) = SRCIC(N,NSL) - C(N,NSL)*SRX(4)*
     &            YG(N,NSL)*DT/(RHOG(2,N)*PORD(2,N)*SG(2,N))
!
!---  Solute source  ---
!
              ELSEIF( ISRT(NS).LT.0 .AND. ISRT(NS).GE.-NSOLU ) THEN
                SRCIC(N,NSL) = SRCIC(N,NSL) + SRX(4)*DT
!
!---  Solute source  ---
!
              ELSEIF( ISRT(NS).LT.-NSOLU .AND.
     &          ISRT(NS).GE.-2*NSOLU ) THEN
                SRCIC(N,NSL) = SRCIC(N,NSL) + SRX(4)*DT*VOL(N)
              ENDIF
            ENDDO
          ENDDO
        ENDDO
  600 CONTINUE
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of SORIT_EOR group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE SORT_EOR( NSL )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Compute solute transport source terms.
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, March 17, 2013
!
#ifdef petsc
!
!----------------------PETSc Modules-----------------------------------!
!
      USE PETSC_STOMP
#endif
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE TRNSPT
      USE SOURC
      USE SOLTN
      USE JACOB
      USE GRID
      USE GLB_PAR
      USE FDVP
      USE FDVN
      USE FDVG
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
#ifdef petsc
#include "include/finclude/petscsys.h"
#include "include/finclude/petscvec.h"
#include "include/finclude/petscvec.h90"
#include "include/finclude/petscmat.h"
#include "include/finclude/petscmat.h90"
#endif
!
!----------------------Type Declarations-------------------------------!
!
#ifdef petsc
      PetscErrorCode :: IERR
#endif
      REAL*8 SRX(10+LSOLU+LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//SORT_EOR'
!
!---  Loop over sources  ---
!
      DO 600 NS = 1,NSR
        IF( TM.LE.SRC(1,1,NS) ) GOTO 600
        SRX(1) = TM
        IF( ISRM(NS).EQ.1 ) THEN
          SRX(4) = SRC(4,1,NS)
        ELSE
          DO 100 M = 2,ISRM(NS)
            IF( TM.LE.SRC(1,M,NS) ) THEN
             DTSR = MIN( SRC(1,M,NS)-TM,DT )
             TFSR = (TM-0.5D+0*DTSR-SRC(1,M-1,NS))/
     &         (SRC(1,M,NS)-SRC(1,M-1,NS))
             SRX(4) = SRC(4,M-1,NS) + TFSR*(SRC(4,M,NS)-SRC(4,M-1,NS))
             GOTO 110
            ENDIF
  100     CONTINUE
          GOTO 600
        ENDIF
  110   CONTINUE
!
!---    Loop over source domain  ---
!
        DO I = ISRDM(1,NS),ISRDM(2,NS)
        DO J = ISRDM(3,NS),ISRDM(4,NS)
        DO K = ISRDM(5,NS),ISRDM(6,NS)
          N = ND(I,J,K)
          IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) CYCLE
          MP = IXP(N)
          IF( ILES.EQ.1 ) THEN
            MCOL = MP
            MROW = MDT
          ELSEIF( ILES.EQ.3 .OR. ILES.EQ.4 ) THEN
            MA = 1
            MCOL = KLUC(MP,MA)
            MA = MA + 1
#ifdef petsc
          ELSEIF( ILES.EQ.5 ) THEN
            IROW = petsc_offset(N)
#endif
          ENDIF
          SORTX = 0.D+0
!
!---      Fluid mass rate  ---
!
          IF( ISRT(NS)/100.GE.1 .AND. ISRT(NS)/100.LE.3 ) THEN
!
!---        Fluid withdrawl from grid cell  ---
!
            IF( SRX(4).LE.0.D+0 ) THEN
              FMGX = RKG(2,N)/VISG(2,N)
              FMLX = RKL(3,2,N)/VISL(2,N)
              FMNX = RKN(2,N)/VISN(2,N)
              SFMX = FMGX + FMLX + FMNX
              RPSLX = RHOL(2,N)*PORD(2,N)*SL(2,N)
              RPSGX = RHOG(2,N)*PORD(2,N)*SG(2,N)
              RPSNX = RHON(2,N)*PORD(2,N)*SN(2,N)
              IF( RPSLX.GT.EPSL ) SORTX = SORTX - SRX(4)*(YL(N,NSL)/
     &            RPSLX)*(FMLX/SFMX)
              IF( RPSGX.GT.EPSL ) SORTX = SORTX - SRX(4)*(YG(N,NSL)/
     &            RPSGX)*(FMGX/SFMX)
              IF( RPSNX.GT.EPSL ) SORTX = SORTX - SRX(4)*(YN(N,NSL)/
     &            RPSNX)*(FMNX/SFMX)
            ENDIF
!
!---      Fluid volumetric rate  ---
!
          ELSEIF( ISRT(NS)/100.GE.4 .AND. ISRT(NS)/100.LE.6 ) THEN
!
!---        Fluid withdrawl from grid cell  ---
!
            IF( SRX(4).LE.0.D+0 ) THEN
              FMGX = RKG(2,N)/VISG(2,N)
              FMLX = RKL(3,2,N)/VISL(2,N)
              FMNX = RKN(2,N)/VISN(2,N)
              SFMX = FMGX + FMLX + FMNX
              RPSLX = PORD(2,N)*SL(2,N)
              RPSGX = PORD(2,N)*SG(2,N)
              RPSNX = PORD(2,N)*SN(2,N)
              IF( RPSLX.GT.EPSL ) SORTX = SORTX - SRX(4)*(YL(N,NSL)/
     &            RPSLX)*(FMLX/SFMX)
              IF( RPSGX.GT.EPSL ) SORTX = SORTX - SRX(4)*(YG(N,NSL)/
     &            RPSGX)*(FMGX/SFMX)
              IF( RPSNX.GT.EPSL ) SORTX = SORTX - SRX(4)*(YN(N,NSL)/
     &            RPSNX)*(FMNX/SFMX)
            ENDIF
!
!---      Solute source  ---
!
          ELSEIF( ISRT(NS).EQ.-NSL ) THEN
            BLU(MP) = BLU(MP) + SRX(4)
!
!---      Solute density source  ---
!
          ELSEIF( ISRT(NS).EQ.-(NSL+NSOLU) ) THEN
            BLU(MP) = BLU(MP) + SRX(4)*VOL(N)
          ENDIF
!
!---      Load Jacobian  ---
!
          IF( ILES.EQ.1 ) THEN
            ALU(MROW,MCOL) = ALU(MROW,MCOL) + SORTX
          ELSEIF( ILES.EQ.3 .OR. ILES.EQ.4 ) THEN
            DLU(MCOL) = DLU(MCOL) + SORTX
#ifdef petsc
          ELSEIF( ILES.EQ.5 ) THEN
            CALL MatSetValues(T_MAT,1,IROW,1,IROW,SORTX,
     &                        ADD_VALUES,IERR)
#endif
          ENDIF
        ENDDO
        ENDDO
        ENDDO
  600 CONTINUE
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of SORT_EOR group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE SP_EOR( PGX,PLX,PNX,SGX,SLX,SNX,IZN )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, March 17, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PORMED
      USE GLB_PAR
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 GX(2)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/SP_EOR'
!
!---  Webb extension  ---
!
      IF( ISM(IZN).EQ.2 ) THEN
        SLMPX = SCHR(7,IZN)
        HLMPX = SCHR(8,IZN)
        SNMPX = SCHR(9,IZN)
        HNMPX = SCHR(10,IZN)
        STMPX = SCHR(11,IZN)
        HTMPX = SCHR(12,IZN)
      ENDIF
!
!---  Residual aqueous and nonaqueous saturation  ---
!
      SLRX = SCHR(4,IZN)
      SNRX = SCHR(5,IZN)
!
!---  Contact angle  ---
!
      THETAX = MIN( MAX( SCHR(6,IZN),0.D+0 ),GPI )
!
!---  Effective residual aqueous and nonaqueous saturation  ---
!
      ESLRX = 5.D-1*SLRX*(1.D+0+COS(THETAX))
      ESNRX = 5.D-1*SNRX*(1.D+0-COS(THETAX))
!
!---  Total-liquid pressure  ---
!
      PTX = MAX( PLX,PNX )
!
!---  van Genuchten saturation function  ---
!
      IF( ISCHR(IZN).EQ.1 ) THEN
        HGTX = MAX( 0.D+0,(PGX-PTX)/RHORL/GRAV )
        HNLX = (PNX-PLX)/RHORL/GRAV
        HLNX = (PLX-PNX)/RHORL/GRAV
        CNX = MAX( SCHR(3,IZN),SMALL )
        IF( SCHR(14,IZN).LE.ZERO ) THEN
          IF( IRPL(IZN).EQ.2 ) THEN
            CMX = 1.D+0 - 2.D+0/CNX
          ELSE
            CMX = 1.D+0 - 1.D+0/CNX
         ENDIF
        ELSE
          CMX = SCHR(14,IZN)
        ENDIF
        BX = SCHR(13,IZN)
!
!---    Webb extension  ---
!
        IF( ISM(IZN).EQ.2 ) THEN
!
!---      Total-liquid head above matching-point
!         head, use Webb extension  ---
!
          IF( HGTX.GT.HTMPX ) THEN
            SMPX = SCHR(11,IZN)
            HGTX = MIN( HGTX,HDOD )
            DMPX = SMPX/(LOG10(HDOD)-LOG10(HTMPX))
            STX = -(LOG10(HGTX)-LOG10(HDOD))*DMPX
!
!---      Total-liquid head below
!         matching-point head  ---
!
          ELSE
            ESTX = (1.D+0/(1.D+0 + (SCHR(1,IZN)*HGTX)**CNX))**CMX
            STX = ESTX*(1.D+0-ESLRX-ESNRX) + ESLRX + ESNRX
          ENDIF
!
!---      Nonaqueous-liquid to aqueous head above matching-point
!         head, use Webb extension  ---
!
          IF( HNLX.GT.HLMPX ) THEN
            SMPX = SCHR(7,IZN)
            HNLZ = MIN( HNLX,HDOD )
            DMPX = SMPX/(LOG10(HDOD)-LOG10(HLMPX))
            SLPX = -(LOG10(HNLZ)-LOG10(HDOD))*DMPX
!
!---      Nonaqueous-liquid to aqueous head below
!         matching-point head  ---
!
          ELSE
            HNLZ = MAX( HNLX,0.D+0 )
            ESNLX = (1.D+0/(1.D+0 + (SCHR(1,IZN)*HNLZ)**CNX))**CMX
            SLPX = ESNLX*(1.D+0-ESLRX) + ESLRX
          ENDIF
!
!---      Aqueous to nonaqueous-liquid head above matching-point
!         head, use Webb extension  ---
!
          IF( HLNX.GT.HNMPX ) THEN
            SMPX = SCHR(9,IZN)
            HLNZ = MIN( HLNX,HDOD )
            DMPX = SMPX/(LOG10(HDOD)-LOG10(HNMPX))
            SNPX = -(LOG10(HLNZ)-LOG10(HDOD))*DMPX
!
!---      Nonaqueous-liquid to aqueous head below
!         matching-point head  ---
!
          ELSE
            HLNZ = MAX( HLNX,0.D+0 )
            ESLNX = (1.D+0/(1.D+0 + (SCHR(1,IZN)*HLNZ)**CNX))**CMX
            SNPX = ESLNX*(1.D+0-ESNRX) + ESNRX
          ENDIF
          SLX = 5.D-1*SLPX*(1.D+0+COS(THETAX)) +
     &      5.D-1*(1.D+0-SNPX)*(1.D+0-COS(THETAX))
!
!---    No extension  ---
!
        ELSE
          ESTX = (1.D+0/(1.D+0 + (SCHR(1,IZN)*HGTX)**CNX))**CMX
          STX = ESTX*(1.D+0-ESLRX-ESNRX) + ESLRX + ESNRX
          HNLZ = MAX( HNLX,0.D+0 )
          ESNLX = (1.D+0/(1.D+0 + (SCHR(1,IZN)*HNLZ)**CNX))**CMX
          SLPX = ESNLX*(1.D+0-ESLRX) + ESLRX
          HLNZ = MAX( HLNX,0.D+0 )
          ESLNX = (1.D+0/(1.D+0 + (SCHR(1,IZN)*HLNZ)**CNX))**CMX
          SNPX = ESLNX*(1.D+0-ESNRX) + ESNRX
          SLX = 5.D-1*SLPX*(1.D+0+COS(THETAX)) +
     &      5.D-1*(1.D+0-SNPX)*(1.D+0-COS(THETAX))
        ENDIF
!
!---    Skip iteration for pure aqueous wet or pure nonaqueous-liquid
!       wet  ---
!
        IF( THETAX.LT.EPSL .OR. ABS(THETAX-GPI).LT.EPSL ) GOTO 120
!
!---    Top of Newton-Raphson loop  ---
!
        NC = 0
  100   CONTINUE
        NC = NC + 1
        IF( NC.GT.32 ) THEN
          INDX = 17
          RLMSG = HNLX
          CHMSG = 'Unconverged Aqueous Saturation for van Genuchten,' // 
     &      ' Nonaqueous-Liquid to Aqueous Capillary Head = '
          CALL WRMSGS( INDX )
        ENDIF
        DSLY = SIGN( 1.D-6,5.D-1-SLX )
        DO 110 M = 1,2
          SLY = SLX
          IF( M.EQ.2 ) SLY = SLX + DSLY
          SNY = 1.D+0 - SLY
!
!---      Webb extension  ---
!
          IF( ISM(IZN).EQ.2 ) THEN
!
!---        Aqueous saturation below the matching point,
!           use Webb extension  ---
!
            IF( SLY.LT.SLMPX ) THEN
              DMPX = -(LOG10(HDOD)-LOG10(HLMPX))/SLMPX
              HNLPX = 1.D+1**(DMPX*(SLY-SLMPX) + LOG10(HLMPX))
              SLLX = 0.D+0
!
!---        Aqueous saturation at or above the matching point,
!           use van Genuchten function
!
            ELSE
              ESLX = MAX( (SLY-ESLRX)/(1.D+0-ESLRX),0.D+0 )
              HNLPX = (((ESLX**(-1.D+0/CMX))-1.D+0)**(1.D+0/CNX))/
     &            SCHR(1,IZN)
              SLLX = ESLRX
            ENDIF
!
!---        Nonaqueous-liquid saturation below the matching point,
!           use Webb extension  ---
!
            IF( SNY.LT.SNMPX ) THEN
              DMPX = -(LOG10(HDOD)-LOG10(HNMPX))/SNMPX
              HLNPX = 1.D+1**(DMPX*(SNY-SNMPX) + LOG10(HNMPX))
              SULX = 1.D+0
!
!---        Aqueous saturation at or above the matching point,
!           use van Genuchten function
!
            ELSE
              ESNX = MAX( (SNY-ESNRX)/(1.D+0-ESNRX),0.D+0 )
              HLNPX = (((ESNX**(-1.D+0/CMX))-1.D+0)**(1.D+0/CNX))/
     &            SCHR(1,IZN)
              SULX = 1.D+0-ESNRX
            ENDIF
            HNLY = (((1.D+0+COS(THETAX))**BX)*HNLPX -
     &        ((1.D+0-COS(THETAX))**BX)*HLNPX)/
     &        (2.D+0**BX)
          ELSE
!
!---        Aqueous saturation at or below the effective aqueous residual 
!           saturation  ---
!
            IF( SLY.LE.ESLRX ) THEN
              HNLPX = HDOD
              SLLX = ESLRX
!
!---        Aqueous saturation above the effective aqueous residual 
!           saturation  ---
!
            ELSE
              ESLX = MAX( (SLY-ESLRX)/(1.D+0-ESLRX),0.D+0 )
              HNLPX = (((ESLX**(-1.D+0/CMX))-1.D+0)**(1.D+0/CNX))/
     &            SCHR(1,IZN)
              SLLX = ESLRX
            ENDIF
!
!---        Nonaqueous-liquid saturation at or below the effective  
!           nonaqueous-liquid residual saturation  ---
!
            IF( SNY.LE.ESNRX ) THEN
              HLNPX = HDOD
              SULX = 1.D+0-ESNRX
!
!---        Nonaqueous-liquid saturation above the effective 
!           nonaqueous-liquid residual saturation  ---
!
            ELSE
              ESNX = MAX( (SNY-ESNRX)/(1.D+0-ESNRX),0.D+0 )
              HLNPX = (((ESNX**(-1.D+0/CMX))-1.D+0)**(1.D+0/CNX))/
     &            SCHR(1,IZN)
              SULX = 1.D+0-ESNRX
            ENDIF
            HNLY = (((1.D+0+COS(THETAX))**BX)*HNLPX -
     &        ((1.D+0-COS(THETAX))**BX)*HLNPX)/
     &        (2.D+0**BX)
          ENDIF
          GX(M) = HNLX - HNLY
  110   CONTINUE
        IF( ABS(GX(1)).LT.EPSL ) GOTO 120
        FX = GX(1)
        DFX = (GX(2)-GX(1))/DSLY
        DSLX = -FX/DFX
        SLX = SLX + DSLX
        SLX = MAX( MIN( SLX,SULX ),SLLX )
        IF( ABS(DSLX).GT.1.D-9 ) GOTO 100
!
!---    Gas, aqueous, and nonaqueous-liquid saturations  ---
!
  120   CONTINUE
        SGX = 1.D+0 - STX
        SLX = STX*SLX
        SNX = STX - SLX
!
!---  Brooks and Corey saturation function  ---
!
      ELSEIF( ISCHR(IZN).EQ.2 ) THEN
        HGTX = MAX( 0.D+0,(PGX-PTX)/RHORL/GRAV )
        HNLX = (PNX-PLX)/RHORL/GRAV
        HLNX = (PLX-PNX)/RHORL/GRAV
        CLX = MAX( SCHR(3,IZN),SMALL )
        BX = SCHR(13,IZN)
!
!---    Webb extension  ---
!
        IF( ISM(IZN).EQ.2 ) THEN
!
!---      Total-liquid head above matching-point
!         head, use Webb extension  ---
!
          IF( HGTX.GT.HTMPX ) THEN
            SMPX = SCHR(11,IZN)
            HGTX = MIN( HGTX,HDOD )
            DMPX = SMPX/(LOG10(HDOD)-LOG10(HTMPX))
            STX = -(LOG10(HGTX)-LOG10(HDOD))*DMPX
!
!---      Total-liquid head below
!         matching-point head  ---
!
          ELSE
            IF( HGTX-SCHR(2,IZN).LE.1.D-12 ) THEN
              ESTX = 1.D+0
            ELSE
              ESTX = (SCHR(2,IZN)/HGTX)**CLX
            ENDIF
            STX = ESTX*(1.D+0-ESLRX-ESNRX) + ESLRX + ESNRX
          ENDIF
!
!---      Nonaqueous-liquid to aqueous head above matching-point
!         head, use Webb extension  ---
!
          IF( HNLX.GT.HLMPX ) THEN
            SMPX = SCHR(7,IZN)
            HNLZ = MIN( HNLX,HDOD )
            DMPX = SMPX/(LOG10(HDOD)-LOG10(HLMPX))
            SLPX = -(LOG10(HNLZ)-LOG10(HDOD))*DMPX
!
!---      Nonaqueous-liquid to aqueous head below
!         matching-point head  ---
!
          ELSE
            IF( HNLX-SCHR(2,IZN).LE.1.D-12 ) THEN
              ESNLX = 1.D+0
            ELSE
              ESNLX = (SCHR(2,IZN)/HNLX)**CLX
            ENDIF
            SLPX = ESNLX*(1.D+0-ESLRX) + ESLRX
          ENDIF
!
!---      Aqueous to nonaqueous-liquid head above matching-point
!         head, use Webb extension  ---
!
          IF( HLNX.GT.HNMPX ) THEN
            SMPX = SCHR(9,IZN)
            HLNZ = MIN( HLNX,HDOD )
            DMPX = SMPX/(LOG10(HDOD)-LOG10(HNMPX))
            SNPX = -(LOG10(HLNZ)-LOG10(HDOD))*DMPX
!
!---      Nonaqueous-liquid to aqueous head below
!         matching-point head  ---
!
          ELSE
            IF( HLNX-SCHR(2,IZN).LE.1.D-12 ) THEN
              ESLNX = 1.D+0
            ELSE
              ESLNX = (SCHR(2,IZN)/HLNX)**CLX
            ENDIF
            SNPX = ESLNX*(1.D+0-ESNRX) + ESNRX
          ENDIF
          SLX = 5.D-1*SLPX*(1.D+0+COS(THETAX)) +
     &      5.D-1*(1.D+0-SNPX)*(1.D+0-COS(THETAX))
!
!---    No extension  ---
!
        ELSE
          IF( HGTX-SCHR(2,IZN).LE.1.D-12 ) THEN
            ESTX = 1.D+0
          ELSE
            ESTX = (SCHR(2,IZN)/HGTX)**CLX
          ENDIF
          STX = ESTX*(1.D+0-ESLRX-ESNRX) + ESLRX + ESNRX
          IF( HNLX-SCHR(2,IZN).LE.1.D-12 ) THEN
            ESNLX = 1.D+0
          ELSE
            ESNLX = (SCHR(2,IZN)/HNLX)**CLX
          ENDIF
          SLPX = ESNLX*(1.D+0-ESLRX) + ESLRX
          IF( HLNX-SCHR(2,IZN).LE.1.D-12 ) THEN
            ESLNX = 1.D+0
          ELSE
            ESLNX = (SCHR(2,IZN)/HLNX)**CLX
          ENDIF
          SNPX = ESLNX*(1.D+0-ESNRX) + ESNRX
          SLX = 5.D-1*SLPX*(1.D+0+COS(THETAX)) +
     &      5.D-1*(1.D+0-SNPX)*(1.D+0-COS(THETAX))
        ENDIF
!
!---    Skip iteration for pure aqueous wet or pure nonaqueous-liquid
!       wet  ---
!
        IF( THETAX.LT.EPSL .OR. ABS(THETAX-GPI).LT.EPSL ) GOTO 220
!
!---    Top of Newton-Raphson loop  ---
!
        NC = 0
  200   CONTINUE
        NC = NC + 1
        IF( NC.GT.32 ) THEN
          INDX = 17
          RLMSG = HNLX
          CHMSG = 'Unconverged Aqueous Saturation for Brooks and' // 
     &      ' Corey, Nonaqueous-Liquid to Aqueous Capillary Head = '
          CALL WRMSGS( INDX )
        ENDIF
        DSLY = SIGN( 1.D-6,5.D-1-SLX )
        DO 210 M = 1,2
          SLY = SLX
          IF( M.EQ.2 ) SLY = SLX + DSLY
          SNY = 1.D+0 - SLY
!
!---      Webb extension  ---
!
          IF( ISM(IZN).EQ.2 ) THEN
!
!---        Aqueous saturation below the matching point,
!           use Webb extension  ---
!
            IF( SLY.LT.SLMPX ) THEN
              DMPX = -(LOG10(HDOD)-LOG10(HLMPX))/SLMPX
              HNLPX = 1.D+1**(DMPX*(SLY-SLMPX) + LOG10(HLMPX))
              SLLX = 0.D+0
!
!---        Aqueous saturation at or above the matching point,
!           use Brooks and Corey function
!
            ELSE
              ESLX = MAX( (SLY-ESLRX)/(1.D+0-ESLRX),0.D+0 )
              HNLPX = SCHR(2,IZN)*(1.D+0/ESLX)**(1.D+0/CLX)
              SLLX = ESLRX
            ENDIF
!
!---        Nonaqueous-liquid saturation below the matching point,
!           use Webb extension  ---
!
            IF( SNY.LT.SNMPX ) THEN
              DMPX = -(LOG10(HDOD)-LOG10(HNMPX))/SNMPX
              HLNPX = 1.D+1**(DMPX*(SNY-SNMPX) + LOG10(HNMPX))
              SULX = 1.D+0
!
!---        Aqueous saturation at or above the matching point,
!           use van Genuchten function
!
            ELSE
              ESNX = MAX( (SNY-ESNRX)/(1.D+0-ESNRX),0.D+0 )
              HLNPX = SCHR(2,IZN)*(1.D+0/ESNX)**(1.D+0/CLX)
              SULX = 1.D+0-ESNRX
            ENDIF
            HNLY = (((1.D+0+COS(THETAX))**BX)*HNLPX -
     &        ((1.D+0-COS(THETAX))**BX)*HLNPX)/
     &        (2.D+0**BX)
          ELSE
!
!---        Aqueous saturation at or below the effective aqueous residual 
!           saturation  ---
!
            IF( SLY.LE.ESLRX ) THEN
              HNLPX = HDOD
              SLLX = ESLRX
!
!---        Aqueous saturation above the effective aqueous residual 
!           saturation  ---
!
            ELSE
              ESLX = MAX( (SLY-ESLRX)/(1.D+0-ESLRX),0.D+0 )
              HNLPX = SCHR(2,IZN)*(1.D+0/ESLX)**(1.D+0/CLX)
              SLLX = ESLRX
            ENDIF
!
!---        Nonaqueous-liquid saturation at or below the effective  
!           nonaqueous-liquid residual saturation  ---
!
            IF( SNY.LE.ESNRX ) THEN
              HLNPX = HDOD
              SULX = 1.D+0-ESNRX
!
!---        Nonaqueous-liquid saturation above the effective 
!           nonaqueous-liquid residual saturation  ---
!
            ELSE
              ESNX = MAX( (SNY-ESNRX)/(1.D+0-ESNRX),0.D+0 )
              HLNPX = SCHR(2,IZN)*(1.D+0/ESNX)**(1.D+0/CLX)
              SULX = 1.D+0-ESNRX
            ENDIF
            HNLY = (((1.D+0+COS(THETAX))**BX)*HNLPX -
     &        ((1.D+0-COS(THETAX))**BX)*HLNPX)/
     &        (2.D+0**BX)
          ENDIF
          GX(M) = HNLX - HNLY
  210   CONTINUE
        IF( ABS(GX(1)).LT.EPSL ) GOTO 220
        FX = GX(1)
        DFX = (GX(2)-GX(1))/DSLY
        DSLX = -FX/DFX
        SLX = SLX + DSLX
        SLX = MAX( MIN( SLX,SULX ),SLLX )
        IF( ABS(DSLX).GT.1.D-9 ) GOTO 200
!
!---    Gas, aqueous, and nonaqueous-liquid saturations  ---
!
  220   CONTINUE
        SGX = 1.D+0 - STX
        SLX = STX*SLX
        SNX = STX - SLX
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of SP_EOR group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE SPRP_EOR( NSL )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Calculates the aqueous- and gas-phase solute
!     mole fractions from user-specified partition coefficients.
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, March 17, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE TRNSPT
      USE SOLTN
      USE PORMED
      USE GRID
      USE FDVP
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/SPRP_EOR'
!
!---  Loop over all nodes  ---
!
      DO N = 1,NFBN
        N_DB = N
        IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) CYCLE
        IZN = IZ(N)
        IF( IPCL(NSL).EQ.2 ) THEN
          XVS = RHOS(IZN)*PCSL(1,IZN,NSL)*(1.D+0-PORT(2,N))*SL(2,N)
        ELSE
          XVS = RHOS(IZN)*PCSL(1,IZN,NSL)*(1.D+0-PORT(2,N))
        ENDIF
        XVL = SL(2,N)*PORD(2,N)
        XVG = SG(2,N)*PORD(2,N)
        XVN = SN(2,N)*PORD(2,N)
!
!---    Constant gas-aqueous partition coefficient  ---
!
        IF( IPCGL(NSL).EQ.0 ) THEN
          PCGLX = PCGL(1,NSL)
!
!---    Temperature dependent gas-aqueous partition coefficient  ---
!
        ELSEIF( IPCGL(NSL).EQ.1 ) THEN
          TK = T(2,N)+TABS
          PCGLX = EXP( PCGL(1,NSL) + PCGL(2,NSL)/TK
     &      + PCGL(3,NSL)*LOG(TK) + PCGL(4,NSL)*TK + PCGL(5,NSL)*TK**2 )
!
!---    Water-vapor equilibrium gas-aqueous partition coefficient  ---
!
        ELSEIF( IPCGL(NSL).EQ.2 ) THEN
          PCGLX = RHOG(2,N)*XGW(2,N)/(RHOL(2,N)*XLW(2,N))
        ENDIF
        PCGLX = MAX( PCGLX,1.D-20 )
        PCGLX = MIN( PCGLX,1.D+20 )
!
!---    Constant aqueous-nonaqueous liquid partition coefficient  ---
!
        PCLNX = PCLN(1,NSL)
        PCLNX = MAX( PCLNX,1.D-20 )
        PCLNX = MIN( PCLNX,1.D+20 )
!
!---    Phase-volumetric concentration ratios  ---
!
        YVL = 1.D+0/(XVS + XVL + XVG*PCGLX + XVN/PCLNX)
        YVG = PCGLX/(XVS + XVL + XVG*PCGLX + XVN/PCLNX)
        YVN = 1.D+0/((XVS + XVL + XVG*PCGLX + XVN/PCLNX)*PCLNX)
!
!---    Phase mole fractions  ---
!
        YL(N,NSL) = XVL*YVL
        YG(N,NSL) = XVG*YVG
        YN(N,NSL) = XVN*YVN
      ENDDO
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of SPRP_EOR group  ---
!
      RETURN
      END
      
!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE TPORT_EOR( NSL )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Solute/Reactive Species Transport Shell.
!
!----------------------Authors-----------------------------------------!
!
!     Written by DH Bacon, PNNL, 18 September 2014
!
#ifdef lis
!
!----------------------PETSc Modules-----------------------------------!
!
      USE STOMP_LIS_MODULE
#endif
#ifdef petsc
!
!----------------------PETSc Modules-----------------------------------!
!
      USE PETSC_STOMP
#endif
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE JACOB
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
#ifdef petsc
#include "include/finclude/petscsys.h"
#include "include/finclude/petscvec.h"
#include "include/finclude/petscvec.h90"
#include "include/finclude/petscmat.h"
#include "include/finclude/petscmat.h90"
#endif
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//TPORT_EOR'
!
!---  Zero Jacobian matrix  ---
!
#ifdef petsc
      IF( ILES.EQ.5 ) CALL MatZeroEntries(T_MAT,IERR)
#endif
      INDX = 6
      CALL JCBZ( ISVT,MUT,MLT,MKT,INDX )
!
!---  Compute solute sources ---
!
      CALL SORT_EOR( NSL )
!
!---  Compute solute sources from injection and production wells ---
!
      CALL SORT_COUP_WELL( NSL )
!
!---  Zero solute transport fluxes  ---
!
      CALL SFXZ( NSL )
!
!---  Load Jacobian matrix (aqueous transport)  ---
!
      CALL SJCBL( NSL )
!
!---  Load Jacobian matrix (gas transport)  ---
!
      CALL SJCBG( NSL )
!
!---  Load Jacobian matrix (nonaqueous-liquid transport)  ---
!
      CALL SJCBN( NSL )
!
!---  Modify Jacobian matrix for boundary conditions ---
!
      CALL SBND_EOR( NSL )
!
!---  Fault solute sources ---
!
      IF( ISLC(74).EQ.1 .OR. ISLC(74).EQ.3 ) CALL SORT_FRC_EOR( NSL )
!
!---  Zero solute transport fractures ---
!
      IF( ISLC(74).EQ.1 .OR. ISLC(74).EQ.3 ) CALL SFXZ_FRC_EOR( NSL )
!
!---  Load Jacobian matrix (aqueous transport) for faults  ---
!
      IF( ISLC(74).EQ.1 .OR. ISLC(74).EQ.3 ) CALL SJCBL_FRC_EOR( NSL )
!
!---  Load Jacobian matrix (gas transport) for faults  ---
!
      IF( ISLC(74).EQ.1 .OR. ISLC(74).EQ.3 ) CALL SJCBG_FRC_EOR( NSL )
!
!---  Load Jacobian matrix (nonaqueous liquid transport) for faults  ---
!
      IF( ISLC(74).EQ.1 .OR. ISLC(74).EQ.3 ) CALL SJCBN_FRC_EOR( NSL )
!
!---  Transfer functions between fault and matrix, fault
!     and matrix equations ---
!
      IF( ISLC(74).EQ.1 .OR. ISLC(74).EQ.3 ) CALL TRNSC_FM_EOR( NSL )
!
!---  Linear equation solver  ---
!
      IF( ILES.EQ.1 ) THEN
        INDX = 1
        CALL BAND( 0,MUT,MLT,INDX )
      ELSEIF( ILES.EQ.3 ) THEN
        INDX = 1
        CALL PSPLIB( 0,INDX )
#ifdef lis
      ELSEIF( ILES.EQ.4 ) THEN
        INDX = 1
        CALL STOMP_LIS_SOLVE(-1,T_KSP,T_MAT,T_RHS_VEC,T_SOL_VEC,INDX)
#endif
#ifdef petsc
      ELSEIF( ILES.EQ.5 ) THEN
        CALL PETSC_PUT_RHS(BLU,T_RHS_VEC)
        CALL PETSC_SOLVE(T_KSP,T_MAT,T_RHS_VEC,T_SOL_VEC)
        CALL PETSC_GET_SOLUTION(BLU,T_SOL_VEC)
#endif
      ENDIF
!
!---  Update solute concentrations ---
!
      CALL UPDTC( NSL )
!
!---  Update solute concentrations for fractures  ---
!
      IF( ISLC(74).EQ.1 .OR. ISLC(74).EQ.3 ) CALL UPDTC_FRC( NSL )
!
!---  Solute aqueous fluxes (interior nodes)  ---
!
      CALL SFXL( NSL )
!
!---  Solute aqueous fluxes (boundary surfaces)  ---
!
      CALL SFXLB( NSL )
!
!---  Solute gas fluxes (interior nodes)  ---
!
      CALL SFXG( NSL )
!
!---  Solute gas fluxes (boundary surfaces)  ---
!
      CALL SFXGB( NSL )
!
!---  Solute nonaqueous-liquid fluxes (interior nodes)  ---
!
      CALL SFXN( NSL )
!
!---  Solute nonaqueous-liquid fluxes (boundary surfaces)  ---
!
      CALL SFXNB( NSL )
!
!---  Integrate solute sources  ---
!
      CALL SORIT_EOR( NSL )
!
!---  Solute flux for fault triangle to fault triangle flow  ---
!
      IF( ISLC(74).EQ.1 .OR. ISLC(74).EQ.3 ) CALL SFX_FRC_EOR( NSL )
!
!---  Solute flux for fault triangle to matrix grid cell flow  ---
!
      IF( ISLC(74).EQ.1 .OR. ISLC(74).EQ.3 ) CALL SFX_FM_EOR( NSL )
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of TPORT_EOR group
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE UPDT_BO
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Update the primary variables for the black-oil option.
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, 22 May 2014
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE OUTPU
      USE JACOB
      USE HYST
      USE GRID
      USE GLB_PAR
      USE GEOM_FRC
      USE FILES
      USE FDVS_FRC
      USE FDVS
      USE FDVP_FRC
      USE FDVP
      USE FDVGC_FRC
      USE FDVGC
      USE COUP_WELL
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      CHARACTER*128 PH_CND(5)
      REAL*8 DPC(LNGC)
      INTEGER MPC(LNGC)
!
!----------------------Data Statements---------------------------------!
!
      SAVE PH_CND
      DATA PH_CND /'Phase Condition #1, SL = 1.0, SG+SN = 0.0',
     &  'Phase Condition #2, SL > 0.0, SN > 0.0, SG = 0.0',
     &  'Phase Condition #3, SL > 0.0, SN > 0.0, SG > 0.0',
     &  'Phase Condition #4, SL = 0.0, SN > 0.0, SG = 0.0',
     &  'Phase Condition #5, SL = 0.0, SN > 0.0, SG > 0.0'/
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//UPDT_BO'
      IF( ICNV.EQ.1 ) GOTO 300
      IERR = 0
!
!---  Update primary variables
!
      DO N = 1,NFBN
        N_DB = N
        IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) CYCLE
        NMD = IXP(N)
        IZN = IZ(N)
!
!---    Water mass equation  ---
!
        MPW = IM(IEQW,NMD)
        DPW = BLU(MPW)
!
!---    Gas mass equation  ---
!
        MPC(1) = IM(IEQGC(1),NMD)
        DPC(1) = BLU(MPC(1))
!
!---    Oil mass equation  ---
!
        MPC(2) = IM(IEQGC(2),NMD)
        DPC(2) = BLU(MPC(2))
!
!---    Salt mass equation  ---
!
        IF( ISLC(32).EQ.0 ) THEN
          MPS = IM(IEQS,NMD)
          DPS = BLU(MPS)
        ELSE
          DPS = 0.D+0
        ENDIF
!
!---    Phase condition #1  ---
!
!       SL = 1.0
!       SG+SN = 0.0
!       Aqueuous saturated
!
!       water mass - aqueous (system) pressure, Pa gauge - PL,PSO
!       gas mass - total gas mass - TMC(1,2,N)
!       oil mass - total oil mass - TMC(2,2,N)
!       salt mass - total salt brine mass fraction - YLS
!
        IF( MOD(NPHAZ(2,N),10).EQ.1 ) THEN
!
!---      Limit changes in total pressure,
!         excessive primary variable change limit at 100 MPa  ---
!
          IF( ABS(DPW).GT.1.D+8 ) IERR = 1
          DPX = 2.5D-2*(PSO(2,N)+PATM)
          DPW = SIGN( MIN(ABS(DPX),ABS(DPW)),DPW )
          PSO(2,N) = PSO(2,N) + DPW
          PSO(2,N) = MIN( PSO(2,N),5.D+8 )
!
!---      Zero negative corrections for zero gas mass  ---
!
          IF( TMC(1,2,N).LT.EPSL .AND. DPC(1).LT.EPSL ) THEN
            BLU(MPC(1)) = 0.D+0
            DPC(1) = 0.D+0
          ENDIF
          TMC(1,2,N) = MAX( (TMC(1,2,N)+DPC(1)),0.D+0 )
!
!---      Zero negative corrections for zero oil mass  ---
!
          IF( TMC(2,2,N).LT.EPSL .AND. DPC(2).LT.EPSL ) THEN
            BLU(MPC(2)) = 0.D+0
            DPC(2) = 0.D+0
          ENDIF
          TMC(2,2,N) = MAX( (TMC(2,2,N)+DPC(2)),0.D+0 )
!
!---      Limit salt mass fraction changes to 0.25 of the
!         maximum value if salt mass fraction is less than
!         the maximum, isobrine option   ---
!
          IF( ISLC(32).EQ.0 ) THEN
            CALL SOL_LS( T(2,N),XLSMX )
            IF( YLS(2,N).LT.XLSMX ) THEN
              DPS = SIGN( MIN( ABS(2.5D-1*XLSMX),ABS(DPS) ),DPS )
            ENDIF
!
!---        Zero negative corrections for zero dissolved salt  ---
!
            IF( YLS(2,N)/EPSL.LT.EPSL .AND. DPS/EPSL.LT.EPSL ) THEN
              BLU(MPS) = 0.D+0
              DPS = 0.D+0
            ENDIF
            YLS(2,N) = YLS(2,N)+DPS
            IF( YLS(2,N).LT.1.D-12 ) YLS(2,N) = 0.D+0
          ENDIF
!
!---    Phase condition #2  ---
!
!       SG = 0.0
!       SL > 0.0
!       SN > 0.0
!       Aqueous and nonaqueous liquid saturated
!
!       water mass - aqueous saturation, SL
!       gas mass - gas to oil ratio, POSM
!       oil mass - nonaqueous (system) pressure, Pa gauge - PN,PSO
!       salt mass - total salt brine mass fraction - YLS
!
        ELSEIF( MOD(NPHAZ(2,N),10).EQ.2 ) THEN
!
!---      Limit changes in aqueous saturation  ---
!
          DPX = 2.5D-2
          DPW = SIGN( MIN(ABS(DPX),ABS(DPW)),DPW )
          SL(2,N) = SL(2,N) + DPW
          IF( SL(2,N).LT.EPSL ) SL(2,N) = 0.D+0
!
!---      Limit changes in gas to oil ratio, and zero negative 
!         corrections for zero gas to oil ratios  ---
!
          DPX = 5.D-2/REAL(NITER)
          DPC(1) = SIGN( MIN(ABS(DPX),ABS(DPC(1))),DPC(1) )
          POSM(2,N) = POSM(2,N) + DPC(1)
!
!---      Limit changes in nonaqueous-liquid pressure (system pressure),
!         excessive primary variable change limit at 100 MPa  ---
!
          IF( ABS(DPC(2)).GT.1.D+8 ) IERR = 1
          DPX = MAX( 1.D+6,1.D-1*(PN(2,N)-PL(2,N)) )
          DPX = 2.5D-2*(PSO(2,N)+PATM)
          DPC(2) = SIGN( MIN(ABS(DPX),ABS(DPC(2))),DPC(2) )
!
!---      Bubble-point pressure as a function of gas to oil ratio
!         (m^3/m^3) and temperature (C)  ---
!
!          CALL BO_BP( PBPX,POSM(2,N),T(2,N) )
!
!---      Pressure below bubble-point pressure  ---
!
!          IF( PSO(2,N)+DPC(2).LT.PBPX-PATM ) DPC(2) = 6.D-1*DPC(2)
          PSO(2,N) = PSO(2,N) + DPC(2)
          PSO(2,N) = MIN( PSO(2,N),5.D+8 )
!
!---      Limit salt mass fraction changes to 0.25 of the
!         maximum value if salt mass fraction is less than
!         the maximum, isobrine option   ---
!
          IF( ISLC(32).EQ.0 ) THEN
            CALL SOL_LS( T(2,N),XLSMX )
            IF( YLS(2,N).LT.XLSMX ) THEN
              DPS = SIGN( MIN( ABS(2.5D-1*XLSMX),ABS(DPS) ),DPS )
            ENDIF
!
!---        Zero negative corrections for zero dissolved salt  ---
!
            IF( YLS(2,N)/EPSL.LT.EPSL .AND. DPS/EPSL.LT.EPSL ) THEN
              BLU(MPS) = 0.D+0
              DPS = 0.D+0
            ENDIF
            YLS(2,N) = YLS(2,N)+DPS
            IF( YLS(2,N).LT.1.D-12 ) YLS(2,N) = 0.D+0
          ENDIF
!
!---    Phase condition #3  ---
!
!       SG > 0.0
!       SL > 0.0
!       SN > 0.0
!       Three-phase
!
!       water mass - aqueous saturation, SL
!       gas mass - gas saturation, SG
!       oil mass - gas (system) pressure, Pa gauge - PG,PSO
!       salt mass - total salt brine mass fraction - YLS
!
        ELSEIF( MOD(NPHAZ(2,N),10).EQ.3 ) THEN
!
!---      Limit changes in aqueous saturation  ---
!
          DPX = 2.5D-2
          DPW = SIGN( MIN(ABS(DPX),ABS(DPW)),DPW )
          SL(2,N) = SL(2,N) + DPW
          IF( SL(2,N).LT.EPSL ) SL(2,N) = 0.D+0
!
!---      Limit changes in gas saturation  ---
!
          DPX = 2.5D-2
          DPC(1) = SIGN( MIN(ABS(DPX),ABS(DPC(1))),DPC(1) )
!          IF( SG(2,N)+DPC(1).LT.0.D+0 ) DPC(1) = 6.D-1*DPC(1)
          SG(2,N) = SG(2,N) + DPC(1)
          IF( SG(2,N).LT.EPSL ) SG(2,N) = 0.D+0
!
!---      Limit changes in gas pressure, excessive primary variable 
!         change limit at 100 MPa  ---
!
          IF( ABS(DPC(1)).GT.1.D+8 ) IERR = 1
          DPX = MAX( 1.D+6,1.D-1*(PG(2,N)-MAX(PL(2,N),PN(2,N))) )
          DPX = 2.5D-2*(PSO(2,N)+PATM)
          DPC(2) = SIGN( MIN(ABS(DPX),ABS(DPC(2))),DPC(2) )
          PSO(2,N) = PSO(2,N) + DPC(2)
          PSO(2,N) = MIN( PSO(2,N),5.D+8 )
!
!---      Limit salt mass fraction changes to 0.25 of the
!         maximum value if salt mass fraction is less than
!         the maximum, isobrine option   ---
!
          IF( ISLC(32).EQ.0 ) THEN
            CALL SOL_LS( T(2,N),XLSMX )
            IF( YLS(2,N).LT.XLSMX ) THEN
              DPS = SIGN( MIN( ABS(2.5D-1*XLSMX),ABS(DPS) ),DPS )
            ENDIF
!
!---        Zero negative corrections for zero dissolved salt  ---
!
            IF( YLS(2,N)/EPSL.LT.EPSL .AND. DPS/EPSL.LT.EPSL ) THEN
              BLU(MPS) = 0.D+0
              DPS = 0.D+0
            ENDIF
            YLS(2,N) = YLS(2,N)+DPS
            IF( YLS(2,N).LT.1.D-12 ) YLS(2,N) = 0.D+0
          ENDIF
!
!---    Phase condition #4  ---
!
!       SG = 0.0
!       SL = 0.0
!       SN = 1.0
!       Nonaqueous liquid saturated
!
!       water mass - aqueous saturation, SL
!       gas mass - gas to oil ratio, POSM
!       oil mass - nonaqueous (system) pressure, Pa gauge - PN,PSO
!       salt mass - total salt mass - TMS(2,N)
!
        ELSEIF( MOD(NPHAZ(2,N),10).EQ.4 ) THEN
!
!---      Limit changes in aqueous saturation  ---
!
          DPX = 2.5D-2
          DPW = SIGN( MIN(ABS(DPX),ABS(DPW)),DPW )
          SL(2,N) = SL(2,N) + DPW
          IF( SL(2,N).LT.EPSL ) SL(2,N) = 0.D+0
!
!---      Limit changes in gas to oil ratio, and zero negative 
!         corrections for zero gas to oil ratios  ---
!
          DPX = 5.D-2/REAL(NITER)
          DPC(1) = SIGN( MIN(ABS(DPX),ABS(DPC(1))),DPC(1) )
          POSM(2,N) = POSM(2,N) + DPC(1)
!
!---      Limit changes in nonaqueous-liquid pressure (system pressure),
!         excessive primary variable change limit at 100 MPa  ---
!
          IF( ABS(DPC(2)).GT.1.D+8 ) IERR = 1
          DPX = MAX( 1.D+6,1.D-1*(PN(2,N)-PL(2,N)) )
          DPX = 2.5D-2*(PSO(2,N)+PATM)
          DPC(2) = SIGN( MIN(ABS(DPX),ABS(DPC(2))),DPC(2) )
!
!---      Bubble-point pressure as a function of gas to oil ratio
!         (m^3/m^3) and temperature (C)  ---
!
!          CALL BO_BP( PBPX,POSM(2,N),T(2,N) )
!
!---      Pressure below bubble-point pressure  ---
!
!          IF( PSO(2,N)+DPC(2).LT.PBPX-PATM ) DPC(2) = 6.D-1*DPC(2)
          PSO(2,N) = PSO(2,N) + DPC(2)
          PSO(2,N) = MIN( PSO(2,N),5.D+8 )
!
!---      Isobrine option   ---
!
          IF( ISLC(32).EQ.0 ) THEN
!
!---        Zero negative corrections for zero total salt mass  ---
!
            IF( TMS(2,N).LT.EPSL .AND. DPS.LT.EPSL ) THEN
              BLU(MPS) = 0.D+0
              DPS = 0.D+0
            ENDIF
            TMS(2,N) = TMS(2,N) + DPS
            IF( TMS(2,N).LT.EPSL ) TMS(2,N) = 0.D+0
          ENDIF
!
!---    Phase condition #5  ---
!
!       SG > 0.0
!       SL = 0.0
!       SN > 0.0
!       Nonaqueous liquid and gas saturated
!
!       water mass - aqueous saturation, SL
!       gas mass - gas saturation, SG
!       oil mass - gas (system) pressure, Pa gauge - PG,PSO
!       salt mass - total salt mass - TMS(2,N)
!
        ELSEIF( MOD(NPHAZ(2,N),10).EQ.5 ) THEN
!
!---      Limit changes in aqueous saturation  ---
!
          DPX = 2.5D-2
          DPW = SIGN( MIN(ABS(DPX),ABS(DPW)),DPW )
          SL(2,N) = SL(2,N) + DPW
          IF( SL(2,N).LT.EPSL ) SL(2,N) = 0.D+0
!
!---      Limit changes in gas saturation  ---
!
          DPX = 2.5D-2
          DPC(1) = SIGN( MIN(ABS(DPX),ABS(DPC(1))),DPC(1) )
!          IF( SG(2,N)+DPC(1).LT.0.D+0 ) DPC(1) = 6.D-1*DPC(1)
          SG(2,N) = SG(2,N) + DPC(1)
          IF( SG(2,N).LT.EPSL ) SG(2,N) = 0.D+0
!
!---      Limit changes in gas pressure, excessive primary variable 
!         change limit at 100 MPa  ---
!
          IF( ABS(DPC(1)).GT.1.D+8 ) IERR = 1
          DPX = MAX( 1.D+6,1.D-1*(PG(2,N)-MAX(PL(2,N),PN(2,N))) )
          DPX = 2.5D-2*(PSO(2,N)+PATM)
          DPC(2) = SIGN( MIN(ABS(DPX),ABS(DPC(2))),DPC(2) )
          PSO(2,N) = PSO(2,N) + DPC(2)
          PSO(2,N) = MIN( PSO(2,N),5.D+8 )
!
!---      Isobrine option   ---
!
          IF( ISLC(32).EQ.0 ) THEN
!
!---        Zero negative corrections for zero total salt mass  ---
!
            IF( TMS(2,N).LT.EPSL .AND. DPS.LT.EPSL ) THEN
              BLU(MPS) = 0.D+0
              DPS = 0.D+0
            ENDIF
            TMS(2,N) = TMS(2,N) + DPS
            IF( TMS(2,N).LT.EPSL ) TMS(2,N) = 0.D+0
          ENDIF
        ENDIF
!
!---    Check for excessive pressure or temperature   ---
!
        PX = PSO(2,N)+PATM
        TKX = T(2,N)+TABS
        IF( PX.GT.8.D+8 .OR. PX.LT.0.D+0 ) IERR = 1
        IF( TKX.GT.TCRW .OR. TKX.LT.TABS ) IERR = 1
        IF( IERR.EQ.1 ) NSD(1) = N
      ENDDO
!
!---  Reduce time step for excessive changes in primary variables   ---
!
      IF( IERR.EQ.1 ) THEN
        ICNV = 1
        N = NSD(1)
#ifdef dual_porosity
        WRITE(ISC,'(10X,A)') '---  Excessive Fracture Primary ' // 
     &    'Variable Change  ---'
        WRITE(IWR,'(10X,A)') '---  Excessive Fracture Primary ' // 
     &    'Variable Change  ---'
#else
        WRITE(ISC,'(10X,A)') '---  Excessive Primary Variable ' // 
     &    'Change  ---'
        WRITE(IWR,'(10X,A)') '---  Excessive Primary Variable ' // 
     &    'Change  ---'
#endif
        WRITE(ISC,'(4X,A,I6)') 'Node = ',N
        WRITE(IWR,'(4X,A,I6)') 'Node = ',N
        NPX = MOD(NPHAZ(2,N),10)
        WRITE(ISC,'(4X,2A)') 'Phase Condition = ',PH_CND(NPX)
        WRITE(IWR,'(4X,2A)') 'Phase Condition = ',PH_CND(NPX)
        WRITE(ISC,'(4X,A,1PE12.5)') 'Temperature = ',T(2,N)+PATM
        WRITE(IWR,'(4X,A,1PE12.5)') 'Temperature = ',T(2,N)+PATM
        WRITE(ISC,'(4X,A,1PE12.5)') 'System Pressure = ',PSO(2,N)+PATM
        WRITE(IWR,'(4X,A,1PE12.5)') 'System Pressure = ',PSO(2,N)+PATM
        WRITE(ISC,'(4X,A,1PE12.5)') 'Aqueous Pressure = ',PL(2,N)+PATM
        WRITE(IWR,'(4X,A,1PE12.5)') 'Aqueous Pressure = ',PL(2,N)+PATM
        WRITE(ISC,'(4X,A,1PE12.5)') 'Gas Pressure = ',PG(2,N)+PATM
        WRITE(IWR,'(4X,A,1PE12.5)') 'Gas Pressure = ',PG(2,N)+PATM
        WRITE(ISC,'(4X,A,1PE12.5)') 'Nonaqueous Liquid Pressure = ',
     &    PN(2,N)+PATM
        WRITE(IWR,'(4X,A,1PE12.5)') 'Nonaqueous Liquid Pressure = ',
     &    PN(2,N)+PATM
        WRITE(ISC,'(4X,A,1PE12.5)') 'Aqueous Saturation = ',SL(2,N)
        WRITE(IWR,'(4X,A,1PE12.5)') 'Aqueous Saturation = ',SL(2,N)
        WRITE(ISC,'(4X,A,1PE12.5)') 'Gas Saturation = ',SG(2,N)
        WRITE(IWR,'(4X,A,1PE12.5)') 'Gas Saturation = ',SG(2,N)
        WRITE(ISC,'(4X,A,1PE12.5)') 'Nonaqueous-Liquid Saturation = ',
     &    SN(2,N)
        WRITE(IWR,'(4X,A,1PE12.5)') 'Nonaqueous-Liquid Saturation = ',
     &    SN(2,N)
      ENDIF
!
!---  Reduce time step  ---
!
  300 CONTINUE
      IF( ICNV.EQ.1 ) THEN
        IF( NTSR.LT.4 .OR. (DTCF*DT).GT.DTMN ) THEN
          NTSR = NTSR + 1
          DTX = DT
          TM = TM - (1.D+0-DTCF)*DT
          DT = DTCF*DT
          DTO = DT
          DTI = 1.D+0/DT
          VAR = DT
          VARX = DTX
          IF( UNTM.NE.'null' ) THEN
            INDX = 1
            IUNS = 1
            CALL RDUNIT(UNTM,VAR,INDX)
            IUNS = 1
            CALL RDUNIT(UNTM,VARX,INDX)
            NCH = INDEX( UNTM,'  ')-1
          ENDIF
          WRITE(ISC,'(4X,A,1PE11.4,1X,2A,1PE11.4,1X,A)')
     &      'Time Step Reduced From ',VARX,UNTM(1:NCH),' to ',
     &      VAR,UNTM(1:NCH)
          WRITE(IWR,'(4X,A,1PE11.4,1X,2A,1PE11.4,1X,A)')
     &      'Time Step Reduced From ',VARX,UNTM(1:NCH),' to ',
     &      VAR,UNTM(1:NCH)
          DO N = 1,NFBN
            IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) CYCLE
            T(2,N) = T(1,N)
            PL(2,N) = PL(1,N)
            PG(2,N) = PG(1,N)
            PN(2,N) = PN(1,N)
            POSM(2,N) = POSM(1,N)
            PSO(2,N) = PSO(1,N)
            SG(2,N) = SG(1,N)
            SL(2,N) = SL(1,N)
            SN(2,N) = SN(1,N)
            YLS(2,N) = YLS(1,N)
            TMS(2,N) = TMS(1,N)
            NPHAZ(2,N) = NPHAZ(1,N)
            DO IGC = 1,NGC+2
              TMC(IGC,2,N) = TMC(IGC,1,N)
            ENDDO
          ENDDO
!
!---      Coupled-well pressure  ---
!
          DO NCW = 1,N_CW
            P_CW(2,NCW) = P_CW(1,NCW)
          ENDDO
          NITER = 1
!
!---      Fault flow and transport solution  ---
!
          IF( ISLC(74).EQ.1 .OR. ISLC(74).EQ.3 ) THEN
!
!---        Loop over faults  ---
!
            DO NFX = 1,NF_FRC
!
!---        Loop over fracture triangles  ---
!
            DO NTX = IP_FRC(1,NFX),IP_FRC(2,NFX)
!
!---          Skip inactive triangles  ---
!
              IF( IXP_FRC(NTX).EQ.0 ) CYCLE
              T_FRC(2,NTX) = T_FRC(1,NTX)
              PL_FRC(2,NTX) = PL_FRC(1,NTX)
              PG_FRC(2,NTX) = PG_FRC(1,NTX)
              PN_FRC(2,NTX) = PN_FRC(1,NTX)
              POSM_FRC(2,NTX) = POSM_FRC(1,NTX)
              PSO_FRC(2,NTX) = PSO_FRC(1,NTX)
              SG_FRC(2,NTX) = SG_FRC(1,NTX)
              SL_FRC(2,NTX) = SL_FRC(1,NTX)
              SN_FRC(2,NTX) = SN_FRC(1,NTX)
              YLS_FRC(2,NTX) = YLS_FRC(1,NTX)
              TMS_FRC(2,NTX) = TMS_FRC(1,NTX)
              NPHAZ_FRC(2,NTX) = NPHAZ_FRC(1,NTX)
              DO IGC = 1,NGC+2
                TMC_FRC(IGC,2,NTX) = TMC_FRC(IGC,1,NTX)
              ENDDO
            ENDDO
            ENDDO
          ENDIF
!
!---  Number of time step reductions failure: stop simulation  ---
!
        ELSE
          DO N = 1,NFBN
            IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) CYCLE
            T(2,N) = T(1,N)
            PL(2,N) = PL(1,N)
            PG(2,N) = PG(1,N)
            PN(2,N) = PN(1,N)
            POSM(2,N) = POSM(1,N)
            PSO(2,N) = PSO(1,N)
            SG(2,N) = SG(1,N)
            SL(2,N) = SL(1,N)
            SN(2,N) = SN(1,N)
            YLS(2,N) = YLS(1,N)
            TMS(2,N) = TMS(1,N)
            NPHAZ(2,N) = NPHAZ(1,N)
            DO IGC = 1,NGC+2
              TMC(IGC,2,N) = TMC(IGC,1,N)
            ENDDO
          ENDDO
!
!---      Coupled-well pressure  ---
!
          DO NCW = 1,N_CW
            P_CW(2,NCW) = P_CW(1,NCW)
          ENDDO
          NITER = 1
!
!---      Fault flow and transport solution  ---
!
          IF( ISLC(74).EQ.1 .OR. ISLC(74).EQ.3 ) THEN
!
!---        Loop over faults  ---
!
            DO NFX = 1,NF_FRC
!
!---        Loop over fracture triangles  ---
!
            DO NTX = IP_FRC(1,NFX),IP_FRC(2,NFX)
!
!---          Skip inactive triangles  ---
!
              IF( IXP_FRC(NTX).EQ.0 ) CYCLE
              T_FRC(2,NTX) = T_FRC(1,NTX)
              PL_FRC(2,NTX) = PL_FRC(1,NTX)
              PG_FRC(2,NTX) = PG_FRC(1,NTX)
              PN_FRC(2,NTX) = PN_FRC(1,NTX)
              POSM_FRC(2,NTX) = POSM_FRC(1,NTX)
              PSO_FRC(2,NTX) = PSO_FRC(1,NTX)
              SG_FRC(2,NTX) = SG_FRC(1,NTX)
              SL_FRC(2,NTX) = SL_FRC(1,NTX)
              SN_FRC(2,NTX) = SN_FRC(1,NTX)
              YLS_FRC(2,NTX) = YLS_FRC(1,NTX)
              TMS_FRC(2,NTX) = TMS_FRC(1,NTX)
              NPHAZ_FRC(2,NTX) = NPHAZ_FRC(1,NTX)
              DO IGC = 1,NGC+2
                TMC_FRC(IGC,2,NTX) = TMC_FRC(IGC,1,NTX)
              ENDDO
            ENDDO
            ENDDO
          ENDIF
          WRITE(ISC,'(10X,A)') '---  Time Step Reduction Limit Exceeded
     & ---'
          WRITE(IWR,'(10X,A)') '---  Time Step Reduction Limit Exceeded
     & ---'
          ICNV = 4
        ENDIF
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of UPDT_BO group
!
      RETURN
      END
!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE UPDT_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     EOR (Enhanced Oil Recovery and Carbon Utilization) Mode
!
!     Update the primary variables.
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark D White, PNNL, March 17, 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE OUTPU
      USE JACOB
      USE HYST
      USE GRID
      USE GLB_PAR
      USE GEOM_FRC
      USE FILES
      USE FDVS_FRC
      USE FDVS
      USE FDVP_FRC
      USE FDVP
      USE FDVGC_FRC
      USE FDVGC
      USE COUP_WELL
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      CHARACTER*128 PH_CND(5)
      REAL*8 DPC(LNGC)
      INTEGER MPC(LNGC)
!
!----------------------Data Statements---------------------------------!
!
      SAVE PH_CND
      DATA PH_CND /'Phase Condition #1, SL = 1.0, SG+SN = 0.0',
     &  'Phase Condition #2, SL < 1.0, ST > 0.0, SG = 0.0',
     &  'Phase Condition #3, SL < 1.0, ST > 0.0, SG > 0.0',
     &  'Phase Condition #4, SL = 0.0, ST = 1.0, SG = 0.0',
     &  'Phase Condition #5, SL = 0.0, ST = 1.0, SG > 0.0'/
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '//UPDT_EOR'
!
!---  Black-oil option  ---
!
      IF( ISLC(68).EQ.0 ) THEN
        CALL UPDT_BO
        ISUB_LOG = ISUB_LOG-1
        RETURN
      ENDIF
!
!---  Compositional option  ---
!
      IF( ICNV.EQ.1 ) GOTO 300
      IERR = 0
!
!---  Update primary variables
!
      DO N = 1,NFBN
        N_DB = N
        IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) CYCLE
        NMD = IXP(N)
        IZN = IZ(N)
!
!---    Energy equation  ---
!
        IF( ISLC(30).EQ.0 ) THEN
          MPT = IM(IEQT,NMD)
          DPT = BLU(MPT)
        ELSE
          DPT = 0.D+0
        ENDIF
!
!---    Water mass equation  ---
!
        MPW = IM(IEQW,NMD)
        DPW = BLU(MPW)
!
!---    CO2 mass equation  ---
!
        IF( ISLC(45).EQ.0 ) THEN
          MPC(1) = IM(IEQGC(1),NMD)
          DPC(1) = BLU(MPC(1))
        ELSE
          MPC(1) = 0
          DPC(1) = 0.D+0
        ENDIF
!
!---    CH4 mass equation  ---
!
        IF( ISLC(64).EQ.0 ) THEN
          MPC(2) = IM(IEQGC(2),NMD)
          DPC(2) = BLU(MPC(2))
        ELSE
          MPC(2) = 0
          DPC(2) = 0.D+0
        ENDIF
!
!---    Petroleum component mass equation  ---
!
        DO IGC = 3,NGC+2
          MPC(IGC) = IM(IEQGC(IGC),NMD)
          DPC(IGC) = BLU(MPC(IGC))
        ENDDO
!
!---    Salt mass equation  ---
!
        IF( ISLC(32).EQ.0 ) THEN
          MPS = IM(IEQS,NMD)
          DPS = BLU(MPS)
        ELSE
          DPS = 0.D+0
        ENDIF
!
!---    Limit changes in temperature to 0.5 C,
!       excessive primary variable change limit at 100 C  ---
!
!        IF( ABS(DPT).GT.1.D+2 ) IERR = 1
        DPT = SIGN( MIN( 5.D-1,ABS(DPT) ),DPT )
        T(2,N) = MAX( (T(2,N)+DPT),1.D-1 )
!
!---    Phase condition #1  ---
!
!       SL = 1.0, SG+SN = 0.0
!
!       energy - temperature, C - T
!       water mass - aqueous (system) pressure, Pa gauge - PL,PSO
!       CO2 mass - CO2 vapor pressure - PVA
!       CH4 mass - total CH4 mass - TMC
!       petroleum component mass - total petroleum component mass - TMC
!       salt mass - total salt brine mass fraction - YLS
!
        IF( MOD(NPHAZ(2,N),10).EQ.1 ) THEN
!
!---      Limit changes in total pressure,
!         excessive primary variable change limit at 100 MPa  ---
!
!          IF( ABS(DPW).GT.1.D+8 ) IERR = 1
!          DPX = MAX( 5.D-2*(PSO(2,N)+PATM),1.D+6 )
          DPX = 1.D-2*(PSO(2,N)+PATM)
          DPW = SIGN( MIN(ABS(DPX),ABS(DPW)),DPW )
          PSO(2,N) = PSO(2,N) + DPW
          PSO(2,N) = MIN( PSO(2,N),5.D+8 )
!
!---      Zero negative corrections for zero aqueous CO2  ---
!
          IF( ISLC(45).EQ.0 ) THEN
            IF( PVA(2,N).LT.EPSL .AND. BLU(MPC(1)).LT.EPSL ) THEN
              BLU(MPC(1)) = 0.D+0
              DPC(1) = 0.D+0
            ENDIF
            DPX = 1.D+6
            DPC(1) = SIGN( MIN(ABS(DPX),ABS(DPC(1))),DPC(1) )
            IF( (PVA(2,N)+DPC(1)).LT.0.D+0 ) DPC(1) = 6.D-1*DPC(1)
            PVA(2,N) = MAX( (PVA(2,N)+DPC(1)),0.D+0 )
          ENDIF
!
!---      Zero negative corrections for zero total petroleum
!         component mass  ---
!
          TMWX = PORD(2,N)*RHOL(2,N)*VOL(N)
          DPX = 1.D-4*TMWX
          DO IGC = 2,NGC+2
            IF( ISLC(64).NE.0 .AND. IGC.EQ.2 ) CYCLE
            IF( TMC(IGC,2,N).LT.EPSL .AND. BLU(MPC(IGC)).LT.EPSL ) THEN
              BLU(MPC(IGC)) = 0.D+0
              DPC(IGC) = 0.D+0
            ENDIF
            DPC(IGC) = SIGN( MIN(ABS(DPX),ABS(DPC(IGC))),DPC(IGC) )
            TMC(IGC,2,N) = MAX( (TMC(IGC,2,N)+DPC(IGC)),0.D+0 )
            IF( TMC(IGC,2,N).LT.1.D-12 ) TMC(IGC,2,N) = 0.D+0
          ENDDO
!
!---      Limit salt mass fraction changes to 0.25 of the
!         maximum value if salt mass fraction is less than
!         the maximum, isobrine option   ---
!
          IF( ISLC(32).EQ.0 ) THEN
            CALL SOL_LS( T(2,N),XLSMX )
            IF( YLS(2,N).LT.XLSMX ) THEN
              DPS = SIGN( MIN( ABS(2.5D-1*XLSMX),ABS(DPS) ),DPS )
            ENDIF
!
!---        Zero negative corrections for zero dissolved salt  ---
!
            IF( YLS(2,N)/EPSL.LT.EPSL .AND. DPS/EPSL.LT.EPSL ) THEN
              BLU(MPS) = 0.D+0
              DPS = 0.D+0
            ENDIF
            YLS(2,N) = YLS(2,N)+DPS
            IF( YLS(2,N).LT.1.D-12 ) YLS(2,N) = 0.D+0
          ENDIF
!
!---    Phase condition #2  ---
!
!       SL < 1.0, ST > 0.0, SG = 0.0
!
!       energy - temperature, C - T
!       water mass - aqueous saturation, SL
!       CO2 mass
!         if( ZMC(1,2,N) > max( ZMC(J,2,N) ) J /= 1
!           - nonaqueous (system) pressure, Pa gauge - PN,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(1,2,N)
!         endif
!       CH4 mass
!         if( ZMC(2,2,N) > max( ZMC(J,2,N) ) J /= 2
!           - nonaqueous (system) pressure, Pa gauge - PN,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(2,2,N)
!         endif
!       petroleum component mass
!         if( ZMC(I,2,N) > max( ZMC(J,2,N) ) J /= I
!           - nonaqueous (system) pressure, Pa gauge - PN,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(I,2,N)
!         endif
!       salt mass - total salt brine mass fraction - YLS
!
        ELSEIF( MOD(NPHAZ(2,N),10).EQ.2 ) THEN
!
!---      Limit changes in aqueous saturation  ---
!
          IF( NPHAZ(2,N).GT.100 ) THEN
!            DPX = MAX( 1.D+6,1.D-1*(PN(2,N)-PL(2,N)) )
!            DPX = 5.D-2*(PSO(2,N)+PATM)/SQRT(REAL(NITER))
            DPX = 1.D-2*(PSO(2,N)+PATM)
            DPW = SIGN( MIN(ABS(DPX),ABS(DPW)),DPW )
            PSO(2,N) = PSO(2,N) + DPW
            PSO(2,N) = MIN( PSO(2,N),5.D+8 )
          ELSE
!            DPX = 5.D-2/SQRT(REAL(NITER))
            DPX = 1.D-2
            DPW = SIGN( MIN(ABS(DPX),ABS(DPW)),DPW )
            SL(2,N) = SL(2,N) + DPW
            IF( SL(2,N).LT.EPSL ) SL(2,N) = 0.D+0
          ENDIF
!
!---      Loop over all petroleum components, including CO2 and CH4  ---
!
          SZMCX = 0.D+0
          DO IGC = 1,NGC+2
            IF( ISLC(45).NE.0 .AND. IGC.EQ.1 ) CYCLE
            IF( ISLC(64).NE.0 .AND. IGC.EQ.2 ) CYCLE
!
!---        Maximum petroleum component, limit changes in nonaqueous
!           liquid pressure, excessive primary variable change 
!           limit at 100 MPa  ---
!
            IF( IGC.EQ.IZMC(N) ) THEN
              IF( NPHAZ(2,N).GT.100 ) THEN
                DPX = 1.D-2
!                DPX = 5.D-2/SQRT(REAL(NITER))
                DPC(IGC) = SIGN( MIN(ABS(DPX),ABS(DPC(IGC))),DPC(IGC) )
                SL(2,N) = SL(2,N) + DPC(IGC)
                IF( SL(2,N).LT.EPSL ) SL(2,N) = 0.D+0
              ELSE
!                IF( ABS(DPC(IGC)).GT.1.D+8 ) IERR = 1
                DPX = MAX( 1.D+6,1.D-1*(PN(2,N)-PL(2,N)) )
                DPX = 5.D-2*(PSO(2,N)+PATM)/SQRT(REAL(NITER))
                DPC(IGC) = SIGN( MIN(ABS(DPX),ABS(DPC(IGC))),DPC(IGC) )
                PSO(2,N) = PSO(2,N) + DPC(IGC)
                PSO(2,N) = MIN( PSO(2,N),5.D+8 )
              ENDIF
!
!---        Limit changes in petroleum component mole fraction, 
!           and zero negative corrections for zero mole fractions---
!
            ELSE
              DPX = 5.D-2/SQRT(REAL(NITER))
              DPC(IGC) = SIGN( MIN(ABS(DPX),ABS(DPC(IGC))),DPC(IGC) )
              IF( ZMC(IGC,2,N).GT.0.D+0 .AND. 
     &          ZMC(IGC,2,N)+DPC(IGC).LT.0.D+0 ) 
     &          DPC(IGC) = 6.D-1*DPC(IGC)
              ZMC(IGC,2,N) = ZMC(IGC,2,N) + DPC(IGC)
              IF( ZMC(IGC,2,N).LT.EPSL ) ZMC(IGC,2,N) = 0.D+0
              SZMCX = SZMCX + ZMC(IGC,2,N)
            ENDIF
          ENDDO
          ZMC(IZMC(N),2,N) = MAX( 1.D+0-SZMCX,0.D+0 )
!
!---      Limit salt mass fraction changes to 0.25 of the
!         maximum value if salt mass fraction is less than
!         the maximum, isobrine option   ---
!
          IF( ISLC(32).EQ.0 ) THEN
            CALL SOL_LS( T(2,N),XLSMX )
            IF( YLS(2,N).LT.XLSMX ) THEN
              DPS = SIGN( MIN( ABS(2.5D-1*XLSMX),ABS(DPS) ),DPS )
            ENDIF
!
!---        Zero negative corrections for zero dissolved salt  ---
!
            IF( YLS(2,N)/EPSL.LT.EPSL .AND. DPS/EPSL.LT.EPSL ) THEN
              BLU(MPS) = 0.D+0
              DPS = 0.D+0
            ENDIF
            YLS(2,N) = YLS(2,N)+DPS
            IF( YLS(2,N).LT.1.D-12 ) YLS(2,N) = 0.D+0
          ENDIF
!
!---    Phase condition #3  ---
!
!       SL < 1.0, ST > 0.0, SG > 0.0
!
!       energy - temperature, C - T
!       water mass - aqueous saturation, SL
!       CO2 mass
!         if( ZMC(1,2,N) > max( ZMC(J,2,N) ) J /= 1
!           - gas (system) pressure, Pa gauge - PG,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(1,2,N)
!         endif
!       CH4 mass
!         if( ZMC(2,2,N) > max( ZMC(J,2,N) ) J /= 2
!           - gas (system) pressure, Pa gauge - PG,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(2,2,N)
!         endif
!       petroleum component mass
!         if( ZMC(I,2,N) > max( ZMC(J,2,N) ) J /= I
!           - gas (system) pressure, Pa gauge - PG,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(I,2,N)
!         endif
!       salt mass - total salt brine mass fraction - YLS
!
        ELSEIF( MOD(NPHAZ(2,N),10).EQ.3 ) THEN
!
!---      Limit changes in aqueous saturation  ---
!
          IF( NPHAZ(2,N).GT.100 ) THEN
!            DPX = 5.D-2*(PSO(2,N)+PATM)/SQRT(REAL(NITER))
            DPX = 1.D-2*(PSO(2,N)+PATM)
            DPW = SIGN( MIN(ABS(DPX),ABS(DPW)),DPW )
            PSO(2,N) = PSO(2,N) + DPW
            PSO(2,N) = MIN( PSO(2,N),5.D+8 )
          ELSE
            DPX = 5.D-2/SQRT(REAL(NITER))
            DPW = SIGN( MIN(ABS(DPX),ABS(DPW)),DPW )
            SL(2,N) = SL(2,N) + DPW
            IF( SL(2,N).LT.EPSL ) SL(2,N) = 0.D+0
          ENDIF
!
!---      Loop over all petroleum components, including CO2 and CH4  ---
!
          SZMCX = 0.D+0
          DO IGC = 1,NGC+2
            IF( ISLC(45).NE.0 .AND. IGC.EQ.1 ) CYCLE
            IF( ISLC(64).NE.0 .AND. IGC.EQ.2 ) CYCLE
!
!---        Maximum petroleum component, limit changes in
!           gas pressure, excessive primary variable change 
!           limit at 100 MPa  ---
!
            IF( IGC.EQ.IZMC(N) ) THEN
              IF( NPHAZ(2,N).GT.100 ) THEN
!                DPX = 5.D-2/SQRT(REAL(NITER))
                DPX = 1.D-2
                DPC(IGC) = SIGN( MIN(ABS(DPX),ABS(DPC(IGC))),DPC(IGC) )
                SL(2,N) = SL(2,N) + DPC(IGC)
                IF( SL(2,N).LT.EPSL ) SL(2,N) = 0.D+0
              ELSE
!                IF( ABS(DPC(IGC)).GT.1.D+8 ) IERR = 1
!                CPGTX = PG(2,N)-MAX(PL(2,N),PN(2,N))
!                DPX = MAX( 1.D+6,1.D-1*CPGTX )
!                DPX = 5.D-2*(PSO(2,N)+PATM)/REAL(NITER)
                DPX = 5.D-2*(PSO(2,N)+PATM)/SQRT(REAL(NITER))
                DPC(IGC) = SIGN( MIN(ABS(DPX),ABS(DPC(IGC))),DPC(IGC) )
                PSO(2,N) = PSO(2,N) + DPC(IGC)
                PSO(2,N) = MIN( PSO(2,N),5.D+8 )
              ENDIF
!
!---        Limit changes in petroleum component mole fraction, 
!           and zero negative corrections for zero mole fractions---
!
            ELSE
!              DPX = 5.D-2/SQRT(REAL(NITER))
              DPX = 1.D-2
              DPC(IGC) = SIGN( MIN(ABS(DPX),ABS(DPC(IGC))),DPC(IGC) )
              IF( ZMC(IGC,2,N).GT.0.D+0 .AND. 
     &          ZMC(IGC,2,N)+DPC(IGC).LT.0.D+0 ) 
     &          DPC(IGC) = 6.D-1*DPC(IGC)
              ZMC(IGC,2,N) = ZMC(IGC,2,N) + DPC(IGC)
              IF( ZMC(IGC,2,N).LT.EPSL ) ZMC(IGC,2,N) = 0.D+0
!
!---          Zero negative corrections for zero petroleum
!             component mole fraction  ---
!
              IF( ZMC(IGC,2,N).LT.EPSL.AND.BLU(MPC(IGC)).LT.EPSL ) THEN
                BLU(MPC(IGC)) = 0.D+0
                DPC(IGC) = 0.D+0
              ENDIF
              SZMCX = SZMCX + ZMC(IGC,2,N)
            ENDIF
          ENDDO
          ZMC(IZMC(N),2,N) = MAX( 1.D+0-SZMCX,0.D+0 )
!
!---      Limit salt mass fraction changes to 0.25 of the
!         maximum value if salt mass fraction is less than
!         the maximum, isobrine option   ---
!
          IF( ISLC(32).EQ.0 ) THEN
            CALL SOL_LS( T(2,N),XLSMX )
            IF( YLS(2,N).LT.XLSMX ) THEN
              DPS = SIGN( MIN( ABS(2.5D-1*XLSMX),ABS(DPS) ),DPS )
            ENDIF
!
!---        Zero negative corrections for zero dissolved salt  ---
!
            IF( YLS(2,N)/EPSL.LT.EPSL .AND. DPS/EPSL.LT.EPSL ) THEN
              BLU(MPS) = 0.D+0
              DPS = 0.D+0
            ENDIF
            YLS(2,N) = YLS(2,N)+DPS
            IF( YLS(2,N).LT.1.D-12 ) YLS(2,N) = 0.D+0
          ENDIF
!
!---    Phase condition #4  ---
!
!       SL = 0.0, ST = 1.0, SG = 0.0
!
!       energy - temperature, C - T
!       water mass - aqueous saturation, SL
!       CO2 mass
!         if( ZMC(1,2,N) > max( ZMC(J,2,N) ) J /= 1
!           - nonaqueous (system) pressure, Pa gauge - PN,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(1,2,N)
!         endif
!       CH4 mass
!         if( ZMC(2,2,N) > max( ZMC(J,2,N) ) J /= 2
!           - nonaqueous (system) pressure, Pa gauge - PN,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(2,2,N)
!         endif
!       petroleum component mass
!         if( ZMC(I,2,N) > max( ZMC(J,2,N) ) J /= I
!           - nonaqueous (system) pressure, Pa gauge - PN,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(I,2,N)
!         endif
!       salt mass - total salt mass - TMS(2,N)
!
        ELSEIF( MOD(NPHAZ(2,N),10).EQ.4 ) THEN
!
!---      Limit changes in aqueous saturation  ---
!
          IF( NPHAZ(2,N).GT.100 ) THEN
!            DPX = MAX( 1.D+6,1.D-1*(PN(2,N)-PL(2,N)) )
!            DPX = 5.D-2*(PSO(2,N)+PATM)/SQRT(REAL(NITER))
            DPX = 1.D-2*(PSO(2,N)+PATM)
            DPW = SIGN( MIN(ABS(DPX),ABS(DPW)),DPW )
            PSO(2,N) = PSO(2,N) + DPW
            PSO(2,N) = MIN( PSO(2,N),5.D+8 )
          ELSE
            DPX = 1.D-2
!            DPX = 5.D-2/SQRT(REAL(NITER))
            DPW = SIGN( MIN(ABS(DPX),ABS(DPW)),DPW )
            SL(2,N) = SL(2,N) + DPW
            IF( SL(2,N).LT.EPSL ) SL(2,N) = 0.D+0
          ENDIF
!
!---      Loop over all petroleum components, including CO2 and CH4  ---
!
          SZMCX = 0.D+0
          DO IGC = 1,NGC+2
            IF( ISLC(45).NE.0 .AND. IGC.EQ.1 ) CYCLE
            IF( ISLC(64).NE.0 .AND. IGC.EQ.2 ) CYCLE
!
!---        Maximum petroleum component, limit changes in nonaqueous
!           liquid pressure, excessive primary variable change 
!           limit at 100 MPa  ---
!
            IF( IGC.EQ.IZMC(N) ) THEN
              IF( NPHAZ(2,N).GT.100 ) THEN
                DPX = 1.D-2
!                DPX = 5.D-2/SQRT(REAL(NITER))
                DPC(IGC) = SIGN( MIN(ABS(DPX),ABS(DPC(IGC))),DPC(IGC) )
                SL(2,N) = SL(2,N) + DPC(IGC)
                IF( SL(2,N).LT.EPSL ) SL(2,N) = 0.D+0
              ELSE
!                IF( ABS(DPC(IGC)).GT.1.D+8 ) IERR = 1
                DPX = MAX( 1.D+6,1.D-1*(PN(2,N)-PL(2,N)) )
                DPX = 5.D-2*(PSO(2,N)+PATM)/SQRT(REAL(NITER))
                DPC(IGC) = SIGN( MIN(ABS(DPX),ABS(DPC(IGC))),DPC(IGC) )
                PSO(2,N) = PSO(2,N) + DPC(IGC)
                PSO(2,N) = MIN( PSO(2,N),5.D+8 )
              ENDIF
!
!---        Limit changes in petroleum component mole fraction, 
!           and zero negative corrections for zero mole fractions---
!
            ELSE
              DPX = 5.D-2/SQRT(REAL(NITER))
              DPC(IGC) = SIGN( MIN(ABS(DPX),ABS(DPC(IGC))),DPC(IGC) )
              IF( ZMC(IGC,2,N).GT.0.D+0 .AND. 
     &          ZMC(IGC,2,N)+DPC(IGC).LT.0.D+0 ) 
     &          DPC(IGC) = 6.D-1*DPC(IGC)
              ZMC(IGC,2,N) = ZMC(IGC,2,N) + DPC(IGC)
              IF( ZMC(IGC,2,N).LT.EPSL ) ZMC(IGC,2,N) = 0.D+0
              SZMCX = SZMCX + ZMC(IGC,2,N)
            ENDIF
          ENDDO
          ZMC(IZMC(N),2,N) = MAX( 1.D+0-SZMCX,0.D+0 )
!
!---      Isobrine option   ---
!
          IF( ISLC(32).EQ.0 ) THEN
!
!---        Zero negative corrections for zero total salt mass  ---
!
            IF( TMS(2,N).LT.EPSL .AND. DPS.LT.EPSL ) THEN
              BLU(MPS) = 0.D+0
              DPS = 0.D+0
            ENDIF
            TMS(2,N) = TMS(2,N) + DPS
            IF( TMS(2,N).LT.EPSL ) TMS(2,N) = 0.D+0
          ENDIF
!
!---    Phase condition #5  ---
!
!       SL = 0.0, ST >= 0.0, SG > 0.0
!
!       energy - temperature, C - T
!       water mass - aqueous saturation, SL
!       CO2 mass
!         if( ZMC(1,2,N) > max( ZMC(J,2,N) ) J /= 1
!           - gas (system) pressure, Pa gauge - PG,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(1,2,N)
!         endif
!       CH4 mass
!         if( ZMC(2,2,N) > max( ZMC(J,2,N) ) J /= 2
!           - gas (system) pressure, Pa gauge - PG,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(2,2,N)
!         endif
!       petroleum component mass
!         if( ZMC(I,2,N) > max( ZMC(J,2,N) ) J /= I
!           - gas (system) pressure, Pa gauge - PG,PSO
!         else
!           - nonaqueous mole fraction of CO2 - ZMC(I,2,N)
!         endif
!       salt mass - total salt mass - TMS(2,N)
!
        ELSEIF( MOD(NPHAZ(2,N),10).EQ.5 ) THEN
!
!---      Limit changes in aqueous saturation  ---
!
          IF( NPHAZ(2,N).GT.100 ) THEN
!            DPX = MAX( 1.D+6,1.D-1*(PG(2,N)-MAX(PL(2,N),PN(2,N))) )
!            DPX = 5.D-2*(PSO(2,N)+PATM)/SQRT(REAL(NITER))
            DPX = 1.D-2*(PSO(2,N)+PATM)
            DPW = SIGN( MIN(ABS(DPX),ABS(DPW)),DPW )
            PSO(2,N) = PSO(2,N) + DPW
            PSO(2,N) = MIN( PSO(2,N),5.D+8 )
          ELSE
            DPX = 5.D-2/SQRT(REAL(NITER))
            DPW = SIGN( MIN(ABS(DPX),ABS(DPW)),DPW )
            SL(2,N) = SL(2,N) + DPW
            IF( SL(2,N).LT.EPSL ) SL(2,N) = 0.D+0
          ENDIF
!
!---      Loop over all petroleum components, including CO2 and CH4  ---
!
          SZMCX = 0.D+0
          DO IGC = 1,NGC+2
            IF( ISLC(45).NE.0 .AND. IGC.EQ.1 ) CYCLE
            IF( ISLC(64).NE.0 .AND. IGC.EQ.2 ) CYCLE
!
!---        Maximum petroleum component, limit changes in
!           gas pressure, excessive primary variable change 
!           limit at 100 MPa  ---
!
            IF( IGC.EQ.IZMC(N) ) THEN
              IF( NPHAZ(2,N).GT.100 ) THEN
                DPX = 5.D-2/SQRT(REAL(NITER))
                DPC(IGC) = SIGN( MIN(ABS(DPX),ABS(DPC(IGC))),DPC(IGC) )
                SL(2,N) = SL(2,N) + DPC(IGC)
                IF( SL(2,N).LT.EPSL ) SL(2,N) = 0.D+0
              ELSE
!                IF( ABS(DPC(IGC)).GT.1.D+8 ) IERR = 1
                DPX = MAX( 1.D+6,1.D-1*(PG(2,N)-MAX(PL(2,N),PN(2,N))) )
                DPX = 5.D-2*(PSO(2,N)+PATM)/SQRT(REAL(NITER))
                DPC(IGC) = SIGN( MIN(ABS(DPX),ABS(DPC(IGC))),DPC(IGC) )
                PSO(2,N) = PSO(2,N) + DPC(IGC)
                PSO(2,N) = MIN( PSO(2,N),5.D+8 )
              ENDIF
!
!---        Limit changes in petroleum component mole fraction, 
!           and zero negative corrections for zero mole fractions---
!
            ELSE
              DPX = 5.D-2/SQRT(REAL(NITER))
              DPC(IGC) = SIGN( MIN(ABS(DPX),ABS(DPC(IGC))),DPC(IGC) )
              IF( ZMC(IGC,2,N).GT.0.D+0 .AND. 
     &          ZMC(IGC,2,N)+DPC(IGC).LT.0.D+0 ) 
     &          DPC(IGC) = 6.D-1*DPC(IGC)
              ZMC(IGC,2,N) = ZMC(IGC,2,N) + DPC(IGC)
              IF( ZMC(IGC,2,N).LT.EPSL ) ZMC(IGC,2,N) = 0.D+0
              SZMCX = SZMCX + ZMC(IGC,2,N)
            ENDIF
          ENDDO
          ZMC(IZMC(N),2,N) = MAX( 1.D+0-SZMCX,0.D+0 )
!
!---      Isobrine option   ---
!
          IF( ISLC(32).EQ.0 ) THEN
!
!---        Zero negative corrections for zero total salt mass  ---
!
            IF( TMS(2,N).LT.EPSL .AND. DPS.LT.EPSL ) THEN
              BLU(MPS) = 0.D+0
              DPS = 0.D+0
            ENDIF
            TMS(2,N) = TMS(2,N) + DPS
            IF( TMS(2,N).LT.EPSL ) TMS(2,N) = 0.D+0
          ENDIF
        ENDIF
!
!---    Check for excessive pressure or temperature   ---
!
        PX = PSO(2,N)+PATM
        TKX = T(2,N)+TABS
        IF( PX.GT.8.D+8 .OR. PX.LT.0.D+0 ) IERR = 1
        IF( TKX.GT.TCRW .OR. TKX.LT.TABS ) IERR = 1
        IF( IERR.EQ.1 ) NSD(1) = N
      ENDDO
!
!---  Reduce time step for excessive changes in primary variables   ---
!
      IF( IERR.EQ.1 ) THEN
        ICNV = 1
        N = NSD(1)
#ifdef dual_porosity
        WRITE(ISC,'(10X,A)') '---  Excessive Fracture Primary ' // 
     &    'Variable Change  ---'
        WRITE(IWR,'(10X,A)') '---  Excessive Fracture Primary ' // 
     &    'Variable Change  ---'
#else
        WRITE(ISC,'(10X,A)') '---  Excessive Primary Variable ' // 
     &    'Change  ---'
        WRITE(IWR,'(10X,A)') '---  Excessive Primary Variable ' // 
     &    'Change  ---'
#endif
        WRITE(ISC,'(4X,A,I6)') 'Node = ',N
        WRITE(IWR,'(4X,A,I6)') 'Node = ',N
        NPX = MOD(NPHAZ(2,N),10)
        WRITE(ISC,'(4X,2A)') 'Phase Condition = ',PH_CND(NPX)
        WRITE(IWR,'(4X,2A)') 'Phase Condition = ',PH_CND(NPX)
        WRITE(ISC,'(4X,A,1PE12.5)') 'Temperature = ',T(2,N)
        WRITE(IWR,'(4X,A,1PE12.5)') 'Temperature = ',T(2,N)
        WRITE(ISC,'(4X,A,1PE12.5)') 'System Pressure = ',PSO(2,N)+PATM
        WRITE(IWR,'(4X,A,1PE12.5)') 'System Pressure = ',PSO(2,N)+PATM
        WRITE(ISC,'(4X,A,1PE12.5)') 'Aqueous Pressure = ',PL(2,N)+PATM
        WRITE(IWR,'(4X,A,1PE12.5)') 'Aqueous Pressure = ',PL(2,N)+PATM
        WRITE(ISC,'(4X,A,1PE12.5)') 'Gas Pressure = ',PG(2,N)+PATM
        WRITE(IWR,'(4X,A,1PE12.5)') 'Gas Pressure = ',PG(2,N)+PATM
        WRITE(ISC,'(4X,A,1PE12.5)') 'Nonaqueous Liquid Pressure = ',
     &    PN(2,N)+PATM
        WRITE(IWR,'(4X,A,1PE12.5)') 'Nonaqueous Liquid Pressure = ',
     &    PN(2,N)+PATM
        WRITE(ISC,'(4X,A,1PE12.5)') 'Aqueous Saturation = ',SL(2,N)
        WRITE(IWR,'(4X,A,1PE12.5)') 'Aqueous Saturation = ',SL(2,N)
        WRITE(ISC,'(4X,A,1PE12.5)') 'Gas Saturation = ',SG(2,N)
        WRITE(IWR,'(4X,A,1PE12.5)') 'Gas Saturation = ',SG(2,N)
        WRITE(ISC,'(4X,A,1PE12.5)') 'Nonaqueous-Liquid Saturation = ',
     &    SN(2,N)
        WRITE(IWR,'(4X,A,1PE12.5)') 'Nonaqueous-Liquid Saturation = ',
     &    SN(2,N)
      ENDIF
!
!---  Reduce time step  ---
!
  300 CONTINUE
      IF( ICNV.EQ.1 ) THEN
        IF( NTSR.LT.4 .OR. (DTCF*DT).GT.DTMN ) THEN
          NTSR = NTSR + 1
          DTX = DT
          TM = TM - (1.D+0-DTCF)*DT
          DT = DTCF*DT
          DTO = DT
          DTI = 1.D+0/DT
          VAR = DT
          VARX = DTX
          IF( UNTM.NE.'null' ) THEN
            INDX = 1
            IUNS = 1
            CALL RDUNIT(UNTM,VAR,INDX)
            IUNS = 1
            CALL RDUNIT(UNTM,VARX,INDX)
            NCH = INDEX( UNTM,'  ')-1
          ENDIF
          WRITE(ISC,'(4X,A,1PE11.4,1X,2A,1PE11.4,1X,A)')
     &      'Time Step Reduced From ',VARX,UNTM(1:NCH),' to ',
     &      VAR,UNTM(1:NCH)
          WRITE(IWR,'(4X,A,1PE11.4,1X,2A,1PE11.4,1X,A)')
     &      'Time Step Reduced From ',VARX,UNTM(1:NCH),' to ',
     &      VAR,UNTM(1:NCH)
          DO N = 1,NFBN
            IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) CYCLE
            DO M = 1,6
              BETA(M,N) = 0.D+0
            ENDDO
            IBETA(N) = 0
            T(2,N) = T(1,N)
            PL(2,N) = PL(1,N)
            PG(2,N) = PG(1,N)
            PN(2,N) = PN(1,N)
            PSO(2,N) = PSO(1,N)
            PVA(2,N) = PVA(1,N)
            SG(2,N) = SG(1,N)
            SL(2,N) = SL(1,N)
            SN(2,N) = SN(1,N)
            YLS(2,N) = YLS(1,N)
            TMS(2,N) = TMS(1,N)
            NPHAZ(2,N) = NPHAZ(1,N)
            DO IGC = 1,NGC+2
              TMC(IGC,2,N) = TMC(IGC,1,N)
              ZMC(IGC,2,N) = ZMC(IGC,1,N)
            ENDDO
          ENDDO
!
!---      Coupled-well pressure  ---
!
          DO NCW = 1,N_CW
            P_CW(2,NCW) = P_CW(1,NCW)
          ENDDO
          NITER = 1
!
!---      Fault flow and transport solution  ---
!
          IF( ISLC(74).EQ.1 .OR. ISLC(74).EQ.3 ) THEN
!
!---        Loop over faults  ---
!
            DO NFX = 1,NF_FRC
!
!---        Loop over fracture triangles  ---
!
            DO NTX = IP_FRC(1,NFX),IP_FRC(2,NFX)
!
!---          Skip inactive triangles  ---
!
              IF( IXP_FRC(NTX).EQ.0 ) CYCLE
              DO M = 1,6
                BETA_FRC(M,NTX) = 0.D+0
              ENDDO
              IBETA_FRC(NTX) = 0
              T_FRC(2,NTX) = T_FRC(1,NTX)
              PL_FRC(2,NTX) = PL_FRC(1,NTX)
              PG_FRC(2,NTX) = PG_FRC(1,NTX)
              PN_FRC(2,NTX) = PN_FRC(1,NTX)
              PSO_FRC(2,NTX) = PSO_FRC(1,NTX)
              PVA_FRC(2,NTX) = PVA_FRC(1,NTX)
              SG_FRC(2,NTX) = SG_FRC(1,NTX)
              SL_FRC(2,NTX) = SL_FRC(1,NTX)
              SN_FRC(2,NTX) = SN_FRC(1,NTX)
              YLS_FRC(2,NTX) = YLS_FRC(1,NTX)
              TMS_FRC(2,NTX) = TMS_FRC(1,NTX)
              NPHAZ_FRC(2,NTX) = NPHAZ_FRC(1,NTX)
              DO IGC = 1,NGC+2
                TMC_FRC(IGC,2,NTX) = TMC_FRC(IGC,1,NTX)
                ZMC_FRC(IGC,2,NTX) = ZMC_FRC(IGC,1,NTX)
              ENDDO
            ENDDO
            ENDDO
          ENDIF
!
!---  Number of time step reductions failure: stop simulation  ---
!
        ELSE
          DO N = 1,NFBN
            IF( IXP(N).EQ.0 .OR. IBR(4,N).NE.N ) CYCLE
            DO M = 1,6
              BETA(M,N) = 0.D+0
            ENDDO
            IBETA(N) = 0
            T(2,N) = T(1,N)
            PL(2,N) = PL(1,N)
            PG(2,N) = PG(1,N)
            PN(2,N) = PN(1,N)
            PSO(2,N) = PSO(1,N)
            PVA(2,N) = PVA(1,N)
            SG(2,N) = SG(1,N)
            SL(2,N) = SL(1,N)
            SN(2,N) = SN(1,N)
            YLS(2,N) = YLS(1,N)
            TMS(2,N) = TMS(1,N)
            NPHAZ(2,N) = NPHAZ(1,N)
            DO IGC = 1,NGC+2
              TMC(IGC,2,N) = TMC(IGC,1,N)
              ZMC(IGC,2,N) = ZMC(IGC,1,N)
            ENDDO
          ENDDO
!
!---      Coupled-well pressure  ---
!
          DO NCW = 1,N_CW
            P_CW(2,NCW) = P_CW(1,NCW)
          ENDDO
          NITER = 1
!
!---      Fault flow and transport solution  ---
!
          IF( ISLC(74).EQ.1 .OR. ISLC(74).EQ.3 ) THEN
!
!---        Loop over faults  ---
!
            DO NFX = 1,NF_FRC
!
!---        Loop over fracture triangles  ---
!
            DO NTX = IP_FRC(1,NFX),IP_FRC(2,NFX)
!
!---          Skip inactive triangles  ---
!
              IF( IXP_FRC(NTX).EQ.0 ) CYCLE
              DO M = 1,6
                BETA_FRC(M,NTX) = 0.D+0
              ENDDO
              IBETA_FRC(NTX) = 0
              T_FRC(2,NTX) = T_FRC(1,NTX)
              PL_FRC(2,NTX) = PL_FRC(1,NTX)
              PG_FRC(2,NTX) = PG_FRC(1,NTX)
              PN_FRC(2,NTX) = PN_FRC(1,NTX)
              PSO_FRC(2,NTX) = PSO_FRC(1,NTX)
              PVA_FRC(2,NTX) = PVA_FRC(1,NTX)
              SG_FRC(2,NTX) = SG_FRC(1,NTX)
              SL_FRC(2,NTX) = SL_FRC(1,NTX)
              SN_FRC(2,NTX) = SN_FRC(1,NTX)
              YLS_FRC(2,NTX) = YLS_FRC(1,NTX)
              TMS_FRC(2,NTX) = TMS_FRC(1,NTX)
              NPHAZ_FRC(2,NTX) = NPHAZ_FRC(1,NTX)
              DO IGC = 1,NGC+2
                TMC_FRC(IGC,2,NTX) = TMC_FRC(IGC,1,NTX)
                ZMC_FRC(IGC,2,NTX) = ZMC_FRC(IGC,1,NTX)
              ENDDO
            ENDDO
            ENDDO
          ENDIF
          WRITE(ISC,'(10X,A)') '---  Time Step Reduction Limit Exceeded
     & ---'
          WRITE(IWR,'(10X,A)') '---  Time Step Reduction Limit Exceeded
     & ---'
          ICNV = 4
        ENDIF
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of UPDT_EOR group
!
      RETURN
      END
