!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DFFGC( IGC )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Diffusive petroleum component gas fluxes on interior surfaces.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 29 November 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE HYST
      USE GRID
      USE FLUX
      USE FDVP
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      IF( ISLC(2).LT.1 ) RETURN
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/DFFGC'
!
!---  Gas petroleum component diffusive flux, excluding boundaries
!
      DO N = 1,NFCGC(ID+1)
!
!---    Skip for inactive nodes  ---
!
        IF( IXP(N).EQ.0 ) CYCLE
!
!---    West surface  ---
!
        NW = ICM(3,N)
        IF( NW.NE.0 ) THEN
          DXMGC = XMGC(IGC,2,NW) - XMGC(IGC,2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORG(MP,N)*PORD(MP,N)*SG(MP,N)*
     &        DFGC(IGC,MP,N)*RHOMG(MP,N)
            DFW = TORG(MN,NW)*PORD(MN,NW)*SG(MN,NW)*
     &        DFGC(IGC,MN,NW)*RHOMG(MN,NW)
            INDX = 12
            DFM = DIFMN( DFW,DFP,DXGF(NW),DXGF(N),DXMGC,INDX )
            UDGC(IGC,M,1,N) = DFM*(XMGC(IGC,MN,NW)-XMGC(IGC,MP,N))/
     &        DXGP(1,N)
            FGCP = XGC(IGC,MP,N)*RHOG(MP,N)
            FGCW = XGC(IGC,MN,NW)*RHOG(MN,NW)
            INDX = 3
            FGC = DIFMN( FGCW,FGCP,DXGF(NW),DXGF(N),UG(1,1,N),INDX )
            UGC(IGC,M,1,N) = UG(M,1,N)*FGC + GCPP(1,IGC)*UDGC(IGC,M,1,N)
          ENDDO
          DO M = 1,ISVF
            UDGC(IGC,M,2,NW) = UDGC(IGC,M,1,N)
            UGC(IGC,M,2,NW) = UGC(IGC,M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            UDGC(IGC,M,1,N) = 0.D+0
            UGC(IGC,M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    South surface  ---
!
        NS = ICM(2,N)
        IF( NS.NE.0 ) THEN
          DXMGC = XMGC(IGC,2,NS) - XMGC(IGC,2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORG(MP,N)*PORD(MP,N)*SG(MP,N)*
     &        DFGC(IGC,MP,N)*RHOMG(MP,N)
            DFS = TORG(MN,NS)*PORD(MN,NS)*SG(MN,NS)*
     &        DFGC(IGC,MN,NS)*RHOMG(MN,NS)
            INDX = 12
            DFM = DIFMN( DFS,DFP,DYGF(NS),DYGF(N),DXMGC,INDX )
            VDGC(IGC,M,1,N) = DFM*(XMGC(IGC,MN,NS)-XMGC(IGC,MP,N))/
     &        (DYGP(1,N)*RP(N))
            FGCP = XGC(IGC,MP,N)*RHOG(MP,N)
            FGCS = XGC(IGC,MN,NS)*RHOG(MN,NS)
            INDX = 3
            FGC = DIFMN( FGCS,FGCP,DYGF(NS),DYGF(N),VG(1,1,N),INDX )
            VGC(IGC,M,1,N) = VG(M,1,N)*FGC + GCPP(1,IGC)*VDGC(IGC,M,1,N)
          ENDDO
          DO M = 1,ISVF
            VDGC(IGC,M,2,NS) = VDGC(IGC,M,1,N)
            VGC(IGC,M,2,NS) = VGC(IGC,M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            VDGC(IGC,M,1,N) = 0.D+0
            VGC(IGC,M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    Bottom surface  ---
!
        NB = ICM(1,N)
        IF( NB.NE.0 ) THEN
          DXMGC = XMGC(IGC,2,NB) - XMGC(IGC,2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORG(MP,N)*PORD(MP,N)*SG(MP,N)*
     &        DFGC(IGC,MP,N)*RHOMG(MP,N)
            DFB = TORG(MN,NB)*PORD(MN,NB)*SG(MN,NB)*
     &        DFGC(IGC,MN,NB)*RHOMG(MN,NB)
            INDX = 12
            DFM = DIFMN( DFB,DFP,DZGF(NB),DZGF(N),DXMGC,INDX )
            WDGC(IGC,M,1,N) = DFM*(XMGC(IGC,MN,NB)-XMGC(IGC,MP,N))/
     &        DZGP(1,N)
            FGCP = XGC(IGC,MP,N)*RHOG(MP,N)
            FGCB = XGC(IGC,MN,NB)*RHOG(MN,NB)
            INDX = 3
            FGW = DIFMN( FGCB,FGCP,DZGF(NB),DZGF(N),WG(1,1,N),INDX )
            WGC(IGC,M,1,N) = WG(M,1,N)*FGC + GCPP(1,IGC)*WDGC(IGC,M,1,N)
          ENDDO
          DO M = 1,ISVF
            WDGC(IGC,M,2,NB) = WDGC(IGC,M,1,N)
            WGC(IGC,M,2,NB) = WGC(IGC,M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            WDGC(IGC,M,1,N) = 0.D+0
            WGC(IGC,M,1,N) = 0.D+0
          ENDDO
        ENDIF
      ENDDO
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of DFFGC group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DFFGW
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Diffusive water gas fluxes on interior surfaces.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 29 November 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE HYST
      USE GRID
      USE FLUX
      USE FDVP
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      IF( ISLC(2).LT.1 ) RETURN
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/DFFGW'
!
!---  Gas water diffusive flux, excluding boundaries
!
      DO N = 1,NFCGC(ID+1)
!
!---    Skip for inactive nodes  ---
!
        IF( IXP(N).EQ.0 ) CYCLE
!
!---    West surface  ---
!
        NW = ICM(3,N)
        IF( NW.NE.0 ) THEN
          DXMGW = XMGW(2,NW) - XMGW(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORG(MP,N)*PORD(MP,N)*SG(MP,N)*
     &        DFGW(MP,N)*RHOMG(MP,N)
            DFW = TORG(MN,NW)*PORD(MN,NW)*SG(MN,NW)*
     &        DFGW(MN,NW)*RHOMG(MN,NW)
            INDX = 12
            DFM = DIFMN( DFW,DFP,DXGF(NW),DXGF(N),DXMGW,INDX )
            UDGW(M,1,N) = DFM*(XMGW(MN,NW)-XMGW(MP,N))/DXGP(1,N)
            FGWP = XGW(MP,N)*RHOG(MP,N)
            FGWW = XGW(MN,NW)*RHOG(MN,NW)
            INDX = 3
            FGW = DIFMN( FGWW,FGWP,DXGF(NW),DXGF(N),UG(1,1,N),INDX )
            UGW(M,1,N) = UG(M,1,N)*FGW + WTMW*UDGW(M,1,N)
          ENDDO
          DO M = 1,ISVF
            UDGW(M,2,NW) = UDGW(M,1,N)
            UGW(M,2,NW) = UGW(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            UDGW(M,1,N) = 0.D+0
            UGW(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    South surface  ---
!
        NS = ICM(2,N)
        IF( NS.NE.0 ) THEN
          DXMGW = XMGW(2,NS) - XMGW(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORG(MP,N)*PORD(MP,N)*SG(MP,N)*
     &        DFGW(MP,N)*RHOMG(MP,N)
            DFS = TORG(MN,NS)*PORD(MN,NS)*SG(MN,NS)*
     &        DFGW(MN,NS)*RHOMG(MN,NS)
            INDX = 12
            DFM = DIFMN( DFS,DFP,DYGF(NS),DYGF(N),DXMGW,INDX )
            VDGW(M,1,N) = DFM*(XMGW(MN,NS)-XMGW(MP,N))/
     &        (DYGP(1,N)*RP(N))
            FGWP = XGW(MP,N)*RHOG(MP,N)
            FGWS = XGW(MN,NS)*RHOG(MN,NS)
            INDX = 3
            FGW = DIFMN( FGWS,FGWP,DYGF(NS),DYGF(N),VG(1,1,N),INDX )
            VGW(M,1,N) = VG(M,1,N)*FGW + WTMW*VDGW(M,1,N)
          ENDDO
          DO M = 1,ISVF
            VDGW(M,2,NS) = VDGW(M,1,N)
            VGW(M,2,NS) = VGW(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            VDGW(M,1,N) = 0.D+0
            VGW(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    Bottom surface  ---
!
        NB = ICM(1,N)
        IF( NB.NE.0 ) THEN
          DXMGW = XMGW(2,NB) - XMGW(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORG(MP,N)*PORD(MP,N)*SG(MP,N)*
     &        DFGW(MP,N)*RHOMG(MP,N)
            DFB = TORG(MN,NB)*PORD(MN,NB)*SG(MN,NB)*
     &        DFGW(MN,NB)*RHOMG(MN,NB)
            INDX = 12
            DFM = DIFMN( DFB,DFP,DZGF(NB),DZGF(N),DXMGW,INDX )
            WDGW(M,1,N) = DFM*(XMGW(MN,NB)-XMGW(MP,N))/DZGP(1,N)
            FGWP = XGW(MP,N)*RHOG(MP,N)
            FGWB = XGW(MN,NB)*RHOG(MN,NB)
            INDX = 3
            FGW = DIFMN( FGWB,FGWP,DZGF(NB),DZGF(N),WG(1,1,N),INDX )
            WGW(M,1,N) = WG(M,1,N)*FGW + WTMW*WDGW(M,1,N)
          ENDDO
          DO M = 1,ISVF
            WDGW(M,2,NB) = WDGW(M,1,N)
            WGW(M,2,NB) = WGW(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            WDGW(M,1,N) = 0.D+0
            WGW(M,1,N) = 0.D+0
          ENDDO
        ENDIF
      ENDDO
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of DFFGW group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DFFLA
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Diffusive CO2 aqueous fluxes on interior surfaces.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 29 November 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE GRID
      USE FLUX
      USE FDVP
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      IF( ISLC(2).LT.1 ) RETURN
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/DFFLA'
!
!---  Aqueous diffusive flux, excluding boundaries
!
      DO N = 1,NFCGC(ID+1)
!
!---    Skip for inactive nodes  ---
!
        IF( IXP(N).EQ.0 ) CYCLE
!
!---    West surface  ---
!
        NW = ICM(3,N)
        IF( NW.NE.0 ) THEN
          DXMLA = XMLA(2,NW) - XMLA(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORL(MP,N)*PORD(MP,N)*SL(MP,N)*
     &        DFLA(MP,N)*RHOML(MP,N)
            DFW = TORL(MN,NW)*PORD(MN,NW)*SL(MN,NW)*
     &        DFLA(MN,NW)*RHOML(MN,NW)
            INDX = 14
            DFM = DIFMN( DFW,DFP,DXGF(NW),DXGF(N),DXMLA,INDX)
            UDLA(M,1,N) = DFM*(XMLA(MN,NW)-XMLA(MP,N))/DXGP(1,N)
            FLAP = XLA(MP,N)*RHOL(MP,N)
            FLAW = XLA(MN,NW)*RHOL(MN,NW)
            INDX = 2
            FLA = DIFMN( FLAW,FLAP,DXGF(NW),DXGF(N),UL(1,1,N),INDX )
            ULA(M,1,N) = UL(M,1,N)*FLA + WTMA*UDLA(M,1,N)
          ENDDO
          DO M = 1,ISVF
            UDLA(M,2,NW) = UDLA(M,1,N)
            ULA(M,2,NW) = ULA(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            UDLA(M,1,N) = 0.D+0
            ULA(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    South surface  ---
!
        NS = ICM(2,N)
        IF( NS.NE.0 ) THEN
          DXMLA = XMLA(2,NS) - XMLA(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORL(MP,N)*PORD(MP,N)*SL(MP,N)*
     &        DFLA(MP,N)*RHOML(MP,N)
            DFS = TORL(MN,NS)*PORD(MN,NS)*SL(MN,NS)*
     &        DFLA(MN,NS)*RHOML(MN,NS)
            INDX = 14
            DFM = DIFMN( DFS,DFP,DYGF(NS),DYGF(N),DXMLA,INDX )
            VDLA(M,1,N) = DFM*(XMLA(MN,NS)-XMLA(MP,N))/(DYGP(1,N)*RP(N))
            FLAP = XLA(MP,N)*RHOL(MP,N)
            FLAS = XLA(MN,NS)*RHOL(MN,NS)
            INDX = 2
            FLA = DIFMN( FLAS,FLAP,DYGF(NS),DYGF(N),VL(1,1,N),INDX )
            VLA(M,1,N) = VL(M,1,N)*FLA + WTMA*VDLA(M,1,N)
          ENDDO
          DO M = 1,ISVF
            VDLA(M,2,NS) = VDLA(M,1,N)
            VLA(M,2,NS) = VLA(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            VDLA(M,1,N) = 0.D+0
            VLA(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    Bottom surface  ---
!
        NB = ICM(1,N)
        IF( NB.NE.0 ) THEN
          DXMLA = XMLA(2,NB) - XMLA(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORL(MP,N)*PORD(MP,N)*SL(MP,N)*
     &        DFLA(MP,N)*RHOML(MP,N)
            DFB = TORL(MN,NB)*PORD(MN,NB)*SL(MN,NB)*
     &        DFLA(MN,NB)*RHOML(MN,NB)
            INDX = 14
            DFM = DIFMN( DFB,DFP,DZGF(NB),DZGF(N),DXMLA,INDX )
            WDLA(M,1,N) = DFM*(XMLA(MN,NB)-XMLA(MP,N))/DZGP(1,N)
            FLAP = XLA(MP,N)*RHOL(MP,N)
            FLAB = XLA(MN,NB)*RHOL(MN,NB)
            INDX = 2
            FLA = DIFMN( FLAB,FLAP,DZGF(NB),DZGF(N),WL(1,1,N),INDX )
            WLA(M,1,N) = WL(M,1,N)*FLA + WTMA*WDLA(M,1,N)
          ENDDO
          DO M = 1,ISVF
            WDLA(M,2,NB) = WDLA(M,1,N)
            WLA(M,2,NB) = WLA(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            WDLA(M,1,N) = 0.D+0
            WLA(M,1,N) = 0.D+0
          ENDDO
        ENDIF
      ENDDO
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of DFFLA group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DFFLS
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Diffusive salt/inhibitor aqueous fluxes on interior surfaces.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 2 November 2021.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE GRID
      USE FLUX
      USE FDVP
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      IF( ISLC(2).LT.1 ) RETURN
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/DFFLS'
!
!---  Aqueous salt diffusive flux, excluding boundaries
!
      DO N = 1,NFCGC(ID+1)
!
!---    Skip for inactive nodes  ---
!
        IF( IXP(N).EQ.0 ) CYCLE
!
!---    West surface  ---
!
        NW = ICM(3,N)
        IF( NW.NE.0 ) THEN
          DXMLS = XMLS(2,NW) - XMLS(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
!
!---        Diffusion coefficients  ---
!
            IF( IEDLS.EQ.1 ) THEN
              TCOR = (T(MP,N)+TABS)/TSPRF
              SMDLP = DFLS(MP,N)*TCOR*(VISRL/VISL(MP,N))
              DFCLP = TORL(MP,N)*SL(MP,N)*PORD(MP,N)*SMDLP
              TCOR = (T(MN,NW)+TABS)/TSPRF
              SMDLP = DFLS(MN,NW)*TCOR*(VISRL/VISL(MN,NW))
              DFCLW = TORL(MN,NW)*SL(MN,NW)*PORD(MN,NW)*SMDLP
            ELSEIF( IEDLS.EQ.3 ) THEN
              DFCLP = TORL(MP,N)*SL(MP,N)*PORD(MP,N)*DFLS(MP,N)
              DFCLW = TORL(MN,NW)*SL(MN,NW)*PORD(MN,NW)*DFLS(MN,NW)
            ENDIF
            INDX = 18
            DFCLW = DIFMN(DFCLW,DFCLP,DXGF(NW),DXGF(N),UL(1,1,N),INDX)
!
!---        Salt aqueous flux by advection and diffusion  ---
!
            DDLW = DFCLW/DXGP(1,N)
            AL = MAX( UL(M,1,N),ZERO ) +
     &        DDLW*MAX((ONE-(TENTH*ABS(UL(M,1,N))/
     &        (DDLW+SMALL)))**5,ZERO)
            ALP = MAX( -UL(M,1,N),ZERO ) +
     &        DDLW*MAX((ONE-(TENTH*ABS(UL(M,1,N))/
     &        (DDLW+SMALL)))**5,ZERO)
            US(M,1,N) = XLS(MN,NW)*RHOL(MN,NW)*AL -
     &        XLS(MP,N)*RHOL(MP,N)*ALP
            UDS(M,1,N) = DDLW*(XLS(MN,NW)*RHOL(MN,NW) -
     &        XLS(MP,N)*RHOL(MP,N))
          ENDDO
          DO M = 1,ISVF
            UDS(M,2,NW) = UDS(M,1,N)
            US(M,2,NW) = US(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            UDS(M,1,N) = 0.D+0
            US(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    South surface  ---
!
        NS = ICM(2,N)
        IF( NS.NE.0 ) THEN
          DXMLS = XMLS(2,NS) - XMLS(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
!
!---        Diffusion coefficients  ---
!
            IF( IEDLS.EQ.1 ) THEN
              TCOR = (T(MP,N)+TABS)/TSPRF
              SMDLP = DFLS(MP,N)*TCOR*(VISRL/VISL(MP,N))
              DFCLP = TORL(MP,N)*SL(MP,N)*PORD(MP,N)*SMDLP
              TCOR = (T(MN,NS)+TABS)/TSPRF
              SMDLP = DFLS(MN,NS)*TCOR*(VISRL/VISL(MN,NS))
              DFCLS = TORL(MN,NS)*SL(MN,NS)*PORD(MN,NS)*SMDLP
            ELSEIF( IEDLS.EQ.3 ) THEN
              DFCLP = TORL(MP,N)*SL(MP,N)*PORD(MP,N)*DFLS(MP,N)
              DFCLS = TORL(MN,NS)*SL(MN,NS)*PORD(MN,NS)*DFLS(MN,NS)
            ENDIF
            INDX = 18
            DFCLS = DIFMN(DFCLS,DFCLP,DYGF(NS),DYGF(N),VL(1,1,N),INDX)
!
!---        Salt aqueous flux by advection and diffusion  ---
!
            DDLS = DFCLS/(DYGP(1,N)*RP(N))
            AL = MAX( VL(M,1,N),ZERO ) +
     &        DDLS*MAX((ONE-(TENTH*ABS(VL(M,1,N))/
     &        (DDLS+SMALL)))**5,ZERO)
            ALP = MAX( -VL(M,1,N),ZERO ) +
     &        DDLS*MAX((ONE-(TENTH*ABS(VL(M,1,N))/
     &        (DDLS+SMALL)))**5,ZERO)
            VS(M,1,N) = (XLS(MN,NS)*RHOL(MN,NS)*AL -
     &        XLS(MP,N)*RHOL(MP,N)*ALP)
            VDS(M,1,N) = DDLS*(XLS(MN,NS)*RHOL(MN,NS) -
     &        XLS(MP,N)*RHOL(MP,N))
          ENDDO
          DO M = 1,ISVF
            VDS(M,2,NS) = VDS(M,1,N)
            VS(M,2,NS) = VS(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            VDS(M,1,N) = 0.D+0
            VS(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    Bottom surface  ---
!
        NB = ICM(1,N)
        IF( NB.NE.0 ) THEN
          DXMLS = XMLS(2,NB) - XMLS(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
!
!---        Diffusion coefficients  ---
!
            IF( IEDLS.EQ.1 ) THEN
              TCOR = (T(MP,N)+TABS)/TSPRF
              SMDLP = DFLS(MP,N)*TCOR*(VISRL/VISL(MP,N))
              DFCLP = TORL(MP,N)*SL(MP,N)*PORD(MP,N)*SMDLP
              TCOR = (T(MN,NB)+TABS)/TSPRF
              SMDLP = DFLS(MN,NB)*TCOR*(VISRL/VISL(MN,NB))
              DFCLB = TORL(MN,NB)*SL(MN,NB)*PORD(MN,NB)*SMDLP
            ELSEIF( IEDLS.EQ.3 ) THEN
              DFCLP = TORL(MP,N)*SL(MP,N)*PORD(MP,N)*DFLS(MP,N)
              DFCLB = TORL(MN,NB)*SL(MN,NB)*PORD(MN,NB)*DFLS(MN,NB)
            ENDIF
            INDX = 18
            DFCLB = DIFMN(DFCLB,DFCLP,DZGF(NB),DZGF(N),WL(1,1,N),INDX)
!
!---        Salt aqueous flux by advection and diffusion  ---
!
            DDLB = DFCLB/DZGP(1,N)
            AL = MAX( WL(M,1,N),ZERO ) +
     &        DDLB*MAX((ONE-(TENTH*ABS(WL(M,1,N))/
     &        (DDLB+SMALL)))**5,ZERO)
            ALP = MAX( -WL(M,1,N),ZERO ) +
     &        DDLB*MAX((ONE-(TENTH*ABS(WL(M,1,N))/
     &        (DDLB+SMALL)))**5,ZERO)
            WS(M,1,N) = (XLS(MN,NB)*RHOL(MN,NB)*AL -
     &        XLS(MP,N)*RHOL(MP,N)*ALP)
            WDS(M,1,N) = DDLB*(XLS(MN,NB)*RHOL(MN,NB) -
     &        XLS(MP,N)*RHOL(MP,N))
          ENDDO
          DO M = 1,ISVF
            WDS(M,2,NB) = WDS(M,1,N)
            WS(M,2,NB) = WS(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            WDS(M,1,N) = 0.D+0
            WS(M,1,N) = 0.D+0
          ENDDO
        ENDIF
      ENDDO
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of DFFLS group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DFFLW
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Diffusive CO2 aqueous fluxes on interior surfaces.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 29 November 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE GRID
      USE FLUX
      USE FDVP
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      IF( ISLC(2).LT.1 ) RETURN
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/DFFLW'
!
!---  Aqueous diffusive flux, excluding boundaries
!
      DO N = 1,NFCGC(ID+1)
!
!---    Skip for inactive nodes  ---
!
        IF( IXP(N).EQ.0 ) CYCLE
!
!---    West surface  ---
!
        NW = ICM(3,N)
        IF( NW.NE.0 ) THEN
          DXMLA = XMLA(2,NW) - XMLA(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            FLWP = XLW(MP,N)*RHOL(MP,N)
            FLWW = XLW(MN,NW)*RHOL(MN,NW)
            INDX = 2
            FLW = DIFMN( FLWW,FLWP,DXGF(NW),DXGF(N),UL(1,1,N),INDX )
            ULW(M,1,N) = UL(M,1,N)*FLW - WTMW*(UDLA(M,1,N) +
     &        UDS(M,1,N)/WTMS)
          ENDDO
          DO M = 1,ISVF
            ULW(M,2,NW) = ULW(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            ULW(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    South surface  ---
!
        NS = ICM(2,N)
        IF( NS.NE.0 ) THEN
          DXMLA = XMLA(2,NS) - XMLA(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            FLWP = XLW(MP,N)*RHOL(MP,N)
            FLWS = XLW(MN,NS)*RHOL(MN,NS)
            INDX = 2
            FLW = DIFMN( FLWS,FLWP,DYGF(NS),DYGF(N),VL(1,1,N),INDX )
            VLW(M,1,N) = VL(M,1,N)*FLW - WTMW*(VDLA(M,1,N) +
     &        VDS(M,1,N)/WTMS)
          ENDDO
          DO M = 1,ISVF
             VLW(M,2,NS) = VLW(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            VLW(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    Bottom surface  ---
!
        NB = ICM(1,N)
        IF( NB.NE.0 ) THEN
          DXMLA = XMLA(2,NB) - XMLA(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            FLWP = XLW(MP,N)*RHOL(MP,N)
            FLWB = XLW(MN,NB)*RHOL(MN,NB)
            INDX = 2
            FLW = DIFMN( FLWB,FLWP,DZGF(NB),DZGF(N),WL(1,1,N),INDX )
            WLW(M,1,N) = WL(M,1,N)*FLW - WTMW*(WDLA(M,1,N) +
     &        WDS(M,1,N)/WTMS)
          ENDDO
          DO M = 1,ISVF
            WLW(M,2,NB) = WLW(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            WLW(M,1,N) = 0.D+0
          ENDDO
        ENDIF
      ENDDO
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of DFFLW group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DFFNC( IGC )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Diffusive petroleum component nonaqueous-liquid fluxes on 
!     interior surfaces.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 29 November 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE HYST
      USE GRID
      USE FLUX
      USE FDVP
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      IF( ISLC(2).LT.1 ) RETURN
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/DFFNC'
!
!---  Nonaqueous liquid petroleum component diffusive flux, 
!     excluding boundaries
!
      DO N = 1,NFCGC(ID+1)
!
!---    Skip for inactive nodes  ---
!
        IF( IXP(N).EQ.0 ) CYCLE
!
!---    West surface  ---
!
        NW = ICM(3,N)
        IF( NW.NE.0 ) THEN
          DXMNC = XMNC(IGC,2,NW) - XMNC(IGC,2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORN(MP,N)*PORD(MP,N)*SN(MP,N)*
     &        DFNC(IGC,MP,N)*RHOMN(MP,N)
            DFW = TORN(MN,NW)*PORD(MN,NW)*SN(MN,NW)*
     &        DFNC(IGC,MN,NW)*RHOMN(MN,NW)
            INDX = 12
            DFM = DIFMN( DFW,DFP,DXGF(NW),DXGF(N),DXMNC,INDX )
            UDNC(IGC,M,1,N) = DFM*(XMNC(IGC,MN,NW)-XMNC(IGC,MP,N))/
     &        DXGP(1,N)
            FNCP = XNC(IGC,MP,N)*RHON(MP,N)
            FNCW = XNC(IGC,MN,NW)*RHON(MN,NW)
            INDX = 3
            FNC = DIFMN( FNCW,FNCP,DXGF(NW),DXGF(N),UN(1,1,N),INDX )
            UNC(IGC,M,1,N) = UN(M,1,N)*FNC + GCPP(1,IGC)*UDNC(IGC,M,1,N)
          ENDDO
          DO M = 1,ISVF
            UDNC(IGC,M,2,NW) = UDNC(IGC,M,1,N)
            UNC(IGC,M,2,NW) = UNC(IGC,M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            UDNC(IGC,M,1,N) = 0.D+0
            UNC(IGC,M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    South surface  ---
!
        NS = ICM(2,N)
        IF( NS.NE.0 ) THEN
          DXMNC = XMNC(IGC,2,NS) - XMNC(IGC,2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORN(MP,N)*PORD(MP,N)*SN(MP,N)*
     &        DFNC(IGC,MP,N)*RHOMN(MP,N)
            DFS = TORN(MN,NS)*PORD(MN,NS)*SN(MN,NS)*
     &        DFNC(IGC,MN,NS)*RHOMN(MN,NS)
            INDX = 12
            DFM = DIFMN( DFS,DFP,DYGF(NS),DYGF(N),DXMNC,INDX )
            VDNC(IGC,M,1,N) = DFM*(XMNC(IGC,MN,NS)-XMNC(IGC,MP,N))/
     &        (DYGP(1,N)*RP(N))
            FNCP = XNC(IGC,MP,N)*RHON(MP,N)
            FNCS = XNC(IGC,MN,NS)*RHON(MN,NS)
            INDX = 3
            FNC = DIFMN( FNCS,FNCP,DYGF(NS),DYGF(N),VN(1,1,N),INDX )
            VNC(IGC,M,1,N) = VN(M,1,N)*FNC + GCPP(1,IGC)*VDNC(IGC,M,1,N)
          ENDDO
          DO M = 1,ISVF
            VDNC(IGC,M,2,NS) = VDNC(IGC,M,1,N)
            VNC(IGC,M,2,NS) = VNC(IGC,M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            VDNC(IGC,M,1,N) = 0.D+0
            VNC(IGC,M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    Bottom surface  ---
!
        NB = ICM(1,N)
        IF( NB.NE.0 ) THEN
          DXMNC = XMNC(IGC,2,NB) - XMNC(IGC,2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORN(MP,N)*PORD(MP,N)*SN(MP,N)*
     &        DFNC(IGC,MP,N)*RHOMN(MP,N)
            DFB = TORN(MN,NB)*PORD(MN,NB)*SN(MN,NB)*
     &        DFNC(IGC,MN,NB)*RHOMN(MN,NB)
            INDX = 12
            DFM = DIFMN( DFB,DFP,DZGF(NB),DZGF(N),DXMNC,INDX )
            WDNC(IGC,M,1,N) = DFM*(XMNC(IGC,MN,NB)-XMNC(IGC,MP,N))/
     &        DZGP(1,N)
            FNCP = XNC(IGC,MP,N)*RHON(MP,N)
            FNCB = XNC(IGC,MN,NB)*RHON(MN,NB)
            INDX = 3
            FNW = DIFMN( FNCB,FNCP,DZGF(NB),DZGF(N),WN(1,1,N),INDX )
            WNC(IGC,M,1,N) = WN(M,1,N)*FNC + GCPP(1,IGC)*WDNC(IGC,M,1,N)
          ENDDO
          DO M = 1,ISVF
            WDNC(IGC,M,2,NB) = WDNC(IGC,M,1,N)
            WNC(IGC,M,2,NB) = WNC(IGC,M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            WDNC(IGC,M,1,N) = 0.D+0
            WNC(IGC,M,1,N) = 0.D+0
          ENDDO
        ENDIF
      ENDDO
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of DFFNC group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DRCVG
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Compute the gas-phase Darcy flux from pressure gradients
!     and gravitational body forces.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 29 November 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE GRID
      USE FLUX
      USE FDVP
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 KGM
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/DRCVG'
!
!---  Gas Darcy velocities, excluding boundaries
!
      DO N = 1,NFCGC(ID+1)
!
!---    Skip for inactive nodes  ---
!
        IF( IXP(N).EQ.0 ) CYCLE
!
!---    West surface  ---
!
        NW = ICM(3,N)
        IF( NW.NE.0 ) THEN
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            HDGX = PG(MN,NW)-PG(MP,N)-0.5D+0*GRVX(1,N)
     &        *(RHOG(MN,NW)*DXGF(N)+RHOG(MP,N)*DXGF(NW))
            IF( M.EQ.1 ) HDG = HDGX
!
!---        Permeability reduction factor
!
            PERM_WX = PERMRF(MN,NW)*PERM(1,NW)
            PERM_PX = PERMRF(MP,N)*PERM(1,N)
            INDX = 11
            KGM = DIFMN(PERM_WX,PERM_PX,DXGF(NW),DXGF(N),HDG,INDX)
            IF( PERM_WX/EPSL.LT.EPSL ) KGM = 0.D+0
            IF( PERM_PX/EPSL.LT.EPSL ) KGM = 0.D+0
            INDX = 9
            RKGM = DIFMN(RKG(MN,NW),RKG(MP,N),DXGF(NW),DXGF(N),
     &        HDG,INDX)
            INDX = 6
            VGM = DIFMN(VISG(MN,NW),VISG(MP,N),DXGF(NW),DXGF(N),
     &        HDG,INDX)
            UG(M,1,N) = KGM*RKGM*HDGX/(DXGP(1,N)*VGM)
          ENDDO
          DO M = 1,ISVF
            UG(M,2,NW) = UG(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            UG(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    South surface  ---
!
        NS = ICM(2,N)
        IF( NS.NE.0 ) THEN
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            HDGY = PG(MN,NS)-PG(MP,N)-0.5D+0*GRVY(1,N)
     &        *(RHOG(MN,NS)*DYGF(N)+RHOG(MP,N)*DYGF(NS))
            IF( M.EQ.1 ) HDG = HDGY
!
!---        Permeability reduction factor
!
            PERM_SX = PERMRF(MN,NS)*PERM(2,NS)
            PERM_PX = PERMRF(MP,N)*PERM(2,N)
            INDX = 11
            KGM = DIFMN(PERM_SX,PERM_PX,DYGF(NS),DYGF(N),HDG,INDX)
            IF( PERM_SX/EPSL.LT.EPSL ) KGM = 0.D+0
            IF( PERM_PX/EPSL.LT.EPSL ) KGM = 0.D+0
            INDX = 9
            RKGM = DIFMN(RKG(MN,NS),RKG(MP,N),DYGF(NS),DYGF(N),
     &        HDG,INDX)
            INDX = 6
            VGM = DIFMN(VISG(MN,NS),VISG(MP,N),DYGF(NS),DYGF(N),
     &        HDG,INDX)
            VG(M,1,N) = KGM*RKGM*HDGY/(DYGP(1,N)*VGM*RP(N))
          ENDDO
          DO M = 1,ISVF
            VG(M,2,NS) = VG(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            VG(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    Bottom surface  ---
!
        NB = ICM(1,N)
        IF( NB.NE.0 ) THEN
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            HDGZ = PG(MN,NB)-PG(MP,N)-0.5D+0*GRVZ(1,N)
     &        *(RHOG(MN,NB)*DZGF(N)+RHOG(MP,N)*DZGF(NB))
            IF( M.EQ.1 ) HDG = HDGZ
!
!---        Permeability reduction factor
!
            PERM_BX = PERMRF(MN,NB)*PERM(3,NB)
            PERM_PX = PERMRF(MP,N)*PERM(3,N)
            INDX = 11
            KGM = DIFMN(PERM_BX,PERM_PX,DZGF(NB),DZGF(N),HDG,INDX)
            IF( PERM_BX/EPSL.LT.EPSL ) KGM = 0.D+0
            IF( PERM_PX/EPSL.LT.EPSL ) KGM = 0.D+0
            INDX = 9
            RKGM = DIFMN(RKG(MN,NB),RKG(MP,N),DZGF(NB),DZGF(N),
     &        HDG,INDX)
            INDX = 6
            VGM = DIFMN(VISG(MN,NB),VISG(MP,N),DZGF(NB),DZGF(N),
     &        HDG,INDX)
            WG(M,1,N) = KGM*RKGM*HDGZ/(DZGP(1,N)*VGM)
          ENDDO
          DO M = 1,ISVF
            WG(M,2,NB) = WG(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            WG(M,1,N) = 0.D+0
          ENDDO
        ENDIF
      ENDDO
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of DRCVG group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DRCVL
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Compute the aqueous-phase Darcy flux from pressure gradients
!     and gravitational body forces.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 29 November 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE GRID
      USE FLUX
      USE FDVP
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 KLM
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/DRCVL'
!
!---  Aqueous Darcy velocities, excluding boundaries
!
      DO N = 1,NFCGC(ID+1)
!
!---    Skip for inactive nodes  ---
!
        IF( IXP(N).EQ.0 ) CYCLE
!
!---    West surface  ---
!
        NW = ICM(3,N)
        IF( NW.NE.0 ) THEN
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            HDLX = PL(MN,NW)-PL(MP,N)-0.5D+0*GRVX(1,N)
     &        *(RHOL(MN,NW)*DXGF(N)+RHOL(MP,N)*DXGF(NW))
            IF( M.EQ.1 ) HDL = HDLX
!
!---        Permeability reduction factor
!
            PERM_WX = PERMRF(MN,NW)*PERM(1,NW)
            PERM_PX = PERMRF(MP,N)*PERM(1,N)
            INDX = 11
            KLM = DIFMN(PERM_WX,PERM_PX,DXGF(NW),DXGF(N),HDL,INDX)
            IF( PERM_WX/EPSL.LT.EPSL ) KLM = 0.D+0
            IF( PERM_PX/EPSL.LT.EPSL ) KLM = 0.D+0
            INDX = 8
            RKLM = DIFMN(RKL(MN,NW),RKL(MP,N),DXGF(NW),DXGF(N),
     &        HDL,INDX)
            INDX = 5
            VLM = DIFMN(VISL(MN,NW),VISL(MP,N),DXGF(NW),DXGF(N),
     &        HDL,INDX)
            UL(M,1,N) = KLM*RKLM*HDLX/(DXGP(1,N)*VLM)
          ENDDO
          DO M = 1,ISVF
            UL(M,2,NW) = UL(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            UL(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    South surface  ---
!
        NS = ICM(2,N)
        IF( NS.NE.0 ) THEN
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            HDLY = PL(MN,NS)-PL(MP,N)-0.5D+0*GRVY(1,N)
     &        *(RHOL(MN,NS)*DYGF(N)+RHOL(MP,N)*DYGF(NS))
            IF( M.EQ.1 ) HDL = HDLY
!
!---        Permeability reduction factor
!
            PERM_SX = PERMRF(MN,NS)*PERM(2,NS)
            PERM_PX = PERMRF(MP,N)*PERM(2,N)
            INDX = 11
            KLM = DIFMN(PERM_SX,PERM_PX,DYGF(NS),DYGF(N),HDL,INDX)
            IF( PERM_SX/EPSL.LT.EPSL ) KLM = 0.D+0
            IF( PERM_PX/EPSL.LT.EPSL ) KLM = 0.D+0
            INDX = 8
            RKLM = DIFMN(RKL(MN,NS),RKL(MP,N),DYGF(NS),DYGF(N),HDL,INDX)
            INDX = 5
            VLM = DIFMN(VISL(MN,NS),VISL(MP,N),DYGF(NS),DYGF(N),
     &        HDL,INDX)
            VL(M,1,N) = KLM*RKLM*HDLY/(DYGP(1,N)*VLM*RP(N))
          ENDDO
          DO M = 1,ISVF
            VL(M,2,NS) = VL(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            VL(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    Bottom surface  ---
!
        NB = ICM(1,N)
        IF( NB.NE.0 ) THEN
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            HDLZ = PL(MN,NB)-PL(MP,N)-0.5D+0*GRVZ(1,N)
     &        *(RHOL(MN,NB)*DZGF(N)+RHOL(MP,N)*DZGF(NB))
            IF( M.EQ.1 ) HDL = HDLZ
!
!---        Permeability reduction factor
!
            PERM_BX = PERMRF(MN,NB)*PERM(3,NB)
            PERM_PX = PERMRF(MP,N)*PERM(3,N)
            INDX = 11
            KLM = DIFMN(PERM_BX,PERM_PX,DZGF(NB),DZGF(N),HDL,INDX)
            IF( PERM_BX/EPSL.LT.EPSL ) KLM = 0.D+0
            IF( PERM_PX/EPSL.LT.EPSL ) KLM = 0.D+0
            INDX = 8
            RKLM = DIFMN(RKL(MN,NB),RKL(MP,N),DZGF(NB),DZGF(N),
     &        HDL,INDX)
            INDX = 5
            VLM = DIFMN(VISL(MN,NB),VISL(MP,N),DZGF(NB),DZGF(N),
     &        HDL,INDX)
            WL(M,1,N) = KLM*RKLM*HDLZ/(DZGP(1,N)*VLM)
          ENDDO
          DO M = 1,ISVF
            WL(M,2,NB) = WL(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            WL(M,1,N) = 0.D+0
          ENDDO
        ENDIF
      ENDDO
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of DRCVL group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DRCVN
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Compute the aqueous-phase Darcy flux from pressure gradients
!     and gravitational body forces.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 29 November 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE GRID
      USE FLUX
      USE FDVP
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 KLM
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/DRCVN'
!
!---  Aqueous Darcy velocities, excluding boundaries
!
      DO N = 1,NFCGC(ID+1)
!
!---    Skip for inactive nodes  ---
!
        IF( IXP(N).EQ.0 ) CYCLE
!
!---    West surface  ---
!
        NW = ICM(3,N)
        IF( NW.NE.0 ) THEN
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            HDNX = PN(MN,NW)-PN(MP,N)-0.5D+0*GRVX(1,N)
     &        *(RHON(MN,NW)*DXGF(N)+RHON(MP,N)*DXGF(NW))
            IF( M.EQ.1 ) HDN = HDNX
!
!---        Permeability reduction factor
!
            PERM_WX = PERMRF(MN,NW)*PERM(1,NW)
            PERM_PX = PERMRF(MP,N)*PERM(1,N)
            INDX = 11
            KNM = DIFMN(PERM_WX,PERM_PX,DXGF(NW),DXGF(N),HDN,INDX)
            IF( PERM_WX/EPSL.LT.EPSL ) KNM = 0.D+0
            IF( PERM_PX/EPSL.LT.EPSL ) KNM = 0.D+0
            INDX = 8
            RKNM = DIFMN(RKN(MN,NW),RKN(MP,N),DXGF(NW),DXGF(N),
     &        HDN,INDX)
            INDX = 5
            VNM = DIFMN(VISN(MN,NW),VISN(MP,N),DXGF(NW),DXGF(N),
     &        HDN,INDX)
            UN(M,1,N) = KNM*RKNM*HDNX/(DXGP(1,N)*VNM)
          ENDDO
          DO M = 1,ISVF
            UN(M,2,NW) = UN(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            UN(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    South surface  ---
!
        NS = ICM(2,N)
        IF( NS.NE.0 ) THEN
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            HDNY = PN(MN,NS)-PN(MP,N)-0.5D+0*GRVY(1,N)
     &        *(RHON(MN,NS)*DYGF(N)+RHON(MP,N)*DYGF(NS))
            IF( M.EQ.1 ) HDN = HDNY
!
!---        Permeability reduction factor
!
            PERM_SX = PERMRF(MN,NS)*PERM(2,NS)
            PERM_PX = PERMRF(MP,N)*PERM(2,N)
            INDX = 11
            KNM = DIFMN(PERM_SX,PERM_PX,DYGF(NS),DYGF(N),HDN,INDX)
            IF( PERM_SX/EPSL.LT.EPSL ) KNM = 0.D+0
            IF( PERM_PX/EPSL.LT.EPSL ) KNM = 0.D+0
            INDX = 8
            RKNM = DIFMN(RKN(MN,NS),RKN(MP,N),DYGF(NS),DYGF(N),HDN,INDX)
            INDX = 5
            VNM = DIFMN(VISN(MN,NS),VISN(MP,N),DYGF(NS),DYGF(N),
     &        HDN,INDX)
            VN(M,1,N) = KNM*RKNM*HDNY/(DYGP(1,N)*VNM*RP(N))
          ENDDO
          DO M = 1,ISVF
            VN(M,2,NS) = VN(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            VN(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    Bottom surface  ---
!
        NB = ICM(1,N)
        IF( NB.NE.0 ) THEN
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            HDNZ = PN(MN,NB)-PN(MP,N)-0.5D+0*GRVZ(1,N)
     &        *(RHON(MN,NB)*DZGF(N)+RHON(MP,N)*DZGF(NB))
            IF( M.EQ.1 ) HDN = HDNZ
!
!---        Permeability reduction factor
!
            PERM_BX = PERMRF(MN,NB)*PERM(3,NB)
            PERM_PX = PERMRF(MP,N)*PERM(3,N)
            INDX = 11
            KNM = DIFMN(PERM_BX,PERM_PX,DZGF(NB),DZGF(N),HDN,INDX)
            IF( PERM_BX/EPSL.LT.EPSL ) KNM = 0.D+0
            IF( PERM_PX/EPSL.LT.EPSL ) KNM = 0.D+0
            INDX = 8
            RKNM = DIFMN(RKN(MN,NB),RKN(MP,N),DZGF(NB),DZGF(N),
     &        HDN,INDX)
            INDX = 5
            VNM = DIFMN(VISN(MN,NB),VISN(MP,N),DZGF(NB),DZGF(N),
     &        HDN,INDX)
            WN(M,1,N) = KNM*RKNM*HDNZ/(DZGP(1,N)*VNM)
          ENDDO
          DO M = 1,ISVF
            WN(M,2,NB) = WN(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            WN(M,1,N) = 0.D+0
          ENDDO
        ENDIF
      ENDDO
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of DRCVN group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE THD_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Compute the contribution to the energy flux by thermal conduction
!     for nonboundary node faces.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 30 November 2022
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE GRID
      USE FLUX
      USE FDVP
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/THD_EOR'
!
!---  Thermal conduction, excluding boundaries
!
      DO N = 1,NFCGC(ID+1)
!
!---    Skip for inactive nodes  ---
!
        IF( IXP(N).EQ.0 ) CYCLE
!
!---    West surface  ---
!
        NW = ICM(3,N)
        IF( NW.NE.0 ) THEN
          DTK = T(2,NW)-T(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
!
!---        Parallel function  ---
!
            IF( ITHK(N).EQ.2 ) THEN          
              TKP = MAX(1.D+0-PORD(MP,N),0.D+0)*THKS(1,N) + 
     &          PORD(MP,N)*(THKL(MP,N)*SL(MP,N) + 
     &          THKG(MP,N)*SG(MP,N) + THKN(MP,N)*SN(MP,N))
!
!---        Somerton function  ---
!
            ELSEIF( ITHK(N).EQ.4 ) THEN
              TKP = THKS(1,N) + 
     &          SQRT(SL(MP,N))*(THKS(4,N)-THKS(1,N))
            ENDIF
!
!---        Parallel function  ---
!
            IF( ITHK(NW).EQ.2 ) THEN          
              TKW = MAX(1.D+0-PORD(MN,NW),0.D+0)*THKS(1,NW) +
     &          PORD(MN,NW)*(THKL(MN,NW)*SL(MN,NW) +
     &          THKG(MN,NW)*SG(MN,NW) + THKN(MN,NW)*SN(MN,NW))
!
!---        Somerton function  ---
!
            ELSEIF( ITHK(NW).EQ.4 ) THEN
              TKW = THKS(1,NW) + 
     &          SQRT(SL(MN,NW))*(THKS(4,NW)-THKS(1,NW))           
            ENDIF
            INDX = 1
            TK = DIFMN( TKW,TKP,DXGF(NW),DXGF(N),DTK,INDX )
            UQ(M,1,N) = TK*(T(MN,NW)-T(MP,N))/DXGP(1,N)
          ENDDO
          DO M = 1,ISVF
            UQ(M,2,NW) = UQ(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            UQ(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    South surface  ---
!
        NS = ICM(2,N)
        IF( NS.NE.0 ) THEN
          DTK = T(2,NS)-T(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
!
!---        Parallel function  ---
!
            IF( ITHK(N).EQ.2 ) THEN          
              TKP = MAX(1.D+0-PORD(MP,N),0.D+0)*THKS(2,N) +
     &          PORD(MP,N)*(THKL(MP,N)*SL(MP,N) + 
     &          THKG(MP,N)*SG(MP,N) + THKN(MP,N)*SN(MP,N))
!
!---        Somerton function  ---
!
            ELSEIF( ITHK(N).EQ.4 ) THEN
              TKP = THKS(2,N) + 
     &          SQRT(SL(MP,N))*(THKS(5,N)-THKS(2,N))
            ENDIF
!
!---        Parallel function  ---
!
            IF( ITHK(NS).EQ.2 ) THEN          
              TKS = MAX(1.D+0-PORD(MN,NS),0.D+0)*THKS(2,NS) +
     &          PORD(MN,NS)*(THKL(MN,NS)*SL(MN,NS) + 
     &          THKG(MN,NS)*SG(MN,NS) + THKN(MN,NS)*SN(MN,NS))
!
!---        Somerton function  ---
!
            ELSEIF( ITHK(NS).EQ.4 ) THEN
              TKS = THKS(2,NS) + 
     &          SQRT(SL(MN,NS))*(THKS(5,NS)-THKS(2,NS))           
            ENDIF     
            INDX = 1
            TK = DIFMN( TKS,TKP,DYGF(NS),DYGF(N),DTK,INDX )
            VQ(M,1,N) = TK*(T(MN,NS)-T(MP,N))/(DYGP(1,N)*RP(N))
          ENDDO
          DO M = 1,ISVF
            VQ(M,2,NS) = VQ(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            VQ(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    Bottom surface  ---
!
        NB = ICM(1,N)
        IF( NB.NE.0 ) THEN
          DTK = T(2,NB)-T(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
!
!---        Parallel function  ---
!
            IF( ITHK(N).EQ.2 ) THEN          
              TKP = MAX(1.D+0-PORD(MP,N),0.D+0)*THKS(3,N) +
     &          PORD(MP,N)*(THKL(MP,N)*SL(MP,N) + 
     &          THKG(MP,N)*SG(MP,N) + THKN(MP,N)*SN(MP,N))
!
!---        Somerton function  ---
!
            ELSEIF( ITHK(N).EQ.4 ) THEN
              TKP = THKS(3,N) + 
     &          SQRT(SL(MP,N))*(THKS(6,N)-THKS(3,N))
            ENDIF
!
!---        Parallel function  ---
!
            IF( ITHK(NB).EQ.2 ) THEN          
              TKB = MAX(1.D+0-PORD(MN,NB),0.D+0)*THKS(3,NB) +
     &          PORD(MN,NB)*(THKL(MN,NB)*SL(MN,NB) + 
     &          THKG(MN,NB)*SG(MN,NB) + THKN(MN,NB)*SN(MN,NB))
!
!---        Somerton function  ---
!
            ELSEIF( ITHK(NB).EQ.4 ) THEN
              TKB = THKS(3,NB) + 
     &          SQRT(SL(MN,NB))*(THKS(6,NB)-THKS(3,NB))           
            ENDIF     
            INDX = 1
            TK = DIFMN( TKB,TKP,DZGF(NB),DZGF(N),DTK,INDX )
            WQ(M,1,N) = TK*(T(MN,NB)-T(MP,N))/DZGP(1,N) 
          ENDDO
          DO M = 1,ISVF
            WQ(M,2,NB) = WQ(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            WQ(M,1,N) = 0.D+0
          ENDDO
        ENDIF
      ENDDO
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of THD_EOR group  ---
!
      RETURN
      END
      
!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE THG_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Compute the contribution to the energy flux by gas advection
!     for nonboundary node faces.
!     Donor cell interfacial averaging.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 30 November 2022
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE JACOB
      USE GRID
      USE GLB_PAR
      USE FLUX
      USE FDVP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/THG_EOR'
!
!---  Gas advection, excluding boundaries
!
      DO N = 1,NFCGC(ID+1)
!
!---    Skip for inactive nodes  ---
!
        IF( IXP(N).EQ.0 ) CYCLE
!
!---    West surface  ---
!
        NW = ICM(3,N)
        IF( NW.NE.0 ) THEN
          DO M = 1,ISVF
            MP = MPOS(M)
            MN = MNEG(M)
            HP = HG(MP,N)*RHOG(MP,N)
            HW = HG(MN,NW)*RHOG(MN,NW)
!
!---        Upwind mean  ---
!
            INDX = -4
            HM = DIFMN( HW,HP,DXGF(NW),DXGF(N),UG(1,1,N),INDX )
            UQ(M,1,N) = UQ(M,1,N) + HM*UG(M,1,N)
          ENDDO
          DO M = 1,ISVF
            UQ(M,2,NW) = UQ(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            UQ(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    South surface  ---
!
        NS = ICM(2,N)
        IF( NS.NE.0 ) THEN
          DO M = 1,ISVF
            MP = MPOS(M)
            MN = MNEG(M)
            HP = HG(MP,N)*RHOG(MP,N)
            HS = HG(MN,NS)*RHOG(MN,NS)
!
!---        Upwind mean  ---
!
            INDX = -4
            HM = DIFMN( HS,HP,DYGF(NS),DYGF(N),VG(1,1,N),INDX )
            VQ(M,1,N) = VQ(M,1,N) + HM*VG(M,1,N)
          ENDDO
          DO M = 1,ISVF
            VQ(M,2,NS) = VQ(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            VQ(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    Bottom surface  ---
!
        NB = ICM(1,N)
        IF( NB.NE.0 ) THEN
          DO M = 1,ISVF
            MP = MPOS(M)
            MN = MNEG(M)
            HP = HG(MP,N)*RHOG(MP,N)
            HB = HG(MN,NB)*RHOG(MN,NB)
!
!---        Upwind mean  ---
!
            INDX = -4
            HM = DIFMN( HB,HP,DZGF(NB),DZGF(N),WG(1,1,N),INDX )
            WQ(M,1,N) = WQ(M,1,N) + HM*WG(M,1,N)
          ENDDO
          DO M = 1,ISVF
            WQ(M,2,NB) = WQ(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            WQ(M,1,N) = 0.D+0
          ENDDO
        ENDIF
      ENDDO
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of THG_EOR group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE THL_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Compute the contribution to the energy flux by aqueous advection
!     for nonboundary node faces.
!     Donor cell interfacial averaging.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 30 November 2022
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE JACOB
      USE GRID
      USE GLB_PAR
      USE FLUX
      USE FDVP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/THL_EOR'
!
!---  Aqueous advection, excluding boundaries
!
      DO N = 1,NFCGC(ID+1)
!
!---    Skip for inactive nodes  ---
!
        IF( IXP(N).EQ.0 ) CYCLE
!
!---    West surface  ---
!
        NW = ICM(3,N)
        IF( NW.NE.0 ) THEN
          DO M = 1,ISVF
            MP = MPOS(M)
            MN = MNEG(M)
            HP = HL(MP,N)*RHOL(MP,N)
            HW = HL(MN,NW)*RHOL(MN,NW)
!
!---        Upwind mean  ---
!
            INDX = -4
            HM = DIFMN( HW,HP,DXGF(NW),DXGF(N),UL(1,1,N),INDX )
            UQ(M,1,N) = UQ(M,1,N) + HM*UL(M,1,N)
          ENDDO
          DO M = 1,ISVF
            UQ(M,2,NW) = UQ(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            UQ(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    South surface  ---
!
        NS = ICM(2,N)
        IF( NS.NE.0 ) THEN
          DO M = 1,ISVF
            MP = MPOS(M)
            MN = MNEG(M)
            HP = HL(MP,N)*RHOL(MP,N)
            HS = HL(MN,NS)*RHOL(MN,NS)
!
!---        Upwind mean  ---
!
            INDX = -4
            HM = DIFMN( HS,HP,DYGF(NS),DYGF(N),VL(1,1,N),INDX )
            VQ(M,1,N) = VQ(M,1,N) + HM*VL(M,1,N)
          ENDDO
          DO M = 1,ISVF
            VQ(M,2,NS) = VQ(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            VQ(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    Bottom surface  ---
!
        NB = ICM(1,N)
        IF( NB.NE.0 ) THEN
          DO M = 1,ISVF
            MP = MPOS(M)
            MN = MNEG(M)
            HP = HL(MP,N)*RHOL(MP,N)
            HB = HL(MN,NB)*RHOL(MN,NB)
!
!---        Upwind mean  ---
!
            INDX = -4
            HM = DIFMN( HB,HP,DZGF(NB),DZGF(N),WL(1,1,N),INDX )
            WQ(M,1,N) = WQ(M,1,N) + HM*WL(M,1,N)
          ENDDO
          DO M = 1,ISVF
            WQ(M,2,NB) = WQ(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            WQ(M,1,N) = 0.D+0
          ENDDO
        ENDIF
      ENDDO
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of THL_EOR group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE THN_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Compute the contribution to the energy flux by nonaqueous-liquid
!     advection for nonboundary node faces.
!     Donor cell interfacial averaging.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 30 November 2022
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE JACOB
      USE GRID
      USE GLB_PAR
      USE FLUX
      USE FDVP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/THN_EOR'
!
!---  Nonaqueous-liquid advection, excluding boundaries
!
      DO N = 1,NFCGC(ID+1)
!
!---    Skip for inactive nodes  ---
!
        IF( IXP(N).EQ.0 ) CYCLE
!
!---    West surface  ---
!
        NW = ICM(3,N)
        IF( NW.NE.0 ) THEN
          DO M = 1,ISVF
            MP = MPOS(M)
            MN = MNEG(M)
            HP = HN(MP,N)*RHON(MP,N)
            HW = HN(MN,NW)*RHON(MN,NW)
!
!---        Upwind mean  ---
!
            INDX = -4
            HM = DIFMN( HW,HP,DXGF(NW),DXGF(N),UN(1,1,N),INDX )
            UQ(M,1,N) = UQ(M,1,N) + HM*UN(M,1,N)
          ENDDO
          DO M = 1,ISVF
            UQ(M,2,NW) = UQ(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            UQ(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    South surface  ---
!
        NS = ICM(2,N)
        IF( NS.NE.0 ) THEN
          DO M = 1,ISVF
            MP = MPOS(M)
            MN = MNEG(M)
            HP = HN(MP,N)*RHON(MP,N)
            HS = HN(MN,NS)*RHON(MN,NS)
!
!---        Upwind mean  ---
!
            INDX = -4
            HM = DIFMN( HS,HP,DYGF(NS),DYGF(N),VN(1,1,N),INDX )
            VQ(M,1,N) = VQ(M,1,N) + HM*VN(M,1,N)
          ENDDO
          DO M = 1,ISVF
            VQ(M,2,NS) = VQ(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            VQ(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    Bottom surface  ---
!
        NB = ICM(1,N)
        IF( NB.NE.0 ) THEN
          DO M = 1,ISVF
            MP = MPOS(M)
            MN = MNEG(M)
            HP = HN(MP,N)*RHON(MP,N)
            HB = HN(MN,NB)*RHON(MN,NB)
!
!---        Upwind mean  ---
!
            INDX = -4
            HM = DIFMN( HB,HP,DZGF(NB),DZGF(N),WN(1,1,N),INDX )
            WQ(M,1,N) = WQ(M,1,N) + HM*WN(M,1,N)
          ENDDO
          DO M = 1,ISVF
            WQ(M,2,NB) = WQ(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            WQ(M,1,N) = 0.D+0
          ENDDO
        ENDIF
      ENDDO
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of THN_EOR group  ---
!
      RETURN
      END

