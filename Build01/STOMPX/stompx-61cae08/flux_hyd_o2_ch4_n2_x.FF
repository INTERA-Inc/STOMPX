!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DFFGA
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Diffusive O2 gas fluxes on interior surfaces.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 19 October 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE GRID
      USE FLUX
      USE FDVP
      USE FDVH
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      IF( ISLC(2).LT.1 ) RETURN
!
!---  Gas O2 diffusive flux, excluding boundaries
!
      DO N = 1,NFCGC(ID+1)
!
!---    Skip for inactive nodes  ---
!
        IF( IXP(N).EQ.0 ) CYCLE
!
!---    West surface  ---
!
        NW = ICM(3,N)
        IF( NW.NE.0 ) THEN
          DXMGA = XMGA(2,NW) - XMGA(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORG(MP,N)*PORD(MP,N)*SG(MP,N)*
     &        DFGA(MP,N)*RHOMG(MP,N)
            DFW = TORG(MN,NW)*PORD(MN,NW)*SG(MN,NW)*
     &        DFGA(MN,NW)*RHOMG(MN,NW)
            INDX = 12
            DFM = DIFMN( DFW,DFP,DXGF(NW),DXGF(N),DXMGA,INDX )
            UDGA(M,1,N) = DFM*(XMGA(MN,NW)-XMGA(MP,N))/DXGP(1,N)
            FGAP = XGA(MP,N)*RHOG(MP,N)
            FGAW = XGA(MN,NW)*RHOG(MN,NW)
            INDX = 3
            FGA = DIFMN( FGAW,FGAP,DXGF(NW),DXGF(N),UG(1,1,N),INDX )
            UGA(M,1,N) = UG(M,1,N)*FGA + WTMA*UDGA(M,1,N)
          ENDDO  
          DO M = 1,ISVF
            UDGA(M,2,NW) = UDGA(M,1,N)
            UGA(M,2,NW) = UGA(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            UDGA(M,1,N) = 0.D+0
            UGA(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    South surface  ---
!
        NS = ICM(2,N)
        IF( NS.NE.0 ) THEN
          DXMGA = XMGA(2,NS) - XMGA(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORG(MP,N)*PORD(MP,N)*SG(MP,N)*
     &        DFGA(MP,N)*RHOMG(MP,N)
            DFS = TORG(MN,NS)*PORD(MN,NS)*SG(MN,NS)*
     &        DFGA(MN,NS)*RHOMG(MN,NS)
            INDX = 12
            DFM = DIFMN( DFS,DFP,DYGF(NS),DYGF(N),DXMGA,INDX )
            VDGA(M,1,N) = DFM*(XMGA(MN,NS)-XMGA(MP,N))/(DYGP(1,N)*RP(N))
            FGAP = XGA(MP,N)*RHOG(MP,N)
            FGAS = XGA(MN,NS)*RHOG(MN,NS)
            INDX = 3
            FGA = DIFMN( FGAS,FGAP,DYGF(NS),DYGF(N),VG(1,1,N),INDX )
            VGA(M,1,N) = VG(M,1,N)*FGA + WTMA*VDGA(M,1,N)
          ENDDO
          DO M = 1,ISVF
            VDGA(M,2,NS) = VDGA(M,1,N)
            VGA(M,2,NS) = VGA(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            VDGA(M,1,N) = 0.D+0
            VGA(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    Bottom surface  ---
!
        NB = ICM(1,N)
        IF( NB.NE.0 ) THEN
          DXMGA = XMGA(2,NB) - XMGA(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORG(MP,N)*PORD(MP,N)*SG(MP,N)*
     &        DFGA(MP,N)*RHOMG(MP,N)
            DFB = TORG(MN,NB)*PORD(MN,NB)*SG(MN,NB)*
     &        DFGA(MN,NB)*RHOMG(MN,NB)
            INDX = 12
            DFM = DIFMN( DFB,DFP,DZGF(NB),DZGF(N),DXMGA,INDX )
            WDGA(M,1,N) = DFM*(XMGA(MN,NB)-XMGA(MP,N))/DZGP(1,N)
            FGAP = XGA(MP,N)*RHOG(MP,N)
            FGAB = XGA(MN,NB)*RHOG(MN,NB)
            INDX = 3
            FGA = DIFMN( FGAB,FGAP,DZGF(NB),DZGF(N),WG(1,1,N),INDX )
            WGA(M,1,N) = WG(M,1,N)*FGA + WTMA*WDGA(M,1,N)
          ENDDO
          DO M = 1,ISVF
            WDGA(M,2,NB) = WDGA(M,1,N)
            WGA(M,2,NB) = WGA(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            WDGA(M,1,N) = 0.D+0
            WGA(M,1,N) = 0.D+0
          ENDDO
        ENDIF
      ENDDO
!
!---  End of DFFGA group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DFFGN
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Diffusive N2 gas fluxes on interior surfaces.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 19 October 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE GRID
      USE FLUX
      USE FDVP
      USE FDVH
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      IF( ISLC(2).LT.1 ) RETURN
!
!---  Gas N2 diffusive flux, excluding boundaries
!
      DO N = 1,NFCGC(ID+1)
!
!---    Skip for inactive nodes  ---
!
        IF( IXP(N).EQ.0 ) CYCLE
!
!---    West surface  ---
!
        NW = ICM(3,N)
        IF( NW.NE.0 ) THEN
          DXMGN = XMGN(2,NW) - XMGN(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORG(MP,N)*PORD(MP,N)*SG(MP,N)*
     &        DFGN(MP,N)*RHOMG(MP,N)
            DFW = TORG(MN,NW)*PORD(MN,NW)*SG(MN,NW)*
     &        DFGN(MN,NW)*RHOMG(MN,NW)
            INDX = 12
            DFM = DIFMN( DFW,DFP,DXGF(NW),DXGF(N),DXMGN,INDX )
            UDGN(M,1,N) = DFM*(XMGN(MN,NW)-XMGN(MP,N))/DXGP(1,N)
            FGNP = XGN(MP,N)*RHOG(MP,N)
            FGNW = XGN(MN,NW)*RHOG(MN,NW)
            INDX = 3
            FGN = DIFMN( FGNW,FGNP,DXGF(NW),DXGF(N),UG(1,1,N),INDX )
            UGN(M,1,N) = UG(M,1,N)*FGN + WTMN*UDGN(M,1,N)
          ENDDO  
          DO M = 1,ISVF
            UDGN(M,2,NW) = UDGN(M,1,N)
            UGN(M,2,NW) = UGN(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            UDGN(M,1,N) = 0.D+0
            UGN(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    South surface  ---
!
        NS = ICM(2,N)
        IF( NS.NE.0 ) THEN
          DXMGN = XMGN(2,NS) - XMGN(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORG(MP,N)*PORD(MP,N)*SG(MP,N)*
     &        DFGN(MP,N)*RHOMG(MP,N)
            DFS = TORG(MN,NS)*PORD(MN,NS)*SG(MN,NS)*
     &        DFGN(MN,NS)*RHOMG(MN,NS)
            INDX = 12
            DFM = DIFMN( DFS,DFP,DYGF(NS),DYGF(N),DXMGN,INDX )
            VDGN(M,1,N) = DFM*(XMGN(MN,NS)-XMGN(MP,N))/(DYGP(1,N)*RP(N))
            FGNP = XGN(MP,N)*RHOG(MP,N)
            FGNS = XGN(MN,NS)*RHOG(MN,NS)
            INDX = 3
            FGN = DIFMN( FGNS,FGNP,DYGF(NS),DYGF(N),VG(1,1,N),INDX )
            VGN(M,1,N) = VG(M,1,N)*FGN + WTMN*VDGN(M,1,N)
          ENDDO
          DO M = 1,ISVF
            VDGN(M,2,NS) = VDGN(M,1,N)
            VGN(M,2,NS) = VGN(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            VDGN(M,1,N) = 0.D+0
            VGN(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    Bottom surface  ---
!
        NB = ICM(1,N)
        IF( NB.NE.0 ) THEN
          DXMGN = XMGN(2,NB) - XMGN(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORG(MP,N)*PORD(MP,N)*SG(MP,N)*
     &        DFGN(MP,N)*RHOMG(MP,N)
            DFB = TORG(MN,NB)*PORD(MN,NB)*SG(MN,NB)*
     &        DFGN(MN,NB)*RHOMG(MN,NB)
            INDX = 12
            DFM = DIFMN( DFB,DFP,DZGF(NB),DZGF(N),DXMGN,INDX )
            WDGN(M,1,N) = DFM*(XMGN(MN,NB)-XMGN(MP,N))/DZGP(1,N)
            FGNP = XGN(MP,N)*RHOG(MP,N)
            FGNB = XGN(MN,NB)*RHOG(MN,NB)
            INDX = 3
            FGN = DIFMN( FGNB,FGNP,DZGF(NB),DZGF(N),WG(1,1,N),INDX )
            WGN(M,1,N) = WG(M,1,N)*FGN + WTMN*WDGN(M,1,N)
          ENDDO
          DO M = 1,ISVF
            WDGN(M,2,NB) = WDGN(M,1,N)
            WGN(M,2,NB) = WGN(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            WDGN(M,1,N) = 0.D+0
            WGN(M,1,N) = 0.D+0
          ENDDO
        ENDIF
      ENDDO
!
!---  End of DFFGN group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DFFGO
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Diffusive CH4 gas fluxes on interior surfaces.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 19 October 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE NAPL
      USE GRID
      USE FLUX
      USE FDVP
      USE FDVH
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      IF( ISLC(2).LT.1 ) RETURN
!
!---  Gas CH4 diffusive flux, excluding boundaries
!
      DO N = 1,NFCGC(ID+1)
!
!---    Skip for inactive nodes  ---
!
        IF( IXP(N).EQ.0 ) CYCLE
!
!---    West surface  ---
!
        NW = ICM(3,N)
        IF( NW.NE.0 ) THEN
          DXMGO = XMGO(2,NW) - XMGO(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORG(MP,N)*PORD(MP,N)*SG(MP,N)*
     &        DFGO(MP,N)*RHOMG(MP,N)
            DFW = TORG(MN,NW)*PORD(MN,NW)*SG(MN,NW)*
     &        DFGO(MN,NW)*RHOMG(MN,NW)
            INDX = 12
            DFM = DIFMN( DFW,DFP,DXGF(NW),DXGF(N),DXMGO,INDX )
            UDGO(M,1,N) = DFM*(XMGO(MN,NW)-XMGO(MP,N))/DXGP(1,N)
            FGOP = XGO(MP,N)*RHOG(MP,N)
            FGOW = XGO(MN,NW)*RHOG(MN,NW)
            INDX = 3
            FGO = DIFMN( FGOW,FGOP,DXGF(NW),DXGF(N),UG(1,1,N),INDX )
            UGO(M,1,N) = UG(M,1,N)*FGO + WTMO*UDGO(M,1,N)
          ENDDO  
          DO M = 1,ISVF
            UDGO(M,2,NW) = UDGO(M,1,N)
            UGO(M,2,NW) = UGO(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            UDGO(M,1,N) = 0.D+0
            UGO(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    South surface  ---
!
        NS = ICM(2,N)
        IF( NS.NE.0 ) THEN
          DXMGO = XMGO(2,NS) - XMGO(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORG(MP,N)*PORD(MP,N)*SG(MP,N)*
     &        DFGO(MP,N)*RHOMG(MP,N)
            DFS = TORG(MN,NS)*PORD(MN,NS)*SG(MN,NS)*
     &        DFGO(MN,NS)*RHOMG(MN,NS)
            INDX = 12
            DFM = DIFMN( DFS,DFP,DYGF(NS),DYGF(N),DXMGO,INDX )
            VDGO(M,1,N) = DFM*(XMGO(MN,NS)-XMGO(MP,N))/(DYGP(1,N)*RP(N))
            FGOP = XGO(MP,N)*RHOG(MP,N)
            FGOS = XGO(MN,NS)*RHOG(MN,NS)
            INDX = 3
            FGO = DIFMN( FGOS,FGOP,DYGF(NS),DYGF(N),VG(1,1,N),INDX )
            VGO(M,1,N) = VG(M,1,N)*FGO + WTMO*VDGO(M,1,N)
          ENDDO
          DO M = 1,ISVF
            VDGO(M,2,NS) = VDGO(M,1,N)
            VGO(M,2,NS) = VGO(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            VDGO(M,1,N) = 0.D+0
            VGO(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    Bottom surface  ---
!
        NB = ICM(1,N)
        IF( NB.NE.0 ) THEN
          DXMGO = XMGO(2,NB) - XMGO(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORG(MP,N)*PORD(MP,N)*SG(MP,N)*
     &        DFGO(MP,N)*RHOMG(MP,N)
            DFB = TORG(MN,NB)*PORD(MN,NB)*SG(MN,NB)*
     &        DFGO(MN,NB)*RHOMG(MN,NB)
            INDX = 12
            DFM = DIFMN( DFB,DFP,DZGF(NB),DZGF(N),DXMGO,INDX )
            WDGO(M,1,N) = DFM*(XMGO(MN,NB)-XMGO(MP,N))/DZGP(1,N)
            FGOP = XGO(MP,N)*RHOG(MP,N)
            FGOB = XGO(MN,NB)*RHOG(MN,NB)
            INDX = 3
            FGO = DIFMN( FGOB,FGOP,DZGF(NB),DZGF(N),WG(1,1,N),INDX )
            WGO(M,1,N) = WG(M,1,N)*FGO + WTMO*WDGO(M,1,N)
          ENDDO
          DO M = 1,ISVF
            WDGO(M,2,NB) = WDGO(M,1,N)
            WGO(M,2,NB) = WGO(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            WDGO(M,1,N) = 0.D+0
            WGO(M,1,N) = 0.D+0
          ENDDO
        ENDIF
      ENDDO
!
!---  End of DFFGO group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DFFGW
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Diffusive water gas fluxes on interior surfaces.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 19 October 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE GRID
      USE FLUX
      USE FDVP
      USE FDVH
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      IF( ISLC(2).LT.1 ) RETURN
!
!---  Gas water diffusive flux, excluding boundaries
!
      DO N = 1,NFCGC(ID+1)
!
!---    Skip for inactive nodes  ---
!
        IF( IXP(N).EQ.0 ) CYCLE
!
!---    West surface  ---
!
        NW = ICM(3,N)
        IF( NW.NE.0 ) THEN
          DXMGW = XMGW(2,NW) - XMGW(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORG(MP,N)*PORD(MP,N)*SG(MP,N)*
     &        DFGW(MP,N)*RHOMG(MP,N)
            DFW = TORG(MN,NW)*PORD(MN,NW)*SG(MN,NW)*
     &        DFGW(MN,NW)*RHOMG(MN,NW)
            INDX = 12
            DFM = DIFMN( DFW,DFP,DXGF(NW),DXGF(N),DXMGW,INDX )
            UDGW(M,1,N) = DFM*(XMGW(MN,NW)-XMGW(MP,N))/DXGP(1,N)
            FGWP = XGW(MP,N)*RHOG(MP,N)
            FGWW = XGW(MN,NW)*RHOG(MN,NW)
            INDX = 3
            FGW = DIFMN( FGWW,FGWP,DXGF(NW),DXGF(N),UG(1,1,N),INDX )
            UGW(M,1,N) = UG(M,1,N)*FGW + WTMW*UDGW(M,1,N)
          ENDDO  
          DO M = 1,ISVF
            UDGW(M,2,NW) = UDGW(M,1,N)
            UGW(M,2,NW) = UGW(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            UDGW(M,1,N) = 0.D+0
            UGW(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    South surface  ---
!
        NS = ICM(2,N)
        IF( NS.NE.0 ) THEN
          DXMGW = XMGW(2,NS) - XMGW(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORG(MP,N)*PORD(MP,N)*SG(MP,N)*
     &        DFGW(MP,N)*RHOMG(MP,N)
            DFS = TORG(MN,NS)*PORD(MN,NS)*SG(MN,NS)*
     &        DFGW(MN,NS)*RHOMG(MN,NS)
            INDX = 12
            DFM = DIFMN( DFS,DFP,DYGF(NS),DYGF(N),DXMGW,INDX )
            VDGW(M,1,N) = DFM*(XMGW(MN,NS)-XMGW(MP,N))/(DYGP(1,N)*RP(N))
            FGWP = XGW(MP,N)*RHOG(MP,N)
            FGWS = XGW(MN,NS)*RHOG(MN,NS)
            INDX = 3
            FGW = DIFMN( FGWS,FGWP,DYGF(NS),DYGF(N),VG(1,1,N),INDX )
            VGW(M,1,N) = VG(M,1,N)*FGW + WTMW*VDGW(M,1,N)
          ENDDO
          DO M = 1,ISVF
            VDGW(M,2,NS) = VDGW(M,1,N)
            VGW(M,2,NS) = VGW(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            VDGW(M,1,N) = 0.D+0
            VGW(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    Bottom surface  ---
!
        NB = ICM(1,N)
        IF( NB.NE.0 ) THEN
          DXMGW = XMGW(2,NB) - XMGW(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORG(MP,N)*PORD(MP,N)*SG(MP,N)*
     &        DFGW(MP,N)*RHOMG(MP,N)
            DFB = TORG(MN,NB)*PORD(MN,NB)*SG(MN,NB)*
     &        DFGW(MN,NB)*RHOMG(MN,NB)
            INDX = 12
            DFM = DIFMN( DFB,DFP,DZGF(NB),DZGF(N),DXMGW,INDX )
            WDGW(M,1,N) = DFM*(XMGW(MN,NB)-XMGW(MP,N))/DZGP(1,N)
            FGWP = XGW(MP,N)*RHOG(MP,N)
            FGWB = XGW(MN,NB)*RHOG(MN,NB)
            INDX = 3
            FGW = DIFMN( FGWB,FGWP,DZGF(NB),DZGF(N),WG(1,1,N),INDX )
            WGW(M,1,N) = WG(M,1,N)*FGW + WTMW*WDGW(M,1,N)
          ENDDO
          DO M = 1,ISVF
            WDGW(M,2,NB) = WDGW(M,1,N)
            WGW(M,2,NB) = WGW(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            WDGW(M,1,N) = 0.D+0
            WGW(M,1,N) = 0.D+0
          ENDDO
        ENDIF
      ENDDO
!
!---  End of DFFGW group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DFFLA
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Diffusive O2 aqueous fluxes on interior surfaces.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 19 October 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE GRID
      USE FLUX
      USE FDVP
      USE FDVH
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      IF( ISLC(2).LT.1 ) RETURN
!
!---  Aqueous O2 diffusive flux, excluding boundaries
!
      DO N = 1,NFCGC(ID+1)
!
!---    Skip for inactive nodes  ---
!
        IF( IXP(N).EQ.0 ) CYCLE
!
!---    West surface  ---
!
        NW = ICM(3,N)
        IF( NW.NE.0 ) THEN
          DXMLA = XMLA(2,NW) - XMLA(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORL(MP,N)*PORD(MP,N)*SL(MP,N)*
     &        DFLA(MP,N)*RHOML(MP,N)
            DFW = TORL(MN,NW)*PORD(MN,NW)*SL(MN,NW)*
     &        DFLA(MN,NW)*RHOML(MN,NW)
            INDX = 14
            DFM = DIFMN( DFW,DFP,DXGF(NW),DXGF(N),DXMLA,INDX)
            UDLA(M,1,N) = DFM*(XMLA(MN,NW)-XMLA(MP,N))/DXGP(1,N)
            FLAP = XLA(MP,N)*RHOL(MP,N)
            FLAW = XLA(MN,NW)*RHOL(MN,NW)
            INDX = 2
            FLA = DIFMN( FLAW,FLAP,DXGF(NW),DXGF(N),UL(1,1,N),INDX )
            ULA(M,1,N) = UL(M,1,N)*FLA + WTMA*UDLA(M,1,N)
          ENDDO  
          DO M = 1,ISVF
            UDLA(M,2,NW) = UDLA(M,1,N)
            ULA(M,2,NW) = ULA(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            UDLA(M,1,N) = 0.D+0
            ULA(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    South surface  ---
!
        NS = ICM(2,N)
        IF( NS.NE.0 ) THEN
          DXMLA = XMLA(2,NS) - XMLA(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORL(MP,N)*PORD(MP,N)*SL(MP,N)*
     &        DFLA(MP,N)*RHOML(MP,N)
            DFS = TORL(MN,NS)*PORD(MN,NS)*SL(MN,NS)*
     &        DFLA(MN,NS)*RHOML(MN,NS)
            INDX = 14
            DFM = DIFMN( DFS,DFP,DYGF(NS),DYGF(N),DXMLA,INDX )
            VDLA(M,1,N) = DFM*(XMLA(MN,NS)-XMLA(MP,N))/(DYGP(1,N)*RP(N))
            FLAP = XLA(MP,N)*RHOL(MP,N)
            FLAS = XLA(MN,NS)*RHOL(MN,NS)
            INDX = 2
            FLA = DIFMN( FLAS,FLAP,DYGF(NS),DYGF(N),VL(1,1,N),INDX )
            VLA(M,1,N) = VL(M,1,N)*FLA + WTMA*VDLA(M,1,N)
          ENDDO
          DO M = 1,ISVF
            VDLA(M,2,NS) = VDLA(M,1,N)
            VLA(M,2,NS) = VLA(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            VDLA(M,1,N) = 0.D+0
            VLA(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    Bottom surface  ---
!
        NB = ICM(1,N)
        IF( NB.NE.0 ) THEN
          DXMLA = XMLA(2,NB) - XMLA(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORL(MP,N)*PORD(MP,N)*SL(MP,N)*
     &        DFLA(MP,N)*RHOML(MP,N)
            DFB = TORL(MN,NB)*PORD(MN,NB)*SL(MN,NB)*
     &        DFLA(MN,NB)*RHOML(MN,NB)
            INDX = 14
            DFM = DIFMN( DFB,DFP,DZGF(NB),DZGF(N),DXMLA,INDX )
            WDLA(M,1,N) = DFM*(XMLA(MN,NB)-XMLA(MP,N))/DZGP(1,N)
            FLAP = XLA(MP,N)*RHOL(MP,N)
            FLAB = XLA(MN,NB)*RHOL(MN,NB)
            INDX = 2
            FLA = DIFMN( FLAB,FLAP,DZGF(NB),DZGF(N),WL(1,1,N),INDX )
            WLA(M,1,N) = WL(M,1,N)*FLA + WTMA*WDLA(M,1,N)
          ENDDO
          DO M = 1,ISVF
            WDLA(M,2,NB) = WDLA(M,1,N)
            WLA(M,2,NB) = WLA(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            WDLA(M,1,N) = 0.D+0
            WLA(M,1,N) = 0.D+0
          ENDDO
        ENDIF
      ENDDO
!
!---  End of DFFLA group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DFFLN
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Diffusive N2 aqueous fluxes on interior surfaces.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 19 October 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE GRID
      USE FLUX
      USE FDVP
      USE FDVH
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      IF( ISLC(2).LT.1 ) RETURN
!
!---  Aqueous diffusive flux, excluding boundaries
!
      DO N = 1,NFCGC(ID+1)
!
!---    Skip for inactive nodes  ---
!
        IF( IXP(N).EQ.0 ) CYCLE
!
!---    West surface  ---
!
        NW = ICM(3,N)
        IF( NW.NE.0 ) THEN
          DXMLN = XMLN(2,NW) - XMLN(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORL(MP,N)*PORD(MP,N)*SL(MP,N)*
     &        DFLN(MP,N)*RHOML(MP,N)
            DFW = TORL(MN,NW)*PORD(MN,NW)*SL(MN,NW)*
     &        DFLN(MN,NW)*RHOML(MN,NW)
            INDX = 14
            DFM = DIFMN( DFW,DFP,DXGF(NW),DXGF(N),DXMLN,INDX )
            UDLN(M,1,N) = DFM*(XMLN(MN,NW)-XMLN(MP,N))/DXGP(1,N)
            FLNP = XLN(MP,N)*RHOL(MP,N)
            FLNW = XLN(MN,NW)*RHOL(MN,NW)
            INDX = 2
            FLN = DIFMN( FLNW,FLNP,DXGF(NW),DXGF(N),UL(1,1,N),INDX )
            ULN(M,1,N) = UL(M,1,N)*FLN + WTMN*UDLN(M,1,N)
          ENDDO  
          DO M = 1,ISVF
            UDLN(M,2,NW) = UDLN(M,1,N)
            ULN(M,2,NW) = ULN(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            UDLN(M,1,N) = 0.D+0
            ULN(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    South surface  ---
!
        NS = ICM(2,N)
        IF( NS.NE.0 ) THEN
          DXMLN = XMLN(2,NS) - XMLN(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORL(MP,N)*PORD(MP,N)*SL(MP,N)*
     &        DFLN(MP,N)*RHOML(MP,N)
            DFS = TORL(MN,NS)*PORD(MN,NS)*SL(MN,NS)*
     &        DFLN(MN,NS)*RHOML(MN,NS)
            INDX = 14
            DFM = DIFMN( DFS,DFP,DYGF(NS),DYGF(N),DXMLN,INDX )
            VDLN(M,1,N) = DFM*(XMLN(MN,NS)-XMLN(MP,N))/(DYGP(1,N)*RP(N))
            FLNP = XLN(MP,N)*RHOL(MP,N)
            FLNS = XLN(MN,NS)*RHOL(MN,NS)
            INDX = 2
            FLN = DIFMN( FLNS,FLNP,DYGF(NS),DYGF(N),VL(1,1,N),INDX )
            VLN(M,1,N) = VL(M,1,N)*FLN + WTMN*VDLN(M,1,N)
          ENDDO
          DO M = 1,ISVF
            VDLN(M,2,NS) = VDLN(M,1,N)
            VLN(M,2,NS) = VLN(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            VDLN(M,1,N) = 0.D+0
            VLN(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    Bottom surface  ---
!
        NB = ICM(1,N)
        IF( NB.NE.0 ) THEN
          DXMLN = XMLN(2,NB) - XMLN(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORL(MP,N)*PORD(MP,N)*SL(MP,N)*
     &        DFLN(MP,N)*RHOML(MP,N)
            DFB = TORL(MN,NB)*PORD(MN,NB)*SL(MN,NB)*
     &        DFLN(MN,NB)*RHOML(MN,NB)
            INDX = 14
            DFM = DIFMN( DFB,DFP,DZGF(NB),DZGF(N),DXMLN,INDX )
            WDLN(M,1,N) = DFM*(XMLN(MN,NB)-XMLN(MP,N))/DZGP(1,N)
            FLNP = XLN(MP,N)*RHOL(MP,N)
            FLNB = XLN(MN,NB)*RHOL(MN,NB)
            INDX = 2
            FLN = DIFMN( FLNB,FLNP,DZGF(NB),DZGF(N),WL(1,1,N),INDX )
            WLN(M,1,N) = WL(M,1,N)*FLN + WTMN*WDLN(M,1,N)
          ENDDO
          DO M = 1,ISVF
            WDLN(M,2,NB) = WDLN(M,1,N)
            WLN(M,2,NB) = WLN(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            WDLN(M,1,N) = 0.D+0
            WLN(M,1,N) = 0.D+0
          ENDDO
        ENDIF
      ENDDO
!
!---  End of DFFLN group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DFFLO
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Diffusive CH4 aqueous fluxes on interior surfaces.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 19 October 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE NAPL
      USE GRID
      USE FLUX
      USE FDVP
      USE FDVH
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      IF( ISLC(2).LT.1 ) RETURN
!
!---  Aqueous CH4 diffusive flux, excluding boundaries
!
      DO N = 1,NFCGC(ID+1)
!
!---    Skip for inactive nodes  ---
!
        IF( IXP(N).EQ.0 ) CYCLE
!
!---    West surface  ---
!
        NW = ICM(3,N)
        IF( NW.NE.0 ) THEN
          DXMLO = XMLO(2,NW) - XMLO(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORL(MP,N)*PORD(MP,N)*SL(MP,N)*
     &        DFLO(MP,N)*RHOML(MP,N)
            DFW = TORL(MN,NW)*PORD(MN,NW)*SL(MN,NW)*
     &        DFLO(MN,NW)*RHOML(MN,NW)
            INDX = 14
            DFM = DIFMN( DFW,DFP,DXGF(NW),DXGF(N),DXMLO,INDX )
            UDLO(M,1,N) = DFM*(XMLO(MN,NW)-XMLO(MP,N))/DXGP(1,N)
            FLOP = XLO(MP,N)*RHOL(MP,N)
            FLOW = XLO(MN,NW)*RHOL(MN,NW)
            INDX = 2
            FLO = DIFMN( FLOW,FLOP,DXGF(NW),DXGF(N),UL(1,1,N),INDX )
            ULO(M,1,N) = UL(M,1,N)*FLO + WTMO*UDLO(M,1,N)
          ENDDO  
          DO M = 1,ISVF
            UDLO(M,2,NW) = UDLO(M,1,N)
            ULO(M,2,NW) = ULO(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            UDLO(M,1,N) = 0.D+0
            ULO(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    South surface  ---
!
        NS = ICM(2,N)
        IF( NS.NE.0 ) THEN
          DXMLO = XMLO(2,NS) - XMLO(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORL(MP,N)*PORD(MP,N)*SL(MP,N)*
     &        DFLO(MP,N)*RHOML(MP,N)
            DFS = TORL(MN,NS)*PORD(MN,NS)*SL(MN,NS)*
     &        DFLO(MN,NS)*RHOML(MN,NS)
            INDX = 14
            DFM = DIFMN( DFS,DFP,DYGF(NS),DYGF(N),DXMLO,INDX )
            VDLO(M,1,N) = DFM*(XMLO(MN,NS)-XMLO(MP,N))/(DYGP(1,N)*RP(N))
            FLOP = XLO(MP,N)*RHOL(MP,N)
            FLOS = XLO(MN,NS)*RHOL(MN,NS)
            INDX = 2
            FLO = DIFMN( FLOS,FLOP,DYGF(NS),DYGF(N),VL(1,1,N),INDX )
            VLO(M,1,N) = VL(M,1,N)*FLO + WTMO*VDLO(M,1,N)
          ENDDO
          DO M = 1,ISVF
            VDLO(M,2,NS) = VDLO(M,1,N)
            VLO(M,2,NS) = VLO(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            VDLO(M,1,N) = 0.D+0
            VLO(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    Bottom surface  ---
!
        NB = ICM(1,N)
        IF( NB.NE.0 ) THEN
          DXMLO = XMLO(2,NB) - XMLO(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORL(MP,N)*PORD(MP,N)*SL(MP,N)*
     &        DFLO(MP,N)*RHOML(MP,N)
            DFB = TORL(MN,NB)*PORD(MN,NB)*SL(MN,NB)*
     &        DFLO(MN,NB)*RHOML(MN,NB)
            INDX = 14
            DFM = DIFMN( DFB,DFP,DZGF(NB),DZGF(N),DXMLO,INDX )
            WDLO(M,1,N) = DFM*(XMLO(MN,NB)-XMLO(MP,N))/DZGP(1,N)
            FLOP = XLO(MP,N)*RHOL(MP,N)
            FLOB = XLO(MN,NB)*RHOL(MN,NB)
            INDX = 2
            FLO = DIFMN( FLOB,FLOP,DZGF(NB),DZGF(N),WL(1,1,N),INDX )
            WLO(M,1,N) = WL(M,1,N)*FLO + WTMO*WDLO(M,1,N)
          ENDDO
          DO M = 1,ISVF
            WDLO(M,2,NB) = WDLO(M,1,N)
            WLO(M,2,NB) = WLO(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            WDLO(M,1,N) = 0.D+0
            WLO(M,1,N) = 0.D+0
          ENDDO
        ENDIF
      ENDDO
!
!---  End of DFFLO group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DFFLS
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Diffusive salt/inhibitor aqueous fluxes on interior surfaces.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 19 October 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE GRID
      USE FLUX
      USE FDVP
      USE FDVH
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      IF( ISLC(2).LT.1 ) RETURN
!
!---  Aqueous salt/inhibitor diffusive flux, excluding boundaries
!
      DO N = 1,NFCGC(ID+1)
!
!---    Skip for inactive nodes  ---
!
        IF( IXP(N).EQ.0 ) CYCLE
!
!---    West surface  ---
!
        NW = ICM(3,N)
        IF( NW.NE.0 ) THEN
          DXMLS = XMLS(2,NW) - XMLS(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
!
!---        Diffusion coefficients  ---
!
            TCOR = (T(MP,N)+TABS)/TSPRF
            SMDLP = DFLS(MP,N)*TCOR*(VISRL/VISL(MP,N))
            DFCLP = TORL(MP,N)*SL(MP,N)*PORD(MP,N)*SMDLP
            TCOR = (T(MN,NW)+TABS)/TSPRF
            SMDLP = DFLS(MN,NW)*TCOR*(VISRL/VISL(MN,NW))
            DFCLW = TORL(MN,NW)*SL(MN,NW)*PORD(MN,NW)*SMDLP
            INDX = 18
            DFCLW = DIFMN(DFCLW,DFCLP,DXGF(NW),DXGF(N),UL(1,1,N),INDX)
!
!---        Salt aqueous flux by advection and diffusion  ---
!
            DDLW = DFCLW/DXGP(1,N)
            AL = MAX( UL(M,1,N),ZERO ) +
     &        DDLW*MAX((ONE-(TENTH*ABS(UL(M,1,N))/
     &        (DDLW+SMALL)))**5,ZERO)
            ALP = MAX( -UL(M,1,N),ZERO ) +
     &        DDLW*MAX((ONE-(TENTH*ABS(UL(M,1,N))/
     &        (DDLW+SMALL)))**5,ZERO)
            US(M,1,N) = XLS(MN,NW)*RHOL(MN,NW)*AL -
     &        XLS(MP,N)*RHOL(MP,N)*ALP
            UDS(M,1,N) = DDLW*(XLS(MN,NW)*RHOL(MN,NW) -
     &        XLS(MP,N)*RHOL(MP,N))
          ENDDO  
          DO M = 1,ISVF
            UDS(M,2,NW) = UDS(M,1,N)
            US(M,2,NW) = US(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            UDS(M,1,N) = 0.D+0
            US(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    South surface  ---
!
        NS = ICM(2,N)
        IF( NS.NE.0 ) THEN
          DXMLS = XMLS(2,NS) - XMLS(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
!
!---        Diffusion coefficients  ---
!
            TCOR = (T(MP,N)+TABS)/TSPRF
            SMDLP = DFLS(MP,N)*TCOR*(VISRL/VISL(MP,N))
            DFCLP = TORL(MP,N)*SL(MP,N)*PORD(MP,N)*SMDLP
            TCOR = (T(MN,NS)+TABS)/TSPRF
            SMDLP = DFLS(MN,NS)*TCOR*(VISRL/VISL(MN,NS))
            DFCLS = TORL(MN,NS)*SL(MN,NS)*PORD(MN,NS)*SMDLP
            INDX = 18
            DFCLS = DIFMN(DFCLS,DFCLP,DYGF(NS),DYGF(N),VL(1,1,N),INDX)
!
!---        Salt aqueous flux by advection and diffusion  ---
!
            DDLS = DFCLS/(DYGP(1,N)*RP(N))
            AL = MAX( VL(M,1,N),ZERO ) +
     &        DDLS*MAX((ONE-(TENTH*ABS(VL(M,1,N))/
     &        (DDLS+SMALL)))**5,ZERO)
            ALP = MAX( -VL(M,1,N),ZERO ) +
     &        DDLS*MAX((ONE-(TENTH*ABS(VL(M,1,N))/
     &        (DDLS+SMALL)))**5,ZERO)
            VS(M,1,N) = (XLS(MN,NS)*RHOL(MN,NS)*AL -
     &        XLS(MP,N)*RHOL(MP,N)*ALP)
            VDS(M,1,N) = DDLS*(XLS(MN,NS)*RHOL(MN,NS) -
     &        XLS(MP,N)*RHOL(MP,N))
          ENDDO
          DO M = 1,ISVF
            VDS(M,2,NS) = VDS(M,1,N)
            VS(M,2,NS) = VS(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            VDS(M,1,N) = 0.D+0
            VS(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    Bottom surface  ---
!
        NB = ICM(1,N)
        IF( NB.NE.0 ) THEN
          DXMLS = XMLS(2,NB) - XMLS(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
!
!---        Diffusion coefficients  ---
!
            TCOR = (T(MP,N)+TABS)/TSPRF
            SMDLP = DFLS(MP,N)*TCOR*(VISRL/VISL(MP,N))
            DFCLP = TORL(MP,N)*SL(MP,N)*PORD(MP,N)*SMDLP
            TCOR = (T(MN,NB)+TABS)/TSPRF
            SMDLP = DFLS(MN,NB)*TCOR*(VISRL/VISL(MN,NB))
            DFCLB = TORL(MN,NB)*SL(MN,NB)*PORD(MN,NB)*SMDLP
            INDX = 18
            DFCLB = DIFMN(DFCLB,DFCLP,DZGF(NB),DZGF(N),WL(1,1,N),INDX)
!
!---        Salt aqueous flux by advection and diffusion  ---
!
            DDLB = DFCLB/DZGP(1,N)
            AL = MAX( WL(M,1,N),ZERO ) +
     &        DDLB*MAX((ONE-(TENTH*ABS(WL(M,1,N))/
     &        (DDLB+SMALL)))**5,ZERO)
            ALP = MAX( -WL(M,1,N),ZERO ) +
     &        DDLB*MAX((ONE-(TENTH*ABS(WL(M,1,N))/
     &        (DDLB+SMALL)))**5,ZERO)
            WS(M,1,N) = (XLS(MN,NB)*RHOL(MN,NB)*AL -
     &        XLS(MP,N)*RHOL(MP,N)*ALP)
            WDS(M,1,N) = DDLB*(XLS(MN,NB)*RHOL(MN,NB) -
     &        XLS(MP,N)*RHOL(MP,N))
          ENDDO
          DO M = 1,ISVF
            WDS(M,2,NB) = WDS(M,1,N)
            WS(M,2,NB) = WS(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            WDS(M,1,N) = 0.D+0
            WS(M,1,N) = 0.D+0
          ENDDO
        ENDIF
      ENDDO
!
!---  End of DFFLS group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DFFLW
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Diffusive water aqueous fluxes on interior surfaces.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 19 October 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE GRID
      USE FLUX
      USE FDVP
      USE FDVH
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      IF( ISLC(2).LT.1 ) RETURN
!
!---  Aqueous water diffusive flux, excluding boundaries
!
      DO N = 1,NFCGC(ID+1)
!
!---    Skip for inactive nodes  ---
!
        IF( IXP(N).EQ.0 ) CYCLE
!
!---    West surface  ---
!
        NW = ICM(3,N)
        IF( NW.NE.0 ) THEN
          DXMLW = XMLW(2,NW) - XMLW(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            UDLW(M,1,N) = -(UDLA(M,1,N) + UDLO(M,1,N) + UDLN(M,1,N)
     &        + UDS(M,1,N)/WTMS)
            FLWP = XLW(MP,N)*RHOL(MP,N)
            FLWW = XLW(MN,NW)*RHOL(MN,NW)
            INDX = 2
            FLW = DIFMN( FLWW,FLWP,DXGF(NW),DXGF(N),UL(1,1,N),INDX )
            ULW(M,1,N) = UL(M,1,N)*FLW + WTMW*UDLW(M,1,N)
          ENDDO  
          DO M = 1,ISVF
            UDLW(M,2,NW) = UDLW(M,1,N)
            ULW(M,2,NW) = ULW(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            UDLW(M,1,N) = 0.D+0
            ULW(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    South surface  ---
!
        NS = ICM(2,N)
        IF( NS.NE.0 ) THEN
          DXMLW = XMLW(2,NS) - XMLW(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            VDLW(M,1,N) = -(VDLA(M,1,N) + VDLO(M,1,N) + VDLN(M,1,N)
     &        + VDS(M,1,N)/WTMS)
            FLWP = XLW(MP,N)*RHOL(MP,N)
            FLWS = XLW(MN,NS)*RHOL(MN,NS)
            INDX = 2
            FLW = DIFMN( FLWS,FLWP,DYGF(NS),DYGF(N),VL(1,1,N),INDX )
            VLW(M,1,N) = VL(M,1,N)*FLW + WTMW*VDLW(M,1,N)
          ENDDO
          DO M = 1,ISVF
            VDLW(M,2,NS) = VDLW(M,1,N)
            VLW(M,2,NS) = VLW(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            VDLW(M,1,N) = 0.D+0
            VLW(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    Bottom surface  ---
!
        NB = ICM(1,N)
        IF( NB.NE.0 ) THEN
          DXMLW = XMLW(2,NB) - XMLW(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            WDLW(M,1,N) = -(WDLA(M,1,N) + WDLO(M,1,N) + WDLN(M,1,N)
     &        + WDS(M,1,N)/WTMS)
            FLWP = XLW(MP,N)*RHOL(MP,N)
            FLWB = XLW(MN,NB)*RHOL(MN,NB)
            INDX = 2
            FLW = DIFMN( FLWB,FLWP,DZGF(NB),DZGF(N),WL(1,1,N),INDX )
            WLW(M,1,N) = WL(M,1,N)*FLW + WTMW*WDLW(M,1,N)
          ENDDO
          DO M = 1,ISVF
            WDLW(M,2,NB) = WDLW(M,1,N)
            WLW(M,2,NB) = WLW(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            WDLW(M,1,N) = 0.D+0
            WLW(M,1,N) = 0.D+0
          ENDDO
        ENDIF
      ENDDO
!
!---  End of DFFLW group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DFFNA
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Diffusive O2 nonaqueous liquid fluxes on interior surfaces.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 19 October 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE GRID
      USE FLUX
      USE FDVP
      USE FDVH
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      IF( ISLC(2).LT.1 ) RETURN
!
!---  Nonaqueous O2 diffusive flux, excluding boundaries
!
      DO N = 1,NFCGC(ID+1)
!
!---    Skip for inactive nodes  ---
!
        IF( IXP(N).EQ.0 ) CYCLE
!
!---    West surface  ---
!
        NW = ICM(3,N)
        IF( NW.NE.0 ) THEN
          DXMNA = XMNA(2,NW) - XMNA(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORN(MP,N)*PORD(MP,N)*SN(MP,N)*
     &        DFNA(MP,N)*RHOMN(MP,N)
            DFW = TORN(MN,NW)*PORD(MN,NW)*SN(MN,NW)*
     &        DFNA(MN,NW)*RHOMN(MN,NW)
            INDX = 20
            DFM = DIFMN( DFW,DFP,DXGF(NW),DXGF(N),DXMNA,INDX )
            UDNA(M,1,N) = DFM*(XMNA(MN,NW)-XMNA(MP,N))/DXGP(1,N)
            FNAP = XNA(MP,N)*RHON(MP,N)
            FNAW = XNA(MN,NW)*RHON(MN,NW)
            INDX = 4
            FNA = DIFMN( FNAW,FNAP,DXGF(NW),DXGF(N),UN(1,1,N),INDX )
            UNA(M,1,N) = UN(M,1,N)*FNA + WTMA*UDNA(M,1,N)
          ENDDO  
          DO M = 1,ISVF
            UDNA(M,2,NW) = UDNA(M,1,N)
            UNA(M,2,NW) = UNA(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            UDNA(M,1,N) = 0.D+0
            UNA(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    South surface  ---
!
        NS = ICM(2,N)
        IF( NS.NE.0 ) THEN
          DXMNA = XMNA(2,NS) - XMNA(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORN(MP,N)*PORD(MP,N)*SN(MP,N)*
     &        DFNA(MP,N)*RHOMN(MP,N)
            DFS = TORN(MN,NS)*PORD(MN,NS)*SN(MN,NS)*
     &        DFNA(MN,NS)*RHOMN(MN,NS)
            INDX = 20
            DFM = DIFMN( DFS,DFP,DYGF(NS),DYGF(N),DXMNA,INDX )
            VDNA(M,1,N) = DFM*(XMNA(MN,NS)-XMNA(MP,N))/(DYGP(1,N)*RP(N))
            FNAP = XNA(MP,N)*RHON(MP,N)
            FNAS = XNA(MN,NS)*RHON(MN,NS)
            INDX = 4
            FNA = DIFMN( FNAS,FNAP,DYGF(NS),DYGF(N),VN(1,1,N),INDX )
            VNA(M,1,N) = VN(M,1,N)*FNA + WTMA*VDNA(M,1,N)
          ENDDO
          DO M = 1,ISVF
            VDNA(M,2,NS) = VDNA(M,1,N)
            VNA(M,2,NS) = VNA(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            VDNA(M,1,N) = 0.D+0
            VNA(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    Bottom surface  ---
!
        NB = ICM(1,N)
        IF( NB.NE.0 ) THEN
          DXMNA = XMNA(2,NB) - XMNA(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORN(MP,N)*PORD(MP,N)*SN(MP,N)*
     &        DFNA(MP,N)*RHOMN(MP,N)
            DFB = TORN(MN,NB)*PORD(MN,NB)*SN(MN,NB)*
     &        DFNA(MN,NB)*RHOMN(MN,NB)
            INDX = 20
            DFM = DIFMN( DFB,DFP,DZGF(NB),DZGF(N),DXMNA,INDX )
            WDNA(M,1,N) = DFM*(XMNA(MN,NB)-XMNA(MP,N))/DZGP(1,N)
            FNAP = XNA(MP,N)*RHON(MP,N)
            FNAB = XNA(MN,NB)*RHON(MN,NB)
            INDX = 4
            FNA = DIFMN( FNAB,FNAP,DZGF(NB),DZGF(N),WN(1,1,N),INDX )
            WNA(M,1,N) = WN(M,1,N)*FNA + WTMA*WDNA(M,1,N)
          ENDDO
          DO M = 1,ISVF
            WDNA(M,2,NB) = WDNA(M,1,N)
            WNA(M,2,NB) = WNA(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            WDNA(M,1,N) = 0.D+0
            WNA(M,1,N) = 0.D+0
          ENDDO
        ENDIF
      ENDDO
!
!---  End of DFFNA group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DFFNN
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Diffusive N2 nonaqueous liquid fluxes on interior surfaces.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 19 October 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE GRID
      USE FLUX
      USE FDVP
      USE FDVH
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      IF( ISLC(2).LT.1 ) RETURN
!
!---  Nonaqueous liquid N2 diffusive flux, excluding boundaries
!
      DO N = 1,NFCGC(ID+1)
!
!---    Skip for inactive nodes  ---
!
        IF( IXP(N).EQ.0 ) CYCLE
!
!---    West surface  ---
!
        NW = ICM(3,N)
        IF( NW.NE.0 ) THEN
          DXMNN = XMNN(2,NW) - XMNN(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORN(MP,N)*PORD(MP,N)*SN(MP,N)*
     &        DFNN(MP,N)*RHOMN(MP,N)
            DFW = TORN(MN,NW)*PORD(MN,NW)*SN(MN,NW)*
     &        DFNN(MN,NW)*RHOMN(MN,NW)
            INDX = 20
            DFM = DIFMN( DFW,DFP,DXGF(NW),DXGF(N),DXMNN,INDX )
            UDNN(M,1,N) = DFM*(XMNN(MN,NW)-XMNN(MP,N))/DXGP(1,N)
            FNNP = XNN(MP,N)*RHON(MP,N)
            FNNW = XNN(MN,NW)*RHON(MN,NW)
            INDX = 4
            FNN = DIFMN( FNNW,FNNP,DXGF(NW),DXGF(N),UN(1,1,N),INDX )
            UNN(M,1,N) = UN(M,1,N)*FNN + WTMN*UDNN(M,1,N)
          ENDDO  
          DO M = 1,ISVF
            UDNN(M,2,NW) = UDNN(M,1,N)
            UNN(M,2,NW) = UNN(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            UDNN(M,1,N) = 0.D+0
            UNN(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    South surface  ---
!
        NS = ICM(2,N)
        IF( NS.NE.0 ) THEN
          DXMNN = XMNN(2,NS) - XMNN(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORN(MP,N)*PORD(MP,N)*SN(MP,N)*
     &        DFNN(MP,N)*RHOMN(MP,N)
            DFS = TORN(MN,NS)*PORD(MN,NS)*SN(MN,NS)*
     &        DFNN(MN,NS)*RHOMN(MN,NS)
            INDX = 20
            DFM = DIFMN( DFS,DFP,DYGF(NS),DYGF(N),DXMNN,INDX )
            VDNN(M,1,N) = DFM*(XMNN(MN,NS)-XMNN(MP,N))/(DYGP(1,N)*RP(N))
            FNNP = XNN(MP,N)*RHON(MP,N)
            FNNS = XNN(MN,NS)*RHON(MN,NS)
            INDX = 4
            FNN = DIFMN( FNNS,FNNP,DYGF(NS),DYGF(N),VN(1,1,N),INDX )
            VNN(M,1,N) = VN(M,1,N)*FNN + WTMN*VDNN(M,1,N)
          ENDDO
          DO M = 1,ISVF
            VDNN(M,2,NS) = VDNN(M,1,N)
            VNN(M,2,NS) = VNN(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            VDNN(M,1,N) = 0.D+0
            VNN(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    Bottom surface  ---
!
        NB = ICM(1,N)
        IF( NB.NE.0 ) THEN
          DXMNN = XMNN(2,NB) - XMNN(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORN(MP,N)*PORD(MP,N)*SN(MP,N)*
     &        DFNN(MP,N)*RHOMN(MP,N)
            DFB = TORN(MN,NB)*PORD(MN,NB)*SN(MN,NB)*
     &        DFNN(MN,NB)*RHOMN(MN,NB)
            INDX = 20
            DFM = DIFMN( DFB,DFP,DZGF(NB),DZGF(N),DXMNN,INDX )
            WDNN(M,1,N) = DFM*(XMNN(MN,NB)-XMNN(MP,N))/DZGP(1,N)
            FNNP = XNN(MP,N)*RHON(MP,N)
            FNNB = XNN(MN,NB)*RHON(MN,NB)
            INDX = 4
            FNN = DIFMN( FNNB,FNNP,DZGF(NB),DZGF(N),WN(1,1,N),INDX )
            WNN(M,1,N) = WN(M,1,N)*FNN + WTMN*WDNN(M,1,N)
          ENDDO
          DO M = 1,ISVF
            WDNN(M,2,NB) = WDNN(M,1,N)
            WNN(M,2,NB) = WNN(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            WDNN(M,1,N) = 0.D+0
            WNN(M,1,N) = 0.D+0
          ENDDO
        ENDIF
      ENDDO
!
!---  End of DFFNN group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DFFNO
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Diffusive CH4 nonaqueous liquid fluxes on interior surfaces.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 19 October 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE NAPL
      USE GRID
      USE FLUX
      USE FDVP
      USE FDVH
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      IF( ISLC(2).LT.1 ) RETURN
!
!---  Nonaqueous liquid CH4 diffusive flux, excluding boundaries
!
      DO N = 1,NFCGC(ID+1)
!
!---    Skip for inactive nodes  ---
!
        IF( IXP(N).EQ.0 ) CYCLE
!
!---    West surface  ---
!
        NW = ICM(3,N)
        IF( NW.NE.0 ) THEN
          DXMNO = XMNO(2,NW) - XMNO(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORN(MP,N)*PORD(MP,N)*SN(MP,N)*
     &        DFNO(MP,N)*RHOMN(MP,N)
            DFW = TORN(MN,NW)*PORD(MN,NW)*SN(MN,NW)*
     &        DFNO(MN,NW)*RHOMN(MN,NW)
            INDX = 20
            DFM = DIFMN( DFW,DFP,DXGF(NW),DXGF(N),DXMNO,INDX )
            UDNO(M,1,N) = DFM*(XMNO(MN,NW)-XMNO(MP,N))/DXGP(1,N)
            FNOP = XNO(MP,N)*RHON(MP,N)
            FNOW = XNO(MN,NW)*RHON(MN,NW)
            INDX = 4
            FNO = DIFMN( FNOW,FNOP,DXGF(NW),DXGF(N),UN(1,1,N),INDX )
            UNO(M,1,N) = UN(M,1,N)*FNO + WTMO*UDNO(M,1,N)
          ENDDO  
          DO M = 1,ISVF
            UDNO(M,2,NW) = UDNO(M,1,N)
            UNO(M,2,NW) = UNO(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            UDNO(M,1,N) = 0.D+0
            UNO(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    South surface  ---
!
        NS = ICM(2,N)
        IF( NS.NE.0 ) THEN
          DXMNO = XMNO(2,NS) - XMNO(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORN(MP,N)*PORD(MP,N)*SN(MP,N)*
     &        DFNO(MP,N)*RHOMN(MP,N)
            DFS = TORN(MN,NS)*PORD(MN,NS)*SN(MN,NS)*
     &        DFNO(MN,NS)*RHOMN(MN,NS)
            INDX = 20
            DFM = DIFMN( DFS,DFP,DYGF(NS),DYGF(N),DXMNO,INDX )
            VDNO(M,1,N) = DFM*(XMNO(MN,NS)-XMNO(MP,N))/(DYGP(1,N)*RP(N))
            FNOP = XNO(MP,N)*RHON(MP,N)
            FNOS = XNO(MN,NS)*RHON(MN,NS)
            INDX = 4
            FNO = DIFMN( FNOS,FNOP,DYGF(NS),DYGF(N),VN(1,1,N),INDX )
            VNO(M,1,N) = VN(M,1,N)*FNO + WTMO*VDNO(M,1,N)
          ENDDO
          DO M = 1,ISVF
            VDNO(M,2,NS) = VDNO(M,1,N)
            VNO(M,2,NS) = VNO(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            VDNO(M,1,N) = 0.D+0
            VNO(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    Bottom surface  ---
!
        NB = ICM(1,N)
        IF( NB.NE.0 ) THEN
          DXMNO = XMNO(2,NB) - XMNO(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORN(MP,N)*PORD(MP,N)*SN(MP,N)*
     &        DFNO(MP,N)*RHOMN(MP,N)
            DFB = TORN(MN,NB)*PORD(MN,NB)*SN(MN,NB)*
     &        DFNO(MN,NB)*RHOMN(MN,NB)
            INDX = 20
            DFM = DIFMN( DFB,DFP,DZGF(NB),DZGF(N),DXMNO,INDX )
            WDNO(M,1,N) = DFM*(XMNO(MN,NB)-XMNO(MP,N))/DZGP(1,N)
            FNOP = XNO(MP,N)*RHON(MP,N)
            FNOB = XNO(MN,NB)*RHON(MN,NB)
            INDX = 4
            FNO = DIFMN( FNOB,FNOP,DZGF(NB),DZGF(N),WN(1,1,N),INDX )
            WNO(M,1,N) = WN(M,1,N)*FNO + WTMO*WDNO(M,1,N)
          ENDDO
          DO M = 1,ISVF
            WDNO(M,2,NB) = WDNO(M,1,N)
            WNO(M,2,NB) = WNO(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            WDNO(M,1,N) = 0.D+0
            WNO(M,1,N) = 0.D+0
          ENDDO
        ENDIF
      ENDDO
!
!---  End of DFFNO group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DFFNW
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Diffusive water nonaqueous liquid fluxes on interior surfaces.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 19 October 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE GRID
      USE FLUX
      USE FDVP
      USE FDVH
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      IF( ISLC(2).LT.1 ) RETURN
!
!---  Nonaqueous liquid water diffusive flux, excluding boundaries
!
      DO N = 1,NFCGC(ID+1)
!
!---    Skip for inactive nodes  ---
!
        IF( IXP(N).EQ.0 ) CYCLE
!
!---    West surface  ---
!
        NW = ICM(3,N)
        IF( NW.NE.0 ) THEN
          DXMNW = XMNW(2,NW) - XMNW(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORN(MP,N)*PORD(MP,N)*SN(MP,N)*
     &        DFNW(MP,N)*RHOMN(MP,N)
            DFW = TORN(MN,NW)*PORD(MN,NW)*SN(MN,NW)*
     &        DFNW(MN,NW)*RHOMN(MN,NW)
            INDX = 20
            DFM = DIFMN( DFW,DFP,DXGF(NW),DXGF(N),DXMNW,INDX )
            UDNW(M,1,N) = DFM*(XMNW(MN,NW)-XMNW(MP,N))/DXGP(1,N)
            FNWP = XNW(MP,N)*RHON(MP,N)
            FNWW = XNW(MN,NW)*RHON(MN,NW)
            INDX = 4
            FNW = DIFMN( FNWW,FNWP,DXGF(NW),DXGF(N),UN(1,1,N),INDX )
            UNW(M,1,N) = UN(M,1,N)*FNW + WTMW*UDNW(M,1,N)
          ENDDO  
          DO M = 1,ISVF
            UDNW(M,2,NW) = UDNW(M,1,N)
            UNW(M,2,NW) = UNW(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            UDNW(M,1,N) = 0.D+0
            UNW(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    South surface  ---
!
        NS = ICM(2,N)
        IF( NS.NE.0 ) THEN
          DXMNW = XMNW(2,NS) - XMNW(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORN(MP,N)*PORD(MP,N)*SN(MP,N)*
     &        DFNW(MP,N)*RHOMN(MP,N)
            DFS = TORN(MN,NS)*PORD(MN,NS)*SN(MN,NS)*
     &        DFNW(MN,NS)*RHOMN(MN,NS)
            INDX = 20
            DFM = DIFMN( DFS,DFP,DYGF(NS),DYGF(N),DXMNW,INDX )
            VDNW(M,1,N) = DFM*(XMNW(MN,NS)-XMNW(MP,N))/(DYGP(1,N)*RP(N))
            FNWP = XNW(MP,N)*RHON(MP,N)
            FNWS = XNW(MN,NS)*RHON(MN,NS)
            INDX = 4
            FNW = DIFMN( FNWS,FNWP,DYGF(NS),DYGF(N),VN(1,1,N),INDX )
            VNW(M,1,N) = VN(M,1,N)*FNW + WTMW*VDNW(M,1,N)
          ENDDO
          DO M = 1,ISVF
            VDNW(M,2,NS) = VDNW(M,1,N)
            VNW(M,2,NS) = VNW(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            VDNW(M,1,N) = 0.D+0
            VNW(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    Bottom surface  ---
!
        NB = ICM(1,N)
        IF( NB.NE.0 ) THEN
          DXMNW = XMNW(2,NB) - XMNW(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            DFP = TORN(MP,N)*PORD(MP,N)*SN(MP,N)*
     &        DFNW(MP,N)*RHOMN(MP,N)
            DFB = TORN(MN,NB)*PORD(MN,NB)*SN(MN,NB)*
     &        DFNW(MN,NB)*RHOMN(MN,NB)
            INDX = 20
            DFM = DIFMN( DFB,DFP,DZGF(NB),DZGF(N),DXMNW,INDX )
            WDNW(M,1,N) = DFM*(XMNW(MN,NB)-XMNW(MP,N))/DZGP(1,N)
            FNWP = XNW(MP,N)*RHON(MP,N)
            FNWB = XNW(MN,NB)*RHON(MN,NB)
            INDX = 4
            FNW = DIFMN( FNWB,FNWP,DZGF(NB),DZGF(N),WN(1,1,N),INDX )
            WNW(M,1,N) = WN(M,1,N)*FNW + WTMW*WDNW(M,1,N)
          ENDDO
          DO M = 1,ISVF
            WDNW(M,2,NB) = WDNW(M,1,N)
            WNW(M,2,NB) = WNW(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            WDNW(M,1,N) = 0.D+0
            WNW(M,1,N) = 0.D+0
          ENDDO
        ENDIF
      ENDDO
!
!---  End of DFFNW group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DRCVG
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Compute the gas-phase Darcy flux from pressure gradients
!     and gravitational body forces.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 19 October 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE GRID
      USE FLUX
      USE FDVP
      USE FDVH
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 KGM
!
!----------------------Executable Lines--------------------------------!
!

!
!---  Gas Darcy velocities, excluding boundaries
!
      DO N = 1,NFCGC(ID+1)
!
!---    Skip for inactive nodes  ---
!
        IF( IXP(N).EQ.0 ) CYCLE
!
!---    West surface  ---
!
        NW = ICM(3,N)
        IF( NW.NE.0 ) THEN
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            HDGX = PG(MN,NW)-PG(MP,N)-0.5D+0*GRVX(1,N)
     &        *(RHOG(MN,NW)*DXGF(N)+RHOG(MP,N)*DXGF(NW))
            IF( M.EQ.1 ) HDG = HDGX
!
!---        Permeability reduction factor
!
            PERM_WX = PERMRF(MN,NW)*PERM(1,NW)
            PERM_PX = PERMRF(MP,N)*PERM(1,N)
            INDX = 11
            KGM = DIFMN(PERM_WX,PERM_PX,DXGF(NW),DXGF(N),HDG,INDX)
            IF( PERM_WX/EPSL.LT.EPSL ) KGM = 0.D+0
            IF( PERM_PX/EPSL.LT.EPSL ) KGM = 0.D+0
            INDX = 9
            RKGM = DIFMN(RKG(MN,NW),RKG(MP,N),DXGF(NW),DXGF(N),HDG,INDX)
            INDX = 6
            VGM = DIFMN(VISG(MN,NW),VISG(MP,N),DXGF(NW),DXGF(N),
     &        HDG,INDX)
            UG(M,1,N) = KGM*RKGM*HDGX/(DXGP(1,N)*VGM)
          ENDDO  
          DO M = 1,ISVF
            UG(M,2,NW) = UG(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            UG(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    South surface  ---
!
        NS = ICM(2,N)
        IF( NS.NE.0 ) THEN
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            HDGY = PG(MN,NS)-PG(MP,N)-0.5D+0*GRVY(1,N)
     &        *(RHOG(MN,NS)*DYGF(N)+RHOG(MP,N)*DYGF(NS))
            IF( M.EQ.1 ) HDG = HDGY
!
!---        Permeability reduction factor
!
            PERM_SX = PERMRF(MN,NS)*PERM(2,NS)
            PERM_PX = PERMRF(MP,N)*PERM(2,N)
            INDX = 11
            KGM = DIFMN(PERM_SX,PERM_PX,DYGF(NS),DYGF(N),HDG,INDX)
            IF( PERM_SX/EPSL.LT.EPSL ) KGM = 0.D+0
            IF( PERM_PX/EPSL.LT.EPSL ) KGM = 0.D+0
            INDX = 9
            RKGM = DIFMN(RKG(MN,NS),RKG(MP,N),DYGF(NS),DYGF(N),HDG,INDX)
            INDX = 6
            VGM = DIFMN(VISG(MN,NS),VISG(MP,N),DYGF(NS),DYGF(N),
     &        HDG,INDX)
            VG(M,1,N) = KGM*RKGM*HDGY/(DYGP(1,N)*VGM*RP(N))
          ENDDO
          DO M = 1,ISVF
            VG(M,2,NS) = VG(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            VG(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    Bottom surface  ---
!
        NB = ICM(1,N)
        IF( NB.NE.0 ) THEN
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            HDGZ = PG(MN,NB)-PG(MP,N)-0.5D+0*GRVZ(1,N)
     &        *(RHOG(MN,NB)*DZGF(N)+RHOG(MP,N)*DZGF(NB))
            IF( M.EQ.1 ) HDG = HDGZ
!
!---        Permeability reduction factor
!
            PERM_BX = PERMRF(MN,NB)*PERM(3,NB)
            PERM_PX = PERMRF(MP,N)*PERM(3,N)
            INDX = 11
            KGM = DIFMN(PERM_BX,PERM_PX,DZGF(NB),DZGF(N),HDG,INDX)
            IF( PERM_BX/EPSL.LT.EPSL ) KGM = 0.D+0
            IF( PERM_PX/EPSL.LT.EPSL ) KGM = 0.D+0
            INDX = 9
            RKGM = DIFMN(RKG(MN,NB),RKG(MP,N),DZGF(NB),DZGF(N),HDG,INDX)
            INDX = 6
            VGM = DIFMN(VISG(MN,NB),VISG(MP,N),DZGF(NB),DZGF(N),
     &        HDG,INDX)
            WG(M,1,N) = KGM*RKGM*HDGZ/(DZGP(1,N)*VGM)
          ENDDO
          DO M = 1,ISVF
            WG(M,2,NB) = WG(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            WG(M,1,N) = 0.D+0
          ENDDO
        ENDIF
      ENDDO
!
!---  End of DRCVG group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DRCVL
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Compute the aqueous-phase Darcy flux from pressure gradients
!     and gravitational body forces.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 30 June 2021.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE GRID
      USE FLUX
      USE FDVP
      USE FDVH
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 KLM
!
!----------------------Executable Lines--------------------------------!
!

!
!---  Aqueous Darcy velocities, excluding boundaries
!
      DO N = 1,NFCGC(ID+1)
!
!---    Skip for inactive nodes  ---
!
        IF( IXP(N).EQ.0 ) CYCLE
!
!---    West surface  ---
!
        NW = ICM(3,N)
        IF( NW.NE.0 ) THEN
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            HDLX = PL(MN,NW)-PL(MP,N)-0.5D+0*GRVX(1,N)
     &        *(RHOL(MN,NW)*DXGF(N)+RHOL(MP,N)*DXGF(NW))
            IF( M.EQ.1 ) HDL = HDLX
!
!---        Permeability reduction factor
!
            PERM_WX = PERMRF(MN,NW)*PERM(1,NW)
            PERM_PX = PERMRF(MP,N)*PERM(1,N)
            INDX = 11
            KLM = DIFMN(PERM_WX,PERM_PX,DXGF(NW),DXGF(N),HDL,INDX)
            IF( PERM_WX/EPSL.LT.EPSL ) KLM = 0.D+0
            IF( PERM_PX/EPSL.LT.EPSL ) KLM = 0.D+0
            INDX = 8
            RKLM = DIFMN(RKL(MN,NW),RKL(MP,N),DXGF(NW),DXGF(N),HDL,INDX)
            INDX = 5
            VLM = DIFMN(VISL(MN,NW),VISL(MP,N),DXGF(NW),DXGF(N),
     &        HDL,INDX)
            UL(M,1,N) = KLM*RKLM*HDLX/(DXGP(1,N)*VLM)
          ENDDO  
          DO M = 1,ISVF
            UL(M,2,NW) = UL(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            UL(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    South surface  ---
!
        NS = ICM(2,N)
        IF( NS.NE.0 ) THEN
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            HDLY = PL(MN,NS)-PL(MP,N)-0.5D+0*GRVY(1,N)
     &        *(RHOL(MN,NS)*DYGF(N)+RHOL(MP,N)*DYGF(NS))
            IF( M.EQ.1 ) HDL = HDLY
!
!---        Permeability reduction factor
!
            PERM_SX = PERMRF(MN,NS)*PERM(2,NS)
            PERM_PX = PERMRF(MP,N)*PERM(2,N)
            INDX = 11
            KLM = DIFMN(PERM_SX,PERM_PX,DYGF(NS),DYGF(N),HDL,INDX)
            IF( PERM_SX/EPSL.LT.EPSL ) KLM = 0.D+0
            IF( PERM_PX/EPSL.LT.EPSL ) KLM = 0.D+0
            INDX = 8
            RKLM = DIFMN(RKL(MN,NS),RKL(MP,N),DYGF(NS),DYGF(N),HDL,INDX)
            INDX = 5
            VLM = DIFMN(VISL(MN,NS),VISL(MP,N),DYGF(NS),DYGF(N),
     &        HDL,INDX)
            VL(M,1,N) = KLM*RKLM*HDLY/(DYGP(1,N)*VLM*RP(N))
          ENDDO
          DO M = 1,ISVF
            VL(M,2,NS) = VL(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            VL(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    Bottom surface  ---
!
        NB = ICM(1,N)
        IF( NB.NE.0 ) THEN
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            HDLZ = PL(MN,NB)-PL(MP,N)-0.5D+0*GRVZ(1,N)
     &        *(RHOL(MN,NB)*DZGF(N)+RHOL(MP,N)*DZGF(NB))
            IF( M.EQ.1 ) HDL = HDLZ
!
!---        Permeability reduction factor
!
            PERM_BX = PERMRF(MN,NB)*PERM(3,NB)
            PERM_PX = PERMRF(MP,N)*PERM(3,N)
            INDX = 11
            KLM = DIFMN(PERM_BX,PERM_PX,DZGF(NB),DZGF(N),HDL,INDX)
            IF( PERM_BX/EPSL.LT.EPSL ) KLM = 0.D+0
            IF( PERM_PX/EPSL.LT.EPSL ) KLM = 0.D+0
            INDX = 8
            RKLM = DIFMN(RKL(MN,NB),RKL(MP,N),DZGF(NB),DZGF(N),HDL,INDX)
            INDX = 5
            VLM = DIFMN(VISL(MN,NB),VISL(MP,N),DZGF(NB),DZGF(N),
     &        HDL,INDX)
            WL(M,1,N) = KLM*RKLM*HDLZ/(DZGP(1,N)*VLM)
          ENDDO
          DO M = 1,ISVF
            WL(M,2,NB) = WL(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            WL(M,1,N) = 0.D+0
          ENDDO
        ENDIF
      ENDDO
!
!---  End of DRCVL group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DRCVN
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Compute the non-aqueous-phase Darcy flux from pressure gradients
!     and gravitational body forces.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 19 October 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE GRID
      USE FLUX
      USE FDVP
      USE FDVH
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 KNM
!
!----------------------Executable Lines--------------------------------!
!

!
!---  Aqueous Darcy velocities, excluding boundaries
!
      DO N = 1,NFCGC(ID+1)
!
!---    Skip for inactive nodes  ---
!
        IF( IXP(N).EQ.0 ) CYCLE
!
!---    West surface  ---
!
        NW = ICM(3,N)
        IF( NW.NE.0 ) THEN
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            HDNX = PN(MN,NW)-PN(MP,N)-0.5D+0*GRVX(1,N)
     &        *(RHON(MN,NW)*DXGF(N)+RHON(MP,N)*DXGF(NW))
            IF( M.EQ.1 ) HDN = HDNX
!
!---        Permeability reduction factor
!
            PERM_WX = PERMRF(MN,NW)*PERM(1,NW)
            PERM_PX = PERMRF(MP,N)*PERM(1,N)
            INDX = 11
            KNM = DIFMN(PERM_WX,PERM_PX,DXGF(NW),DXGF(N),HDN,INDX)
            IF( PERM_WX/EPSL.LT.EPSL ) KNM = 0.D+0
            IF( PERM_PX/EPSL.LT.EPSL ) KNM = 0.D+0
            INDX = 10
            RKNM = DIFMN(RKN(MN,NW),RKN(MP,N),DXGF(NW),DXGF(N),HDN,INDX)
            INDX = 7
            VISN_W = VISN(MN,NW)
            VISN_P = VISN(MP,N)
            VNM = DIFMN(VISN_W,VISN_P,DXGF(NW),DXGF(N),HDN,INDX)
            UN(M,1,N) = KNM*RKNM*HDNX/(DXGP(1,N)*VNM)
          ENDDO  
          DO M = 1,ISVF
            UN(M,2,NW) = UN(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            UN(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    South surface  ---
!
        NS = ICM(2,N)
        IF( NS.NE.0 ) THEN
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            HDNY = PN(MN,NS)-PN(MP,N)-0.5D+0*GRVY(1,N)
     &        *(RHON(MN,NS)*DYGF(N)+RHON(MP,N)*DYGF(NS))
            IF( M.EQ.1 ) HDN = HDNY
!
!---        Permeability reduction factor
!
            PERM_SX = PERMRF(MN,NS)*PERM(2,NS)
            PERM_PX = PERMRF(MP,N)*PERM(2,N)
            INDX = 11
            KNM = DIFMN(PERM_SX,PERM_PX,DYGF(NS),DYGF(N),HDN,INDX)
            IF( PERM_SX/EPSL.LT.EPSL ) KNM = 0.D+0
            IF( PERM_PX/EPSL.LT.EPSL ) KNM = 0.D+0
            INDX = 10
            RKNM = DIFMN(RKN(MN,NS),RKN(MP,N),DYGF(NS),DYGF(N),HDN,INDX)
            INDX = 7
            VNM = DIFMN(VISN(MN,NS),VISN(MP,N),DYGF(NS),DYGF(N),
     &        HDN,INDX)
            VN(M,1,N) = KNM*RKNM*HDNY/(DYGP(1,N)*VNM*RP(N))
          ENDDO
          DO M = 1,ISVF
            VN(M,2,NS) = VN(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            VN(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    Bottom surface  ---
!
        NB = ICM(1,N)
        IF( NB.NE.0 ) THEN
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            HDNZ = PN(MN,NB)-PN(MP,N)-0.5D+0*GRVZ(1,N)
     &        *(RHON(MN,NB)*DZGF(N)+RHON(MP,N)*DZGF(NB))
            IF( M.EQ.1 ) HDN = HDNZ
!
!---        Permeability reduction factor
!
            PERM_BX = PERMRF(MN,NB)*PERM(3,NB)
            PERM_PX = PERMRF(MP,N)*PERM(3,N)
            INDX = 11
            KNM = DIFMN(PERM_BX,PERM_PX,DZGF(NB),DZGF(N),HDN,INDX)
            IF( PERM_BX/EPSL.LT.EPSL ) KNM = 0.D+0
            IF( PERM_PX/EPSL.LT.EPSL ) KNM = 0.D+0
            INDX = 10
            RKNM = DIFMN(RKN(MN,NB),RKN(MP,N),DZGF(NB),DZGF(N),HDN,INDX)
            INDX = 7
            VNM = DIFMN(VISN(MN,NB),VISN(MP,N),DZGF(NB),DZGF(N),
     &        HDN,INDX)
            WN(M,1,N) = KNM*RKNM*HDNZ/(DZGP(1,N)*VNM)
          ENDDO
          DO M = 1,ISVF
            WN(M,2,NB) = WN(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            WN(M,1,N) = 0.D+0
          ENDDO
        ENDIF
      ENDDO
!
!---  End of DRCVN group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE THD_HYD_O2_CH4_N2
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Compute the contribution to the energy flux by thermal conduction
!     for nonboundary node faces.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 19 October 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE GRID
      USE FLUX
      USE FDVP
      USE FDVH
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      IF( ISLC(2).LT.1 ) RETURN
!
!---  Thermal conduction flux, excluding boundaries
!
      DO N = 1,NFCGC(ID+1)
!
!---    Skip for inactive nodes  ---
!
        IF( IXP(N).EQ.0 ) CYCLE
!
!---    West surface  ---
!
        NW = ICM(3,N)
        IF( NW.NE.0 ) THEN
          DTK = T(2,NW)-T(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
!
!---        Parallel function  ---
!
            IF( ITHK(N).EQ.2 ) THEN
              TKP = MAX(1.D+0-PORD(MP,N),0.D+0)*THKS(1,N) + 
     &          PORD(MP,N)*(THKL(MP,N)*SL(MP,N) + 
     &          THKH(MP,N)*SH(MP,N) + THKI(MP,N)*SI(MP,N) + 
     &          THKN(MP,N)*SN(MP,N) + THKG(MP,N)*SG(MP,N))
!
!---        Somerton function  ---
!
            ELSEIF( ITHK(N).EQ.4 ) THEN
              TKP = THKS(1,N) + 
     &          SQRT(SL(MP,N))*(THKS(4,N)-THKS(1,N))
!
!---        Composite function  ---
!
            ELSEIF( ITHK(N).EQ.8 ) THEN
              TKP = THKS(1,N) + (SQRT(SL(MP,N)) + SQRT(SH(MP,N)))
     &          *(THKS(2,N)-THKS(1,N)) +
     &          PORD(MP,N)*THKI(MP,N)*SI(MP,N)
            ENDIF
!
!---        Parallel function  ---
!
            IF( ITHK(NW).EQ.2 ) THEN
              TKW = MAX(1.D+0-PORD(MN,NW),0.D+0)*THKS(1,NW) +
     &          PORD(MN,NW)*(THKL(MN,NW)*SL(MN,NW) +
     &          THKH(MN,NW)*SH(MN,NW) + THKI(MN,NW)*SI(MN,NW) + 
     &          THKN(MN,NW)*SN(MN,NW) + THKG(MN,NW)*SG(MN,NW))
!
!---        Somerton function  ---
!
            ELSEIF( ITHK(NW).EQ.4 ) THEN
              TKW = THKS(1,NW) + 
     &          SQRT(SL(MN,NW))*(THKS(4,NW)-THKS(1,NW))
!
!---        Composite function  ---
!
            ELSEIF( ITHK(NW).EQ.8 ) THEN
              TKW = THKS(1,NW) + (SQRT(SL(MN,NW)) + SQRT(SH(MN,NW)))
     &          *(THKS(2,NW)-THKS(1,NW)) +
     &          PORD(MN,NW)*THKI(MN,NW)*SI(MN,NW)
            ENDIF
            INDX = 1
            TK = DIFMN( TKW,TKP,DXGF(NW),DXGF(N),DTK,INDX )
            UQ(M,1,N) = TK*(T(MN,NW)-T(MP,N))/DXGP(1,N)
          ENDDO  
          DO M = 1,ISVF
            UQ(M,2,NW) = UQ(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            UQ(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    South surface  ---
!
        NS = ICM(2,N)
        IF( NS.NE.0 ) THEN
          DTK = T(2,NS)-T(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
!
!---        Parallel function  ---
!
            IF( ITHK(N).EQ.2 ) THEN
              TKP = MAX(1.D+0-PORD(MP,N),0.D+0)*THKS(2,N) +
     &          PORD(MP,N)*(THKL(MP,N)*SL(MP,N) + 
     &          THKH(MP,N)*SH(MP,N) + THKI(MP,N)*SI(MP,N) + 
     &          THKN(MP,N)*SN(MP,N) + THKG(MP,N)*SG(MP,N))
!
!---        Somerton function  ---
!
            ELSEIF( ITHK(N).EQ.4 ) THEN
              TKP = THKS(2,N) + 
     &          SQRT(SL(MP,N))*(THKS(5,N)-THKS(2,N))
!
!---        Composite function  ---
!
            ELSEIF( ITHK(N).EQ.8 ) THEN
              TKP = THKS(1,N) + (SQRT(SL(MP,N)) + SQRT(SH(MP,N)))
     &          *(THKS(2,N)-THKS(1,N)) +
     &          PORD(MP,N)*THKI(MP,N)*SI(MP,N)
            ENDIF
!
!---        Parallel function  ---
!
            IF( ITHK(NS).EQ.2 ) THEN
              TKS = MAX(1.D+0-PORD(MN,NS),0.D+0)*THKS(2,NS) +
     &          PORD(MN,NS)*(THKL(MN,NS)*SL(MN,NS) + 
     &          THKH(MN,NS)*SH(MN,NS) + THKI(MN,NS)*SI(MN,NS) + 
     &          THKN(MN,NS)*SN(MN,NS) + THKG(MN,NS)*SG(MN,NS))
!
!---        Somerton function  ---
!
            ELSEIF( ITHK(NS).EQ.4 ) THEN
              TKS = THKS(2,NS) + 
     &          SQRT(SL(MN,NS))*(THKS(5,NS)-THKS(2,NS))
!
!---        Composite function  ---
!
            ELSEIF( ITHK(NS).EQ.8 ) THEN
              TKS = THKS(1,NS) + (SQRT(SL(MN,NS)) + SQRT(SH(MN,NS)))
     &          *(THKS(2,NS)-THKS(1,NS)) +
     &          PORD(MN,NS)*THKI(MN,NS)*SI(MN,NS)
            ENDIF
            INDX = 1
            TK = DIFMN( TKS,TKP,DYGF(NS),DYGF(N),DTK,INDX )
            VQ(M,1,N) = TK*(T(MN,NS)-T(MP,N))/(DYGP(1,N)*RP(N))
          ENDDO
          DO M = 1,ISVF
            VQ(M,2,NS) = VQ(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            VQ(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    Bottom surface  ---
!
        NB = ICM(1,N)
        IF( NB.NE.0 ) THEN
          DTK = T(2,NB)-T(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
!
!---        Parallel function  ---
!
            IF( ITHK(N).EQ.2 ) THEN
              TKP = MAX(1.D+0-PORD(MP,N),0.D+0)*THKS(3,N) +
     &          PORD(MP,N)*(THKL(MP,N)*SL(MP,N) + 
     &          THKH(MP,N)*SH(MP,N) + THKI(MP,N)*SI(MP,N) + 
     &          THKN(MP,N)*SN(MP,N) + THKG(MP,N)*SG(MP,N))
!
!---        Somerton function  ---
!
            ELSEIF( ITHK(N).EQ.4 ) THEN
              TKP = THKS(3,N) + 
     &          SQRT(SL(MP,N))*(THKS(6,N)-THKS(3,N))
!
!---        Composite function  ---
!
            ELSEIF( ITHK(N).EQ.8 ) THEN
              TKP = THKS(1,N) + (SQRT(SL(MP,N)) + SQRT(SH(MP,N)))*
     &          (THKS(2,N)-THKS(1,N)) +
     &          PORD(MP,N)*THKI(MP,N)*SI(MP,N)
            ENDIF
!
!---        Parallel function  ---
!
            IF( ITHK(NB).EQ.2 ) THEN
              TKB = MAX(1.D+0-PORD(MN,NB),0.D+0)*THKS(3,NB) +
     &          PORD(MN,NB)*(THKL(MN,NB)*SL(MN,NB) + 
     &          THKH(MN,NB)*SH(MN,NB) + THKI(MN,NB)*SI(MN,NB) + 
     &          THKN(MN,NB)*SN(MN,NB) + THKG(MN,NB)*SG(MN,NB))
!
!---        Somerton function  ---
!
            ELSEIF( ITHK(NB).EQ.4 ) THEN
              TKB = THKS(3,NB) + 
     &          SQRT(SL(MN,NB))*(THKS(6,NB)-THKS(3,NB))
!
!---        Composite function  ---
!
            ELSEIF( ITHK(NB).EQ.8 ) THEN
              TKB = THKS(1,NB) + (SQRT(SL(MN,NB)) + SQRT(SH(MN,NB)))
     &          *(THKS(2,NB)-THKS(1,NB)) +
     &          PORD(MN,NB)*THKI(MN,NB)*SI(MN,NB)
            ENDIF
            INDX = 1
            TK = DIFMN( TKB,TKP,DZGF(NB),DZGF(N),DTK,INDX )
            WQ(M,1,N) = TK*(T(MN,NB)-T(MP,N))/DZGP(1,N)
          ENDDO
          DO M = 1,ISVF
            WQ(M,2,NB) = WQ(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            WQ(M,1,N) = 0.D+0
          ENDDO
        ENDIF
      ENDDO
!
!---  End of THD_HYD_O2_CH4_N2 group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE THA_HYD_O2_CH4_N2
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Compute the contribution to the energy flux by by gas, aqueous,
!     and nonaqueous liquid advection for nonboundary node faces.
!     Donor cell interfacial averaging.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 19 October 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE GRID
      USE FLUX
      USE FDVP
      USE FDVH
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      IF( ISLC(2).LT.1 ) RETURN
!
!---  Heat flux via gas advection, excluding boundaries
!
      DO N = 1,NFCGC(ID+1)
!
!---    Skip for inactive nodes  ---
!
        IF( IXP(N).EQ.0 ) CYCLE
!
!---    West surface  ---
!
        NW = ICM(3,N)
        IF( NW.NE.0 ) THEN
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            HP = HG(MP,N)*RHOG(MP,N)
            HW = HG(MN,NW)*RHOG(MN,NW)
            INDX = -4
            HGM = DIFMN( HW,HP,DXGF(NW),DXGF(N),UG(1,1,N),INDX )
            HP = HL(MP,N)*RHOL(MP,N)
            HW = HL(MN,NW)*RHOL(MN,NW)
            INDX = -4
            HLM = DIFMN( HW,HP,DXGF(NW),DXGF(N),UL(1,1,N),INDX )
            HP = HN(MP,N)*RHON(MP,N)
            HW = HN(MN,NW)*RHON(MN,NW)
            INDX = -4
            HNM = DIFMN( HW,HP,DXGF(NW),DXGF(N),UN(1,1,N),INDX )
            UQ(M,1,N) = UQ(M,1,N) + HGM*UG(M,1,N) + HLM*UL(M,1,N)
     &        + HNM*UN(M,1,N)
          ENDDO  
          DO M = 1,ISVF
            UQ(M,2,NW) = UQ(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            UQ(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    South surface  ---
!
        NS = ICM(2,N)
        IF( NS.NE.0 ) THEN
          DTK = T(2,NS)-T(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            HP = HG(MP,N)*RHOG(MP,N)
            HS = HG(MN,NS)*RHOG(MN,NS)
            INDX = -4
            HGM = DIFMN( HS,HP,DYGF(NS),DYGF(N),VG(1,1,N),INDX )
            HP = HL(MP,N)*RHOL(MP,N)
            HS = HL(MN,NS)*RHOL(MN,NS)
            INDX = -4
            HLM = DIFMN( HS,HP,DYGF(NS),DYGF(N),VL(1,1,N),INDX )
            HP = HN(MP,N)*RHON(MP,N)
            HS = HN(MN,NS)*RHON(MN,NS)
            INDX = -4
            HNM = DIFMN( HS,HP,DYGF(NS),DYGF(N),VN(1,1,N),INDX )
            VQ(M,1,N) = VQ(M,1,N) + HGM*VG(M,1,N) + HLM*VL(M,1,N)
     &         + HNM*VN(M,1,N)
          ENDDO
          DO M = 1,ISVF
            VQ(M,2,NS) = VQ(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            VQ(M,1,N) = 0.D+0
          ENDDO
        ENDIF
!
!---    Bottom surface  ---
!
        NB = ICM(1,N)
        IF( NB.NE.0 ) THEN
          DTK = T(2,NB)-T(2,N)
          DO M = 1,ISVF
            MN = MNEG(M)
            MP = MPOS(M)
            HP = HG(MP,N)*RHOG(MP,N)
            HB = HG(MN,NB)*RHOG(MN,NB)
            INDX = -4
            HGM = DIFMN( HB,HP,DZGF(NB),DZGF(N),WG(1,1,N),INDX )
            HP = HL(MP,N)*RHOL(MP,N)
            HB = HL(MN,NB)*RHOL(MN,NB)
            INDX = -4
            HLM = DIFMN( HB,HP,DZGF(NB),DZGF(N),WL(1,1,N),INDX )
            HP = HN(MP,N)*RHON(MP,N)
            HB = HN(MN,NB)*RHON(MN,NB)
            INDX = -4
            HNM = DIFMN( HB,HP,DZGF(NB),DZGF(N),WN(1,1,N),INDX )
            WQ(M,1,N) = WQ(M,1,N) + HGM*WG(M,1,N) + HLM*WL(M,1,N)
     &         + HNM*WN(M,1,N)
          ENDDO
          DO M = 1,ISVF
            WQ(M,2,NB) = WQ(M,1,N)
          ENDDO
        ELSE
          DO M = 1,ISVF
            WQ(M,1,N) = 0.D+0
          ENDDO
        ENDIF
      ENDDO
!
!---  End of THA_HYD_O2_CH4_N2 group  ---
!
      RETURN
      END
