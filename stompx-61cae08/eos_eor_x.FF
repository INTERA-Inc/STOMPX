!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE BLI_LKH( TRX,PRX,H0X,H1X,INDX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Bilinear interpolation on the Lee-Kesler H0 and H1 residual 
!     enthalpy table.
!
!     INDX = 0 Gas-side interpolation
!     INDX = 1 Liquid-side interpolation
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 8 February 2021.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE EOR
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      INTEGER, DIMENSION(2) :: IP0X,IP1X,IT0_P1X,IT0_P2X,IT1_P1X,IT1_P2X
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/BLI_LKH'
!
!---  Gas interpolation  --- 
!
      IF( INDX.EQ.0 ) THEN      
!
!---    Reduced pressure indices for H0  --- 
!
        IF( PRX.LE.PR0LKR(1) ) THEN
          IP0X(1) = 1
          IP0X(2) = 2
        ELSEIF( PRX.GE.PR0LKR(15) ) THEN
          IP0X(1) = 14
          IP0X(2) = 15
        ELSE
          DO M = 2,15
            IF( PRX.LE.PR0LKR(M) ) THEN
              IP0X(1) = M-1
              IP0X(2) = M
              EXIT
            ENDIF
          ENDDO
        ENDIF
!
!---    Reduced temperature indices for H0, P1  --- 
!
        IS11X = MIN( IL0LKR(IP0X(1))+1,19 )
        IS21X = 40
        IF( TRX.LE.TR0LKR(1) ) THEN
          IT0_P1X(1) = 1
          IT0_P1X(2) = 2
        ELSEIF( TRX.GE.TR0LKR(IS21X) ) THEN
          IT0_P1X(1) = IS21X-1
          IT0_P1X(2) = IS21X
        ELSE
          DO M = IS11X+1,IS21X
            IF( TRX.LE.TR0LKR(M) ) THEN
              IT0_P1X(1) = M-1
              IT0_P1X(2) = M
              EXIT
            ENDIF
          ENDDO
        ENDIF
!
!---    Reduced temperature indices for H0, P2  --- 
!
        IS11X = MIN( IL0LKR(IP0X(2))+1,19 )
        IS21X = 40
        IF( TRX.LE.TR0LKR(1) ) THEN
          IT0_P2X(1) = 1
          IT0_P2X(2) = 2
        ELSEIF( TRX.GE.TR0LKR(IS21X) ) THEN
          IT0_P2X(1) = IS21X-1
          IT0_P2X(2) = IS21X
        ELSE
          DO M = IS11X+1,IS21X
            IF( TRX.LE.TR0LKR(M) ) THEN
              IT0_P2X(1) = M-1
              IT0_P2X(2) = M
              EXIT
            ENDIF
          ENDDO
        ENDIF
!
!---    Reduced pressure indices for H1  --- 
!
        IF( PRX.LE.PR1LKR(1) ) THEN
          IP1X(1) = 1
          IP1X(2) = 2
        ELSEIF( PRX.GE.PR1LKR(15) ) THEN
          IP1X(1) = 14
          IP1X(2) = 15
        ELSE
          DO M = 2,15
            IF( PRX.LE.PR1LKR(M) ) THEN
              IP1X(1) = M-1
              IP1X(2) = M
              EXIT
            ENDIF
          ENDDO
        ENDIF
!
!---    Reduced temperature indices for H1, P1  --- 
!
        IS11X = MIN( IL0LKR(IP1X(1))+1,19 )
        IS21X = 40
        IF( TRX.LE.TR0LKR(1) ) THEN
          IT1_P1X(1) = 1
          IT1_P1X(2) = 2
        ELSEIF( TRX.GE.TR0LKR(IS21X) ) THEN
          IT1_P1X(1) = IS21X-1
          IT1_P1X(2) = IS21X
        ELSE
          DO M = IS11X+1,IS21X
            IF( TRX.LE.TR0LKR(M) ) THEN
              IT1_P1X(1) = M-1
              IT1_P1X(2) = M
              EXIT
            ENDIF
          ENDDO
        ENDIF
!
!---    Reduced temperature indices for H1, P2  --- 
!
        IS11X = MIN( IL0LKR(IP1X(2))+1,19 )
        IS21X = 40
        IF( TRX.LE.TR0LKR(1) ) THEN
          IT1_P2X(1) = 1
          IT1_P2X(2) = 2
        ELSEIF( TRX.GE.TR0LKR(IS21X) ) THEN
          IT1_P2X(1) = IS21X-1
          IT1_P2X(2) = IS21X
        ELSE
          DO M = IS11X+1,IS21X
            IF( TRX.LE.TR0LKR(M) ) THEN
              IT1_P2X(1) = M-1
              IT1_P2X(2) = M
              EXIT
            ENDIF
          ENDDO
        ENDIF
!
!---  Liquid interpolation
!
      ELSE
!
!---    Reduced pressure indices for H0  --- 
!
        IF( PRX.LE.PR0LKR(1) ) THEN
          IP0X(1) = 1
          IP0X(2) = 2
        ELSEIF( PRX.GE.PR0LKR(15) ) THEN
          IP0X(1) = 14
          IP0X(2) = 15
        ELSE
          DO M = 2,15
            IF( PRX.LE.PR0LKR(M) ) THEN
              IP0X(1) = M-1
              IP0X(2) = M
              EXIT
            ENDIF
          ENDDO
        ENDIF
!
!---    Reduced temperature indices for H0, P1  --- 
!
        IS11X = 1
        IS21X = IL0LKR(IP0X(1))
        IF( TRX.LE.TR0LKR(1) ) THEN
          IT0_P1X(1) = 1
          IT0_P1X(2) = 2
        ELSEIF( TRX.GE.TR0LKR(IS21X) ) THEN
          IT0_P1X(1) = IS21X-1
          IT0_P1X(2) = IS21X
        ELSE
          DO M = IS11X+1,IS21X
            IF( TRX.LE.TR0LKR(M) ) THEN
              IT0_P1X(1) = M-1
              IT0_P1X(2) = M
              EXIT
            ENDIF
          ENDDO
        ENDIF
!
!---    Reduced temperature indices for H0, P2  --- 
!
        IS11X = 1
        IS21X = IL0LKR(IP0X(2))
        IF( TRX.LE.TR0LKR(1) ) THEN
          IT0_P2X(1) = 1
          IT0_P2X(2) = 2
        ELSEIF( TRX.GE.TR0LKR(IS21X) ) THEN
          IT0_P2X(1) = IS21X-1
          IT0_P2X(2) = IS21X
        ELSE
          DO M = IS11X+1,IS21X
            IF( TRX.LE.TR0LKR(M) ) THEN
              IT0_P2X(1) = M-1
              IT0_P2X(2) = M
              EXIT
            ENDIF
          ENDDO
        ENDIF
!
!---    Reduced pressure indices for H1  --- 
!
        IF( PRX.LE.PR1LKR(1) ) THEN
          IP1X(1) = 1
          IP1X(2) = 2
        ELSEIF( PRX.GE.PR1LKR(15) ) THEN
          IP1X(1) = 14
          IP1X(2) = 15
        ELSE
          DO M = 2,15
            IF( PRX.LE.PR1LKR(M) ) THEN
              IP1X(1) = M-1
              IP1X(2) = M
              EXIT
            ENDIF
          ENDDO
        ENDIF
!
!---    Reduced temperature indices for H1, P1  --- 
!
        IS12X = 1
        IS22X = IL1LKR(IP1X(1))
        IF( TRX.LE.TR1LKR(1) ) THEN
          IT1_P1X(1) = 1
          IT1_P1X(2) = 2
        ELSEIF( TRX.GE.TR1LKR(IS22X) ) THEN
          IT1_P1X(1) = IS22X-1
          IT1_P1X(2) = IS22X
        ELSE
          DO M = IS12X+1,IS22X
            IF( TRX.LE.TR1LKR(M) ) THEN
              IT1_P1X(1) = M-1
              IT1_P1X(2) = M
              EXIT
            ENDIF
          ENDDO
        ENDIF
!
!---    Reduced temperature indices for H1, P2  --- 
!
        IS12X = 1
        IS22X = IL1LKR(IP1X(2))
        IF( TRX.LE.TR1LKR(1) ) THEN
          IT1_P2X(1) = 1
          IT1_P2X(2) = 2
        ELSEIF( TRX.GE.TR1LKR(IS22X) ) THEN
          IT1_P2X(1) = IS22X-1
          IT1_P2X(2) = IS22X
        ELSE
          DO M = IS12X+1,IS22X
            IF( TRX.LE.TR1LKR(M) ) THEN
              IT1_P2X(1) = M-1
              IT1_P2X(2) = M
              EXIT
            ENDIF
          ENDDO
        ENDIF
      ENDIF
!
!---  Temperature interpolation at lower pressure, P1  ---
!
      H01X = (TRX-TR0LKR(IT0_P1X(1)))*
     &  (H0LKR(IP0X(1),IT0_P1X(2))-H0LKR(IP0X(1),IT0_P1X(1)))
     &  /(TR0LKR(IT0_P1X(2))-TR0LKR(IT0_P1X(1))) + 
     &  H0LKR(IP0X(1),IT0_P1X(1))
      H11X = (TRX-TR1LKR(IT1_P1X(1)))*
     &  (H1LKR(IP1X(1),IT1_P1X(2))-H1LKR(IP1X(1),IT1_P1X(1)))
     &  /(TR1LKR(IT1_P1X(2))-TR1LKR(IT1_P1X(1))) + 
     &  H1LKR(IP1X(1),IT1_P1X(1))
!
!---  Temperature interpolation at higher pressure, P2  ---
!
      H02X = (TRX-TR0LKR(IT0_P2X(1)))*
     &  (H0LKR(IP0X(2),IT0_P2X(2))-H0LKR(IP0X(2),IT0_P2X(1)))
     &  /(TR0LKR(IT0_P2X(2))-TR0LKR(IT0_P2X(1))) + 
     &  H0LKR(IP0X(2),IT0_P2X(1))
      H12X = (TRX-TR1LKR(IT1_P2X(1)))*
     &  (H1LKR(IP1X(2),IT1_P2X(2))-H1LKR(IP1X(2),IT1_P2X(1)))
     &  /(TR1LKR(IT1_P2X(2))-TR1LKR(IT1_P2X(1))) + 
     &  H1LKR(IP1X(2),IT1_P2X(1))
!
!---  Interpolation across pressures  ---
!
      H0X = (PRX-PR0LKR(IP0X(1)))*(H02X-H01X)/
     &  (PR0LKR(IP0X(2))-PR0LKR(IP0X(1))) + H01X
      H1X = (PRX-PR1LKR(IP1X(1)))*(H12X-H11X)/
     &  (PR1LKR(IP1X(2))-PR1LKR(IP1X(1))) + H11X
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of BLI_LKH group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE BO_BP( PBPX,POSMX,TX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Black oil bubble-point pressure.
!
!     Al-Shammasi, A.A. 2001. 
!     A Review of Bubblepoint Pressure and Oil Formation Volume 
!     Factor Correlations. SPE Res Eval & Eng 4 (2): 146-160. 
!     SPE-71302-PA. http://dx.doi.org/10.2118/71302-PA
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 14 May 2014
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/BO_BP'
!
!---  Convert temperature to degree R  ---
!
      TRX = (TX+TABS)*1.8D+0
!
!---  Convert gas to oil ratio from (m^3/m^3) to (scf/STB)  ---
!
      GORX = POSMX/1.78108D-1
!
!---  Bubble point pressure (psia) as a function of oil specific 
!     gravity, gas specific gravity, temperature (R), and gas to 
!     oil ratio (scf/STB) ---
!
      PBPX = (GCPP(37,2)**GCPP(24,2))*
     &  ((GCPP(37,1)*GORX*TRX)**GCPP(25,2))/
     &  EXP(GCPP(26,2)*GCPP(37,2)*GCPP(37,1))
!
!---  Convert pressure to Pa ---
!
      PBPX = PBPX*6.8947573D+3
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of BO_BP group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE BO_EQ_GAS( PX,PVWX,RHOGX,TX,XGCX,XGWX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Gas density, gas oil fraction,
!     and gas gas fraction.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 14 May 2014
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 XGCX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/BO_EQ_GAS'
!
!---  Gas formation volume fraction  ---
!
      CALL BO_FVF_GAS( FVFX,PX,TX )
!
!---  Gas density  ---
!
      RHOGX = 1.225D+0*GCPP(37,1)/FVFX
!
!---  Water vapor density, kg/m^3 ---
!
      ISRX = 2
      CALL DENS_W( TX,PVWX,RHOLWX,RHOGWX,ISRX )
!
!---  Water gas mass fraction ---
!
      XGWX = RHOGWX/(RHOGX+RHOGWX)
      RHOGX = RHOGX+RHOGWX
!
!---  Gas gas mass fractions  ---
!
      XGCX(1) = 1.D+0-XGWX
!
!---  Oil gas mass fractions  ---
!
      XGCX(2) = 0.D+0
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of BO_EQ_GAS group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE BO_EQ_OIL( RHONX,PX,POSMX,TX,XNCX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Nonaqueous-liquid density, nonaqueous-liquid oil fraction,
!     and nonaqueous-liquid gas fraction.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 14 May 2014
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 XNCX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/BO_EQ_OIL'
!
!---  Oil formation volume fraction, bbl/stb  ---
!
      CALL BO_FVF_OIL( FVFX,PX,POSMX,TX )
!
!---  Nonaqueous-liquid density  ---
!
      RHONX = (1.D+3*GCPP(37,2) + 1.225D+0*GCPP(37,1)*POSMX)/FVFX
!
!---  Nonaqueous-liquid mass fractions  ---
!
      XNCX(1) = (1.225D+0*GCPP(37,1)*POSMX/FVFX)/RHONX
      XNCX(2) = 1.D+0-XNCX(1)
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of BO_EQ_OIL group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE BO_DOV( VISDOX,TX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Black-oil dead-oil viscosity.
!
!     Glasø, Ø. 1980. Generalized Pressure-Volume-Temperature 
!     Correlations. J Pet Technol 32 (5): 785-795. SPE-8016-PA. 
!     http://dx.doi.org/10.2118/8016-PA
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 14 May 2014
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/BO_DOV'
!
!---  Convert temperature to degree F  ---
!
      TFX = TX*1.8D+0 + 32.D+0
!
!---  Convert oil specific gravity to oil specific gravity, API  ---
!
      OSGX = (141.5D+0/GCPP(37,2)) - 131.5D+0
!
!---  Dead oil viscosity (cP) as a function of oil specific 
!     gravity (API), and temperature (F) ---
!
      VISDOX = (3.141D+10/(TFX**3.444D+0))*
     &  (LOG10(OSGX)**(10.313D+0*LOG10(TFX)-36.44D+0))
!
!---  Convert viscosity to Pa s--
!
      VISDOX = VISDOX*1.D-3
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of BO_DOV group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE BO_FVF_GAS( FVFX,PX,TX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Gas formation volume fraction.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 14 May 2014
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/BO_FVF_GAS'
!
!---  Convert temperature to degree K  ---
!
      TKX = TX+TABS
!
!---  Convert pressure to psia ---
!
      PSIAX = PX/6.8947573D+3
!
!---  Gas compressibility factor ---
!
      ZGX = GCPP(24,1)
      DO M = 1,4
        ZGX = ZGX + GCPP(M+24,1)*(PSIAX**M)
      ENDDO
!
!---  Gas formation factor ---
!
      FVFX = 3.50958D+2*ZGX*TKX/PX
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of BO_FVF_GAS group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE BO_FVF_OIL( FVFX,PX,POSMX,TX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Oil formation volume fraction.
!
!     Al-Shammasi, A.A. 2001. 
!     A Review of Bubblepoint Pressure and Oil Formation Volume 
!     Factor Correlations. SPE Res Eval & Eng 4 (2): 146-160. 
!     SPE-71302-PA. http://dx.doi.org/10.2118/71302-PA
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 14 May 2014
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/BO_FVF_OIL'
!
!---  Convert temperature to degree F  ---
!
      TFX = TX*1.8D+0 + 32.D+0
!
!---  Convert gas to oil ratio from (m^3/m^3) to scf/STB  ---
!
      GORX = POSMX/1.78108D-1
!
!---  Bubble-point oil formation volume fraction bbl/STB as a  
!     function of oil specific gravity, gas specific gravity, 
!     temperature (F), and gas to oil ratio (scf/STB) ---
!
      FVFX = 1.D+0 + GCPP(27,2)*GORX*(TFX-60.D+0) + 
     &  GCPP(28,2)*GORX/GCPP(37,2) + GCPP(29,2)*(TFX-60.D+0)/GCPP(37,2)
     &  + GCPP(30,2)*GORX*GCPP(37,1)/GCPP(37,2)
!
!---  Undersaturated pressure difference, psia --
!
      DPX = MAX( PX-GCPP(38,2),0.D+0 )/6.8947573D+3
!
!---  Convert oil specific gravity to oil specific gravity, API  ---
!
      OSGX = (141.5D+0/GCPP(37,2)) - 131.5D+0
!
!---  Convert pressure to psia ---
!
      PSIAX = PX/6.8947573D+3
!
!---  Isothermal compressibility (1/psia) --
!
      CISOX = (GORX**0.1982D+0)*(TFX**0.6685D+0)*
     &  (GCPP(37,1)**(-0.21435D+0))*(OSGX**(1.0116D+0))*
     &  (PSIAX**(-0.1616D+0))
      CISOX = 1.D+1**(-5.4531D+0 + 5.03D-4*CISOX - 3.5D-8*(CISOX**2))
!
!---  Undersaturated oil formation volume fraction bbl/STB as a
!     function of the isothermal compressibility (1/psia), bubble-point
!     oil formation volume fraction (bbl/STB) and undersaturated 
!     pressure difference (psia)  ---
!
      FVFX = FVFX*EXP(CISOX*DPX)
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of BO_FVF_OIL group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE BO_GOR( PX,POSMX,TX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Gas to oil ratio.
!
!     Al-Shammasi, A.A. 2001. 
!     A Review of Bubblepoint Pressure and Oil Formation Volume 
!     Factor Correlations. SPE Res Eval & Eng 4 (2): 146-160. 
!     SPE-71302-PA. http://dx.doi.org/10.2118/71302-PA
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 14 May 2014
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/BO_GOR'
!
!---  Convert temperature to degree R  ---
!
      TRX = (TX+TABS)*1.8D+0
!
!---  Convert pressure to psia ---
!
      PBPX = PX/6.8947573D+3
!
!---  Gas to oil ration (scf/STB) as a function of bubble point 
!     pressure (psia), oil specific gravity, gas specific gravity, 
!     and temperature (R)  ---
!
      GOR = ((PBPX*EXP(GCPP(26,2)*GCPP(37,2)*GCPP(37,1))/
     &  (GCPP(37,2)**GCPP(24,2)))**(1.D+0/GCPP(25,2)))/
     &  (GCPP(37,1)*TRX)
!
!---  Convert gas to oil ratio from (scf/STB) to (m^3/m^3)  ---
!
      POSMX = 1.78108D-1*GOR
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of BO_GOR group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE BO_VISG( RHOGX,VISGX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Gas viscosity.
!
!     Lee, A.L., Gonzalez, M.H., and Eakin, B.E. 1966. The Viscosity 
!     of Natural Gases. J Pet Technol 18 (8): 997–1000. SPE-1340-PA. 
!     http://dx.doi.org/10.2118/1340-PA
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 20 May 2014
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/BO_VISG'
!
!---  Gas viscosity (cP) from a 3-term polynomial fit to 
!     gas density (kg/m^3)  ---
!
      VISGX = GCPP(29,1)
      DO M = 1,2
        VISGX = VISGX + GCPP(M+29,1)*(RHOGX**M)
      ENDDO
!
!---  Convert viscosity to Pa s--
!
      VISGX = VISGX*1.D-3
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of BO_VISG group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE BO_VISN( PX,POSMX,TX,VISNX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Nonaqueous-liquid viscosity.
!
!     Elsharkawy, A.M. and Alikhan, A.A. 1999. Models for predicting 
!     the viscosity of Middle East crude oils. Fuel 78 (8): 891–903. 
!     http://dx.doi.org/10.1016/S0016-2361(99)00019-8
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 20 May 2014
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/BO_VISN'
!
!---  Convert temperature to degree F  ---
!
      TFX = TX*1.8D+0 + 32.D+0
!
!---  Convert gas to oil ratio from (m^3/m^3) to (scf/STB)  ---
!
      GORX = POSMX/1.78108D-1
!
!---  Dead-oil viscosity (Pa s) ---
!
      CALL BO_DOV( VISDOX,TX )
!
!---  Convert dead-oil viscosity to cP  --
!
      VISDOX = VISDOX/1.D-3
!
!---  Bubble-point oil viscosity (cP)  --
!
      AX = GCPP(31,2)/((GORX+GCPP(32,2))**GCPP(33,2)) 
      BX = GCPP(34,2)/((GORX+GCPP(35,2))**GCPP(36,2))
      VISNX = AX*(VISDOX**BX)
!
!---  Undersaturated pressure difference, Pa --
!
      DPX = MAX( PX-GCPP(38,2),0.D+0 )
!
!---  Convert pressure difference and bubble-point pressure to psi ---
!
      DPX = DPX/6.8947573D+3
      PBPX = GCPP(38,2)/6.8947573D+3
!
!---  Undersaturated oil viscosity (cP), formulation of 
!     Elsharkawy (1999)  --
!
      VISNX = VISNX + (1.D+1**(-2.0771D+0))*DPX*(VISDOX**1.19279D+0)/
     &  ((VISNX**4.0712D-1)*(PBPX**7.941D-1))
!
!---  Convert nonaqueous-liquid viscosity to Pa s  --
!
      VISNX = VISNX*1.D-3
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of BO_VISN group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE BUBBLE_P( CGX,CNX,FKX,PBPX,TKX,YMCX,ZMCX,ZGX,ZNX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Bubble-point pressure.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 10 April 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 AIX(LNGC),FKX(LNGC),XMCX(LNGC),YMCX(LNGC),ZMCX(LNGC)
      REAL*8 FUGGX(LNGC),FUGGY(LNGC),FUGNX(LNGC),FUGNY(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/BUBBLE_P'
!
!---  Soave-Redlich-Kwong temperature dependent component 
!     coefficients  ---
!
      IF( ISLC(68).EQ.2 ) THEN
        CALL SRK_CT( AIX,TKX )
!
!---  Peng-Robinson temperature dependent component 
!     coefficients  ---
!
      ELSE
        CALL PR_CT( AIX,TKX )
      ENDIF
!
!---  Guess the bubble point pressure using the two-parameter
!     corresponding states equation for vapor pressure of Lee and 
!     and Kesler (Reid et al. 1987, pp. 207)  ---
!
      IF( PBPX.LT.0.D+0 ) THEN
        PBPX = -PBPX
      ELSE
      PBPX = 0.D+0
      DO IGC = 1,NGC+2
        TRX = TKX/GCPP(3,IGC)
        F0X = 5.92714D+0 - 6.09648D+0/TRX - 1.28862D+0*LOG(TRX) +
     &    0.169347D+0*(TRX**6)
        F1X = 15.2518D+0 - 15.6875D+0/TRX - 13.4721D+0*LOG(TRX) +
     &    0.043577D+0*(TRX**6)
        PSATX = GCPP(4,IGC)*MIN( EXP( F0X+GCPP(7,IGC)*F1X ),1.D+0 )
        PBPX = PBPX + PSATX*ZMCX(IGC)
      ENDDO
      ENDIF
!
!---  Estimate K-factors from the K-factor approximation of Wilson
!     ( Pedersen, K.S. and P.L. Christensen. 2007. Phase Behavior of
!     Petroleum Reservoir Fluids, pp. 118)  ---
!
      DO IGC = 1,NGC+2
        FKX(IGC) = EXP( LOG(GCPP(4,IGC)/PBPX) + 
     &    5.373D+0*(1.D+0 + GCPP(7,IGC))*(1.D+0 - (GCPP(3,IGC)/TKX)) )
      ENDDO
!
!---  Start of Newton-Raphson iteration for bubble-point pressure  ---
!
      DO
        DPBPY = MAX( 1.D-6*PBPX,1.D-2 )
        PBPY = PBPX + DPBPY
!
!---    Vapor mole fractions from liquid mole fractions 
!       and K-factors  ---
!
        SYMCX = 0.D+0
        DO IGC = 1,NGC+2
          YMCX(IGC) = ZMCX(IGC)*FKX(IGC)
          SYMCX = SYMCX + YMCX(IGC)
        ENDDO
!
!---    Normalize vapor mole fractions ---
!
        DO IGC = 1,NGC+2
          YMCX(IGC) = YMCX(IGC)/SYMCX
        ENDDO
!
!---    Soave-Redlich-Kwong equation of state  ---
!
        IF( ISLC(68).EQ.2 ) THEN
!
!---      Gas mixture coefficients  ---
!
          CALL SRK_CX( AGX,AIX,BGX,YMCX )
!
!---      Liquid mixture coefficients  ---
!
          CALL SRK_CX( ANX,AIX,BNX,ZMCX )
!
!---      Gas mixture compressibility  ---
!
          INDX = 1
          CALL SRK_Z( AGX,BGX,CAGX,CBGX,PBPX,TKX,ZGX,INDX )
          CALL SRK_Z( AGX,BGX,CAGY,CBGY,PBPY,TKX,ZGY,INDX )
!
!---      Liquid mixture compressibility  ---
!
          INDX = 2
          CALL SRK_Z( ANX,BNX,CANX,CBNX,PBPX,TKX,ZNX,INDX )
          CALL SRK_Z( ANX,BNX,CANY,CBNY,PBPY,TKX,ZNY,INDX )
!
!---      Gas mixture fugacity coefficient  ---
!
          CALL SRK_FUG( AGX,AIX,BGX,CAGX,CBGX,FUGGX,YMCX,ZGX )
          CALL SRK_FUG( AGX,AIX,BGX,CAGY,CBGY,FUGGY,YMCX,ZGY )
!
!---      Liquid mixture fugacity coefficient  ---
!
          CALL SRK_FUG( ANX,AIX,BNX,CANX,CBNX,FUGNX,ZMCX,ZNX )
          CALL SRK_FUG( ANX,AIX,BNX,CANY,CBNY,FUGNY,ZMCX,ZNY )
!
!---    Peng-Robinson equation of state  ---
!
        ELSE
!
!---      Gas mixture coefficients  ---
!
          CALL PR_CX( AGX,AIX,BGX,YMCX )
!
!---      Liquid mixture coefficients  ---
!
          CALL PR_CX( ANX,AIX,BNX,ZMCX )
!
!---      Gas mixture compressibility  ---
!
          INDX = 1
          CALL PR_Z( AGX,BGX,CAGX,CBGX,PBPX,TKX,ZGX,INDX )
          CALL PR_Z( AGX,BGX,CAGY,CBGY,PBPY,TKX,ZGY,INDX )
!
!---      Liquid mixture compressibility  ---
!
          INDX = 2
          CALL PR_Z( ANX,BNX,CANX,CBNX,PBPX,TKX,ZNX,INDX )
          CALL PR_Z( ANX,BNX,CANY,CBNY,PBPY,TKX,ZNY,INDX )
!
!---      Gas mixture fugacity coefficient  ---
!
          CALL PR_FUG( AGX,AIX,BGX,CAGX,CBGX,FUGGX,YMCX,ZGX )
          CALL PR_FUG( AGX,AIX,BGX,CAGY,CBGY,FUGGY,YMCX,ZGY )
!
!---      Liquid mixture fugacity coefficient  ---
!
          CALL PR_FUG( ANX,AIX,BNX,CANX,CBNX,FUGNX,ZMCX,ZNX )
          CALL PR_FUG( ANX,AIX,BNX,CANY,CBNY,FUGNY,ZMCX,ZNY )
        ENDIF
!
!---    K-factors, using fugacitiy coefficients  ---
!
        FX = -1.D+0
        DFX = 0.D+0
        DO IGC = 1,NGC+2
          FKX(IGC) = EXP( LOG(FUGNX(IGC)) - LOG(FUGGX(IGC)) )
          FX = FX + ZMCX(IGC)*FKX(IGC)
          DFX = DFX + ZMCX(IGC)*FKX(IGC)*
     &      ((LOG(FUGNY(IGC))-LOG(FUGNX(IGC)))/DPBPY - 
     &       (LOG(FUGGY(IGC))-LOG(FUGGX(IGC)))/DPBPY )
        ENDDO
        DPBPX = -FX/DFX
        PBPX = PBPX + DPBPX
        IF( ABS(DPBPX).LE.1.D-1 ) EXIT
      ENDDO
!
!---  Vapor mole fractions from liquid mole fractions and K-factors  ---
!
      SYMCX = 0.D+0
      DO IGC = 1,NGC+2
        YMCX(IGC) = ZMCX(IGC)*FKX(IGC)
        SYMCX = SYMCX + YMCX(IGC)
      ENDDO
!
!---  Normalize vapor mole fractions ---
!
      DO IGC = 1,NGC+2
        YMCX(IGC) = YMCX(IGC)/SYMCX
        IF( ZMCX(IGC).GT.EPSL ) THEN
          FKX(IGC) = YMCX(IGC)/ZMCX(IGC)
        ELSE
          FKX(IGC) = 1.D+0
        ENDIF
      ENDDO
!
!---  Soave-Redlich-Kwong equation of state  ---
!
      IF( ISLC(68).EQ.2 ) THEN
!
!---    Gas mixture coefficients  ---
!
        CALL SRK_CX( AGX,AIX,BGX,YMCX )
!
!---    Peneloux volume correction  ---
!
        CALL PENELOUX( CGX,TKX,YMCX )
        BGX = BGX - CGX
!
!---    Liquid mixture coefficients  ---
!
        CALL SRK_CX( ANX,AIX,BNX,ZMCX )
!
!---    Peneloux volume correction  ---
!
        CALL PENELOUX( CNX,TKX,XMCX )
        BNX = BNX - CNX
!
!---    Gas mixture compressibility  ---
!
        INDX = 1
        CALL SRK_Z( AGX,BGX,CAGX,CBGX,PBPX,TKX,ZGX,INDX )
!
!---    Liquid mixture compressibility  ---
!
        INDX = 2
        CALL SRK_Z( ANX,BNX,CANX,CBNX,PBPX,TKX,ZNX,INDX )
!
!---  Peng-Robinson equation of state  ---
!
      ELSE
!
!---    Gas mixture coefficients  ---
!
        CALL PR_CX( AGX,AIX,BGX,YMCX )
!
!---    Peneloux volume correction  ---
!
        CALL PENELOUX( CGX,TKX,YMCX )
        BGX = BGX - CGX
!
!---    Liquid mixture coefficients  ---
!
        CALL PR_CX( ANX,AIX,BNX,ZMCX )
!
!---    Peneloux volume correction  ---
!
        CALL PENELOUX( CNX,TKX,XMCX )
        BNX = BNX - CNX
!
!---    Gas mixture compressibility  ---
!
        INDX = 1
        CALL PR_Z( AGX,BGX,CAGX,CBGX,PBPX,TKX,ZGX,INDX )
!
!---    Liquid mixture compressibility  ---
!
        INDX = 2
        CALL PR_Z( ANX,BNX,CANX,CBNX,PBPX,TKX,ZNX,INDX )
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of BUBBLE_P group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE CAP_BC( SGX,SLX,SNX,CPGTX,CPNLX,N )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Gas-total liquid and nonaqueous liquid-aqueous capillary head
!     from gas, aqueous, and nonaqueous-liquid saturation for the
!     Brooks and Corey function
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 13 November 2014
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE GLB_PAR
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/CAP_VG'
      SG1X = SGX
!
!---  Webb extension  ---
!
      IF( ISM(N).EQ.2 ) THEN
        SLMPX = SCHR(7,N)
        HLMPX = SCHR(8,N)
        SNMPX = SCHR(9,N)
        HNMPX = SCHR(10,N)
        STMPX = SCHR(11,N)
        HTMPX = SCHR(12,N)
      ENDIF
!
!---  Total-liquid saturation  ---
!
      STZ = SLX+SNX
      IF( STZ.GT.EPSL ) THEN
        SLZ = SLX/STZ
        SNZ = SNX/STZ
      ELSE
        STZ = 0.D+0
        SLZ = 0.D+0
        SNZ = 0.D+0
      ENDIF
!
!---  Residual aqueous and nonaqueous saturation  ---
!
      SLRX = SCHR(4,N)
      SNRX = SCHR(5,N)
!
!---  Contact angle  ---
!
      THETAX = MIN( MAX( SCHR(6,N),0.D+0 ),GPI )
      BX = SCHR(13,N)
!
!---  Effective residual aqueous and nonaqueous saturation  ---
!
      ESLRX = 5.D-1*SLRX*(1.D+0+COS(THETAX))
      ESNRX = 5.D-1*SNRX*(1.D+0-COS(THETAX))
!
!---  Brooks and Corey function  ---
!
      CLX = MAX( SCHR(3,N),SMALL )
      SRX = SCHR(4,N)
!
!---  Webb extension  ---
!
      IF( ISM(N).EQ.2 ) THEN
!
!---    Total-liquid saturation below the matching point,
!       use Webb extension  ---
!
        IF( STZ.LT.STMPX ) THEN
          DMPX = -(LOG10(HDOD)-LOG10(HTMPX))/STMPX
          HGTX = 1.D+1**(DMPX*(STZ-STMPX) + LOG10(HTMPX))
!
!---    Total-liquid saturation at or above the matching point,
!       use Brooks and Corey function
!
        ELSE
          ESTX = MAX( (STZ-ESLRX-ESNRX)/(1.D+0-ESLRX-ESNRX),0.D+0 )
          IF( 1.D+0-ESTX.LT.EPSL ) THEN
            HGTX = 0.D+0
          ELSEIF( ESTX.LT.EPSL ) THEN
            HGTX = HDOD
          ELSE
            HGTX = SCHR(2,N)*(1.D+0/ESTX)**(1.D+0/CLX)
          ENDIF
        ENDIF
        IF( ABS(HGTX).LT.1.D-12 ) HGTX = 0.D+0
!
!---  No extension  ---
!
      ELSE
        ESTX = MAX( (STZ-ESLRX-ESNRX)/(1.D+0-ESLRX-ESNRX),0.D+0 )
        IF( 1.D+0-ESTX.LT.EPSL ) THEN
          HGTX = 0.D+0
        ELSEIF( ESTX.LT.EPSL ) THEN
          HGTX = HDOD
        ELSE
          HGTX = SCHR(2,N)*(1.D+0/ESTX)**(1.D+0/CLX)
        ENDIF
        IF( ABS(HGTX).LT.1.D-12 ) HGTX = 0.D+0
      ENDIF
!
!---  Webb extension  ---
!
      IF( ISM(N).EQ.2 ) THEN
!
!---    Aqueous saturation below the matching point,
!       use Webb extension  ---
!
        IF( SLZ.LT.SLMPX ) THEN
          DMPX = -(LOG10(HDOD)-LOG10(HLMPX))/SLMPX
          HNLPX = 1.D+1**(DMPX*(SLZ-SLMPX) + LOG10(HLMPX))
!
!---    Aqueous saturation at or above the matching point,
!       use Brooks and Corey function
!
        ELSE
          ESLX = MAX( (SLZ-ESLRX)/(1.D+0-ESLRX),0.D+0 )
          HNLPX = SCHR(2,N)*(1.D+0/ESLX)**(1.D+0/CLX)
        ENDIF
!
!---    Nonaqueous-liquid saturation below the matching point,
!       use Webb extension  ---
!
        IF( SNZ.LT.SNMPX ) THEN
          DMPX = -(LOG10(HDOD)-LOG10(HNMPX))/SNMPX
          HLNPX = 1.D+1**(DMPX*(SNZ-SNMPX) + LOG10(HNMPX))
!
!---    Aqueous saturation at or above the matching point,
!       use Brooks and Corey function
!
        ELSE
          ESNX = MAX( (SNZ-ESNRX)/(1.D+0-ESNRX),0.D+0 )
          HLNPX = SCHR(2,N)*(1.D+0/ESNX)**(1.D+0/CLX)
        ENDIF
        HNLX = (((1.D+0+COS(THETAX))**BX)*HNLPX -
     &    ((1.D+0-COS(THETAX))**BX)*HLNPX)/
     &    (2.D+0**BX)
      ELSE
!
!---    Aqueous saturation at or below the effective aqueous residual 
!       saturation  ---
!
        IF( SLZ.LE.ESLRX ) THEN
          HNLPX = HDOD
!
!---    Aqueous saturation above the effective aqueous residual 
!       saturation  ---
!
        ELSE
          ESLX = MAX( (SLZ-ESLRX)/(1.D+0-ESLRX),0.D+0 )
          HNLPX = SCHR(2,N)*(1.D+0/ESLX)**(1.D+0/CLX)
        ENDIF
!
!---    Nonaqueous-liquid saturation at or below the effective  
!       nonaqueous-liquid residual saturation  ---
!
        IF( SNZ.LE.ESNRX ) THEN
          HLNPX = HDOD
!
!---    Nonaqueous-liquid saturation above the effective 
!       nonaqueous-liquid residual saturation  ---
!
        ELSE
          ESNX = MAX( (SNZ-ESNRX)/(1.D+0-ESNRX),0.D+0 )
          HLNPX = SCHR(2,N)*(1.D+0/ESNX)**(1.D+0/CLX)
        ENDIF
        HNLX = (((1.D+0+COS(THETAX))**BX)*HNLPX -
     &    ((1.D+0-COS(THETAX))**BX)*HLNPX)/
     &    (2.D+0**BX)
      ENDIF
      IF( ABS(HGTX).LT.1.D-12 ) HGTX = 0.D+0
      IF( ABS(HNLX).LT.1.D-12 ) HNLX = 0.D+0
      CPGTX = HGTX*RHORL*GRAV
      CPNLX = HNLX*RHORL*GRAV
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of CAP_VG group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE CAP_VG( SGX,SLX,SNX,CPGTX,CPNLX,N )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Gas-total liquid and nonaqueous liquid-aqueous capillary head
!     from gas, aqueous, and nonaqueous-liquid saturation for the
!     van Genucthen function
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 13 November 2014
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE GLB_PAR
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/CAP_VG'
      SG1X = SGX
!
!---  Webb extension  ---
!
      IF( ISM(N).EQ.2 ) THEN
        SLMPX = SCHR(7,N)
        HLMPX = SCHR(8,N)
        SNMPX = SCHR(9,N)
        HNMPX = SCHR(10,N)
        STMPX = SCHR(11,N)
        HTMPX = SCHR(12,N)
      ENDIF
!
!---  Total-liquid saturation  ---
!
      STZ = SLX+SNX
      IF( STZ.GT.EPSL ) THEN
        SLZ = SLX/STZ
        SNZ = SNX/STZ
      ELSE
        STZ = 0.D+0
        SLZ = 0.D+0
        SNZ = 0.D+0
      ENDIF
!
!---  Residual aqueous and nonaqueous saturation  ---
!
      SLRX = SCHR(4,N)
      SNRX = SCHR(5,N)
!
!---  Contact angle  ---
!
      THETAX = MIN( MAX( SCHR(6,N),0.D+0 ),GPI )
      BX = SCHR(13,N)
!
!---  Effective residual aqueous and nonaqueous saturation  ---
!
      ESLRX = 5.D-1*SLRX*(1.D+0+COS(THETAX))
      ESNRX = 5.D-1*SNRX*(1.D+0-COS(THETAX))
!
!---  van Genuchten function  ---
!
      CNX = MAX( SCHR(3,N),SMALL )
      IF( SCHR(14,N).LE.ZERO ) THEN
        IF( IRPL(N).EQ.2 ) THEN
          CMX = 1.D+0 - 2.D+0/CNX
        ELSE
          CMX = 1.D+0 - 1.D+0/CNX
       ENDIF
      ELSE
        CMX = SCHR(14,N)
      ENDIF
!
!---  Webb extension  ---
!
      IF( ISM(N).EQ.2 ) THEN
!
!---    Total-liquid saturation below the matching point,
!       use Webb extension  ---
!
        IF( STZ.LT.STMPX ) THEN
          DMPX = -(LOG10(HDOD)-LOG10(HTMPX))/STMPX
          HGTX = 1.D+1**(DMPX*(STZ-STMPX) + LOG10(HTMPX))
!
!---    Total-liquid saturation at or above the matching point,
!       use van Genuchten function
!
        ELSE
          ESTX = MAX( (STZ-ESLRX-ESNRX)/(1.D+0-ESLRX-ESNRX),0.D+0 )
          IF( 1.D+0-ESTX.LT.EPSL ) THEN
            HGTX = 0.D+0
          ELSEIF( ESTX.LT.EPSL ) THEN
            HGTX = HDOD
          ELSE
            HGTX = (((1.D+0/ESTX)**(1.D+0/CMX)-1.D+0)**(1.D+0/CNX))
     &        /SCHR(1,N)
          ENDIF
        ENDIF
        IF( ABS(HGTX).LT.1.D-12 ) HGTX = 0.D+0
!
!---  No extension  ---
!
      ELSE
        ESTX = MAX( (STZ-ESLRX-ESNRX)/(1.D+0-ESLRX-ESNRX),0.D+0 )
        IF( 1.D+0-ESTX.LT.EPSL ) THEN
          HGTX = 0.D+0
        ELSEIF( ESTX.LT.EPSL ) THEN
          HGTX = HDOD
        ELSE
          HGTX = (((1.D+0/ESTX)**(1.D+0/CMX)-1.D+0)**(1.D+0/CNX))
     &      /SCHR(1,N)
        ENDIF
        IF( ABS(HGTX).LT.1.D-12 ) HGTX = 0.D+0
      ENDIF
!
!---  Webb extension  ---
!
      IF( ISM(N).EQ.2 ) THEN
!
!---    Aqueous saturation below the matching point,
!       use Webb extension  ---
!
        IF( SLZ.LT.SLMPX ) THEN
          DMPX = -(LOG10(HDOD)-LOG10(HLMPX))/SLMPX
          HNLPX = 1.D+1**(DMPX*(SLZ-SLMPX) + LOG10(HLMPX))
!
!---    Aqueous saturation at or above the matching point,
!       use van Genuchten function
!
        ELSE
          ESLX = MAX( (SLZ-ESLRX)/(1.D+0-ESLRX),0.D+0 )
          HNLPX = (((ESLX**(-1.D+0/CMX))-1.D+0)**(1.D+0/CNX))/
     &        SCHR(1,N)
        ENDIF
!
!---    Nonaqueous-liquid saturation below the matching point,
!       use Webb extension  ---
!
        IF( SNZ.LT.SNMPX ) THEN
          DMPX = -(LOG10(HDOD)-LOG10(HNMPX))/SNMPX
          HLNPX = 1.D+1**(DMPX*(SNZ-SNMPX) + LOG10(HNMPX))
!
!---    Aqueous saturation at or above the matching point,
!       use van Genuchten function
!
        ELSE
          ESNX = MAX( (SNZ-ESNRX)/(1.D+0-ESNRX),0.D+0 )
          HLNPX = (((ESNX**(-1.D+0/CMX))-1.D+0)**(1.D+0/CNX))/
     &        SCHR(1,N)
        ENDIF
        HNLX = (((1.D+0+COS(THETAX))**BX)*HNLPX -
     &    ((1.D+0-COS(THETAX))**BX)*HLNPX)/
     &    (2.D+0**BX)
      ELSE
!
!---    Aqueous saturation at or below the effective aqueous residual 
!       saturation  ---
!
        IF( SLZ.LE.ESLRX ) THEN
          HNLPX = HDOD
!
!---    Aqueous saturation above the effective aqueous residual 
!       saturation  ---
!
        ELSE
          ESLX = MAX( (SLZ-ESLRX)/(1.D+0-ESLRX),0.D+0 )
          HNLPX = (((ESLX**(-1.D+0/CMX))-1.D+0)**(1.D+0/CNX))/
     &        SCHR(1,N)
        ENDIF
!
!---    Nonaqueous-liquid saturation at or below the effective  
!       nonaqueous-liquid residual saturation  ---
!
        IF( SNZ.LE.ESNRX ) THEN
          HLNPX = HDOD
!
!---    Nonaqueous-liquid saturation above the effective 
!       nonaqueous-liquid residual saturation  ---
!
        ELSE
          ESNX = MAX( (SNZ-ESNRX)/(1.D+0-ESNRX),0.D+0 )
          HLNPX = (((ESNX**(-1.D+0/CMX))-1.D+0)**(1.D+0/CNX))/
     &        SCHR(1,N)
        ENDIF
        HNLX = (((1.D+0+COS(THETAX))**BX)*HNLPX -
     &    ((1.D+0-COS(THETAX))**BX)*HLNPX)/
     &    (2.D+0**BX)
      ENDIF
      IF( ABS(HGTX).LT.1.D-12 ) HGTX = 0.D+0
      IF( ABS(HNLX).LT.1.D-12 ) HNLX = 0.D+0
      CPGTX = HGTX*RHORL*GRAV
      CPNLX = HNLX*RHORL*GRAV
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of CAP_VG group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE COMP_LIQ( AIX,BNX,CNX,PX,TKX,XMCX,ZNX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Liquid compressibility
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 13 March 2014
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 AIX(LNGC)
      REAL*8 XMCX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/COMP_LIQ'
!
!---  Soave-Redlich-Kwong equation of state  ---
!
      IF( ISLC(68).EQ.2 ) THEN
!
!---    Liquid mixture coefficients  ---
!
        CALL SRK_CX( ANX,AIX,BNX,XMCX )
!
!---    Peneloux volume correction  ---
!
        CALL PENELOUX( CNX,TKX,XMCX )
        BNX = BNX - CNX
!
!---    Liquid mixture compressibility  ---
!
        INDX = 2
        CALL SRK_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,INDX )
!
!---  Peng-Robinson equation of state  ---
!
      ELSE
!
!---    Liquid mixture coefficients  ---
!
        CALL PR_CX( ANX,AIX,BNX,XMCX )
!
!---    Peneloux volume correction  ---
!
        CALL PENELOUX( CNX,TKX,XMCX )
        BNX = BNX - CNX
!
!---    Liquid mixture compressibility  ---
!
        INDX = 2
        CALL PR_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,INDX )
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of COMP_LIQ group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE COMP_VAP( AIX,BGX,CGX,PX,TKX,YMCX,ZGX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Liquid compressibility
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 13 March 2014
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 AIX(LNGC)
      REAL*8 YMCX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/COMP_VAP'
!
!---  Soave-Redlich-Kwong equation of state  ---
!
      IF( ISLC(68).EQ.2 ) THEN
!
!---    Liquid mixture coefficients  ---
!
        CALL SRK_CX( AGX,AIX,BGX,YMCX )
!
!---    Peneloux volume correction  ---
!
        CALL PENELOUX( CGX,TKX,YMCX )
        BGX = BGX - CGX
!
!---    Liquid mixture compressibility  ---
!
        INDX = 1
        CALL SRK_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,INDX )
!
!---  Peng-Robinson equation of state  ---
!
      ELSE
!
!---    Liquid mixture coefficients  ---
!
        CALL PR_CX( AGX,AIX,BGX,YMCX )
!
!---    Peneloux volume correction  ---
!
        CALL PENELOUX( CGX,TKX,YMCX )
        BGX = BGX - CGX
!
!---    Liquid mixture compressibility  ---
!
        INDX = 1
        CALL PR_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,INDX )
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of COMP_VAP group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE CRIT_PROP( PAFX,PCRX,TBPX,TCRX,VMCRX,ZMCX,ZCRX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Mixture critical properties.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 10 April 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 ZMCX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/CRIT_PROP'
!
!---  Petroleum component critical molar volume m^3/kmol, according
!     to Lee and Kesler (1975), from Petroleum Refining V.1: Crude
!     Oil. Petroleum Products. Process Flowsheets, pp. 112  ---
!
      VMCRAX = 0.D+0
      VMCRBX = 0.D+0
      VMCRCX = 0.D+0
      DO IGC = 1,NGC+2
        VMCRAX = VMCRAX + ZMCX(IGC)*GCPP(5,IGC)
        VMCRBX = VMCRBX + ZMCX(IGC)*(GCPP(5,IGC)**(2.D+0/3.D+0))
        VMCRCX = VMCRCX + ZMCX(IGC)*(GCPP(5,IGC)**(1.D+0/3.D+0))
      ENDDO
      VMCRX = 2.5D-1*VMCRAX + 7.5D-1*VMCRBX*VMCRCX
!
!---  Petroleum critical temperature, according
!     to Lee and Kesler (1975), from Petroleum Refining V.1: Crude
!     Oil. Petroleum Products. Process Flowsheets, pp. 112  ---
!
      TCRAX = 0.D+0  
      TCRBX = 0.D+0  
      TCRCX = 0.D+0  
      DO IGC = 1,NGC+2
        TCRAX = TCRAX + ZMCX(IGC)*GCPP(5,IGC)*GCPP(3,IGC)
        TCRBX = TCRBX + ZMCX(IGC)*(GCPP(5,IGC)**(2.D+0/3.D+0))
     &    *SQRT(GCPP(3,IGC))
        TCRCX = TCRCX + ZMCX(IGC)*(GCPP(5,IGC)**(1.D+0/3.D+0))
     &    *SQRT(GCPP(3,IGC))
      ENDDO
      TCRX = (2.5D-1*TCRAX + 7.5D-1*TCRBX*TCRCX)/VMCRX
!
!---  Petroleum component boiling point and acentric factor  ---
!
      TBPX = 0.D+0  
      PAFX = 0.D+0
      DO IGC = 1,NGC+2
        TBPX = TBPX + ZMCX(IGC)/GCPP(2,IGC)
        PAFX = PAFX + ZMCX(IGC)*GCPP(7,IGC)
      ENDDO
      TBPX = 1.D+0/TBPX
!
!---  Petroleum component critical compressibility factor  ---
!
      ZCRX = 2.91D-1 - 8.D-2*PAFX
!
!---  Petroleum component critical pressure  ---
!
      PCRX = RCU*ZCRX*TCRX/VMCRX
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of CRIT_PROP group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DENS_B( TX,PX,XLSX,RHOBX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     This subroutine calculates the density of NaCl brine as a
!     function of temperature (C), pressure (Pa), and NaCl
!     concentration (molality, mol NaCl/kg H2O).
!
!     Haas Jr., J.L.  1976.  Physical Properties of the Coexisting
!     Phases and Thermochemical Properties of the H2O Component
!     in Boiling NaCl Solutions.  Preliminary Steam Tables for
!     NaCl Solutions.  Geological Survey Bulletin 1421-A.
!
!     Phillips, S.L., H. Ozbek, and L.F. Silvester.  1983.
!     Density of Sodium Chloride Solutions at High Temperatures and
!     Pressures, LBL-16275, Lawrence Berkeley Laboratory, University
!     of California, Berkeley, California.
!
!     Temperature Range: 0 - 350 C
!     Pressure Range:  0.1 - 100 MPa
!     NaCl Concentration Range:  0 - 5 Molal (mol NaCl/kg H2O)
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 4 April 2002.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 CCX(4),CHX(10),SCX(3),SAX(3)
!
!----------------------Data Statements---------------------------------!
!
      DATA CCX / -3.033405D+0, 10.128163D+0, -8.750567D+0, 2.663107D+0 /
      DATA CHX / -167.219D+0, 448.55D+0, -261.07D+0, -13.644D+0,
     &  13.97D+0, -0.315154D+0, -1.203374D-3, 7.48908D-13,
     &  0.1342489D+0, -3.946963D-3 /
      DATA SCX / -9.9559D+0, 7.0845D+0, 3.9093D+0 /
      DATA SAX / -4.539D-3, -1.638D-4, 2.551D-5 /
      DATA VCX / 3.1975D+0 /
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/DENS_B'
!
!---  Convert pressure to bar and mass fraction to molality  ---
!
      PBX = 1.D-5*PX
      GLSX = 1.D+3*XLSX/(WTMS*(1.D+0-XLSX))
!
!---  Restrict temperature to above 0.01 C  ---
!
      TY = MAX( TX,1.D-2 )
!
!---  Compressed or vapor-saturated density of pure water using the
!     ASME formulations  ---
!
      CALL SP_W( TY,PSWX )
      ISRX = 1
      PWX = MAX( PX,PSWX )
      CALL DENS_W( TY,PWX,RHOLWX,RHOX,ISRX )
!
!---  Convert density units to gm/cm^3  ---
!
      RHOLWX = 1.D-3*RHOLWX
      VOX = 1.D+0/RHOLWX
!
!---  Limiting apparent molal volume (cm^3/mol) of NaCl in solution as
!     the concentration goes to zero  ---
!
      PHIPX = CHX(1) + CHX(2)*VOX + CHX(3)*(VOX**2)
!
!---  Apparent molal volume (cm^3/mol) of NaCl in solution  ---
!
      PHIX = PHIPX + (CHX(4)+CHX(5)*VOX)*((VOX/(VCX-VOX))**2)*SQRT(GLSX)
!
!---  Brine density (gm/cm^3)  ---
!
      RHOBX = (1.D+3 + GLSX*WTMS)/(1.D+3*VOX + GLSX*PHIX)
!
!---  Compressed or vapor-saturated density of pure water (gm/cm^3)
!     using the Phillips et al. formulations  ---
!
!      PBWX = 1.D-5*PWX
!      SXX = SCX(1) + SCX(2)*EXP(SAX(2)*TY) +
!     &  SCX(3)*EXP(SAX(3)*PBWX)
!      RHOLWPX = CCX(1) + CCX(2)*SXX + CCX(3)*(SXX**2) + CCX(4)*(SXX**3)
!
!---  Density of NaCl brine (gm/cm^3) using the Phillips et al.
!     formulations  ---
!
!      SXX = SCX(1)*EXP(SAX(1)*GLSX) + SCX(2)*EXP(SAX(2)*TY) +
!     &  SCX(3)*EXP(SAX(3)*PBX)
!      RHOBPX = CCX(1) + CCX(2)*SXX + CCX(3)*(SXX**2) +  CCX(4)*(SXX**3)
!
!---  Apparent molal volume of NaCl in solution  ---
!
!      SPHIX = 0.D+0
!      IF( GLSX/EPSL.GT.EPSL ) SPHIX = (RHOLWPX*(1.D+3 + GLSX*WTMS) -
!     &  RHOBPX*1.D+3)/(GLSX*RHOLWPX*RHOBPX)
!
!---  Normalize brine density (gm/cm^3) to ASME formulation  ---
!
!      RHOBX = (1.D+3 + GLSX*WTMS)/((1.D+3/RHOLWX) + GLSX*SPHIX)
!      RHOBX = RHOBPX + (RHOLWX - RHOLWPX)*EXP(-GLSX)
!
!---  Convert density units to kg/m^3  ---
!
      RHOBX = 1.D+3*RHOBX
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of DENS_B group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DENS_L( TX,RHOBX,XLAX,RHOLX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     This subroutine calculates the density of CO2 gas dissolved
!     in NaCl brine as a function of the brine density and dissolved
!     gas mass fraction.
!
!     Alendal, G., and H. Drange.  2001.  Two-phase, near-field,
!     modeling of purposefully released CO2 in the ocean.  Journal
!     of Geophysical Research, 106(C1):1085-1096.
!
!     Anderson, G.M., and D.A. Crerar.  1992.  Thermodynamics in
!     Geochemistry: The Equilibrium Model, Oxford University Press.
!
!     Variable definitions
!
!     PMV_A - molar volume of CO2 (m^3/kmol)
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 12 April 2002.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------TYPE DECLARATIONS-------------------------------!
!
      REAL*8 PMV_A
      REAL*8 PMV_C(5)
!
!----------------------Data Statements---------------------------------!
!
      DATA PMV_C / 37.36D-3,-7.109D-5,-3.812D-8,3.296D-9,-3.702D-12 /
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/DENS_L'
      IF( ISLC(9).EQ.1 ) THEN
        RHOLX = RHOLI
        ISUB_LOG = ISUB_LOG-1
        RETURN
      ENDIF
!
!---  Partial molar volume of CO2 (m^3/kmol), formulation of
!     Anderson et al. (1992)  ---
!
      PMV_A = 0.D+0
      DO M = 1,5
        PMV_A = PMV_A + PMV_C(M)*(TX**(M-1))
      ENDDO
      CXA = PMV_A*RHOBX*XLAX/WTMA
!
!---  Poynting correction  ---
!
      RHOLX = RHOBX/(1.D+0 + CXA - XLAX)
!      RHOLX = RHOBX + WTMA*CX - CX*RHOBX*PMV_A
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of DENS_L group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DENS_CH4( PX,RHOX,TX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Density of CH4 gas.
!
!     Setzmann, U., and W. Wagner.  1991.  A New Equation of State and
!     Tables of Thermodynamic Properties for Methane Covering the
!     Range from the Melting Line to 625 K at Pressures up to 1000 MPa.
!     J. Phys. Chem. Ref. Data 20(6):1061-1155.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 25 April 2002.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE NCG_PT
      USE NAPL
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      INTEGER I_PX(2),I_TX(2)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/DENS_CH4'
!
!---  Table lookup and bilinear interpolation  ---
!
      IF( (PX*1.D-6).GT.P_TA(1,1) ) THEN
        NF = 1
        CALL ITL_A( PX,TX,I_PX,I_TX,I_VX,NF)
        CALL PTL_A( PX,TX,RHO_TA,RHOX,I_PX,I_TX,NF )
!
!---  Ideal gas law  ---
!
      ELSE
        TKX = TX+TABS
        RHOX = (PX*WTMO)/(RCU*TKX)
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of DENS_CH4 group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DENS_S( TX,PX,RHOSX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Density of precipitated NaCl.
!
!     Battistelli, A., C. Claudio, and K. Pruess.  1997.  The simulator
!     TOUGH2/EWASG for modelling geothermal reservoirs with brines and
!     noncondensible gas.  Geothermics, 26(4): 437-464.
!
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 1 May 2002.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/DENS_S'
!
!---  Formulation of Battistelli et al.  ---
!
      RHOSX = 2.165D+3*EXP(-1.2D-4*TX + 4.D-11*PX)
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of DENS_S group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DENS_W( TX,PX,RHOLX,RHOVX,ISRX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Density (kg/m^3) of pure water as a function of temperature and
!     pressure.
!
!     Pressure Range: 0 - 100 MPa (1000 Bar)
!     Temperature Range:  273.16 K (0.01 C) to 1073.15K (800 C)
!
!     Meyer, C.A., R.B. McClintock, G.J. Silvestri, and R.C. Spencer
!     1993.  ASME Steam Tables, The American Society of Mechanical
!     Engineers, New York.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 26 March 2002.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 CAX(23),SAX(12),CBX(31),SBX(5),LFCX(3),SLX
      REAL*8 TX,PX,RHOLX,RHOVX
      INTEGER ISRX,INX(8),IZX(8,3),ITX(8),IXX(8,2)
!
!----------------------Data Statements---------------------------------!
!
      DATA CAX / 6.824687741D+3, -5.422063673D+2, -2.096666205D+4,
     &  3.941286787D+4, -6.733277739D+4, 9.902381028D+4,
     &  -1.093911774D+5, 8.590841667D+4, -4.511168742D+4,
     &  1.418138926D+4, -2.017271113D+3, 7.982692717D+0,
     &  -2.616571843D-2, 1.522411790D-3, 2.284279054D-2,
     &  2.421647003D+2, 1.269716088D-10, 2.074838328D-7,
     &  2.174020350D-8, 1.105710498D-9, 1.293441934D+1,
     &  1.308119072D-5, 6.047626338D-14 /
      DATA SAX / 8.438375405D-1, 5.362162162D-4, 1.720000000D+0,
     &  7.342278489D-2, 4.975858870D-2, 6.537154300D-1,
     &  1.150000000D-6, 1.150800000D-5, 1.418800000D-1,
     &  7.002753165D+0, 2.995284926D-4, 2.040000000D-1 /
      DATA CBX / 1.683599274D+1, 2.856067796D+1, -5.438923329D+1,
     &  4.330662834D-1, -6.547711697D-1, 8.565182058D-2,
     &  6.670375918D-2, 1.388983801D+0, 8.390104328D-2,
     &  2.614670893D-2, -3.373439453D-2, 4.520918904D-1,
     &  1.069036614D-1, -5.975336707D-1, -8.847535804D-2,
     &  5.958051609D-1, -5.159303373D-1, 2.075021122D-1,
     &  1.190610271D-1, -9.867174132D-2, 1.683998803D-1,
     &  -5.809438001D-2, 6.552390126D-3, 5.710218649D-4,
     &  1.936587558D+2, -1.388522425D+3, 4.126607219D+3,
     &  -6.508211677D+3, 5.745984054D+3, -2.693088365D+3,
     &  5.235718623D+2/
      DATA SBX / 7.633333333D-1, 4.006073948D-1, 8.636081627D-2,
     &  -8.532322921D-1, 3.460208861D-1 /
      DATA LFCX / 1.574373327D+1, -3.417061978D+1, 1.931380707D+1 /
      DATA SLX / 4.260321148D+0 /
      DATA INX / 2, 3, 2, 2, 3, 2, 2, 2 /
      DATA IZX / 13, 18, 18, 25, 32, 12, 24, 24,
     &  3, 2, 10, 14, 28, 11, 18, 14,
     &  0, 1, 0, 0, 24, 0, 0, 0 /
      DATA ITX / 0, 0, 0, 0, 0, 1, 1, 2 /
      DATA IXX / 0, 0, 0, 0, 0, 14, 19, 54,
     &  0, 0, 0, 0, 0, 0, 0, 27 /
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/DENS_W'
!
!---  Restrict temperature to above 0.01 C and below 800 C  ---
!
      TY = MIN( MAX( TX,1.D-2 ),8.D+2 )
!
!---  Restrict pressure to above 0.0 MPa and below 100 MPa  ---
!
      PY = MIN( MAX( PX,0.D+0 ),1.D+8 )
!
!---  Zero pressure condition  ---
!
      IF( PY/EPSL.LT.EPSL ) THEN
        RHOLX = 0.D+0
        RHOVX = 0.D+0
        ISUB_LOG = ISUB_LOG-1
        RETURN
      ENDIF
!
!---  Reduced temperature and pressure  ---
!
      RHOLX = 0.D+0
      RHOVX = 0.D+0
      THETAX = (TY+TABS)/TCRW
      BETAX = PY/PCRW
!
!---  L-function  ---
!
      BETALX = LFCX(1) + LFCX(2)*THETAX + LFCX(3)*(THETAX**2)
!
!---  Subregions 1 or 6  ---
!
      IF( ISRX.EQ.1 .OR. ISRX.EQ.6 ) THEN
        CYX = 1.D+0 - SAX(1)*(THETAX**2) - SAX(2)/(THETAX**6)
        CZX = CYX + SQRT((SAX(3)*(CYX**2)) - (2.D+0*SAX(4)*THETAX) +
     &    (2.D+0*SAX(5)*BETAX))
        RVX = CAX(12)*SAX(5)*(CZX**(-5.D+0/17.D+0))
        RVX = RVX +  (CAX(13) + CAX(14)*THETAX + CAX(15)*(THETAX**2) +
     &    CAX(16)*((SAX(6)-THETAX)**10) + CAX(17)/(SAX(7)+(THETAX**19)))
        RVX = RVX - (CAX(18) + 2.D+0*CAX(19)*BETAX +
     &    3.D+0*CAX(20)*(BETAX**2))/(SAX(8)+(THETAX**11))
        RVX = RVX - CAX(21)*(THETAX**18)*(SAX(9)+(THETAX**2))*
     &    (-3.D+0/((SAX(10)+BETAX)**4))
        RVX = RVX + 3.D+0*CAX(22)*(SAX(12)-THETAX)*(BETAX**2)
        RVX = RVX + 4.D+0*CAX(23)*(BETAX**3)/(THETAX**20)
        RHOLX = (1.D+3*WTMW)/(RVX*VCRW)
      ENDIF
!
!---  Subregions 2 or 6  ---
!
      IF( ISRX.EQ.2 .OR. ISRX.EQ.6 ) THEN
        CXX = EXP(SBX(1)*(1.D+0-THETAX))
        RVX = SLX*THETAX/BETAX
        ICBX = 6
        DO I = 1,5
          RVAX = 0.D+0
          DO J = 1,INX(I)
            ICBX = ICBX + 1
            RVAX = RVAX + CBX(ICBX)*(CXX**IZX(I,J))
          ENDDO
          REALX = REAL(I)
          RVX = RVX - REALX*(BETAX**(I-1))*RVAX
        ENDDO
        ICBX = 18
        ISBX = 1
        DO I = 6,8
          RVAX = 0.D+0
          DO J = 1,INX(I)
            ICBX = ICBX + 1
            RVAX = RVAX + CBX(ICBX)*(CXX**IZX(I,J))
          ENDDO
          RVBX = 0.D+0
          DO J = 1,ITX(I)
            ISBX = ISBX + 1
            RVBX = RVBX + SBX(ISBX)*(CXX**IXX(I,J))
          ENDDO
          REALX = REAL(I)
          RVX = RVX - ((REALX-2.D+0)*(BETAX**(1-I))*RVAX)/
     &      (((BETAX**(2-I))+RVBX)**2)
        ENDDO
        ICBX = 24
        RVAX = 0.D+0
        DO I = 0,6
          ICBX = ICBX + 1
          RVAX = RVAX + CBX(ICBX)*(CXX**I)
        ENDDO
        RVX = RVX + 1.1D+1*((BETAX/BETALX)**10)*RVAX
        RHOVX = (1.D+3*WTMW)/(RVX*VCRW)
      ENDIF
!
!---  Subregions 3 or 5  ---
!
      IF( ISRX.EQ.3 .OR. ISRX.EQ.5 ) THEN
        M_ERR(1) = 'Steam Table Subregion 3/5: Exceeds Temperature ' // 
     &    'Range: '
        M_ERR(2) = ' Temperature = '
        IF( N_DB.LT.0 ) THEN
          M_ERR(3) = ' at Boundary Surface: '
        ELSE
          M_ERR(3) = ' at Node: '
        ENDIF
        CALL PATH
        R_ERR = TX
        I_ERR(1) = ABS(N_DB)
        I_ERR(2) = 2
        I_ERR(3) = 3
        I_ERR(4) = ID
      ENDIF
!
!---  Subregions 4 or 5  ---
!
      IF( ISRX.EQ.4 .OR. ISRX.EQ.5 ) THEN
        M_ERR(1) = 'Steam Table Subregion 4/5: Exceeds Temperature ' // 
     &    'Range: '
        M_ERR(2) = ' Temperature = '
        IF( N_DB.LT.0 ) THEN
          M_ERR(3) = ' at Boundary Surface: '
        ELSE
          M_ERR(3) = ' at Node: '
        ENDIF
        CALL PATH
        R_ERR = TX
        I_ERR(1) = ABS(N_DB)
        I_ERR(2) = 2
        I_ERR(3) = 3
        I_ERR(4) = ID
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of DENS_W group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DEW_P( CGX,CNX,FKX,PDPX,TKX,XMCX,ZMCX,ZGX,ZNX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Dew-point pressure.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 6 May 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 AIX(LNGC),FKX(LNGC),XMCX(LNGC),YMCX(LNGC),ZMCX(LNGC)
      REAL*8 FUGGX(LNGC),FUGGY(LNGC),FUGNX(LNGC),FUGNY(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/DEW_P'
!
!---  Soave-Redlich-Kwong temperature dependent component 
!     coefficients  ---
!
      IF( ISLC(68).EQ.2 ) THEN
        CALL SRK_CT( AIX,TKX )
!
!---  Peng-Robinson temperature dependent component 
!     coefficients  ---
!
      ELSE
        CALL PR_CT( AIX,TKX )
      ENDIF
!
!---  Guess the dew point pressure using the two-parameter
!     corresponding states equation for vapor pressure of Lee and 
!     and Kesler (Reid et al. 1987, pp. 207)  ---
!
      IF( PDPX.LT.0.D+0 ) THEN
        PDPX = -PDPX
      ELSE
        PDPX = 0.D+0
        DO IGC = 1,NGC+2
          TRX = TKX/GCPP(3,IGC)
          F0X = 5.92714D+0 - 6.09648D+0/TRX - 1.28862D+0*LOG(TRX) +
     &      0.169347D+0*(TRX**6)
          F1X = 15.2518D+0 - 15.6875D+0/TRX - 13.4721D+0*LOG(TRX) +
     &      0.043577D+0*(TRX**6)
          PSATX = GCPP(4,IGC)*MIN( EXP( F0X+GCPP(7,IGC)*F1X ),1.D+0 )
          PDPX = PDPX + ZMCX(IGC)/PSATX
        ENDDO
        PDPX = 1.D+0/PDPX
      ENDIF
!
!---  Estimate K-factors from the K-factor approximation of Wilson
!     ( Pedersen, K.S. and P.L. Christensen. 2007. Phase Behavior of
!     Petroleum Reservoir Fluids, pp. 118)  ---
!
      DO IGC = 1,NGC+2
        FKX(IGC) = EXP( LOG(GCPP(4,IGC)/PDPX) + 
     &    5.373D+0*(1.D+0 + GCPP(7,IGC))*(1.D+0 - (GCPP(3,IGC)/TKX)) )
      ENDDO
!
!---  Start of Newton-Raphson iteration for dew-point pressure  ---
!
      DO
        DPDPY = MAX( 1.D-6*PDPX,1.D-2 )
        PDPY = PDPX + DPDPY
!
!---    Liquid mole fractions from vapor mole fractions 
!       and K-factors  ---
!
        SXMCX = 0.D+0
        DO IGC = 1,NGC+2
          XMCX(IGC) = ZMCX(IGC)/FKX(IGC)
          SXMCX = SXMCX + XMCX(IGC)
        ENDDO
!
!---    Normalize liquid mole fractions ---
!
        DO IGC = 1,NGC+2
          XMCX(IGC) = XMCX(IGC)/SXMCX
        ENDDO
!
!---    Soave-Redlich-Kwong equation of state  ---
!
        IF( ISLC(68).EQ.2 ) THEN
!
!---      Gas mixture coefficients  ---
!
          CALL SRK_CX( AGX,AIX,BGX,ZMCX )
!
!---      Liquid mixture coefficients  ---
!
          CALL SRK_CX( ANX,AIX,BNX,XMCX )
!
!---      Gas mixture compressibility  ---
!
          INDX = 1
          CALL SRK_Z( AGX,BGX,CAGX,CBGX,PDPX,TKX,ZGX,INDX )
          CALL SRK_Z( AGX,BGX,CAGY,CBGY,PDPY,TKX,ZGY,INDX )
!
!---      Liquid mixture compressibility  ---
!
          INDX = 2
          CALL SRK_Z( ANX,BNX,CANX,CBNX,PDPX,TKX,ZNX,INDX )
          CALL SRK_Z( ANX,BNX,CANY,CBNY,PDPY,TKX,ZNY,INDX )
!
!---      Gas mixture fugacity coefficient  ---
!
          CALL SRK_FUG( AGX,AIX,BGX,CAGX,CBGX,FUGGX,ZMCX,ZGX )
          CALL SRK_FUG( AGX,AIX,BGX,CAGY,CBGY,FUGGY,ZMCX,ZGY )
!
!---      Liquid mixture fugacity coefficient  ---
!
          CALL SRK_FUG( ANX,AIX,BNX,CANX,CBNX,FUGNX,XMCX,ZNX )
          CALL SRK_FUG( ANX,AIX,BNX,CANY,CBNY,FUGNY,XMCX,ZNY )
!
!---    Peng-Robinson equation of state  ---
!
        ELSE
!
!---      Gas mixture coefficients  ---
!
          CALL PR_CX( AGX,AIX,BGX,ZMCX )
!
!---      Liquid mixture coefficients  ---
!
          CALL PR_CX( ANX,AIX,BNX,XMCX )
!
!---      Gas mixture compressibility  ---
!
          INDX = 1
          CALL PR_Z( AGX,BGX,CAGX,CBGX,PDPX,TKX,ZGX,INDX )
          CALL PR_Z( AGX,BGX,CAGY,CBGY,PDPY,TKX,ZGY,INDX )
!
!---      Liquid mixture compressibility  ---
!
          INDX = 2
          CALL PR_Z( ANX,BNX,CANX,CBNX,PDPX,TKX,ZNX,INDX )
          CALL PR_Z( ANX,BNX,CANY,CBNY,PDPY,TKX,ZNY,INDX )
!
!---      Gas mixture fugacity coefficient  ---
!
          CALL PR_FUG( AGX,AIX,BGX,CAGX,CBGX,FUGGX,ZMCX,ZGX )
          CALL PR_FUG( AGX,AIX,BGX,CAGY,CBGY,FUGGY,ZMCX,ZGY )
!
!---      Liquid mixture fugacity coefficient  ---
!
          CALL PR_FUG( ANX,AIX,BNX,CANX,CBNX,FUGNX,XMCX,ZNX )
          CALL PR_FUG( ANX,AIX,BNX,CANY,CBNY,FUGNY,XMCX,ZNY )
        ENDIF
!
!---    K-factors, using fugacitiy coefficients  ---
!
        FX = -1.D+0
        DFX = 0.D+0
        DO IGC = 1,NGC+2
          FKX(IGC) = EXP( LOG(FUGNX(IGC)) - LOG(FUGGX(IGC)) )
          FX = FX + ZMCX(IGC)/FKX(IGC)
          DFX = DFX + ZMCX(IGC)/FKX(IGC)*
     &      ((LOG(FUGGY(IGC))-LOG(FUGGX(IGC)))/DPDPY - 
     &       (LOG(FUGNY(IGC))-LOG(FUGNX(IGC)))/DPDPY )
        ENDDO
        DPDPX = -FX/DFX
        PDPX = PDPX + DPDPX
        IF( ABS(DPDPX).LE.1.D-1 ) EXIT
      ENDDO
!
!---  Liquid mole fractions from vapor mole fractions and K-factors  ---
!
      SXMCX = 0.D+0
      DO IGC = 1,NGC+2
        XMCX(IGC) = ZMCX(IGC)/FKX(IGC)
        SXMCX = SXMCX + XMCX(IGC)
      ENDDO
!
!---  Normalize liquid mole fractions ---
!
      DO IGC = 1,NGC+2
        XMCX(IGC) = XMCX(IGC)/SXMCX
        IF( XMCX(IGC).GT.EPSL ) THEN
          FKX(IGC) = ZMCX(IGC)/XMCX(IGC)
        ELSE
          FKX(IGC) = 1.D+0
        ENDIF
      ENDDO
!
!---  Soave-Redlich-Kwong equation of state  ---
!
      IF( ISLC(68).EQ.2 ) THEN
!
!---    Gas mixture coefficients  ---
!
        CALL SRK_CX( AGX,AIX,BGX,ZMCX )
!
!---    Peneloux volume correction  ---
!
        CALL PENELOUX( CGX,TKX,YMCX )
        BGX = BGX - CGX
!
!---    Liquid mixture coefficients  ---
!
        CALL SRK_CX( ANX,AIX,BNX,XMCX )
!
!---    Peneloux volume correction  ---
!
        CALL PENELOUX( CNX,TKX,XMCX )
        BNX = BNX - CNX
!
!---    Gas mixture compressibility  ---
!
        INDX = 1
        CALL SRK_Z( AGX,BGX,CAGX,CBGX,PDPX,TKX,ZGX,INDX )
!
!---    Liquid mixture compressibility  ---
!
        INDX = 2
        CALL SRK_Z( ANX,BNX,CANX,CBNX,PDPX,TKX,ZNX,INDX )
!
!---  Peng-Robinson equation of state  ---
!
      ELSE
!
!---    Gas mixture coefficients  ---
!
        CALL PR_CX( AGX,AIX,BGX,ZMCX )
!
!---    Peneloux volume correction  ---
!
        CALL PENELOUX( CGX,TKX,YMCX )
        BGX = BGX - CGX
!
!---    Liquid mixture coefficients  ---
!
        CALL PR_CX( ANX,AIX,BNX,XMCX )
!
!---    Peneloux volume correction  ---
!
        CALL PENELOUX( CNX,TKX,XMCX )
        BNX = BNX - CNX
!
!---    Gas mixture compressibility  ---
!
        INDX = 1
        CALL PR_Z( AGX,BGX,CAGX,CBGX,PDPX,TKX,ZGX,INDX )
!
!---    Liquid mixture compressibility  ---
!
        INDX = 2
        CALL PR_Z( ANX,BNX,CANX,CBNX,PDPX,TKX,ZNX,INDX )
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of DEW_P group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DIFBG_CC( DFCX,PX,TX,I,J )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Calculates the component-pair binary diffusion coefficient from
!     the Wilke and Lee theory. pp. 587.
!
!     Liquid molar volume is computed from critical molar volume with
!     the Tyn and Calus method. pp. 53-54.
!
!     Reid, R.C., J.M. Prausnitz, and B.E. Poling. 1987.
!     The Properties of Gases and Liquids.
!     McGraw-Hill, New York, New York
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, Battelle, PNL, January, 1992.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 A(8)
!
!----------------------Data Statements---------------------------------!
!
      DATA A /1.06036D+0,1.5610D-1,1.9300D-1,4.7635D-1,1.03587D+0,
     &        1.52996D+0,1.76474D+0,3.89411D+0/
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/DIFBG_CC'
      TKX = TX+TABS
      PBX = PX*1.D-5
      TPX = TKX/SQRT(GCPP(8,I)*GCPP(8,J))
      SIGX = 5.D-1*(GCPP(10,I)+GCPP(10,J))
      OMGX = (A(1)/TPX**A(2)) + (A(3)/EXP(A(4)*TPX))
     &  + (A(5)/EXP(A(6)*TPX))  + (A(7)/EXP(A(8)*TPX))
      WTMX = 2.D+0/((1.D+0/GCPP(1,I)) + (1.D+0/GCPP(1,J)))
      DFCX = (3.03D+0 - (9.8D-1/SQRT(WTMX)))*1.D-3*(TKX**1.5D+0)/
     &  (PBX*SQRT(WTMX)*(SIGX**2)*(OMGX))*1.D-4
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of DIFBG_CC group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DIFBG_WC( DFCX,PX,TX,J )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Calculates the component-pair binary diffusion coefficient from
!     the Wilke and Lee theory. pp. 587.
!
!     Reid, R.C., J.M. Prausnitz, and B.E. Poling. 1987.
!     The Properties of Gases and Liquids.
!     McGraw-Hill, New York, New York
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, Battelle, PNL, January, 1992.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 A(8)
!
!----------------------Data Statements---------------------------------!
!
      DATA A /1.06036D+0,1.5610D-1,1.9300D-1,4.7635D-1,1.03587D+0,
     &        1.52996D+0,1.76474D+0,3.89411D+0/
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/DIFBG_WC'
      TKX = TX+TABS
      PBX = PX*1.D-5
      TPX = TKX/SQRT(809.1D+0*GCPP(8,J))
      SIGX = 5.D-1*(2.641D+0+GCPP(10,J))
      OMGX = (A(1)/TPX**A(2)) + (A(3)/EXP(A(4)*TPX))
     &  + (A(5)/EXP(A(6)*TPX))  + (A(7)/EXP(A(8)*TPX))
      WTMX = 2.D+0/((1.D+0/WTMW) + (1.D+0/GCPP(1,J)))
      DFCX = (3.03D+0 - (9.8D-1/SQRT(WTMX)))*1.D-3*(TKX**1.5D+0)/
     &  (PBX*SQRT(WTMX)*(SIGX**2)*(OMGX))*1.D-4
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of DIFBG_WC group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DIFC_G( DFGCX,DFGWX,PX,TX,XMGCX,XMGWX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Component gas diffusion coefficient, using Blanc's law
!     and binary diffusion coefficients, pp. 597.
!
!     Reid, R.C., J.M. Prausnitz, and B.E. Poling. 1987.
!     The Properties of Gases and Liquids.
!     McGraw-Hill, New York, New York
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 21 September 2012
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 DFCX(LNGC+1,LNGC+1),DFGCX(LNGC),XMGCX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/DIFC_G'
!
!---  Zero diffusion coefficient option  ---
!
      IF( ISLC(2).EQ.0 ) THEN
        DO IGC = 1,NGC+2
          DFGCX(IGC) = 0.D+0
        ENDDO
        DFGWX = 0.D+0
!
!---  Constant diffusion coefficient option  ---
!
      ELSEIF( ISLC(2).EQ.1 ) THEN
        DO IGC = 1,NGC+2
          DFGCX(IGC) = DFNAC
        ENDDO
        DFGWX = DFNAC
!
!---  Variable diffusion coefficient option  ---
!
      ELSE
!
!---    Binary diffusion coefficients  ---
!
        DO JGC = 1,NGC+3
          DO IGC = 1,NGC+3
            IF( IGC.EQ.JGC ) THEN
              DFCX(IGC,JGC) = 1.D+0
            ELSEIF( IGC.GT.JGC ) THEN
              IF( IGC.EQ.NGC+3 ) THEN
                CALL DIFBG_WC( DFCX(IGC,JGC),PX,TX,JGC )
              ELSE
                CALL DIFBG_CC( DFCX(IGC,JGC),PX,TX,IGC,JGC )
              ENDIF
            ELSE
              DFCX(IGC,JGC) = DFCX(JGC,IGC)
            ENDIF
          ENDDO
        ENDDO
!
!---    Gas component diffusion coefficients  ---
!
        DO IGC = 1,NGC+2
          DFGCX(IGC) = 0.D+0
          DO JGC = 1,NGC+3
            IF( JGC.EQ.NGC+3 ) THEN
              IF( IGC.NE.JGC ) DFGCX(IGC) = DFGCX(IGC) + 
     &          XMGWX/DFCX(IGC,JGC)
            ELSE
              IF( IGC.NE.JGC ) DFGCX(IGC) = DFGCX(IGC) + 
     &          XMGCX(JGC)/DFCX(IGC,JGC)
            ENDIF
          ENDDO
          IF( DFGCX(IGC).LT.1.D+3 ) THEN
            DFGCX(IGC) = 1.D-3
          ELSE
            DFGCX(IGC) = (1.D+0-XMGCX(IGC))/DFGCX(IGC)
          ENDIF
        ENDDO
        IGC = NGC+3
        DFGWX = 0.D+0
        DO JGC = 1,NGC+3
          IF( IGC.NE.JGC ) DFGWX = DFGWX + XMGCX(JGC)/DFCX(IGC,JGC)
        ENDDO
        IF( DFGWX.LT.1.D+3 ) THEN
          DFGWX = 1.D-3
        ELSE
          DFGWX = (1.D+0-XMGWX)/DFGWX
        ENDIF
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of DIFC_G group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DIFC_LA( DFLAX,TX,VISLX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Diffusion coefficients for CO2 in aqueous from the Hayduk and 
!     Minhas correlation (pp. 602) for aqueous solutions.
!
!     Reid, R.C., J.M. Prausnitz, and B.E. Poling. 1987.
!     The Properties of Gases and Liquids.
!     McGraw-Hill, New York, New York
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 15 August 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/DIFC_LA'
!
!---  Zero diffusion coefficient option  ---
!
      IF( ISLC(4).EQ.0 ) THEN
        DFLAX = 0.D+0
!
!---  Constant diffusion coefficient option  ---
!
      ELSEIF( ISLC(4).EQ.1 ) THEN
        DFLAX = DFLAC
!
!---  Variable diffusion coefficient option  ---
!
      ELSE
!
!---    Absolute temperature  ---
!
        TKX = TX + TABS
!
!---    Molar volume of CO2 at its normal boiling point temperature
!       in cm^3/mol, computed from the critical molar volume
!       using the Tyn and Calus Method (pp. 53)  ---
!
        VAX = 2.85D-1*((1.D+3*GCPP(5,1))**1.048D+0)
!
!---    Viscosity of aqueous phase in cP  ---
!
        VSLX = 1.D+3*VISLX
        EPSLX = (9.58D+0/VAX) - 1.12D+0
!
!---    Diffusion coefficient in m^2/s  ---
!
        DFLAX = 1.25D-12*((VAX**(-1.9D-1))-2.92D-1)*(TKX**1.52D+0)*
     &    (VSLX**EPSLX)
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of DIFC_LA group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DIFC_LS( DFLSX,TX,VISLX,XLSX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Calculates the diffusion coefficient (m^2/s) for NaCl in
!     aqueous solutions, following the method of Nernst-Haskell for
!     dilute solutions and the method of Gordon for concentrated
!     solutions; where the mean ionic activity is computed according
!     to the method of Bromley.
!
!     Reid, R.C., J.M. Prausnitz, and B.E. Poling. 1987.
!     The Properties of Gases and Liquids. pp. 620-621.
!     McGraw-Hill, New York, New York
!
!     Bromley, L.A.  1973.  Thermodynamic properties of strong
!     electrolytes in aqueous solutions.  AIChE Journal, 19(2):313-320
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 2 May 2002.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Data Statements---------------------------------!
!
      DATA CBX / 0.0547D+0 /
      DATA TRX / 25.D+0 /
      DATA VISWRX / 0.8904339807D-3 /
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/DIFC_LS'
!
!---  Zero diffusion coefficient option  ---
!
      IF( ISLC(4).EQ.0 ) THEN
        DFLSX = 0.D+0
!
!---  Constant diffusion coefficient option  ---
!
      ELSEIF( ISLC(4).EQ.1 ) THEN
        DFLSX = DFLSC
!
!---  Variable diffusion coefficient option  ---
!
      ELSE
!
!---    Absolute temperature  ---
!
        TKX = TX + TABS
!
!---    Convert halite mass fraction to molaity   ---
!
        GLSX = 1.D+3*XLSX/(WTMS*(1.D+0-XLSX))
!
!---    Partial derivative of the natural logarithm  of the mean ionic
!       activity with respect to the molaity at 298 K   ---
!
        IF( GLSX.GT.EPSL ) THEN
          DLNGX = (-0.2555D+0/(SQRT(GLSX)*(1.D+0+SQRT(GLSX))) +
     &      0.2555D+0/((1.D+0+SQRT(GLSX))**2) +
     &      (6.D-2 + 6.D-1*CBX)/((1.D+0+1.5D+0*GLSX)**2) -
     &      3.D+0*(6.D-2 + 6.D-1*CBX)*GLSX/((1.D+0+1.5D+0*GLSX)**3) +
     &      CBX)*2.302585D+0
        ELSE
          DLNGX = -5.883D-6
        ENDIF
!
!---    Diffusion coefficient (m^2/s) for dilute NaCl aqueous solutions
!       at 298 K   ---
!
        DFLSX = 1.61D-9
!
!---    Viscosity of brine as a function of NaCl mass fraction
!       at 298.15 K   ---
!
        CALL VISC_B( TRX,XLSX,VISWRX,VISBRX )
!
!---    Diffusion coefficient for concentrated NaCl aqueous solutions
!       at 298.15 K   ---
!
        DFLSX = DFLSX*(VISWRX/VISBRX)*(1.D+0 + GLSX*(DLNGX))
!
!---    Viscosity of brine as a function of NaCl mass fraction  ---
!
        CALL VISC_B( TKX,XLSX,VISLX,VISBX )
!
!---    Correct diffusion coefficient for temperature  ---
!
        DFLSX = DFLSX*(TKX/2.9815D+2)*(VISBRX/VISBX)
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of DIFC_LS group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE DIFC_N( DFNCX,TX,VISNX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Diffusion coefficients for petroleum components in nonaqueous-
!     liquid from the Hayduk and Minhas correlation (pp. 602) for
!     normal paraffin solutions.
!
!     Reid, R.C., J.M. Prausnitz, and B.E. Poling. 1987.
!     The Properties of Gases and Liquids.
!     McGraw-Hill, New York, New York
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 18 August 2009
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 DFNCX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/DIFC_N'
!
!---  Zero diffusion coefficient option  ---
!
      IF( ISLC(66).EQ.0 ) THEN
        DO IGC = 1,NGC+2
          DFNCX(IGC) = 0.D+0
        ENDDO
!
!---  Constant diffusion coefficient option  ---
!
      ELSEIF( ISLC(66).EQ.1 ) THEN
        DO IGC = 1,NGC+2
          DFNCX(IGC) = DFNAC
        ENDDO
!
!---  Variable diffusion coefficient option  ---
!
      ELSE
!
!---    Absolute temperature  ---
!
        TKX = TX + TABS
!
!---    NAPL diffusion coefficients  ---
!
        DO IGC = 1,NGC+2
!
!---      Molar volume of solute at its normal boiling point temperature
!         in cm^3/mol, computed from the critical molar volume
!         using the Tyn and Calus Method (pp. 53)  ---
!
          VAX = 2.85D-1*((1.D+3*GCPP(5,IGC))**1.048D+0)
!
!---      Viscosity of solvent in cP  ---
!
          VSNX = 1.D+3*VISNX
          ESPLX = (10.2D+0/VAX) - 0.791D+0
!
!---      Diffusion coefficient in m^2/s  ---
!
          DFNCX(IGC) = 13.3D-12*(TKX**1.47D+0)*(VSNX**ESPLX)/
     &      (VAX**7.1D-1)
        ENDDO
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of DIFC_N group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE ENTH_B( TX,XLSX,HLWX,HBX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     This subroutine calculates the enthalpy of NaCl solutions
!     as a function of temperature and NaCl concentration.
!
!     tx - temperature, C
!     xlsx - mass fraction of aqueous NaCl
!     tkbx - thermal conductivity of NaCl brine, W/m K
!
!     Michaelides, E.E.  1981. Thermodynamic properties of geothermal
!     fluids.  Geothermal Resources Council, Transactions 5:361-364.
!
!     Gudmundsson, J.S., and H. Thrainsson.  1989.  Power potential of
!     two-phase geothermal wells.  Geothermics 18(3):357-366.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 8 April 2002.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 SAX(12),SBX(3),SCX(4),CAX(6),CBX(15)
!
!----------------------Data Statements---------------------------------!
!
      DATA SAX / 9633.6D+0, -4080.0D+0, 286.49D+0, 166.58D+0,
     &  68.577D+0, -4.6856D+0, -0.90963D+0, -0.36524D+0,
     &  0.249667D-1, 0.17965D-2, 0.71924D-3, -0.4900D-4 /
      DATA SBX / -0.83624D-3, 0.16792D+0, -25.9293D+0 /
      DATA SCX / 0.12453D-4, -0.45137D-2, 4.81155D+0, -29.578D+0 /
      DATA CAX / 25.19D+0, 0.1973D+0, -6.0114D-04, 8.81505D-7,
     &  -4.76500D-10, -1.923188214D+5 /
      DATA CBX / -104.51D+0, 81.086D+0, -308.22D+0, -1.6952D+0,
     &  -16.65D+0, -8.6385D+0, 0.010618D+0, 0.029634D+0, 0.61366D+0,
     &  -2.4977D+0, -1.9876D-05, -0.00032121D+0, 0.0022773D+0,
     &  -0.015262D+0, 0.081865D+0 /
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/ENTH_B'
!
!---  Convert mass fraction to molality and weight percent  ---
!
      TKX = TX + TABS
      GLSX = 1.D+3*XLSX/(WTMS*(1.D+0-XLSX))
      YLSX = XLSX*1.D+2
!!
!!---  Enthalpy of mixing  ---
!!
!      HMX = 0.D+0
!      NC = 0
!      DO I = 0,4
!        DO J = 0,I
!          NC = NC + 1
!          HMX = HMX + CBX(NC)*(TX**(I-J))*(YLSX**J)
!        ENDDO
!      ENDDO
!!
!!---  Enthalpy of pure sodium chloride (halite)  ---
!!
!      HSX = 0.D+0
!      DO I = 1,5
!        REALX = REAL(I)
!        HSX = HSX + CAX(I)*(TKX**I)/REALX
!      ENDDO
!      HSX = HSX*1.D+3/WTMS + CAX(6)
!!
!!---  Enthalpy of pure water at vapor-saturated conditions  ---
!!
!      ISRX = 1
!      CALL ENTH_W( TX,PSWX,HLWX,HVWX,ISRX )
!!
!!---  Enthalpy of brine  ---
!!
!      HBX = (1.D+0-XLSX)*HLWX + XLSX*HSX + HMX
!
!---  Enthalpy of mixing  ---
!
      DHMX = 0.D+0
      NC = 0
      DO I = 0,3
        DO J = 0,2
          NC = NC + 1
          DHMX = DHMX + SAX(NC)*(TX**I)*(GLSX**J)
        ENDDO
      ENDDO
      DHMX = (4.184D+3/(1.D+3+WTMS*GLSX))*DHMX
!
!---  Enthalpy of pure sodium chloride (halite)  ---
!
      HSX = 4.184D+3*(SBX(1)*(TX**3) + SBX(2)*(TX**2) +
     &  SBX(3)*TX)/WTMS
!
!---  Enthalpy of pure water at vapor-saturated conditions  ---
!
!      HLWX = 1.D+3*(SCX(1)*(TX**3) + SCX(2)*(TX**2) + SCX(3)*TX +
!     &   SCX(4))
!
!---  Enthalpy of brine  ---
!
      HBX = (1.D+0-XLSX)*HLWX + XLSX*HSX + GLSX*DHMX
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of ENTH_B group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE ENTH_G( HGX,HGAX,HGWX,PX,TX,RHOGX,UEGX,
     &  XGCX,XGWX,XMGCX,ZGX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     This subroutine calculates the enthalpy of a gas mixture
!     starting with the ideal gas component and then adding the 
!     residual component.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 20 August 2002.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 XGCX(LNGC),XMGCX(LNGC),HIDCX(LNGC),ZMCX(LNGC)
!      REAL*8 HRSCX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/ENTH_G'
!
!---  Absolute temperature, K  ---
!
      TKX = TX + TABS
!
!---  Molar ideal gas enthalpy of each gas component, using
!     a reference temperature of 273.15, J/kmol  ---
!
      SXMGCX = 0.D+0
      DO IGC = 1,NGC+2
        HIDCX(IGC) = (GCPP(18,IGC)*(TKX-TABS) +
     &    GCPP(19,IGC)*((TKX**2)-(TABS**2))/2.D+0 +
     &    GCPP(20,IGC)*((TKX**3)-(TABS**3))/3.D+0 +
     &    GCPP(21,IGC)*((TKX**4)-(TABS**4))/4.D+0)
        SXMGCX = SXMGCX + XMGCX(IGC)
      ENDDO
      HG0X = 0.D+0
      DO IGC = 1,NGC+2
        ZMCX(IGC) = XMGCX(IGC)/SXMGCX
      ENDDO
      DO IGC = 1,NGC+2
        HG0X = HG0X + ZMCX(IGC)*HIDCX(IGC)/GCPP(1,IGC)
      ENDDO
!
!---  Mixing rules for Lee-Kisler equations ---
!
      VCMX = 0.D+0
      TCMX = 0.D+0
      OMGX = 0.D+0
      WTMX = 0.D+0
      DO IGC = 1,NGC+2
        DO JGC = 1,NGC+2
          VCIJX = ((GCPP(5,IGC)**(1.D+0/3.D+0) + 
     &      GCPP(5,JGC)**(1.D+0/3.D+0))**3)/8.D+0
          TCIJX = SQRT(GCPP(3,IGC)*GCPP(3,JGC))
          TCMX = TCMX + ZMCX(IGC)*ZMCX(JGC)*SQRT(SQRT(VCIJX))*TCIJX
          VCMX = VCMX + ZMCX(IGC)*ZMCX(JGC)*VCIJX
        ENDDO
        OMGX = OMGX + ZMCX(IGC)*GCPP(6,IGC)
        WTMX = WTMX + ZMCX(IGC)*GCPP(1,IGC)
      ENDDO
      TCMX = TCMX/SQRT(SQRT(VCMX))
      PCMX = (0.2905D+0 - 0.085D+0*OMGX)*RCU*TCMX/VCMX
!
!---  Lee-Kisler enthalpy departure functions  ---
!
      TRX = TKX/TCMX
      PRX = PX/PCMX
      INDX = 0
!      CALL BLI_LKH( TRX,PRX,H0X,H1X,INDX )
!      HG1X = (H0X + OMGX*H1X)*(RCU*TCMX)/WTMX
!      HGX = HG0X - HG1X
!      HGAX = XGCX(1)*HGX
!
!---  Soave-Redlich-Kwong equation of state  ---
!
      IF( ISLC(68).EQ.2 ) THEN
        VARX = 0.48D+0 + 1.574D+0*OMGX - 0.176D+0*(OMGX**2)
        ALPHAX = (1.D+0 + VARX*(1.D+0 - SQRT(TRX)))**2
        AX = 0.42748D+0*((RCU*TCMX)**2)*ALPHAX/PCMX
        BX = 0.08664D+0*RCU*TCMX/PCMX
        CBX = BX*PX/(RCU*TKX)
        DADTX = - AX*VARX/SQRT(ALPHAX*TKX*TCMX)
        HGRX = (ZGX - 1.D+0)*RCU*TKX + 1.D+0 - (TKX*DADTX-AX)*
     &    LOG((ZGX+CBX)/ZGX)/BX
!
!---  Peng-Robinson equation of state  ---
!
      ELSE
        VARX = 0.37464D+0 + 1.5422D+0*OMGX - 0.62992D+0*(OMGX**2)
        ALPHAX = (1.D+0 + VARX*(1.D+0 - SQRT(TRX)))**2
        AX = 0.45724D+0*((RCU*TCMX)**2)*ALPHAX/PCMX
        BX = 0.07779D+0*RCU*TCMX/PCMX
        CBX = BX*PX/(RCU*TKX)
        DADTX = - AX*VARX/SQRT(ALPHAX*TKX*TCMX)
        VAR1X = ZGX + CBX*(1.D+0 + SQRT(2.D+0))
        VAR2X = ZGX + CBX*(1.D+0 - SQRT(2.D+0))
        HGRX = (ZGX - 1.D+0)*RCU*TKX + (TKX*DADTX-AX)*
     &    LOG(VAR1X/VAR2X)/(SQRT(8.D+0)*BX)
      ENDIF
      HGX = HG0X + HGRX/WTMX
      HGAX = XGCX(1)*HGX
!!
!!---  Molar residual gas enthalpy of a mixture, using a reference
!!     temperature of 273.15 K, J/kmol.
!!     
!      CALL ENTH_RES( HRSCX,PX,TX,ZMCX,ZGX )
!      HGRX = 0.D+0
!      DO IGC = 1,NGC+2
!        HGRX = HGRX + ZMCX(IGC)*HRSCX(IGC)
!      ENDDO 
!      HGX = HG0X + HGRX/WTMX
!      HGAX = XGCX(1)*HGX
!
!---  Pure water vapor enthalpy and internal energy  ---
!
      CALL SP_W( TX,PSWX )
      PEX = MIN( PSWX,PX )
      ISRX = 2
      CALL DENS_W( TX,PEX,RHOLWX,RHOGWX,ISRX )
      CALL ENTH_W( TX,PEX,HLWX,HGWX,ISRX )
!
!---  Gas mixture enthalpy and internal energy with water vapor, 
!     using a reference temperature of 273.15 K, J/kg.
!     
      HGX = (1.D+0-XGWX)*HGX + XGWX*HGWX
      UEGX = HGX - PX/RHOGX
! 
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of ENTH_G group  ---
!
      RETURN
      END


!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE ENTH_L( HAX,HBX,HLX,TX,XLAX,XLSX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     This subroutine calculates the enthalpy of H2O-NaCl-CO2 solutions
!     as a function of brine enthalpy, gaseous C02 enthalpy,
!     temperature, mass fraction of dissolved NaCl, mass fraction
!     of dissolved CO2 and mass fraction of dissolved CH4.
!
!     Battistelli, A., C. Claudio, and K. Pruess.  1997.  The simulator
!     TOUGH2/EWASG for modelling geothermal reservoirs with brines and
!     noncondensible gas.  Geothermics, 26(4): 437-464.
!
!     Himmelblau, D. M.  1959.  Partial molal heats and entropies of
!     solution for gases dissolved in water from the freezing point
!     to near the critical point.  Journal of Physical Chemistry,
!     63:1803-1808.
!
!     TX - temperature, C
!     XLSX - dissolved NaCl mass fraction
!     XLAX - dissolved CO2 mass fraction
!     HBX - enthalpy of brine (NaCl-H2O), J/kg
!     HAX - enthalpy of gaseous and nonaqueous CO2, J/kg
!     HLX - enthalpy of aqueous phase, J/kg
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 26 August 2013.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/ENTH_L'
!
!---  Partial differential of Henry's constant for CO2 at constant 
!     pressure with respect to temperature  ---
!
      DTX = 1.D-6
      CALL HC_LA( TX,XLSX,HCX,DHCX )
      DHCX = DHCX/HCX
!
!---  Heat of solution for CO2 from Himmelblau (1959), J/kg  ---
!
      TKX = TX + TABS
      HSX = -RCU*(TKX**2)*DHCX/WTMA
!
!---  Aqueous enthalpy  ---
!
      HLX = (1.D+0-XLAX)*HBX + XLAX*(HAX + HSX)
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of ENTH_L group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE ENTH_N( HNX,HNAX,PX,TX,RHONX,UENX,XNCX,XMNCX,ZNX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     This subroutine calculates the enthalpy of the nonaqueous-liquid
!     mixture starting with the ideal gas component and then adding the 
!     residual component.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 20 August 2002.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 XNCX(LNGC),XMNCX(LNGC),HIDCX(LNGC),ZMCX(LNGC)
!      REAL*8 HRSCX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/ENTH_N'
!
!---  Absolute temperature, K  ---
!
      TKX = TX + TABS
!
!---  Molar ideal gas enthalpy of each gas component, using
!     a reference temperature of 273.15, J/kmol  ---
!
      SXMNCX = 0.D+0
      DO IGC = 1,NGC+2
        HIDCX(IGC) = (GCPP(18,IGC)*(TKX-TABS) +
     &    GCPP(19,IGC)*((TKX**2)-(TABS**2))/2.D+0 +
     &    GCPP(20,IGC)*((TKX**3)-(TABS**3))/3.D+0 +
     &    GCPP(21,IGC)*((TKX**4)-(TABS**4))/4.D+0)
        SXMNCX = SXMNCX + XMNCX(IGC)
      ENDDO
      HG0X = 0.D+0
      DO IGC = 1,NGC+2
        ZMCX(IGC) = XMNCX(IGC)/SXMNCX
      ENDDO
      DO IGC = 1,NGC+2
        HG0X = HG0X + ZMCX(IGC)*HIDCX(IGC)/GCPP(1,IGC)
      ENDDO
!
!---  Mixing rules for Lee-Kisler equations ---
!
      VCMX = 0.D+0
      TCMX = 0.D+0
      OMGX = 0.D+0
      WTMX = 0.D+0
      DO IGC = 1,NGC+2
        DO JGC = 1,NGC+2
          VCIJX = ((GCPP(5,IGC)**(1.D+0/3.D+0) + 
     &      GCPP(5,JGC)**(1.D+0/3.D+0))**3)/8.D+0
          TCIJX = SQRT(GCPP(3,IGC)*GCPP(3,JGC))
          TCMX = TCMX + ZMCX(IGC)*ZMCX(JGC)*SQRT(SQRT(VCIJX))*TCIJX
          VCMX = VCMX + ZMCX(IGC)*ZMCX(JGC)*VCIJX
        ENDDO
        OMGX = OMGX + ZMCX(IGC)*GCPP(6,IGC)
        WTMX = WTMX + ZMCX(IGC)*GCPP(1,IGC)
      ENDDO
      TCMX = TCMX/SQRT(SQRT(VCMX))
      PCMX = (0.2905D+0 - 0.085D+0*OMGX)*RCU*TCMX/VCMX
!
!---  Lee-Kisler enthalpy departure functions  ---
!
      TRX = TKX/TCMX
      PRX = PX/PCMX
!      INDX = 1
!      CALL BLI_LKH( TRX,PRX,H0X,H1X,INDX )
!      HN1X = (H0X + OMGX*H1X)*(RCU*TCMX)/WTMX
!      HNX = HN0X-HN1X
!
!---  Soave-Redlich-Kwong equation of state  ---
!
      IF( ISLC(68).EQ.2 ) THEN
        VARX = 0.48D+0 + 1.574D+0*OMGX - 0.176D+0*(OMGX**2)
        ALPHAX = (1.D+0 + VARX*(1.D+0 - SQRT(TRX)))**2
        AX = 0.42748D+0*((RCU*TCMX)**2)*ALPHAX/PCMX
        BX = 0.08664D+0*RCU*TCMX/PCMX
        CBX = BX*PX/(RCU*TKX)
        DADTX = - AX*VARX/SQRT(ALPHAX*TKX*TCMX)
        HNRX = (ZNX - 1.D+0)*RCU*TKX + 1.D+0 - (TKX*DADTX-AX)*
     &    LOG((ZNX+CBX)/ZNX)/BX
!
!---  Peng-Robinson equation of state  ---
!
      ELSE
        VARX = 0.37464D+0 + 1.5422D+0*OMGX - 0.62992D+0*(OMGX**2)
        ALPHAX = (1.D+0 + VARX*(1.D+0 - SQRT(TRX)))**2
        AX = 0.45724D+0*((RCU*TCMX)**2)*ALPHAX/PCMX
        BX = 0.07779D+0*RCU*TCMX/PCMX
        CBX = BX*PX/(RCU*TKX)
        DADTX = - AX*VARX/SQRT(ALPHAX*TKX*TCMX)
        VAR1X = ZNX + CBX*(1.D+0 + SQRT(2.D+0))
        VAR2X = ZNX + CBX*(1.D+0 - SQRT(2.D+0))
        HNRX = (ZNX - 1.D+0)*RCU*TKX + (TKX*DADTX-AX)*
     &    LOG(VAR1X/VAR2X)/(SQRT(8.D+0)*BX)
      ENDIF
      HNX = HN0X + HNRX/WTMX
      HNAX = XNCX(1)*HNX
!!
!!---  Molar residual gas enthalpy of a mixture, using a reference
!!     temperature of 273.15 K, J/kmol.
!!     
!      CALL ENTH_RES( HRSCX,PX,TX,ZMCX,ZNX )
!      HNRX = 0.D+0
!      DO IGC = 1,NGC+2
!        HNRX = HNRX + ZMCX(IGC)*HRSCX(IGC)
!      ENDDO 
!      HNX = HN0X + HNRX/WTMX
!
!---  Nonaqueous-liquid mixture internal energy, 
!     using a reference temperature of 273.15 K, J/kg.
!     
      UENX = HNX - PX/RHONX
! 
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of ENTH_N group  ---
!
      RETURN
      END


!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE ENTH_RES( HRSCX,PX,TX,ZMCX,ZX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Molar residual gas enthalpy of a mixture, using a reference
!     temperature of 273.15 K.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 23 January 2013.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 ZMCX(LNGC),HRSCX(LNGC),AIX(LNGC)
      REAL*8 DAIXDT(LNGC),DAXDT(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/ENTH_RES'
!
!---  Absolute temperature, K  ---
!
      TKX = TX+TABS
!
!---  Soave-Redlich-Kwong equation of state  ---
!
      IF( ISLC(68).EQ.2 ) THEN
!
!---    Soave-Redlich-Kwong temperature dependent component 
!       coefficients  ---
!
        CALL SRK_CT( AIX,TKX )
!
!---    Soave-Redlich-Kwong composition dependent mixture 
!       coefficients  ---
!
        CALL SRK_CX( AX,AIX,BX,ZMCX )
!
!---  Peng-Robinson equation of state  ---
!
      ELSE
!
!---    Peng-Robinson temperature dependent component 
!       coefficients  ---
!
        CALL PR_CT( AIX,TKX )
!
!---    Peng-Robinson composition dependent mixture 
!       coefficients  ---
!
        CALL PR_CX( AX,AIX,BX,ZMCX )
      ENDIF
      V7X = (ZX + (SQRT(2.D+0) + 1.D+0)*CBX)
      V8X = (ZX - (SQRT(2.D+0) - 1.D+0)*CBX)
      CAX = AX*PX/((RCU*TKX)**2)
      CBX = BX*PX/(RCU*TKX)
!
!---  Partial derivative of component a with respect to temperature  ---
!
      DO IGC = 1,NGC+2
        TRX = TKX/GCPP(3,IGC)
        DAIXDT(IGC) = -GCPP(13,IGC)*(1.D+0 + GCPP(15,IGC)*(1.D+0 -
     &    SQRT(TRX)))*(GCPP(15,IGC)/(SQRT(TRX)*GCPP(3,IGC)))
      ENDDO
!
!---  Partial derivative of mixture a with respect to temperature  ---
!
      DO IGC = 1,NGC+2
        DAXDT(IGC) = 0.D+0
        DO JGC = 1,NGC+2
          DAXDT(IGC) = DAXDT(IGC) + 
     &      (5.D-1*ZMCX(JGC)/SQRT(AIX(IGC)*AIX(JGC)))*
     &      (DAIXDT(IGC)*AIX(JGC) + DAIXDT(JGC)*AIX(IGC))
        ENDDO
      ENDDO
!
!---  Component residual enthalpy  ---
!
      DO IGC = 1,NGC+2
        HRSCX(IGC) = (ZX - 1.D+0)*RCU*TKX + 
     &    ((TKX*DAXDT(IGC) - AX)/(SQRT(8.D+0)*BX))*LOG(V7X/V8X)
      ENDDO
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of ENTH_RES group  ---
!
      RETURN
      END
      
!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE ENTH_S( TX,HSX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Enthalpy of precipitated NaCl.
!
!     Lide, D.R. and H.V. Kehiaian.  1994.  CRC Handbook of
!     Thermophysical and Thermochemical Data, CRC Press, Inc.,
!     Boca Raton, Florida, pp. 97-98.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 1 May 2002.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 CAX(5)
!
!----------------------Data Statements---------------------------------!
!
      DATA CAX / 25.19D+0, 0.1973D+0, -6.0114D-4, 8.81505D-7,
     &  -4.765D-10 /
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/ENTH_S'
!
!---  0 C Reference  ---
!
      TKX = TX+TABS
      HSX = -1.24858D-4
      DO I = 1,5
        REALX = REAL(I)
        HSX = HSX + CAX(I)*(TKX**I)/REALX
      ENDDO
!
!---  Convert from J/mol to J/kg  ---
!
      HSX = 1.D+3*HSX/WTMS
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of ENTH_S group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE ENTH_W( TX,PX,HLX,HVX,ISRX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Enthalpy and internal energy (J/kg) of pure water as a function
!     of temperature and pressure.
!
!     Pressure Range: 0 - 100 MPa (1000 Bar)
!     Temperature Range:  273.16 K (0.01 C) to 1073.15K (800 C)
!
!     Meyer, C.A., R.B. McClintock, G.J. Silvestri, and R.C. Spencer
!     1993.  ASME Steam Tables, The American Society of Mechanical
!     Engineers, New York.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 26 March 2002.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 CAX(23),SAX(12),CBX(31),SBX(5),LFCX(3),SLX
      REAL*8 TX,PX
      INTEGER ISRX,INX(8),IZX(8,3),ITX(8),IXX(8,2)
!
!----------------------Data Statements---------------------------------!
!
      DATA CAX / 6.824687741D+3, -5.422063673D+2, -2.096666205D+4,
     &  3.941286787D+4, -6.733277739D+4, 9.902381028D+4,
     &  -1.093911774D+5, 8.590841667D+4, -4.511168742D+4,
     &  1.418138926D+4, -2.017271113D+3, 7.982692717D+0,
     &  -2.616571843D-2, 1.522411790D-3, 2.284279054D-2,
     &  2.421647003D+2, 1.269716088D-10, 2.074838328D-7,
     &  2.174020350D-8, 1.105710498D-9, 1.293441934D+1,
     &  1.308119072D-5, 6.047626338D-14 /
      DATA SAX / 8.438375405D-1, 5.362162162D-4, 1.720000000D+0,
     &  7.342278489D-2, 4.975858870D-2, 6.537154300D-1,
     &  1.150000000D-6, 1.150800000D-5, 1.418800000D-1,
     &  7.002753165D+0, 2.995284926D-4, 2.040000000D-1 /
      DATA CBX / 1.683599274D+1, 2.856067796D+1, -5.438923329D+1,
     &  4.330662834D-1, -6.547711697D-1, 8.565182058D-2,
     &  6.670375918D-2, 1.388983801D+0, 8.390104328D-2,
     &  2.614670893D-2, -3.373439453D-2, 4.520918904D-1,
     &  1.069036614D-1, -5.975336707D-1, -8.847535804D-2,
     &  5.958051609D-1, -5.159303373D-1, 2.075021122D-1,
     &  1.190610271D-1, -9.867174132D-2, 1.683998803D-1,
     &  -5.809438001D-2, 6.552390126D-3, 5.710218649D-4,
     &  1.936587558D+2, -1.388522425D+3, 4.126607219D+3,
     &  -6.508211677D+3, 5.745984054D+3, -2.693088365D+3,
     &  5.235718623D+2/
      DATA SBX / 7.633333333D-1, 4.006073948D-1, 8.636081627D-2,
     &  -8.532322921D-1, 3.460208861D-1 /
      DATA LFCX / 1.574373327D+1, -3.417061978D+1, 1.931380707D+1 /
      DATA SLX / 4.260321148D+0 /
      DATA INX / 2, 3, 2, 2, 3, 2, 2, 2 /
      DATA IZX / 13, 18, 18, 25, 32, 12, 24, 24,
     &  3, 2, 10, 14, 28, 11, 18, 14,
     &  0, 1, 0, 0, 24, 0, 0, 0 /
      DATA ITX / 0, 0, 0, 0, 0, 1, 1, 2 /
      DATA IXX / 0, 0, 0, 0, 0, 14, 19, 54,
     &  0, 0, 0, 0, 0, 0, 0, 27 /
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/ENTH_W'
!
!---  Restrict temperature to above 0.01 C and below 800 C  ---
!
      TY = MIN( MAX( TX,1.D-2 ),8.D+2 )
!
!---  Restrict pressure to above 0.0 MPa and below 100 MPa  ---
!
      PY = MIN( MAX( PX,0.D+0 ),1.D+8 )
!
!---  Reduced temperature and pressure  ---
!
      THETAX = (TY+TABS)/TCRW
      BETAX = PY/PCRW
!
!---  L-function  ---
!
      BETALX = LFCX(1) + LFCX(2)*THETAX + LFCX(3)*(THETAX**2)
      BETALPX = LFCX(2) + 2.D+0*LFCX(3)*THETAX
!
!---  Subregions 1 or 6  ---
!
      IF( ISRX.EQ.1 .OR. ISRX.EQ.6 ) THEN
        CYX = 1.D+0 - SAX(1)*(THETAX**2) - SAX(2)/(THETAX**6)
        CYPX = -2.D+0*SAX(1)*THETAX + 6.D+0*SAX(2)/(THETAX**7)
        CZX = SAX(3)*(CYX**2)
        CZX = CZX - 2.D+0*SAX(4)*THETAX
        CZX = CZX + 2.D+0*SAX(5)*BETAX
        IF( (CZX/EPSL).GT.EPSL ) THEN
          CZX = CYX + SQRT(CZX)
        ELSE
          CZX = CYX
        ENDIF
        RHX = CAX(1)*THETAX
        DO I = 1,10
          REALX = REAL(I)
          RHX = RHX - (REALX-2.D+0)*CAX(I+1)*(THETAX**(I-1))
        ENDDO
        RHX = RHX + CAX(12)*(CZX*(1.7D+1*((CZX/2.9D+1)-(CYX/1.2D+1)) +
     &    5.D+0*THETAX*(CYPX/1.2D+1)) + SAX(4)*THETAX -
     &    (SAX(3)-1.D+0)*THETAX*CYX*CYPX)/(CZX**(5.D+0/17.D+0))
        RHX = RHX + (CAX(13) - CAX(15)*(THETAX**2) +
     &    CAX(16)*(9.D+0*THETAX + SAX(6))*((SAX(6)-THETAX)**9) +
     &    CAX(17)*(2.D+1*(THETAX**19) +
     &    SAX(7))/((SAX(7) + (THETAX**19))**2))*BETAX
        RHX = RHX - (1.2D+1*(THETAX**11) + SAX(8))*
     &    (CAX(18)*BETAX + CAX(19)*(BETAX**2) + CAX(20)*(BETAX**3))
     &    /((SAX(8) + (THETAX**11))**2)
        RHX = RHX + CAX(20)*(THETAX**18)*
     &    (1.7D+1*SAX(9) + 1.9D+1*(THETAX**2))*
     &    (((SAX(10) + BETAX)**3) + SAX(11)*BETAX)
        RHX = RHX + CAX(22)*SAX(12)*(BETAX**3)
        RHX = RHX + 2.1D+1*CAX(23)*(BETAX**4)/(THETAX**20)
        HLX = 1.D-3*RHX*PCRW*VCRW/WTMW
      ENDIF
!
!---  Below 0.01 C  ---
!
      IF( TX.LT.1.D-2 ) HLX = HLX - 4.202405*(1.D-2-TX)
!
!---  Subregions 2 or 6  ---
!
      IF( ISRX.EQ.2 .OR. ISRX.EQ.6 ) THEN
        CXX = EXP(SBX(1)*(1.D+0-THETAX))
        RHX = CBX(1)*THETAX
        ICBX = 1
        DO I = 1,5
          ICBX = ICBX + 1
          REALX = REAL(I)
          RHX = RHX - CBX(ICBX)*(REALX-2.D+0)*(THETAX**(I-1))
        ENDDO
        ICBX = 6
        DO I = 1,5
          RHAX = 0.D+0
          DO J = 1,INX(I)
            ICBX = ICBX + 1
            RHAX = RHAX + CBX(ICBX)*(1.D+0 + IZX(I,J)*SBX(1)*THETAX)*
     &        (CXX**IZX(I,J))
          ENDDO
          RHX = RHX - (BETAX**I)*RHAX
        ENDDO
        ICBX = 18
        DO I = 6,8
          RHBX = 0.D+0
          RHCX = 0.D+0
          ISBX = 1
          DO K = 1,ITX(I)
            ISBX = ISBX + 1
            RHBX = RHBX + IXX(I,K)*SBX(ISBX)*(CXX**IXX(I,K))
            RHCX = RHCX + SBX(ISBX)*(CXX**IXX(I,K))
          ENDDO
          RHBX = RHBX*SBX(1)*THETAX
          RHCX = RHCX + (BETAX**(2-I))
          DO J = 1,INX(I)
            ICBX = ICBX + 1
            RHAX = CBX(ICBX)*(CXX**IZX(I,J))
            RHAX = RHAX*((1.D+0 + IZX(I,J)*SBX(1)*THETAX) - RHBX/RHCX )
          ENDDO
          RHX = RHX - SBX(1)*RHAX/RHCX
        ENDDO
        RHAX = BETAX*((BETAX/BETALX)**10)
        RHBX = 1.D+1*BETALPX/BETALX
        ICBX = 24
        DO I = 0,6
          ICBX = ICBX + 1
          REALX = REAL(I)
          RHX = RHX + RHAX*(1.D+0 + THETAX*(RHBX + REALX*SBX(1))*
     &      CBX(ICBX)*(CXX**I))
        ENDDO
        HVX = 1.D-3*RHX*PCRW*VCRW/WTMW
      ENDIF
!
!---  Subregions 3 or 5  ---
!
      IF( ISRX.EQ.3 .OR. ISRX.EQ.5 ) THEN
        M_ERR(1) = 'Steam Table Subregion 3/5: Exceeds Temperature ' // 
     &    'Range: '
        M_ERR(2) = ' Temperature = '
        IF( N_DB.LT.0 ) THEN
          M_ERR(3) = ' at Boundary Surface: '
        ELSE
          M_ERR(3) = ' at Node: '
        ENDIF
        CALL PATH
        R_ERR = TX
        I_ERR(1) = ABS(N_DB)
        I_ERR(2) = 2
        I_ERR(3) = 3
        I_ERR(4) = ID
      ENDIF
!
!---  Subregions 4 or 5  ---
!
      IF( ISRX.EQ.4 .OR. ISRX.EQ.5 ) THEN
        M_ERR(1) = 'Steam Table Subregion 4/5: Exceeds Temperature ' // 
     &    'Range: '
        M_ERR(2) = ' Temperature = '
        IF( N_DB.LT.0 ) THEN
          M_ERR(3) = ' at Boundary Surface: '
        ELSE
          M_ERR(3) = ' at Node: '
        ENDIF
        CALL PATH
        R_ERR = TX
        I_ERR(1) = ABS(N_DB)
        I_ERR(2) = 2
        I_ERR(3) = 3
        I_ERR(4) = ID
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of ENTH_W group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE EQU_CONC( XMCX,YMCX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Normalize the sum of mole fractions to 1.0
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 13 March 2014
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 XMCX(LNGC),YMCX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/EQU_CONC'
      DO IGC = 1,NGC+2
        YMCX(IGC) = XMCX(IGC)
      ENDDO
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of EQU_CONC group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE EQUIL( TX,PX,PVAX,XBSX,XLAX,XLSX,XLWX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     This subroutine calculates the equilibrium state between
!     CO2 and water, following the phase-partitioning model
!     developed by Spycher and Pruess.
!
!     1 - H2O
!     2 - CO2
!
!     Spycher, N., and K. Pruess.  2010.  A phase-partitioning model
!     for CO2-brine mixtures at elevated temperatures and pressures:
!     Application to CO2-enchanced geothermal systems. Transport
!     in Porous Media, 82:173-196.
!
!     Salts
!
!     1 - Na
!     2 - K
!     3 - Ca
!     4 - Mg
!     5 - Cl
!     6 - SO4
!
!     Arguments
!
!     TX - temperature, C
!     PX - pressure, Pa abs
!     XGAX - mass fraction of CO2 in gas phase
!     XGWX - mass fraction of water in gas phase
!     XLAX - mass fraction of CO2 in aqueous phase
!     XBSX - (in) mass fraction of salt in brine (i.e., salt + water)
!     XLSX - (out) mass fraction of salt in aqueous phase
!     XLWX - mass fraction of water in aqueous phase
!     XMGAX - mole fraction of CO2 in gas phase
!     XMGWX - mole fraction of water in gas phase
!     XMLAX - mole fraction of CO2 in aqueous phase
!     XMLSX - mole fraction of salt in aqueous phase
!     XMLWX - mole fraction of water in aqueous phase
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 11 June 2010.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE NCG_PT
      USE NAPL
      USE GRID
      USE GLB_PAR
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 CACX(2),CAWX(2),CACWX(2)
      REAL*8 CLKWX(4),CLKCNX(4),CLKCGX(4)
      REAL*8 CAMX,CPRX
      REAL*8 CLMBX(3),CXIX(3)
      REAL*8 DACX(2),DAWX(2)
      REAL*8 DKWCX(2),DKCWX(2)
      REAL*8 DLKWX(5),DLKCX(5)
      REAL*8 DVMCX(2),DVMWX(2)
      REAL*8 DAMX(2),DPRX(5)
      REAL*8 AIX(2,2),BIX(2),FUGX(2),YX(2),XX(2),CKX(2,2)
      REAL*8 SKX(2,2),SAX(2),ACTVX(2)
      REAL*8 FUGLX(2),FUGHX(2)
      REAL*8 YZ(2),XZ(2)
      REAL*8 AJ(2,2),BJ(2),GX(2,3)
      INTEGER IJ(2)
!
!----------------------Data Statements---------------------------------!
!
      DATA CACX / 7.54D+7,-4.13D+4 /
      DATA CAWX / 0.D+0,0.D+0 /
      DATA CACWX / 7.89D+7,0.D+0 /
      DATA CBCX / 27.8D+0 /
      DATA CBWX / 18.18D+0 /
      DATA CLKWX / -2.209D+0,3.097D-2,-1.098D-4,2.048D-7 /
      DATA CLKCNX / 1.169D+0,1.368D-2,-5.380D-5,0.D+0 /
      DATA CLKCGX / 1.189D+0,1.304D-2,-5.446D-5,0.D+0 /
      DATA CVCX / 32.6D+0 /
      DATA CVWX / 18.1D+0 /
      DATA CAMX / 0.D+0 /
      DATA CPRX / 1.D+0 /
      DATA CLMBX / 2.217D-4,1.074D+0,2.648D+3 /
      DATA CXIX / 1.3D-5,-2.012D+1,5.259D+3 /
      DATA WTMNAX / 22.9898D+0 /
      DATA WTMCLX / 35.453D+0 /
      DATA DACX / 8.008D+7,-4.984D+4 /
      DATA DAWX / 1.337D+8,-1.4D+4 /
      DATA DBCX / 28.25D+0 /
      DATA DBWX / 15.70D+0 /
      DATA DKWCX / 1.427D-2,-4.037D-4 /
      DATA DKCWX / 0.4228D+0,-7.422D-4 /
      DATA DLKWX / -2.209D+0,3.097D-2,-1.098D-4,2.048D-7,0.D+0 /
!      DATA DLKWX / -2.1077D+0,2.8127D-2,-8.4298D-5,1.4969D-7,
!     &             -1.1812D-10 /
      DATA DLKCX / 1.668D+0,3.992D-3,-1.156D-5,1.593D-9,0.D+0 /
      DATA DVMCX / 32.6D+0,3.413D-2 /
      DATA DVMWX / 18.1D+0,3.137D-2 /
      DATA DAMX / -3.084D-2,1.927D-5 /
      DATA DPRX / -1.9906D-1,2.0471D-3,1.0152D-4,-1.4234D-6,1.4168D-8 /
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/EQUIL'
      INCG = 1
!
!---  Temperature in Kelvin, pressure in bar, 
!     gas constant in cm^3 bar/K mol   ---
!
      TKX = TX+TABS
      PBX = PX*1.D-5
      RCUBX = RCU*1.D-2
      TLX = 99.D+0
      THX = 101.D+0
      TKLX = TLX+TABS
      TKHX = THX+TABS
!
!---  Salt effects   ---
!
      XIX = CXIX(1)*TKX + CXIX(2)/TKX + CXIX(3)/(TKX**2)
      CLX = CLMBX(1)*TKX + CLMBX(2)/TKX + CLMBX(3)/(TKX**2)
!
!---  Convert NaCl concentration to molality   ---
!
      XMOLSX = 1.D+3*(XBSX/(1.D+0-XBSX))/WTMS
      XMOLWX = 1.D+3/WTMW
      XMLSX = XMOLSX/(XMOLSX+XMOLWX)
      XMOLNAX = XMOLSX
      XMOLCLX = XMOLSX
      APCX = (1.D+0+(XMOLNAX+XMOLCLX)/XMOLWX)*
     &  EXP(2.D+0*CLX*XMOLNAX + XIX*XMOLCLX*XMOLNAX)
!
!---  Low temperature regime, direct solution  ---
!
      IF( TX.LT.TLX ) THEN
        AX = CACX(1) + CACX(2)*TKX
        BX = CBCX
!
!---    Low pressure conditions, use ideal gas law  ---
!
        IF( PBX.LT.1.D+0 ) THEN
          VX = 1.D+3*RCU*TKX/PX
        ELSE
!
!---      Polynomial coefficients for Redlich-Kwong equation of state  ---
!
          CAX = 1.D+0
          CBX = -RCUBX*TKX/PBX
          CCX = -((RCUBX*TKX*BX/PBX) - (AX/(PBX*SQRT(TKX))) + (BX**2))
          CDX = -(AX*BX/(PBX*SQRT(TKX)))
          CALL NICKALLS( CAX,CBX,CCX,CDX,V1X,V2X,V3X )
!
!---      Molar volume, cm^3/mol  ---
!
          VGX = MAX( V1X,V2X,V3X )
          VNX = MIN( V1X,V2X,V3X )
!
!---      Gas conditions  ---
!
          IF( TKX.GE.TCRA ) THEN
            VX = VGX
          ELSE
            W1X = PBX*(VGX-VNX)
            W2X = RCUBX*TKX*LOG((VGX-BX)/(VNX-BX))
     &         + (AX/(SQRT(TKX)*BX))*LOG(((VGX+BX)*VNX)/(VNX+BX)*VGX)
!
!---        Gas phase condition  ---
!
            IF( (W2X-W1X)/EPSL.GE.EPSL ) THEN
              VX = VGX
!
!---        Liquid phase condition  ---
!
            ELSEIF( (W1X-W2X)/EPSL.GE.EPSL ) THEN
              VX = VNX
!
!---        Gas-liquid phase condition, use gas molar volume  ---
!
            ELSE
              VX = VGX
            ENDIF
          ENDIF
        ENDIF
!
!---    Fugacity coefficients  ---
!
        AIX(1,1) = CAWX(1)
        AIX(2,1) = CACWX(1)
        AIX(1,2) = CACWX(1)
        AIX(2,2) = CACX(1) + CACX(2)*TKX
        BIX(1) = CBWX
        BIX(2) = CBCX
        YX(1) = 0.D+0
        YX(2) = 1.D+0
        DO K = 1,2
          SUMX = 0.D+0
          DO I = 1,2
            SUMX = SUMX + YX(I)*AIX(I,K)
          ENDDO
          FUGX(K) = LOG(VX/(VX-BX)) + (BIX(K)/(VX-BX))
          FUGX(K) = FUGX(K) - (2.D+0*SUMX/(RCUBX*(TKX**1.5D+0)*BX))*
     &      LOG((VX+BX)/VX) + (AX*BIX(K)/(RCUBX*(TKX**1.5D+0)*(BX**2)))*
     &      (LOG((VX+BX)/VX)-(BX/(VX+BX))) - LOG(PBX*VX/(RCUBX*TKX))
          FUGX(K) = EXP(FUGX(K))
        ENDDO
!
!---    A parameter  ---
!
        EQKWOX = 0.D+0
        PREFX = CPRX
        DO I = 1,5
          EQKWOX = EQKWOX + DLKWX(I)*(TX**(I-1))
        ENDDO
        EQKWOX = 1.D+1**EQKWOX
        EQKWX = EQKWOX*EXP((PBX-PREFX)*CVWX/(RCUBX*TKX))
        CAX = (EQKWX/(FUGX(1)*PBX))
!
!---    B parameter  ---
!
        EQKCOX = 0.D+0
        PREFX = CPRX
        IF( TX.LT.31.D+0 .AND. VX.LT.94.D+0 ) THEN
          DO I = 1,4
            EQKCOX = EQKCOX + CLKCNX(I)*(TX**(I-1))
          ENDDO
        ELSE
          DO I = 1,4
            EQKCOX = EQKCOX + CLKCGX(I)*(TX**(I-1))
          ENDDO
        ENDIF
        EQKCOX = 1.D+1**EQKCOX
        EQKCX = EQKCOX*EXP((PBX-PREFX)*CVCX/(RCUBX*TKX))
        CBX = (FUGX(2)*PBX)/(XMOLWX*APCX*EQKCX)
!
!---  High temperature regime, iterative solution  ---
!
      ELSEIF( TX.GT.THX ) THEN
!
!---    Initial guess of water gas mole fraction,
!       and CO2 aqueous mole fraction  ---
!
        CALL SP_W( TX,PSWX )
        YX(1) = PSWX/PX
        YX(2) = MAX( MIN( 1.D+0-YX(1),1.D+0 ),0.D+0 )
        XX(2) = 9.D-3
        XX(1) = 1.D+0-XX(2)
        CKX(1,1) = 0.D+0
        CKX(2,1) = DKCWX(1) + DKCWX(2)*TKX
        CKX(1,2) = DKWCX(1) + DKWCX(2)*TKX
        CKX(2,2) = 0.D+0
        SAX(1) = DAWX(1) + DAWX(2)*TKX
        SAX(2) = DACX(1) + DACX(2)*TKX
        BIX(1) = DBWX
        BIX(2) = DBCX
        EQKWOX = 0.D+0
        EQKCOX = 0.D+0
        PREFX = 0.D+0
        DTKX = MAX( (TKX-373.15D+0),0.D+0 )
        AMX = DAMX(1)*DTKX + DAMX(2)*(DTKX**2)
        VMWX = DVMWX(1) + DVMWX(2)*DTKX
        VMCX = DVMCX(1) + DVMCX(2)*DTKX      
!
!---    Equilibrium constants  ---
!
        DO I = 1,5
          EQKWOX = EQKWOX + DLKWX(I)*(TX**(I-1))
          EQKCOX = EQKCOX + DLKCX(I)*(TX**(I-1))
          PREFX = PREFX + DPRX(I)*(TX**(I-1))          
        ENDDO
        EQKWOX = 1.D+1**EQKWOX
        EQKCOX = 1.D+1**EQKCOX
        EQKWX = EQKWOX*EXP((PBX-PREFX)*VMWX/(RCUBX*TKX))
        EQKCX = EQKCOX*EXP((PBX-PREFX)*VMCX/(RCUBX*TKX))
!
!---    Newton-Raphson iteration  ---
!
        NC = 0
        DO
          NC = NC + 1
          IF( NC.GT.32 ) THEN
            M_ERR(1) = 'Mutual Solubility Convergence Failure: ' // 
     &        'Newton-Raphson @ Node'
            CALL PATH
            I_ERR(1) = ABS(N_DB)
            I_ERR(2) = 0
            I_ERR(3) = 1
            I_ERR(4) = ID
          ENDIF
!
!---      Loop over increments  ---
!
          DO M = 1,3
            YZ(1) = YX(1)
            XZ(2) = XX(2)
            IF( M.EQ.2 ) YZ(1) = YX(1) + 1.D-9
            IF( M.EQ.3 ) XZ(2) = XX(2) + 1.D-9
            YZ(2) = MAX( MIN( 1.D+0-YZ(1),1.D+0 ),0.D+0 )
            XZ(1) = MAX( MIN( 1.D+0-XZ(2),1.D+0 ),0.D+0 )
!
!---        Compute interaction parameters  ---
!
            DO I = 1,2
            DO J = 1,2
              IF( I.EQ.J ) THEN
                SKX(I,J) = 0.D+0
              ELSE
                SKX(I,J) = CKX(I,J)*YZ(I) + CKX(J,I)*YZ(J)
              ENDIF
            ENDDO
            ENDDO
!
!---        a-ij parameters  ---
!
            DO I = 1,2
            DO J = 1,2
              AIX(I,J) = SQRT(SAX(I)*SAX(J))*(1.D+0-SKX(I,J))
            ENDDO
            ENDDO
!
!---        a-mix and b-mix parameters  ---
!
            AX = 0.D+0
            BX = 0.D+0
            DO I = 1,2
              DO J = 1,2
                AX = AX + YZ(I)*YZ(J)*AIX(I,J)
              ENDDO
              BX = BX + YZ(I)*BIX(I) 
            ENDDO 
!
!---        Low pressure conditions, use ideal gas law  ---
!
            IF( PBX.LT.1.D+0 ) THEN
              VX = 1.D+3*RCU*TKX/PX
            ELSE
!
!---          Polynomial coefficients for Redlich-Kwong equation 
!             of state  ---
!
              CAX = 1.D+0
              CBX = -RCUBX*TKX/PBX
              CCX = -((RCUBX*TKX*BX/PBX)-(AX/(PBX*SQRT(TKX)))+(BX**2))
              CDX = -(AX*BX/(PBX*SQRT(TKX)))
              CALL NICKALLS( CAX,CBX,CCX,CDX,V1X,V2X,V3X )
!
!---          Gas (mixture) molar volume, cm^3/mol  ---
!
              VX = MAX( V1X,V2X,V3X )
            ENDIF
!
!---        Fugacity coefficients  ---
!
            DO K = 1,2
              FUGX(K) = (BIX(K)/BX)*((PBX*VX/(RCUBX*TKX))-1.D+0) -
     &          LOG(PBX*(VX-BX)/(RCUBX*TKX))
              VAR1X = 0.D+0
              DO I = 1,2
                VAR1X = VAR1X + YZ(I)*(AIX(I,K)+AIX(K,I))
              ENDDO
              FUGX(K) = FUGX(K) + (VAR1X/AX - BIX(K)/BX)*
     &          (AX/(BX*RCUBX*(TKX**1.5D+0)))*LOG(VX/(VX+BX))
              FUGX(K) = EXP(FUGX(K))
            ENDDO
!
!---        Activities  ---
!
            ACTVX(1) = EXP( (AMX-2.D+0*AMX*XZ(1))*(XZ(2)**2) )
            ACTVX(2) = EXP( 2.D+0*AMX*XZ(2)*(XZ(1)**2) )
!
!---        A parameter  ---
!
            CAX = (EQKWX*ACTVX(1)/(FUGX(1)*PBX))
!
!---        B parameter  ---
!
            CBX = (FUGX(2)*PBX)/(XMOLWX*ACTVX(2)*APCX*EQKCX)
!
!---        Update mole fractions ---
!
            GX(1,M) = YZ(1) - (1.D+0-CBX)/((1.D+0/CAX)-CBX)
            GX(2,M) = XZ(2) - CBX*(1.D+0-YZ(1))
          ENDDO
!
!---      Load solution vector and Jacobian matrix for
!         two-phase conditions  ---
!
          DO M = 1,2
            AJ(M,1) = (GX(M,2)-GX(M,1))/1.D-9
            AJ(M,2) = (GX(M,3)-GX(M,1))/1.D-9
            BJ(M) = -GX(M,1)
          ENDDO
!
!---      Solve linear system  ---
!
          JP = 2
          KP = 2
          CALL LUDCMP( AJ,JP,KP,IJ,DJ )
          CALL LUBKSB( AJ,JP,KP,IJ,BJ )
!
!---      Update primary unknowns  ---
!
          DYX = SIGN(MIN(ABS(BJ(1)),5.D-2),BJ(1))
          DXX = SIGN(MIN(ABS(BJ(2)),5.D-2),BJ(2))
          YX(1) = MAX( MIN( YX(1)+DYX,1.D+0 ),0.D+0 )
          XX(2) = MAX( MIN( XX(2)+DXX,1.D+0 ),0.D+0 )
!
!---      Check for convergence ---
!
          IQUIT = 1
          IF( YX(1).GT.0.D+0 .AND. YX(1).LT.1.D+0 ) THEN
            IF( ABS(DYX).GT.1.D-6 ) IQUIT = 0
          ENDIF
          IF( XX(2).GT.0.D+0 .AND. XX(2).LT.1.D+0 ) THEN
            IF( ABS(DXX).GT.1.D-6 ) IQUIT = 0
          ENDIF
          IF( IQUIT.EQ.1 ) EXIT
        ENDDO
        YX(2) = MAX( MIN( 1.D+0-YX(1),1.D+0 ),0.D+0 )
        XX(1) = MAX( MIN( 1.D+0-XX(2),1.D+0 ),0.D+0 )
!
!---    Compute interaction parameters  ---
!
        DO I = 1,2
        DO J = 1,2
          IF( I.EQ.J ) THEN
            SKX(I,J) = 0.D+0
          ELSE
            SKX(I,J) = CKX(I,J)*YX(I) + CKX(J,I)*YX(J)
          ENDIF
        ENDDO
        ENDDO
!
!---    a-ij parameters  ---
!
        DO I = 1,2
        DO J = 1,2
          AIX(I,J) = SQRT(SAX(I)*SAX(J))*(1.D+0-SKX(I,J))
        ENDDO
        ENDDO
!
!---    a-mix and b-mix parameters  ---
!
        AX = 0.D+0
        BX = 0.D+0
        DO I = 1,2
          DO J = 1,2
            AX = AX + YX(I)*YX(J)*AIX(I,J)
          ENDDO
          BX = BX + YX(I)*BIX(I) 
        ENDDO   
!
!---    Low pressure conditions, use ideal gas law  ---
!
        IF( PBX.LT.1.D+0 ) THEN
          VX = 1.D+3*RCU*TKX/PX
        ELSE
!
!---      Polynomial coefficients for Redlich-Kwong equation of state  ---
!
          CAX = 1.D+0
          CBX = -RCUBX*TKX/PBX
          CCX = -((RCUBX*TKX*BX/PBX) - (AX/(PBX*SQRT(TKX))) + (BX**2))
          CDX = -(AX*BX/(PBX*SQRT(TKX)))
          CALL NICKALLS( CAX,CBX,CCX,CDX,V1X,V2X,V3X )
!
!---      Gas (mixture) molar volume, cm^3/mol  ---
!
          VX = MAX( V1X,V2X,V3X )
        ENDIF
!
!---    Fugacity coefficients  ---
!
        DO K = 1,2
          FUGX(K) = (BIX(K)/BX)*((PBX*VX/(RCUBX*TKX))-1.D+0) -
     &      LOG(PBX*(VX-BX)/(RCUBX*TKX))
          VAR1X = 0.D+0
          DO I = 1,2
            VAR1X = VAR1X + YX(I)*(AIX(I,K)+AIX(K,I))
          ENDDO
          FUGX(K) = FUGX(K) + (VAR1X/AX - BIX(K)/BX)*
     &      (AX/(BX*RCUBX*(TKX**1.5D+0)))*LOG(VX/(VX+BX))
          FUGX(K) = EXP(FUGX(K))
        ENDDO
!
!---    Activities  ---
!
        ACTVX(1) = EXP( (AMX-2.D+0*AMX*XX(1))*(XX(2)**2) )
        ACTVX(2) = EXP( 2.D+0*AMX*XX(2)*(XX(1)**2) )
!
!---    A parameter  ---
!
        CAX = (EQKWX*ACTVX(1)/(FUGX(1)*PBX))
!
!---    B parameter  ---
!
        CBX = (FUGX(2)*PBX)/(XMOLWX*ACTVX(2)*APCX*EQKCX)
!
!---  Intermediate temperature regime ( 99.0 C < TX < 109.0 C ),
!     linear interpolation of low- and high-temperature regimes  ---
!
      ELSE
        AX = CACX(1) + CACX(2)*TKLX
        BX = CBCX
!
!---    Low pressure conditions, use ideal gas law  ---
!
        IF( PBX.LT.1.D+0 ) THEN
          VX = 1.D+3*RCU*TKX/PX
        ELSE
!
!---      Polynomial coefficients for Redlich-Kwong equation of state  ---
!
          CAX = 1.D+0
          CBX = -RCUBX*TKLX/PBX
          CCX = -((RCUBX*TKLX*BX/PBX) - (AX/(PBX*SQRT(TKLX))) + (BX**2))
          CDX = -(AX*BX/(PBX*SQRT(TKLX)))
          CALL NICKALLS( CAX,CBX,CCX,CDX,V1X,V2X,V3X )
!
!---      Molar volume, cm^3/mol  ---
!
          VX = MAX( V1X,V2X,V3X )
        ENDIF
!
!---    Fugacity coefficients  ---
!
        AIX(1,1) = CAWX(1)
        AIX(2,1) = CACWX(1)
        AIX(1,2) = CACWX(1)
        AIX(2,2) = CACX(1) + CACX(2)*TKLX
        BIX(1) = CBWX
        BIX(2) = CBCX
        YX(1) = 0.D+0
        YX(2) = 1.D+0
        DO K = 1,2
          SUMX = 0.D+0
          DO I = 1,2
            SUMX = SUMX + YX(I)*AIX(I,K)
          ENDDO
          FUGLX(K) = LOG(VX/(VX-BX)) + (BIX(K)/(VX-BX))
          FUGLX(K) = FUGLX(K) - (2.D+0*SUMX/(RCUBX*(TKLX**1.5D+0)*BX))*
     &      LOG((VX+BX)/VX)+(AX*BIX(K)/(RCUBX*(TKLX**1.5D+0)*(BX**2)))*
     &      (LOG((VX+BX)/VX)-(BX/(VX+BX))) - LOG(PBX*VX/(RCUBX*TKLX))
          FUGLX(K) = EXP(FUGLX(K))
        ENDDO
!
!---    A parameter  ---
!
        EQKWOX = 0.D+0
        PREFX = CPRX
        DO I = 1,5
          EQKWOX = EQKWOX + DLKWX(I)*(TLX**(I-1))
        ENDDO
        EQKWOX = 1.D+1**EQKWOX
        EQKWLX = EQKWOX*EXP((PBX-PREFX)*CVWX/(RCUBX*TKLX))
!
!---    B parameter  ---
!
        EQKCOX = 0.D+0
        PREFX = CPRX
        DO I = 1,4
          EQKCOX = EQKCOX + CLKCGX(I)*(TLX**(I-1))
        ENDDO
        EQKCOX = 1.D+1**EQKCOX
        EQKCLX = EQKCOX*EXP((PBX-PREFX)*CVCX/(RCUBX*TKLX))
!
!---    Initial guess of water gas mole fraction,
!       and CO2 aqueous mole fraction  ---
!
        CALL SP_W( THX,PSWX )
        YX(1) = PSWX/PX
        YX(2) = MAX( MIN( 1.D+0-YX(1),1.D+0 ),0.D+0 )
        XX(2) = 9.D-3
        XX(1) = 1.D+0-XX(2)
        CKX(1,1) = 0.D+0
        CKX(2,1) = DKCWX(1) + DKCWX(2)*TKHX
        CKX(1,2) = DKWCX(1) + DKWCX(2)*TKHX
        CKX(2,2) = 0.D+0
        SAX(1) = DAWX(1) + DAWX(2)*TKHX
        SAX(2) = DACX(1) + DACX(2)*TKHX
        BIX(1) = DBWX
        BIX(2) = DBCX
        EQKWOX = 0.D+0
        EQKCOX = 0.D+0
        PREFX = 0.D+0
        DTKX = MAX( (TKHX-373.15D+0),0.D+0 )
        AMX = DAMX(1)*DTKX + DAMX(2)*(DTKX**2)
        VMWX = DVMWX(1) + DVMWX(2)*DTKX
        VMCX = DVMCX(1) + DVMCX(2)*DTKX      
!
!---    Equilibrium constants  ---
!
        DO I = 1,5
          EQKWOX = EQKWOX + DLKWX(I)*(THX**(I-1))
          EQKCOX = EQKCOX + DLKCX(I)*(THX**(I-1))
          PREFX = PREFX + DPRX(I)*(THX**(I-1))          
        ENDDO
        EQKWOX = 1.D+1**EQKWOX
        EQKCOX = 1.D+1**EQKCOX
        EQKWHX = EQKWOX*EXP((PBX-PREFX)*VMWX/(RCUBX*TKHX))
        EQKCHX = EQKCOX*EXP((PBX-PREFX)*VMCX/(RCUBX*TKHX))
!
!---    Sucessive-substitution iteration  ---
!
        NC = 0
        DO
          NC = NC + 1
          IF( NC.GT.32 ) THEN
            M_ERR(1) = 'Mutual Solubility Convergence Failure: ' // 
     &        'Successive-Substitution @ Node'
            CALL PATH
            I_ERR(1) = ABS(N_DB)
            I_ERR(2) = 0
            I_ERR(3) = 1
            I_ERR(4) = ID
          ENDIF
          YXOX = YX(1)
!
!---      Compute interaction parameters  ---
!
          DO I = 1,2
          DO J = 1,2
            IF( I.EQ.J ) THEN
              SKX(I,J) = 0.D+0
            ELSE
              SKX(I,J) = CKX(I,J)*YX(I) + CKX(J,I)*YX(J)
            ENDIF
          ENDDO
          ENDDO
!
!---      a-ij parameters  ---
!
          DO I = 1,2
          DO J = 1,2
            AIX(I,J) = SQRT(SAX(I)*SAX(J))*(1.D+0-SKX(I,J))
          ENDDO
          ENDDO
!
!---      a-mix and b-mix parameters  ---
!
          AX = 0.D+0
          BX = 0.D+0
          DO I = 1,2
            DO J = 1,2
              AX = AX + YX(I)*YX(J)*AIX(I,J)
            ENDDO
            BX = BX + YX(I)*BIX(I) 
          ENDDO   
!
!---      Low pressure conditions, use ideal gas law  ---
!
          IF( PBX.LT.1.D+0 ) THEN
            VX = 1.D+3*RCU*TKX/PX
          ELSE
!
!---        Polynomial coefficients for Redlich-Kwong equation 
!           of state  ---
!
            CAX = 1.D+0
            CBX = -RCUBX*TKHX/PBX
            CCX = -((RCUBX*TKHX*BX/PBX)-(AX/(PBX*SQRT(TKHX)))+(BX**2))
            CDX = -(AX*BX/(PBX*SQRT(TKHX)))
            CALL NICKALLS( CAX,CBX,CCX,CDX,V1X,V2X,V3X )
!
!---        Gas molar volume, cm^3/mol  ---
!
            VX = MAX( V1X,V2X,V3X )
          ENDIF
!
!---      Fugacity coefficients  ---
!
          DO K = 1,2
            FUGHX(K) = (BIX(K)/BX)*((PBX*VX/(RCUBX*TKHX))-1.D+0) -
     &        LOG(PBX*(VX-BX)/(RCUBX*TKHX))
            VAR1X = 0.D+0
            DO I = 1,2
              VAR1X = VAR1X + YX(I)*(AIX(I,K)+AIX(K,I))
            ENDDO
            FUGHX(K) = FUGHX(K) + (VAR1X/AX - BIX(K)/BX)*
     &        (AX/(BX*RCUBX*(TKHX**1.5D+0)))*LOG(VX/(VX+BX))
            FUGHX(K) = EXP(FUGHX(K))
          ENDDO
!
!---      Activities  ---
!
          ACTVX(1) = EXP( (AMX-2.D+0*AMX*XX(1))*(XX(2)**2) )
          ACTVX(2) = EXP( 2.D+0*AMX*XX(2)*(XX(1)**2) )
!
!---      Linear interpolation  ---
!
          DO K = 1,2
            FUGX(K) = (TX-TLX)*(FUGHX(K)-FUGLX(K))/(THX-TLX) + FUGLX(K)
          ENDDO
          EQKWX = (TX-TLX)*(EQKWHX-EQKWLX)/(THX-TLX) + EQKWLX
          EQKCX = (TX-TLX)*(EQKCHX-EQKCLX)/(THX-TLX) + EQKCLX
          ACTVX(1) = (TX-TLX)*(ACTVX(1)-1.D+0)/(THX-TLX) + 1.D+0
          ACTVX(2) = (TX-TLX)*(ACTVX(2)-1.D+0)/(THX-TLX) + 1.D+0
!
!---      A parameter  ---
!
          CAX = (EQKWX*ACTVX(1)/(FUGX(1)*PBX))
!
!---      B parameter  ---
!
          CBX = (FUGX(2)*PBX)/(XMOLWX*ACTVX(2)*APCX*EQKCX)
!
!---      Update mole fractions ---
!
          YX(1) = (1.D+0-CBX)/((1.D+0/CAX)-CBX)
          XX(2) = CBX*(1.D+0-YX(1))
          YX(2) = MAX( MIN( 1.D+0-YX(1),1.D+0 ),0.D+0 )
          XX(1) = MAX( MIN( 1.D+0-XX(2),1.D+0 ),0.D+0 )
!
!---      Check for convergence ---
!
          ERRX = ABS((YX(1)-YXOX)/(PSWX/PX))
          IF( ERRX.LE.1.D-6 ) EXIT
        ENDDO  
      ENDIF
!
!---  Equilibrium mole fractions  ---
!
      XMGWX = (1.D+0-CBX)*XMOLWX/(((1.D+0/CAX)-CBX)*
     &  (XMOLNAX + XMOLCLX + XMOLWX) + (XMOLNAX + XMOLCLX)*CBX)
      XMLAX = CBX*(1.D+0-XMGWX)*FSFLA*PVAX/PX
      XMLSX = (1.D+0-XMLAX)*XMLSX
      XMLWX = 1.D+0 - XMLAX - XMLSX
!
!---  Limit mole fractions  ---
!
      IF( XMLWX.LT.1.D-16 ) XMLWX = 0.D+0
      IF( XMLAX.LT.1.D-16 ) XMLAX = 0.D+0
      IF( XMLSX.LT.1.D-16 ) XMLSX = 0.D+0
!
!---  Equilibrium mass fractions  ---
!
      WTMLX = XMLWX*WTMW + XMLAX*WTMA + XMLSX*WTMS
      XLWX = XMLWX*WTMW/WTMLX
      XLAX = XMLAX*WTMA/WTMLX
      XLSX = XMLSX*WTMS/WTMLX
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of EQUIL group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE FLASH( BETAX,CGX,CNX,PX,TKX,XMCX,YMCX,ZMCX,
     &  ZGX,ZNX,INDX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Two-phase flash calculation
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 10 May 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 AIX(LNGC),FKX(LNGC),FKY(LNGC)
      REAL*8 XMCX(LNGC),YMCX(LNGC),ZMCX(LNGC)
      REAL*8 FUGGX(LNGC),FUGNX(LNGC)
      REAL*8 AJ(LNGC+1,LNGC+1),BJ(LNGC+1),GX(LNGC+1,LNGC+2)
      INTEGER IJ(LNGC+1)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/FLASH'
!
!---  Soave-Redlich-Kwong temperature dependent component 
!     coefficients  ---
!
      IF( ISLC(68).EQ.2 ) THEN
        CALL SRK_CT( AIX,TKX )
!
!---  Peng-Robinson temperature dependent component 
!     coefficients  ---
!
      ELSE
        CALL PR_CT( AIX,TKX )
      ENDIF
!
!---  Guess K-factors  ---
!
      DO IGC = 1,NGC+2
        FKX(IGC) = EXP( LOG(GCPP(4,IGC)/PX) + 
     &    5.373D+0*(1.D+0+GCPP(7,IGC))*(1.D+0-(GCPP(3,IGC)/TKX)) )
      ENDDO
!
!---  Guess beta (vapor molar fraction)  ---
!
      BETAX = 5.D-1
      DO
!
!---    Rachford-Rice equation to sychronize beta with
!       the updated K-factors  ---
!
        DO
          FX = 0.D+0
          DFDBX = 0.D+0
          DO IGC = 1,NGC+2
            IF( ZMCX(IGC).LT.EPSL ) CYCLE
            GKX = FKX(IGC)-1.D+0
            HKX = 1.D+0 + BETAX*GKX
            FX = FX + ZMCX(IGC)*GKX/HKX
            DFDBX = DFDBX + ZMCX(IGC)*((GKX/HKX)**2)
          ENDDO
          DBZ = FX/DFDBX
          BETAX = BETAX + DBZ
          IF( BETAX.GT.1.D+0 ) THEN
            BETAX = 1.D+0
            DBZ = 0.D+0
          ELSEIF( BETAX.LT.0.D+0 ) THEN
            BETAX = 0.D+0
            DBZ = 0.D+0
          ENDIF
          IF( ABS(DBZ).LE.1.D-7 ) EXIT
        ENDDO
!
!---    Vapor and liquid mole fractions  ---
!
        SXMCX = 0.D+0
        SYMCX = 0.D+0
        DO IGC = 1,NGC+2
          XMCX(IGC) = ZMCX(IGC)/(1.D+0 + BETAX*(FKX(IGC)-1.D+0))
          YMCX(IGC) = XMCX(IGC)*FKX(IGC)
          SXMCX = SXMCX + XMCX(IGC)
          SYMCX = SYMCX + YMCX(IGC)
        ENDDO
!
!---    Normalize vapor and liquid mole fractions  ---
!
        DO IGC = 1,NGC+2
          XMCX(IGC) = XMCX(IGC)/SXMCX
          YMCX(IGC) = YMCX(IGC)/SYMCX
        ENDDO
!
!---    Soave-Redlich-Kwong equation of state  ---
!
        IF( ISLC(68).EQ.2 ) THEN
!
!---      Gas mixture coefficients  ---
!
          CALL SRK_CX( AGX,AIX,BGX,YMCX )
!
!---      Liquid mixture coefficients  ---
!
          CALL SRK_CX( ANX,AIX,BNX,XMCX )
!
!---      Gas mixture compressibility  ---
!
          JNDX = 1
          CALL SRK_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
!
!---      Liquid mixture compressibility  ---
!
          JNDX = 2
          CALL SRK_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
!
!---      Gas mixture fugacity coefficient  ---
!
          CALL SRK_FUG( AGX,AIX,BGX,CAGX,CBGX,FUGGX,YMCX,ZGX )
!
!---      Liquid mixture fugacity coefficient  ---
!
          CALL SRK_FUG( ANX,AIX,BNX,CANX,CBNX,FUGNX,XMCX,ZNX )
!
!---    Peng-Robinson equation of state  ---
!
        ELSE
!
!---      Gas mixture coefficients  ---
!
          CALL PR_CX( AGX,AIX,BGX,YMCX )
!
!---      Liquid mixture coefficients  ---
!
          CALL PR_CX( ANX,AIX,BNX,XMCX )
!
!---      Gas mixture compressibility  ---
!
          JNDX = 1
          CALL PR_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
!
!---      Liquid mixture compressibility  ---
!
          JNDX = 2
          CALL PR_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
!
!---      Gas mixture fugacity coefficient  ---
!
          CALL PR_FUG( AGX,AIX,BGX,CAGX,CBGX,FUGGX,YMCX,ZGX )
!
!---      Liquid mixture fugacity coefficient  ---
!
          CALL PR_FUG( ANX,AIX,BNX,CANX,CBNX,FUGNX,XMCX,ZNX )
        ENDIF
        DFKMX = 0.D+0
        DO IGC = 1,NGC+2
          IF( ZMCX(IGC).LT.EPSL ) CYCLE
          DFKX = FUGNX(IGC)/FUGGX(IGC) - FKX(IGC)
          DFKMX = MAX( DFKMX,ABS(DFKX) )
          FKX(IGC) = FKX(IGC) + DFKX
        ENDDO
        IF( ABS(DFKMX).LE.1.D-4 ) EXIT
      ENDDO
!
!---  Rachford-Rice equation to sychronize beta with
!     the updated K-factors  ---
!
      DO
        FX = 0.D+0
        DFDBX = 0.D+0
        DO IGC = 1,NGC+2
          IF( ZMCX(IGC).LT.EPSL ) CYCLE
          GKX = FKX(IGC)-1.D+0
          HKX = 1.D+0 + BETAX*GKX
          FX = FX + ZMCX(IGC)*GKX/HKX
          DFDBX = DFDBX + ZMCX(IGC)*((GKX/HKX)**2)
        ENDDO
        DBZ = FX/DFDBX
        BETAX = BETAX + DBZ
        IF( BETAX.GT.1.D+0 ) THEN
          BETAX = 1.D+0
          DBZ = 0.D+0
        ELSEIF( BETAX.LT.0.D+0 ) THEN
          BETAX = 0.D+0
          DBZ = 0.D+0
        ENDIF
        IF( ABS(DBZ).LE.1.D-7 ) EXIT
      ENDDO
!
!---  Initialize counter  ---
!
      NC = 0
!
!---  Determine number of equations  ---
!
      NEQ = 1
      DO M = 1,NGC+2
        IF( ZMCX(M).LT.EPSL ) CYCLE
        NEQ = NEQ + 1
      ENDDO
!
!---  Top of Newton-Raphson loop for K-factors and beta  ---
!
      DO
        NC = NC+1
!
!---    Increments  ---
!
        DBY = SIGN( 1.D-6,5.D-1-BETAX )
        DFKY = 1.D-6
!
!---    Loop over increments  ---
!
        MX = 0
        DO M = 1,NGC+4
          IF( M.GT.1 .AND. M.LT.NGC+4 ) THEN
            IF( ZMCX(M-1).LT.EPSL ) CYCLE
          ENDIF
          MX = MX + 1
          DO IGC = 1,NGC+2
            FKY(IGC) = FKX(IGC)
            IF( M-1.EQ.IGC ) FKY(IGC) = FKX(IGC) + DFKY
          ENDDO
          BETAY = BETAX
          IF( M.EQ.NGC+4 ) BETAY = BETAX + DBY
!
!---      Vapor and liquid mole fractions  ---
!
          SXMCX = 0.D+0
          SYMCX = 0.D+0
          DO IGC = 1,NGC+2
            XMCX(IGC) = ZMCX(IGC)/(1.D+0 + BETAY*(FKY(IGC)-1.D+0))
            YMCX(IGC) = XMCX(IGC)*FKY(IGC)
            SXMCX = SXMCX + XMCX(IGC)
            SYMCX = SYMCX + YMCX(IGC)
          ENDDO
!
!---      Normalize vapor and liquid mole fractions  ---
!
          DO IGC = 1,NGC+2
            XMCX(IGC) = XMCX(IGC)/SXMCX
            YMCX(IGC) = YMCX(IGC)/SYMCX
          ENDDO
!
!---      Soave-Redlich-Kwong equation of state  ---
!
          IF( ISLC(68).EQ.2 ) THEN
!
!---        Gas mixture coefficients  ---
!
            CALL SRK_CX( AGX,AIX,BGX,YMCX )
!
!---        Liquid mixture coefficients  ---
!
            CALL SRK_CX( ANX,AIX,BNX,XMCX )
!
!---        Gas mixture compressibility  ---
!
            JNDX = 1
            CALL SRK_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
!
!---        Liquid mixture compressibility  ---
!
            JNDX = 2
            CALL SRK_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
!
!---        Gas mixture fugacity coefficient  ---
!
            CALL SRK_FUG( AGX,AIX,BGX,CAGX,CBGX,FUGGX,YMCX,ZGX )
!
!---        Liquid mixture fugacity coefficient  ---
!
            CALL SRK_FUG( ANX,AIX,BNX,CANX,CBNX,FUGNX,XMCX,ZNX )
!
!---      Peng-Robinson equation of state  ---
!
          ELSE
!
!---        Gas mixture coefficients  ---
!
            CALL PR_CX( AGX,AIX,BGX,YMCX )
!
!---        Liquid mixture coefficients  ---
!
            CALL PR_CX( ANX,AIX,BNX,XMCX )
!
!---        Gas mixture compressibility  ---
!
            JNDX = 1
            CALL PR_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
!
!---        Liquid mixture compressibility  ---
!
            JNDX = 2
            CALL PR_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
!
!---        Gas mixture fugacity coefficient  ---
!
            CALL PR_FUG( AGX,AIX,BGX,CAGX,CBGX,FUGGX,YMCX,ZGX )
!
!---        Liquid mixture fugacity coefficient  ---
!
            CALL PR_FUG( ANX,AIX,BNX,CANX,CBNX,FUGNX,XMCX,ZNX )
          ENDIF
!
!---      Objective functions  ---
!
          GX(NEQ,MX) = 0.D+0
          IGCX = 0
          DO IGC = 1,NGC+2
            IF( ZMCX(IGC).LT.EPSL ) CYCLE
            IGCX = IGCX + 1
            IF( FKY(IGC).GT.EPSL ) THEN
              GX(IGCX,MX) = LOG(FKY(IGC)) - LOG(FUGNX(IGC)) + 
     &          LOG(FUGGX(IGC))
            ELSE
              GX(IGCX,MX) = 0.D+0
            ENDIF
            GKX = FKY(IGC)-1.D+0
            GX(NEQ,MX) = GX(NEQ,MX) + ZMCX(IGC)*GKX/(1.D+0 + BETAY*GKX)
          ENDDO
        ENDDO
!
!---    Load solution vector and Jacobian matrix for
!       two-phase conditions  ---
!
        DO IGC = 1,NEQ-1
          DO JGC = 1,NEQ
            AJ(IGC,JGC) = (GX(IGC,JGC+1)-GX(IGC,1))/DFKY
          ENDDO
          BJ(IGC) = -GX(IGC,1)
        ENDDO
        IGC = NEQ
        DO JGC = 1,NEQ
          AJ(IGC,JGC) = (GX(IGC,JGC+1)-GX(IGC,1))/DBY
        ENDDO
        BJ(IGC) = -GX(IGC,1)
!
!---    Solve linear system  ---
!
        JP = MX-1
        KP = LNGC+1
        CALL LUDCMP( AJ,JP,KP,IJ,DJ )
        CALL LUBKSB( AJ,JP,KP,IJ,BJ )
!
!---    Update K-factors and beta  ---
!
        DFKMX = 0.D+0
        IGCX = 0
        DO IGC = 1,NGC+2
          IF( ZMCX(IGC).LT.EPSL ) CYCLE
          IGCX = IGCX + 1
          DFKX = BJ(IGCX)
          FKX(IGC) = MAX( FKX(IGC)+DFKX,0.D+0 )
          DFKMX = MAX( DFKMX,ABS(DFKX) )
        ENDDO
        DBX = BJ(MX-1)
        BETAX = BETAX + DBX
!
!---    Rachford-Rice equation to sychronize beta with
!       the updated K-factors  ---
!
        DO
          FX = 0.D+0
          DFDBX = 0.D+0
          DO IGC = 1,NGC+2
            GKX = FKX(IGC)-1.D+0
            HKX = 1.D+0 + BETAX*GKX
            FX = FX + ZMCX(IGC)*GKX/HKX
            DFDBX = DFDBX + ZMCX(IGC)*((GKX/HKX)**2)
          ENDDO
          DBZ = FX/DFDBX
          BETAX = BETAX + DBZ
          IF( ABS(DBZ).LE.1.D-4 ) EXIT
        ENDDO
!
!---    Convergence check  ---
!
        IF( BETAX.LT.EPSL .AND. DBX.LT.0.D+0 ) THEN
          INDX = 1
          ISUB_LOG = ISUB_LOG-1
          RETURN
        ELSEIF( 1.D+0-BETAX.LT.EPSL .AND. DBX.GT.0.D+0 ) THEN
          INDX = -1
          ISUB_LOG = ISUB_LOG-1
          RETURN
        ENDIF
        IQUIT = 1
        IF( ABS(DFKMX).GT.1.D-7 ) IQUIT = 0
        IF( BETAX.GT.0.D+0 .AND. BETAX.LT.1.D+0 ) THEN
          IF( ABS(DBX).GT.1.D-7 ) IQUIT = 0
        ENDIF
        IF( IQUIT.EQ.1 ) EXIT
      ENDDO
!
!---  Vapor and liquid mole fractions  ---
!
      SXMCX = 0.D+0
      SYMCX = 0.D+0
      DO IGC = 1,NGC+2
        IF( ZMCX(IGC).LT.EPSL ) CYCLE
        XMCX(IGC) = ZMCX(IGC)/(1.D+0 + BETAX*(FKX(IGC)-1.D+0))
        YMCX(IGC) = XMCX(IGC)*FKX(IGC)
        SXMCX = SXMCX + XMCX(IGC)
        SYMCX = SYMCX + YMCX(IGC)
      ENDDO
!
!---  Normalize vapor and liquid mole fractions  ---
!
      DO IGC = 1,NGC+2
        XMCX(IGC) = XMCX(IGC)/SXMCX
        YMCX(IGC) = YMCX(IGC)/SYMCX
      ENDDO
!
!---  Soave-Redlich-Kwong equation of state  ---
!
      IF( ISLC(68).EQ.2 ) THEN
!
!---    Gas mixture coefficients  ---
!
        CALL SRK_CX( AGX,AIX,BGX,YMCX )
!
!---    Peneloux volume correction  ---
!
        CALL PENELOUX( CGX,TKX,YMCX )
        BGX = BGX - CGX
!
!---    Liquid mixture coefficients  ---
!
        CALL SRK_CX( ANX,AIX,BNX,XMCX )
!
!---    Peneloux volume correction  ---
!
        CALL PENELOUX( CNX,TKX,XMCX )
        BNX = BNX - CNX
!
!---    Gas mixture compressibility  ---
!
        JNDX = 1
        CALL SRK_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
!
!---    Liquid mixture compressibility  ---
!
        JNDX = 2
        CALL SRK_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
!
!---  Peng-Robinson equation of state  ---
!
      ELSE
!
!---    Gas mixture coefficients  ---
!
        CALL PR_CX( AGX,AIX,BGX,YMCX )
!
!---    Peneloux volume correction  ---
!
        CALL PENELOUX( CGX,TKX,YMCX )
        BGX = BGX - CGX
!
!---    Liquid mixture coefficients  ---
!
        CALL PR_CX( ANX,AIX,BNX,XMCX )
!
!---    Peneloux volume correction  ---
!
        CALL PENELOUX( CNX,TKX,XMCX )
        BNX = BNX - CNX
!
!---    Gas mixture compressibility  ---
!
        JNDX = 1
        CALL PR_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
!
!---    Liquid mixture compressibility  ---
!
        JNDX = 2
        CALL PR_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of FLASH group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE GIBBS_X( AIX,FUGNX,GNX,HNX,PX,TKX,XMCX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Gibbs free energy for the liquid phase.
!     Michelsen, M.L. and J.M. Mollerup. 2007. Thermodynamic Models:
!     Fundamentals and Computational Aspects. Tie-Line Publications
!     ISBN 87-989961-3-4
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 8 March 2014
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 AIX(LNGC),XMCX(LNGC)
      REAL*8 FUGNX(LNGC)
      REAL*8 HNX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/GIBBS_X'
      INDX = 0
!
!---  Soave-Redlich-Kwong equation of state  ---
!
      IF( ISLC(68).EQ.2 ) THEN
!
!---    Liquid mixture coefficients  ---
!
        CALL SRK_CX( ANX,AIX,BNX,XMCX )
!
!---    Liquid mixture compressibility  ---
!
        JNDX = 2
        CALL SRK_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
!
!---    Liquid mixture fugacity coefficient  ---
!
        CALL SRK_FUG( ANX,AIX,BNX,CANX,CBNX,FUGNX,XMCX,ZNX )
!
!---  Peng-Robinson equation of state  ---
!
      ELSE
!
!---    Liquid mixture coefficients  ---
!
        CALL PR_CX( ANX,AIX,BNX,XMCX )
!
!---    Liquid mixture compressibility  ---
!
        JNDX = 2
        CALL PR_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
!
!---    Liquid mixture fugacity coefficient  ---
!
        CALL PR_FUG( ANX,AIX,BNX,CANX,CBNX,FUGNX,XMCX,ZNX )
      ENDIF
!
!---  h-factors and Gibbs energy  ---
!
      GNX = 0.D+0
      DO IGC = 1,NGC+2
        HNX(IGC) = 0.D+0
        IF( XMCX(IGC).GT.EPSL ) THEN
          HNX(IGC) = LOG(XMCX(IGC)) + LOG(FUGNX(IGC))
          GNX = GNX + XMCX(IGC)*HNX(IGC)
        ENDIF
      ENDDO
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of GIBBS_X group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE GIBBS_Y( AIX,FUGGX,GGX,HGX,PX,TKX,YMCX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Gibbs free energy for the vapor phase.
!     Michelsen, M.L. and J.M. Mollerup. 2007. Thermodynamic Models:
!     Fundamentals and Computational Aspects. Tie-Line Publications
!     ISBN 87-989961-3-4
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 8 March 2014
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 AIX(LNGC),YMCX(LNGC)
      REAL*8 FUGGX(LNGC)
      REAL*8 HGX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/GIBBS_Y'
      INDX = 0
!
!---  Soave-Redlich-Kwong equation of state  ---
!
      IF( ISLC(68).EQ.2 ) THEN
!
!---    Gas mixture coefficients  ---
!
        CALL SRK_CX( AGX,AIX,BGX,YMCX )
!
!---    Gas mixture compressibility  ---
!
        JNDX = 1
        CALL SRK_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
!
!---    Gas mixture fugacity coefficient  ---
!
        CALL SRK_FUG( AGX,AIX,BGX,CAGX,CBGX,FUGGX,YMCX,ZGX )
!
!---  Peng-Robinson equation of state  ---
!
      ELSE
!
!---    Gas mixture coefficients  ---
!
        CALL PR_CX( AGX,AIX,BGX,YMCX )
!
!---    Gas mixture compressibility  ---
!
        JNDX = 1
        CALL PR_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
!
!---    Gas mixture fugacity coefficient  ---
!
        CALL PR_FUG( AGX,AIX,BGX,CAGX,CBGX,FUGGX,YMCX,ZGX )
      ENDIF
!
!---  h-factors and Gibbs energy  ---
!
      GGX = 0.D+0
      DO IGC = 1,NGC+2
        HGX(IGC) = 0.D+0
        IF( YMCX(IGC).GT.EPSL ) THEN
          HGX(IGC) = LOG(YMCX(IGC)) + LOG(FUGGX(IGC))
          GGX = GGX + YMCX(IGC)*HGX(IGC)
        ENDIF
      ENDDO
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of GIBBS_Y group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE GIBBS_Z( AIX,FUGZX,GZX,HZX,PX,TKX,ZMCX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Gibbs free energy for the feed.
!     Michelsen, M.L. and J.M. Mollerup. 2007. Thermodynamic Models:
!     Fundamentals and Computational Aspects. Tie-Line Publications
!     ISBN 87-989961-3-4
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 8 March 2014
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 AIX(LNGC),ZMCX(LNGC)
      REAL*8 FUGGX(LNGC),FUGNX(LNGC),FUGZX(LNGC)
      REAL*8 HGX(LNGC),HNX(LNGC),HZX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/GIBBS_Z'
      INDX = 0
!
!---  Soave-Redlich-Kwong equation of state  ---
!
      IF( ISLC(68).EQ.2 ) THEN
!
!---    Gas mixture coefficients  ---
!
        CALL SRK_CX( AGX,AIX,BGX,ZMCX )
!
!---    Liquid mixture coefficients  ---
!
        CALL SRK_CX( ANX,AIX,BNX,ZMCX )
!
!---    Gas mixture compressibility  ---
!
        JNDX = 1
        CALL SRK_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
!
!---    Liquid mixture compressibility  ---
!
        JNDX = 2
        CALL SRK_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
!
!---    Gas mixture fugacity coefficient  ---
!
        CALL SRK_FUG( AGX,AIX,BGX,CAGX,CBGX,FUGGX,ZMCX,ZGX )
!
!---    Liquid mixture fugacity coefficient  ---
!
        CALL SRK_FUG( ANX,AIX,BNX,CANX,CBNX,FUGNX,ZMCX,ZNX )
!
!---  Peng-Robinson equation of state  ---
!
      ELSE
!
!---    Gas mixture coefficients  ---
!
        CALL PR_CX( AGX,AIX,BGX,ZMCX )
!
!---    Liquid mixture coefficients  ---
!
        CALL PR_CX( ANX,AIX,BNX,ZMCX )
!
!---    Gas mixture compressibility  ---
!
        JNDX = 1
        CALL PR_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
!
!---    Liquid mixture compressibility  ---
!
        JNDX = 2
        CALL PR_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
!
!---    Gas mixture fugacity coefficient  ---
!
        CALL PR_FUG( AGX,AIX,BGX,CAGX,CBGX,FUGGX,ZMCX,ZGX )
!
!---    Liquid mixture fugacity coefficient  ---
!
        CALL PR_FUG( ANX,AIX,BNX,CANX,CBNX,FUGNX,ZMCX,ZNX )
      ENDIF
!
!---  h-factors and Gibbs energy  ---
!
      GGX = 0.D+0
      GNX = 0.D+0
      DO IGC = 1,NGC+2
        HGX(IGC) = 0.D+0
        HNX(IGC) = 0.D+0
        IF( ZMCX(IGC).GT.EPSL ) THEN
          HGX(IGC) = LOG(ZMCX(IGC)) + LOG(FUGGX(IGC))
          HNX(IGC) = LOG(ZMCX(IGC)) + LOG(FUGNX(IGC))
          GGX = GGX + ZMCX(IGC)*HGX(IGC)
          GNX = GNX + ZMCX(IGC)*HNX(IGC)
        ENDIF
      ENDDO
!
!---  In case the compressibility factor equation has multiple
!     roots, the root corresponding to the state with the lower
!     Gibbs energy is selected (Michelsen, M.L., 1982, 
!     The Isothermal Flash Problem. Part I. Stability. Fluid Phase 
!     Equilibria, 9:1-19.)
!
!     Mulitple roots, gas yields lower Gibbs energy  ---
!
      IF( (GNX-GGX).GT.1.D-9 ) THEN
        DO IGC = 1,NGC+2
          HZX(IGC) = 0.D+0
          IF( ZMCX(IGC).GT.EPSL ) THEN
            HZX(IGC) = HGX(IGC)
            FUGZX(IGC) = FUGGX(IGC)
          ENDIF
          GZX = GGX
        ENDDO
!
!---   Mulitple roots, liquid yields lower Gibbs energy  ---
!
      ELSEIF( (GGX-GNX).GT.1.D-9 ) THEN
        DO IGC = 1,NGC+2
          HZX(IGC) = 0.D+0
          IF( ZMCX(IGC).GT.EPSL ) THEN
            HZX(IGC) = HNX(IGC)
            FUGZX(IGC) = FUGNX(IGC)
          ENDIF
          GZX = GNX
        ENDDO
!
!---  Trival solution  ---
!
      ELSE
        DO IGC = 1,NGC+2
          HZX(IGC) = 0.D+0
          IF( ZMCX(IGC).GT.EPSL ) THEN
            HZX(IGC) = 5.D-1*(HGX(IGC)+HNX(IGC))
            FUGZX(IGC) = 5.D-1*(FUGGX(IGC)+FUGNX(IGC))
          ENDIF
          GZX = 5.D-1*(GGX+GNX)
        ENDDO
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of GIBBS_Z group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE HC_LA( TX,XLSX,HCX,DHCX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Henry's coefficient as a function of temperature for the
!     dissolution of CO2 in NaCl aqueous solutions.
!
!     Battistelli, A., C. Claudio, and K. Pruess.  1997.  The simulator
!     TOUGH2/EWASG for modelling geothermal reservoirs with brines and
!     noncondensible gas.  Geothermics, 26(4): 437-464.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 15 March 2002.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE FDVH
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 COBX(6),COCX(5)
      REAL*8 CHBX(4),CHCX(4)
!
!----------------------Data Statements---------------------------------!
!
      DATA COBX / 7.83666D+7, 1.96025D+6, 8.20574D+4, -7.40674D+2,
     &  2.18380D+0, -2.20999D-3 /
      DATA COCX / 1.19784D-1, -7.17823D-4, 4.93854D-6, -1.03826D-8,
     &  1.08233D-11 /
      DATA CHBX / -3.65183D+2, 1.81067D+4, 4.97554D+1, -2.85D-4 /
      DATA CHCX / 1.668D-1, -1.09236D-3, 7.81043D-6, -1.52343D-8 /
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/HC_LA'
!
!---  Empirical formulation by Battistelli for Henry's coefficient
!     for pure water as a function of temperature  ---
!
      HCX = 0.D+0
      DO I = 0,5
        HCX = HCX + COBX(I+1)*(TX**I)
      ENDDO
      DHCX = 0.D+0
      DO I = 1,5
        DHCX = DHCX + REAL(I)*COBX(I+1)*(TX**(I-1))
      ENDDO
      HCX = HCX*CHKN(1)
      DHCX = DHCX*CHKN(1)
!
!---  Empirical formulation by Battistelli for salting-out
!     coefficient for NaCl aqueous solutions as a function
!     of temperature  ---
!
      SKBX = 0.D+0
      DO I = 0,4
        SKBX = SKBX + COCX(I+1)*(TX**I)
      ENDDO
      DSKBX = 0.D+0
      DO I = 1,4
        DSKBX = DSKBX + REAL(I)*COCX(I+1)*(TX**(I-1))
      ENDDO
!
!---  Empirical formulation by Battistelli for Henry's coefficient
!     coefficient for NaCl aqueous solutions as a function
!     of temperature and salt molality  ---
!
      GLSX = 1.D+3*XLSX/(WTMS*(1.D+0-XLSX))
      HCX = HCX*(1.D+1**(GLSX*SKBX))
      DHCX = DHCX*(1.D+1**(GLSX*SKBX)) + HCX*GLSX*DSKBX*LOG(1.D+1)
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of HC_LA group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE HC_LN( TX,XLSX,HCX,DHCX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Henry's coefficient as a function of temperature for the
!     dissolution of N2 in NaCl aqueous solutions.
!
!     Sloan, E. D., Jr.  1997.  Clathrate Hydrates of Natural Gases.
!     Marcel Dekker, Inc., New York.
!
!     Battistelli, A., C. Claudio, and K. Pruess.  1997.  The simulator
!     TOUGH2/EWASG for modelling geothermal reservoirs with brines and
!     noncondensible gas.  Geothermics, 26(4): 437-464.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 8 October 2004.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE FDVH
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 CHBX(4),CHCX(4)
!
!----------------------Data Statements---------------------------------!
!
      DATA CHBX / -3.27850D+2, 1.67576D+4, 4.28400D+1, 1.6765D-2 /
      DATA CHCX / 1.668D-1, -1.09236D-3, 7.81043D-6, -1.52343D-8 /
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/HC_LN'
!
!---  The formulation by Sloan for Henry's coefficient of nitrogen 
!     for pure water as a function of temperature  ---
!
      TKX = TX + TABS
      RCX = 1.9872
      HCX = (CHBX(1)/RCX) + (CHBX(2)/(RCX*TKX)) + 
     &  ((CHBX(3)/RCX)*LOG(TKX)) + (CHBX(4)*TKX/RCX)
      DHCX = (CHBX(2)/(RCX*(TKX**2))) - 
     &  (CHBX(3)/(RCX*TKX)) - (CHBX(4)/RCX)
      HCX = EXP(-HCX)
      HCX = HCX*PATM
      DHCX = DHCX*HCX
      HCX = HCX*CHKN(1)
      DHCX = DHCX*CHKN(1)
!
!---  Empirical formulation for salting-out coefficient for 
!     NaCl aqueous solutions as a function of temperature  
!
      SKBX = 0.D+0
      DO I = 0,3
        SKBX = SKBX + CHCX(I+1)*(TX**I)
      ENDDO
      DSKBX = 0.D+0
      DO I = 1,3
        DSKBX = DSKBX + REAL(I)*CHCX(I+1)*(TX**(I-1))
      ENDDO
!
!---  Empirical formulation by Battistelli for Henry's coefficient
!     coefficient for NaCl aqueous solutions as a function
!     of temperature and salt molality  ---
!
      GLSX = 1.D+3*XLSX/(WTMS*(1.D+0-XLSX))
      HCX = HCX*(1.D+1**(GLSX*SKBX))
      DHCX = DHCX*(1.D+1**(GLSX*SKBX)) + HCX*GLSX*DSKBX*LOG(1.D+1)
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of HC_LN group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE HC_LO( TX,XLSX,HCX,DHCX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Henry's coefficient as a function of temperature for the
!     dissolution of CH4 in NaCl aqueous solutions.
!
!     Sloan, E. D., Jr.  1997.  Clathrate Hydrates of Natural Gases.
!     Marcel Dekker, Inc., New York.
!
!     Battistelli, A., C. Claudio, and K. Pruess.  1997.  The simulator
!     TOUGH2/EWASG for modelling geothermal reservoirs with brines and
!     noncondensible gas.  Geothermics, 26(4): 437-464.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 8 October 2004.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE FDVH
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 CHBX(4),CHCX(4)
!
!----------------------Data Statements---------------------------------!
!
      DATA CHBX / -3.65183D+2, 1.81067D+4, 4.97554D+1, -2.85D-4 /
      DATA CHCX / 1.668D-1, -1.09236D-3, 7.81043D-6, -1.52343D-8 /
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/HC_LO'
!
!---  The formulation by Sloan for Henry's coefficient of methane 
!     for pure water as a function of temperature  ---
!
      TKX = TX + TABS
      RCX = 1.9872
      HCX = (CHBX(1)/RCX) + (CHBX(2)/(RCX*TKX)) + 
     &  ((CHBX(3)/RCX)*LOG(TKX)) + (CHBX(4)*TKX/RCX)
      DHCX = (CHBX(2)/(RCX*(TKX**2))) - 
     &  (CHBX(3)/(RCX*TKX)) - (CHBX(4)/RCX)
      HCX = EXP(-HCX)
      HCX = HCX*PATM
      DHCX = DHCX*HCX
      HCX = HCX*CHKN(1)
      DHCX = DHCX*CHKN(1)
!
!---  Empirical formulation for salting-out coefficient for 
!     NaCl aqueous solutions as a function of temperature  
!
      SKBX = 0.D+0
      DO I = 0,3
        SKBX = SKBX + CHCX(I+1)*(TX**I)
      ENDDO
      DSKBX = 0.D+0
      DO I = 1,3
        DSKBX = DSKBX + REAL(I)*CHCX(I+1)*(TX**(I-1))
      ENDDO
!
!---  Empirical formulation by Battistelli for Henry's coefficient
!     coefficient for NaCl aqueous solutions as a function
!     of temperature and salt molality  ---
!
      GLSX = 1.D+3*XLSX/(WTMS*(1.D+0-XLSX))
      HCX = HCX*(1.D+1**(GLSX*SKBX))
      DHCX = DHCX*(1.D+1**(GLSX*SKBX)) + HCX*GLSX*DSKBX*LOG(1.D+1)
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of HC_LO group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE INIT_FRAC( ZMCX,IOPTX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Initialize component and water mass and mole fractions.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 28 March 2013.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 ZMCX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/INIT_FRAC'
!
!---  Mass fractions specified  ---
!
      IF( IOPTX.LT.0 ) THEN
!
!---    Mole fractions  ---
!
        SZCX = 0.D+0
        DO IGC = 1,NGC+2
          WTMX = WTMX + ZMCX(IGC)/GCPP(1,IGC)
          SZCX = SZCX + ZMCX(IGC)
        ENDDO
        IF( ABS(1.D+0-SZCX).GT.1.D-3 ) THEN
          M_ERR(1) = 'Summation of Initial Mass Fractions /= 1.0: '
          CALL PATH
          R_ERR = SZCX
          I_ERR(1) = 0
          I_ERR(2) = 1
          I_ERR(3) = 0
          I_ERR(4) = ID
        ENDIF
        DO IGC = 1,NGC+2
          ZMCX(IGC) = ZMCX(IGC)*WTMX/GCPP(1,IGC)/SZCX
        ENDDO
!
!---  Mole fractions specified  ---
!
      ELSE
        SZMCX = 0.D+0
        DO IGC = 1,NGC+2
          SZMCX = SZMCX + ZMCX(IGC)
        ENDDO
        IF( ABS(1.D+0-SZMCX).GT.1.D-3 ) THEN
          M_ERR(1) = 'Summation of Initial Mole Fractions /= 1.0: '
          CALL PATH
          R_ERR = SZMCX
          I_ERR(1) = 0
          I_ERR(2) = 1
          I_ERR(3) = 0
          I_ERR(4) = ID
        ENDIF        
        DO IGC = 1,NGC+2
          ZMCX(IGC) = ZMCX(IGC)/SZMCX
        ENDDO
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of INIT_FRAC group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE INIT_PCP( IGC,IPFX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Initialize petroleum component properties.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 28 March 2013.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE EOR
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/INIT_PCP'
!
!---  Petroleum component molecular weight, kg/kmol ---
!
      IF( IPFX.EQ.1 ) THEN
        GCPP(1,IGC) = 0.D+0
        DO N = 1,NPCF(IGC)
          IPFX = IPCF(N,IGC)
          GCPP(1,IGC) = GCPP(1,IGC) + XMPCF(N,IGC)*PFPP(1,IPFX)
        ENDDO
      ELSEIF( IPFX.EQ.2 ) THEN
        GCPP(1,IGC) = 0.D+0
        DO N = 1,NPCF(IGC)
          IPFX = IPCF(N,IGC)
          GCPP(1,IGC) = GCPP(1,IGC) + XMPCF(N,IGC)/PFPP(1,IPFX)
        ENDDO
!
!---    Convert mass fraction to mole fraction  ---
!
        DO N = 1,NPCF(IGC)
          IPFX = IPCF(N,IGC)
          XMPCF(N,IGC) = (XMPCF(N,IGC)/PFPP(1,IPFX))/GCPP(1,IGC)
        ENDDO
      ENDIF
!
!---  Petroleum component critical molar volume m^3/kmol, according
!     to Lee and Kesler (1975), from Petroleum Refining V.1: Crude
!     Oil. Petroleum Products. Process Flowsheets, pp. 112  ---
!
      GCPP5AX = 0.D+0
      GCPP5BX = 0.D+0
      GCPP5CX = 0.D+0
      DO N = 1,NPCF(IGC)
        IPFX = IPCF(N,IGC)
        GCPP5AX = GCPP5AX + XMPCF(N,IGC)*PFPP(5,IPFX)
        GCPP5BX = GCPP5BX + XMPCF(N,IGC)*(PFPP(5,IPFX)**(2.D+0/3.D+0))
        GCPP5CX = GCPP5CX + XMPCF(N,IGC)*(PFPP(5,IPFX)**(1.D+0/3.D+0))
      ENDDO
      GCPP(5,IGC) = 2.5D-1*GCPP5AX + 7.5D-1*GCPP5BX*GCPP5CX
!
!---  Petroleum critical temperature, according
!     to Lee and Kesler (1975), from Petroleum Refining V.1: Crude
!     Oil. Petroleum Products. Process Flowsheets, pp. 112  ---
!
      GCPP3AX = 0.D+0  
      GCPP3BX = 0.D+0  
      GCPP3CX = 0.D+0  
      DO N = 1,NPCF(IGC)
        IPFX = IPCF(N,IGC)
        GCPP3AX = GCPP3AX + XMPCF(N,IGC)*PFPP(5,IPFX)*PFPP(3,IPFX)
        GCPP3BX = GCPP3BX + XMPCF(N,IGC)*(PFPP(5,IPFX)**(2.D+0/3.D+0))
     &    *SQRT(PFPP(3,IPFX))
        GCPP3CX = GCPP3CX + XMPCF(N,IGC)*(PFPP(5,IPFX)**(1.D+0/3.D+0))
     &    *SQRT(PFPP(3,IPFX))
      ENDDO
      GCPP(3,IGC) = (2.5D-1*GCPP3AX + 7.5D-1*GCPP3BX*GCPP3CX)/
     &  GCPP(5,IGC)
!
!---  Petroleum component boiling point and acentric factor  ---
!
      GCPP(2,IGC) = 0.D+0  
      GCPP(7,IGC) = 0.D+0
      DO N = 1,NPCF(IGC)
        IPFX = IPCF(N,IGC)
        GCPP(2,IGC) = GCPP(2,IGC) + XMPCF(N,IGC)/PFPP(2,IPFX)
        GCPP(7,IGC) = GCPP(7,IGC) + XMPCF(N,IGC)*PFPP(7,IPFX)
      ENDDO
      GCPP(2,IGC) = 1.D+0/GCPP(2,IGC)
!
!---  Epsilon over Boltzmann constant
!     (Reid et al., 1987, pp. 587)  ---
!
      GCPP(8,IGC) = 1.15D+0*GCPP(2,IGC)
!
!---  Liquid molar volume m^3/kmol at the
!     normal boiling point, using correlation of Tyn and Calus
!     (Reid et al., 1987, pp. 53)  ---
!
      GCPP(9,IGC) = 0.285D-3*((1.D+3*GCPP(5,IGC))**1.048D+0)
!
!---  Characteristic length parameter
!     (Reid et al., 1987, pp. 587)  ---
!
      GCPP(10,IGC) = 1.18D+0*(1.D+3*GCPP(9,IGC))**3.333D-1
!
!---  Petroleum component critical compressibility factor  ---
!
      GCPP(6,IGC) = 2.91D-1 - 8.D-2*GCPP(7,IGC)
!
!---  Petroleum component critical pressure  ---
!
      GCPP(4,IGC) = RCU*GCPP(6,IGC)*GCPP(3,IGC)/GCPP(5,IGC)
!
!---  Peng-Robinson mixture "a", "b", and "omega" parameters  ---
!
      IF( ISLC(68).EQ.1 ) THEN
        GCPP(13,IGC) = 0.D+0
        GCPP(14,IGC) = 0.D+0
        GCPP(15,IGC) = 0.D+0
        DO I = 1,NPCF(IGC)
          IPFX = IPCF(I,IGC)
          AIX = 0.45724D+0*(RCU**2)*(PFPP(3,IPFX)**2)/
     &        PFPP(4,IPFX)
          BIX = 0.07780D+0*RCU*PFPP(3,IPFX)/PFPP(4,IPFX)
          OIX = 0.37464D+0 + 1.54226D+0*PFPP(7,IPFX) -
     &        0.26992D+0*(PFPP(7,IPFX)**2)
          DO J = 1,NPCF(IGC)
            JPFX = IPCF(J,IGC)
            AJX = 0.45724D+0*(RCU**2)*(PFPP(3,JPFX)**2)/
     &        PFPP(4,JPFX)
            BIPKX = 1.D+0 - 8.D+0*SQRT( PFPP(5,IPFX)*PFPP(5,JPFX) )/
     &        (((PFPP(5,IPFX)**(1.D+0/3.D+0)) + 
     &        (PFPP(5,JPFX)**(1.D+0/3.D+0)))**3)
            GCPP(13,IGC) = GCPP(13,IGC) + SQRT( AIX*AJX )*
     &        XMPCF(I,IGC)*XMPCF(J,IGC)*(1.D+0-BIPKX)
          ENDDO
          GCPP(14,IGC) = GCPP(14,IGC) + BIX*XMPCF(I,IGC)
          GCPP(15,IGC) = GCPP(15,IGC) + OIX*XMPCF(I,IGC)
        ENDDO
!
!---  Soave-Redlich-Kwong mixture "a", "b", and "omega" parameters  ---
!
      ELSEIF( ISLC(68).EQ.2 ) THEN
        GCPP(13,IGC) = 0.D+0
        GCPP(14,IGC) = 0.D+0
        GCPP(15,IGC) = 0.D+0
        DO I = 1,NPCF(IGC)
          IPFX = IPCF(I,IGC)
          AIX = 0.42747D+0*(RCU**2)*(PFPP(3,IPFX)**2)/
     &        PFPP(4,IPFX)
          BIX = 0.08664D+0*RCU*PFPP(3,IPFX)/PFPP(4,IPFX)
          OIX = 0.480D+0 + 1.574D+0*PFPP(7,IPFX) -
     &        0.176D+0*(PFPP(7,IPFX)**2)
          DO J = 1,NPCF(IGC)
            JPFX = IPCF(J,IGC)
            AJX = 0.42747D+0*(RCU**2)*(PFPP(3,JPFX)**2)/
     &        PFPP(4,JPFX)
            BIPKX = 1.D+0 - 8.D+0*SQRT( PFPP(5,IPFX)*PFPP(5,JPFX) )/
     &        (((PFPP(5,IPFX)**(1.D+0/3.D+0)) + 
     &        (PFPP(5,JPFX)**(1.D+0/3.D+0)))**3)
            GCPP(13,IGC) = GCPP(13,IGC) + SQRT( AIX*AJX )*
     &        XMPCF(I,IGC)*XMPCF(J,IGC)*(1.D+0-BIPKX)
          ENDDO
          GCPP(14,IGC) = GCPP(14,IGC) + BIX*XMPCF(I,IGC)
          GCPP(15,IGC) = GCPP(15,IGC) + OIX*XMPCF(I,IGC)
        ENDDO
      ELSE
        M_ERR(1) = 'Unrecognized Equation of State'
        CALL PATH
        R_ERR = TX
        I_ERR(2) = 0
        I_ERR(3) = 0
        I_ERR(4) = ID
      ENDIF
!
!---  Petroleum component isobaric molar specific heat coefficients  ---
!
      GCPP(18,IGC) = 0.D+0  
      GCPP(19,IGC) = 0.D+0
      GCPP(20,IGC) = 0.D+0  
      GCPP(21,IGC) = 0.D+0
      WTMX = 0.D+0
      DO N = 1,NPCF(IGC)
        IPFX = IPCF(N,IGC)
        GCPP(18,IGC) = GCPP(18,IGC) + XMPCF(N,IGC)*PFPP(18,IPFX)
        GCPP(19,IGC) = GCPP(19,IGC) + XMPCF(N,IGC)*PFPP(19,IPFX)
        GCPP(20,IGC) = GCPP(20,IGC) + XMPCF(N,IGC)*PFPP(20,IPFX)
        GCPP(21,IGC) = GCPP(21,IGC) + XMPCF(N,IGC)*PFPP(21,IPFX)
      ENDDO
!
!---  Petroleum component isobaric molar specific heat coefficients
!     in units of J/kmol K  ---
!
      GCPP(18,IGC) = 1.D+3*GCPP(18,IGC)
      GCPP(19,IGC) = 1.D+3*GCPP(19,IGC)
      GCPP(20,IGC) = 1.D+3*GCPP(20,IGC)
      GCPP(21,IGC) = 1.D+3*GCPP(21,IGC)
!
!---  Petroleum component Peneloux volume-shift parameter  ---
!
      GCPP(23,IGC) = 0.D+0  
      DO N = 1,NPCF(IGC)
        IPFX = IPCF(N,IGC)
        GCPP(23,IGC) = GCPP(23,IGC) + XMPCF(N,IGC)*PFPP(23,IPFX)
      ENDDO
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of INIT_PCP group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE ISOTHFL( AIX,BETAX,FKX,PX,SIGMAX,TKX,
     &  XMCX,YMCX,ZMCX,IPHX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     The isothermal two-phase flash
!     Michelsen, M.L. and J.M. Mollerup. 2007. Thermodynamic Models:
!     Fundamentals and Computational Aspects. Tie-Line Publications
!     ISBN 87-989961-3-4
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 19 February 2014.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE FDVP
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 AIX(LNGC),FKX(LNGC),XMCX(LNGC),YMCX(LNGC),ZMCX(LNGC)
      REAL*8 HXX(LNGC),HYX(LNGC),HZX(LNGC)
      REAL*8 FUGXX(LNGC),FUGYX(LNGC),FUGZX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/ISOTHFL'
      IPHX = 0
      ICHECK = 0
      IFKX = IFK
!
!---  Soave-Redlich-Kwong temperature dependent component 
!     coefficients  ---
!
      IF( ISLC(68).EQ.2 ) THEN
        CALL SRK_CT( AIX,TKX )
!
!---  Peng-Robinson temperature dependent component 
!     coefficients  ---
!
      ELSE
        CALL PR_CT( AIX,TKX )
      ENDIF
!
!---  Wilson's approximation for the K-factors, if K-factors are
!     not fixed  ---
!
      IF( IFKX.EQ.0 ) THEN
        DO IGC = 1,NGC+2
          FKX(IGC) = (GCPP(4,IGC)/PX)*EXP(5.42D+0*(1.D+0 - 
     &      (GCPP(3,IGC)/TKX)))
        ENDDO
      ENDIF
!
!---    A 'model' Rachford-Rice routine  ---
!
        BETAX = -1.D+0
        CALL RACHFORD_RICE( BETAX,FKX,XMCX,YMCX,ZMCX,INDX )
!
!---    Start with 3 steps of successive substitution, using the
!       Wilson K-factor approximation as the initial guess  ---
!
        BETAX = -1.D+0
        DO NSS = 1,3
          CALL SSUB( AIX,BETAX,FKX,PX,TKX,XMCX,YMCX,ZMCX,IFKX,INDX )
        ENDDO
!
!---  d) If beta exceeds its bounds, it is very likely that the
!     specification corresponds to a single phase. As no guarantee
!     can be given, we prefer to continue with the stability analysis
!     also in this situation  ---
!
      IF( BETAX.LT.EPSL .OR. 1.D+0-BETAX.LT.EPSL ) THEN
        ICHECK = 1
!
!---    Tangent plane analysis
!       IPHX = -1 stable liquid
!       IPHX = 0 trival solution (assume stable gas)
!       IPHX = 1 stable gas
!       IPHX = 2 unstable two-phase  ---
!
        CALL TPA( AIX,FKX,PX,SIGMAX,TKX,ZMCX,IPHX )
!
!---    Two-phase conditions  ---
!
        IF( IPHX.EQ.2 ) THEN
          ICHECK = 2
          BETAX = -1.D+0
          DO NC = 1,32
!
!---        Fix K-factors  ---
!
            IF( NC.GT.16 ) IFKX = IFKX + 10
            BETAOX = BETAX
            CALL SSUB( AIX,BETAX,FKX,PX,TKX,XMCX,YMCX,ZMCX,IFKX,INDX )
            DBETAX = ABS(BETAX-BETAOX)
!
!---        Force steps of successive substitution  ---
!
            IF( DBETAX.LT.EPSL .AND. NC.LE.16 ) DBETAX = 1.D+0
            IF( DBETAX.LT.1.D-9 ) EXIT
          ENDDO
!
!---      Reset K-factor index  ---
!
          IFKX = MOD( IFKX,10 )
          CALL NORM_CONC( ZMCX,XMCX )
          CALL NORM_CONC( ZMCX,YMCX )
!
!---    Stable liquid  ---
!
        ELSEIF( IPHX.EQ.-1 ) THEN
          ICHECK = 3
          BETAX = 0.D+0
          CALL EQU_CONC( ZMCX,XMCX )
          CALL EQU_CONC( ZMCX,YMCX )
!
!---    Stable gas  ---
!
        ELSE
          ICHECK = 4
          IPHX = 1
          BETAX = 1.D+0
          CALL EQU_CONC( ZMCX,XMCX )
          CALL EQU_CONC( ZMCX,YMCX )
        ENDIF
!
!---  Difference in Gibbs energy between the split phases and 
!     the feed (i.e., Delta-G/(RT) )  ---
!
      ELSE
        ICHECK = 5
        CALL GIBBS_Z( AIX,FUGZX,GZX,HZX,PX,TKX,ZMCX )
        CALL GIBBS_X( AIX,FUGXX,GXX,HXX,PX,TKX,XMCX )
        CALL GIBBS_Y( AIX,FUGYX,GYX,HYX,PX,TKX,YMCX )
        TPDXX = 0.D+0
        TPDYX = 0.D+0
        DO IGC = 1,NGC+2
          IF( ZMCX(IGC).GT.EPSL ) THEN
            TPDXX = TPDXX + XMCX(IGC)*(HXX(IGC)-HZX(IGC))
            TPDYX = TPDYX + YMCX(IGC)*(HYX(IGC)-HZX(IGC))
          ENDIF
        ENDDO
        DGX = (1.D+0-BETAX)*TPDXX + BETAX*TPDYX
!
!---    a) The total Gibbs energy of the resulting vapor and liquid is
!       lower than that of the feed. This verifies the presence of at
!       least two equilibrium phases, and as our algorithm requires that
!       the Gibbs energy decreases at each step, convergence to the
!       'trivial' solution can never take place. Continue with 
!       accelerated successive substituion and, if necessary, the 
!       second-order minimization  ---
!
        IF( DGX.LT.0.D+0 ) THEN
          ICHECK = 6
          DO NC = 1,32
!
!---        Fix K-factors  ---
!
            IF( NC.GT.16 ) IFKX = IFKX + 10
            BETAOX = BETAX
            CALL SSUB( AIX,BETAX,FKX,PX,TKX,XMCX,YMCX,ZMCX,IFKX,INDX )
            DBETAX = ABS(BETAX-BETAOX)
            IF( DBETAX.LT.1.D-9 ) EXIT
          ENDDO
!
!---      Reset K-factor index  ---
!
          IFKX = MOD( IFKX,10 )
          IPHX = 2
          CALL NORM_CONC( ZMCX,XMCX )
          CALL NORM_CONC( ZMCX,YMCX )
!!
!!---    b) Even if Delta-G/(RT) is postive, it is possible that
!!       either tpdx or tpdy is negative, in which case we also know
!!       that the feed is unstable. Assume for example that tpdy is
!!       negative. We then select ln( Ki ) for the subsequent iteration
!!       as ln( Ki ) = ln( fug-zi ) - ln( fug-yi ), perform one step
!!       of successive substitution (guaranteed to lead to a negative
!!       Delta-G) and continue as in a).  ---
!!
!        ELSEIF( TPDXX.LT.0.D+0 ) THEN
!          ICHECK = 7
!          DO IGC = 1,NGC+2
!            IF( ZMCX(IGC).GT.EPSL ) THEN
!              FKX(IGC) = EXP( LOG(FUGZX(IGC)) - LOG(FUGYX(IGC)) )
!            ENDIF
!          ENDDO
!          DO NC = 1,32
!!
!!---        Fix K-factors  ---
!!
!            IF( NC.GT.16 ) IFKX = IFKX + 10
!            BETAOX = BETAX
!            CALL SSUB( AIX,BETAX,FKX,PX,TKX,XMCX,YMCX,ZMCX,IFKX,INDX )
!            DBETAX = ABS(BETAX-BETAOX)
!            IF( DBETAX.LT.1.D-9 ) EXIT
!          ENDDO
!!
!!---      Reset K-factor index  ---
!!
!          IFKX = MOD( IFKX,10 )
!          IPHX = 2
!          CALL NORM_CONC( ZMCX,XMCX )
!          CALL NORM_CONC( ZMCX,YMCX )
!!
!!---    With a negative tpdx we select
!!       instead ln( Ki ) = ln( fug-xi ) - ln( fug-zi ).  ---
!!
!        ELSEIF( TPDYX.LT.0.D+0 ) THEN
!          ICHECK = 8
!          DO IGC = 1,NGC+2
!            IF( ZMCX(IGC).GT.EPSL ) THEN
!              FKX(IGC) = EXP( LOG(FUGXX(IGC)) - LOG(FUGZX(IGC)) )
!            ENDIF
!          ENDDO
!          DO NC = 1,32
!!
!!---        Fix K-factors  ---
!!
!            IF( NC.GT.16 ) IFKX = IFKX + 10
!            BETAOX = BETAX
!            CALL SSUB( AIX,BETAX,FKX,PX,TKX,XMCX,YMCX,ZMCX,IFKX,INDX )
!            DBETAX = ABS(BETAX-BETAOX)
!            IF( DBETAX.LT.1.D-9 ) EXIT
!          ENDDO
!!
!!---      Reset K-factor index  ---
!!
!          IFKX = MOD( IFKX,10 )
!          IPHX = 2
!          CALL NORM_CONC( ZMCX,XMCX )
!          CALL NORM_CONC( ZMCX,YMCX )
!
!---    c) If neither event has occurred after 3 iterations, we
!       continue with tangent plane stability analysis  ---
!
        ELSE
          ICHECK = 9
!
!---      Tangent plane analysis
!         IPHX = -1 stable liquid
!         IPHX = 0 trival solution (assume stable gas)
!         IPHX = 1 stable gas
!         IPHX = 2 unstable two-phase  ---
!
          CALL TPA( AIX,FKX,PX,SIGMAX,TKX,ZMCX,IPHX )
!
!---      Two-phase conditions  ---
!
          IF( IPHX.EQ.2 ) THEN
            ICHECK = 10
            BETAX = -1.D+0
            DO NC = 1,32
!
!---          Fix K-factors  ---
!
              IF( NC.GT.16 ) IFKX = IFKX + 10
              BETAOX = BETAX
              CALL SSUB( AIX,BETAX,FKX,PX,TKX,XMCX,YMCX,ZMCX,IFKX,INDX )
              DBETAX = ABS(BETAX-BETAOX)
              IF( DBETAX.LT.1.D-9 ) EXIT
            ENDDO
!
!---        Reset K-factor index  ---
!
            IFKX = MOD( IFKX,10 )
            CALL NORM_CONC( ZMCX,XMCX )
            CALL NORM_CONC( ZMCX,YMCX )
!
!---      Stable liquid  ---
!
          ELSEIF( IPHX.EQ.-1 ) THEN
            ICHECK = 11
            BETAX = 0.D+0
            CALL EQU_CONC( ZMCX,XMCX )
            CALL EQU_CONC( ZMCX,YMCX )
!
!---      Stable gas  ---
!
          ELSE
            ICHECK = 12
            IPHX = 1
            BETAX = 1.D+0
            CALL EQU_CONC( ZMCX,XMCX )
            CALL EQU_CONC( ZMCX,YMCX )
          ENDIF
        ENDIF
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      IF( IPHX.EQ.0 ) PRINT *,'ICHECK = ',ICHECK
      ISUB_LOG = ISUB_LOG-1
!
!---  End of ISOTHFL group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE ITL_A( PX,TX,I_PX,I_TX,I_VX,NF )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     This subroutine determines the lookup table indices for
!     computing pure CO2, CH4, or N2 properties.
!
!     I_VX = 0 solid
!     I_VX = 1 subcritical gas
!     I_VX = 2 subcritical liquid
!     I_VX = 3 supercritical gas
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 22 April 2002.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE NCG_PT
      USE GLB_PAR
      USE FDVP
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      INTEGER I_PX(2),I_TX(2),I_VX
      CHARACTER*25 CHMSGX(3)
!
!----------------------Data Statements---------------------------------!
!
      DATA CHMSGX / 'Solid Phase for CO2: T = ',
     &  'Solid Phase for CH4: T = ',
     &  'Solid Phase for N2: T =  '/
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/ITL_A'
!
!---  Convert pressure to MPa and temperature to degrees Kelvin  ---
!
      PMX = 1.D-6*PX
      TKX = TX + TABS
      PM_TPX = P_TA(IPTP(NF),NF)
      PM_CRX = P_TA(IPCR(NF),NF)
      TK_CRX = T_TA(IV_TA(IPCR(NF),NF),IPCR(NF),NF)
      TK_TPX = T_TA(IV_TA(IPTP(NF),NF),IPTP(NF),NF)
!
!---  Find pressure indices  ---
!
      IF( PMX.LT.P_TA(1,NF) ) PMX = P_TA(1,NF)
      IF( PMX.GT.P_TA(IP_TA(NF),NF) ) PMX = P_TA(IP_TA(NF),NF)
      IPLX = 1
      IPUX = IP_TA(NF)
      DO
        IF( IPUX-IPLX.GT.1 ) THEN
          IPM = (IPLX+IPUX)/2
          IF( (P_TA(IP_TA(NF),NF).GT.P_TA(1,NF)).EQV.
     &      (PMX.GT.P_TA(IPM,NF)) ) THEN
            IPLX = IPM
          ELSE
            IPUX = IPM
          ENDIF
        ELSE
          EXIT
        ENDIF
      ENDDO
!
!---  Temperature above the critical point ---
!
      IF( TKX.GT.TK_CRX ) THEN
        ISLX = 1
        IELX = IT_TA(IPLX,NF)
        ISUX = 1
        IEUX = IT_TA(IPUX,NF)
        I_VX = 3
!
!---  Temperature below the critical point  ---
!
      ELSE
!
!---    Determine saturation-point temperature at the 
!       specified pressure, via linear interpolation  ---
!
        PLX = P_TA(IPLX,NF)
        PUX = P_TA(IPUX,NF)
        TLX = T_TA(IV_TA(IPLX,NF),IPLX,NF)
        TUX = T_TA(IV_TA(IPUX,NF),IPUX,NF)
        TK_SPX = ((PMX-PLX)/(PUX-PLX))*(TUX-TLX) + TLX
        IF( PMX.GE.PM_CRX ) TK_SPX = TK_CRX
!
!---    Determine melting-point temperature at the 
!       specified pressure, via linear interpolation  ---
!
        TLX = T_TA(1,IPLX,NF)
        TUX = T_TA(1,IPUX,NF)
        TK_MPX = ((PMX-PLX)/(PUX-PLX))*(TUX-TLX) + TLX
!
!---    Interpolation on gas side, searching from
!       the saturation line  ---
!
        IF( TKX.GE.TK_SPX ) THEN
          ISLX = IV_TA(IPLX,NF)
          IELX = IT_TA(IPLX,NF)
          ISUX = IV_TA(IPUX,NF)
          IEUX = IT_TA(IPUX,NF)
          I_VX = 1
!
!---    Pressure above critical pressure, search over all
!       temperatures  ---
!
        ELSEIF( PMX.GT.PM_CRX .AND. TKX.GE.TK_MPX ) THEN
          ISLX = 1
          IELX = IT_TA(IPLX,NF)
          ISUX = 1
          IEUX = IT_TA(IPUX,NF)
          I_VX = 2
!
!---    Interpolation on liquid side, searching to
!       the saturation line  ---
!
        ELSEIF( PMX.GT.PM_TPX .AND. TKX.GE.TK_MPX ) THEN
          ISLX = 1
          IELX = IV_TA(IPLX,NF)-1
          ISUX = 1
          IEUX = IV_TA(IPUX,NF)-1
          I_VX = 2
!
!---    Temperature less than melting point, solid  ---
!
        ELSE
          M_ERR(1) = CHMSGX(NF)
          CALL PATH
          R_ERR = TX
          I_ERR(2) = 1
          I_ERR(4) = ID
        ENDIF
      ENDIF      
!
!---  Lower and upper pressure indices  ---
!
      I_PX(1) = IPLX
      I_PX(2) = IPUX
!
!---  Find lower-pressure temperature indices  ---
!
      IF( TKX.LT.T_TA(ISLX,IPLX,NF) ) THEN
        I_TX(1) = ISLX
      ELSEIF( TKX.GT.T_TA(IELX,IPLX,NF) ) THEN
        I_TX(1) = IELX-1
      ELSE
        ITLX = 1
        ITUX = IT_TA(IPLX,NF)
        DO
          IF( ITUX-ITLX.GT.1 ) THEN
            ITM = (ITLX+ITUX)/2
            IF( (T_TA(IELX,IPLX,NF).GT.T_TA(ISLX,IPLX,NF))
     &        .EQV.(TKX.GT.T_TA(ITM,IPLX,NF)) ) THEN
              ITLX = ITM
            ELSE
              ITUX = ITM
            ENDIF
          ELSE
            EXIT
          ENDIF
        ENDDO
      I_TX(1) = ITLX
      ENDIF
!
!---  Find upper-pressure temperature indices  ---
!
      IF( TKX.LT.T_TA(ISUX,IPUX,NF) ) THEN
        I_TX(2) = ISUX
      ELSEIF( TKX.GT.T_TA(IEUX,IPUX,NF) ) THEN
        I_TX(2) = IEUX-1
      ELSE
        ITLX = 1
        ITUX = IT_TA(IPUX,NF)
        DO
          IF( ITUX-ITLX.GT.1 ) THEN
            ITM = (ITLX+ITUX)/2
            IF( (T_TA(IEUX,IPUX,NF).GT.T_TA(ISUX,IPUX,NF))
     &        .EQV.(TKX.GT.T_TA(ITM,IPUX,NF)) ) THEN
              ITLX = ITM
            ELSE
              ITUX = ITM
            ENDIF
          ELSE
            EXIT
          ENDIF
        ENDDO
        I_TX(2) = ITLX
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of ITL_A group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE LIQUID( BETAX,CNX,PX,TKX,XMCX,YMCX,ZMCX,ZGX,ZNX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Single phase liquid
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 05 July 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 AIX(LNGC)
      REAL*8 XMCX(LNGC),YMCX(LNGC),ZMCX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/LIQUID'
!
!---  Soave-Redlich-Kwong temperature dependent component 
!     coefficients  ---
!
      IF( ISLC(68).EQ.2 ) THEN
        CALL SRK_CT( AIX,TKX )
!
!---  Peng-Robinson temperature dependent component 
!     coefficients  ---
!
      ELSE
        CALL PR_CT( AIX,TKX )
      ENDIF
!
!---  Beta (vapor molar fraction)  ---
!
      BETAX = 0.D+0
!
!---  Liquid mole fractions  ---
!
      SXMCX = 0.D+0
      DO IGC = 1,NGC+2
        XMCX(IGC) = ZMCX(IGC)
        SXMCX = SXMCX + XMCX(IGC)
      ENDDO
!
!---  Normalize liquid mole fractions  ---
!
      DO IGC = 1,NGC+2
        XMCX(IGC) = XMCX(IGC)/SXMCX
      ENDDO
!
!---  Soave-Redlich-Kwong equation of state  ---
!
      IF( ISLC(68).EQ.2 ) THEN
!
!---    Liquid mixture coefficients  ---
!
        CALL SRK_CX( ANX,AIX,BNX,XMCX )
!
!---    Peneloux volume correction  ---
!
        CALL PENELOUX( CNX,TKX,XMCX )
        BNX = BNX - CNX
!
!---    Liquid mixture compressibility  ---
!
        JNDX = 2
        CALL SRK_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
!
!---  Peng-Robinson equation of state  ---
!
      ELSE
!
!---    Liquid mixture coefficients  ---
!
        CALL PR_CX( ANX,AIX,BNX,XMCX )
!
!---    Peneloux volume correction  ---
!
        CALL PENELOUX( CNX,TKX,XMCX )
        BNX = BNX - CNX
!
!---    Liquid mixture compressibility  ---
!
        JNDX = 2
        CALL PR_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
      ENDIF
!
!---  Set vapor mole fractions and compressibility
!     equal to those for liquid  ---
!
      DO IGC = 1,NGC+2
        YMCX(IGC) = XMCX(IGC)
      ENDDO
      ZGX = ZNX
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of LIQUID group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE LUDCMP( AX,NX,NPX,IX,DX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996.
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Numerical Recipes, The Art of Scientific Computing
!     W.H. Press, B.P. Flannery, Saul A. Teukolsky, and W.T. Vetterling
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark White, PNNL, August 1, 2000.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GRID
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 AX(NPX,NPX),VV(NPX)
      INTEGER IX(NPX)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/LUDCMP'
      DX = 1.D+0
      DO I = 1,NX
        AAMAX = 0.D+0
        DO J = 1,NX
          IF( ABS(AX(I,J)).GT.AAMAX ) AAMAX = ABS(AX(I,J))
        ENDDO
        IF( ABS(AAMAX)/EPSL.LT.EPSL ) THEN
          M_ERR(1) = 'LUDCMP: Singular Matrix'
          CALL PATH
          I_ERR(1) = 0
          I_ERR(2) = 0
          I_ERR(3) = 0
          I_ERR(4) = ID
          DO J = 1,NX
            AX(I,J) = 0.D+0
            IF( I.EQ.J ) AX(I,J) = 1.D+0
          ENDDO
        ENDIF
        VV(I) = 1.D+0/AAMAX
      ENDDO
      IMAX = 0
      DO J = 1,NX
        DO I = 1,J-1
          SUM = AX(I,J)
          DO K = 1,I-1
            SUM = SUM - AX(I,K)*AX(K,J)
          ENDDO
          AX(I,J) = SUM
        ENDDO
        AAMAX = 0.D+0
        DO I = J,NX
          SUM = AX(I,J)
          DO K = 1,J-1
            SUM = SUM - AX(I,K)*AX(K,J)
          ENDDO
          AX(I,J) = SUM
          DUM = VV(I)*ABS(SUM)
          IF( DUM.GE.AAMAX ) THEN
            IMAX = I
            AAMAX = DUM
          ENDIF
        ENDDO
        IF( J.NE.IMAX ) THEN
          DO K = 1,NX
            DUM = AX(IMAX,K)
            AX(IMAX,K) = AX(J,K)
            AX(J,K) = DUM
          ENDDO
          DX = -DX
          VV(IMAX) = VV(J)
        ENDIF
        IX(J) = IMAX
        IF( ABS(AX(J,J))/EPSL.LT.EPSL ) AX(J,J) = 1.D-30
        IF( J.NE.NX ) THEN
          DUM = 1.D+0/AX(J,J)
          DO I = J+1,NX
            AX(I,J) = AX(I,J)*DUM
          ENDDO
        ENDIF
      ENDDO
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of LUDCMP group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE LUBKSB( AX,NX,NPX,IX,BX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996.
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Numerical Recipes, The Art of Scientific Computing
!     W.H. Press, B.P. Flannery, Saul A. Teukolsky, and W.T. Vetterling
!
!----------------------Authors-----------------------------------------!
!
!     Written by Mark White, PNNL, August 1, 2000.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE MPI
      USE GLB_PAR
      USE SOLTN
      USE GRID
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 AX(NPX,NPX),BX(NPX)
      INTEGER IX(NPX)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/LUBKSB'
      II = 0
      DO 12 I = 1,NX
        IL = IX(I)
        SUM = BX(IL)
        BX(IL) = BX(I)
        IF( II.NE.0 ) THEN
          DO 11 J = II,I-1
            SUM = SUM - AX(I,J)*BX(J)
   11     CONTINUE
        ELSEIF( ABS(SUM)/EPSL.GT.EPSL ) THEN
          II = I
        ENDIF
        BX(I) = SUM
   12 CONTINUE
      DO 14 I = NX,1,-1
        SUM = BX(I)
        IF( I.LT.NX ) THEN
          DO 13 J = I+1,NX
            SUM = SUM - AX(I,J)*BX(J)
   13     CONTINUE
        ENDIF
        BX(I) = SUM/AX(I,I)
   14 CONTINUE
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of LUBKSB group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE NEG_FLASH( BETAX,CGX,CNX,PX,TKX,XMCX,YMCX,ZMCX,
     &  ZGX,ZNX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Two-phase flash calculation, without the restriction of
!     0 <= beta <= 1.
!
!     Whitson, C.H. and Michelsen, M.L., 1989. The Negative Flash.
!     Fluid Phase Equilibria, 53:51-71. 
!     doi: 10.1016/0378-3812(89)80072-X.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 10 May 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 AIX(LNGC),FKX(LNGC),FKY(LNGC)
      REAL*8 XMCX(LNGC),YMCX(LNGC),ZMCX(LNGC)
      REAL*8 FUGGX(LNGC),FUGNX(LNGC)
      REAL*8 AJ(LNGC+1,LNGC+1),BJ(LNGC+1),GX(LNGC+1,LNGC+2)
      INTEGER IJ(LNGC+1)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/FLASH'
!
!---  Soave-Redlich-Kwong temperature dependent component 
!     coefficients  ---
!
      IF( ISLC(68).EQ.2 ) THEN
        CALL SRK_CT( AIX,TKX )
!
!---  Peng-Robinson temperature dependent component 
!     coefficients  ---
!
      ELSE
        CALL PR_CT( AIX,TKX )
      ENDIF
!
!---  Guess K-factors  ---
!
      DO IGC = 1,NGC+2
        FKX(IGC) = EXP( LOG(GCPP(4,IGC)/PX) + 
     &    5.373D+0*(1.D+0+GCPP(7,IGC))*(1.D+0-(GCPP(3,IGC)/TKX)) )
      ENDDO
!
!---  Guess beta (vapor molar fraction)  ---
!
      BETAX = 5.D-1
      DO
!
!---    Rachford-Rice equation to sychronize beta with
!       the updated K-factors  ---
!
        DO
          FX = 0.D+0
          DFDBX = 0.D+0
          DO IGC = 1,NGC+2
            IF( ZMCX(IGC).LT.EPSL ) CYCLE
            GKX = FKX(IGC)-1.D+0
            HKX = 1.D+0 + BETAX*GKX
            FX = FX + ZMCX(IGC)*GKX/HKX
            DFDBX = DFDBX + ZMCX(IGC)*((GKX/HKX)**2)
          ENDDO
          DBZ = FX/DFDBX
          BETAX = BETAX + DBZ
          IF( ABS(DBZ).LE.1.D-7 ) CYCLE
        ENDDO
!
!---    Vapor and liquid mole fractions  ---
!
        SXMCX = 0.D+0
        SYMCX = 0.D+0
        DO IGC = 1,NGC+2
          XMCX(IGC) = ZMCX(IGC)/(1.D+0 + BETAX*(FKX(IGC)-1.D+0))
          YMCX(IGC) = XMCX(IGC)*FKX(IGC)
          SXMCX = SXMCX + XMCX(IGC)
          SYMCX = SYMCX + YMCX(IGC)
        ENDDO
!
!---    Normalize vapor and liquid mole fractions  ---
!
        DO IGC = 1,NGC+2
          XMCX(IGC) = XMCX(IGC)/SXMCX
          YMCX(IGC) = YMCX(IGC)/SYMCX
        ENDDO
!
!---    Soave-Redlich-Kwong equation of state  ---
!
        IF( ISLC(68).EQ.2 ) THEN
!
!---      Gas mixture coefficients  ---
!
          CALL SRK_CX( AGX,AIX,BGX,YMCX )
!
!---      Liquid mixture coefficients  ---
!
          CALL SRK_CX( ANX,AIX,BNX,XMCX )
!
!---      Gas mixture compressibility  ---
!
          JNDX = 1
          CALL SRK_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
!
!---      Liquid mixture compressibility  ---
!
          JNDX = 2
          CALL SRK_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
!
!---      Gas mixture fugacity coefficient  ---
!
          CALL SRK_FUG( AGX,AIX,BGX,CAGX,CBGX,FUGGX,YMCX,ZGX )
!
!---      Liquid mixture fugacity coefficient  ---
!
          CALL SRK_FUG( ANX,AIX,BNX,CANX,CBNX,FUGNX,XMCX,ZNX )
!
!---    Peng-Robinson equation of state  ---
!
        ELSE
!
!---      Gas mixture coefficients  ---
!
          CALL PR_CX( AGX,AIX,BGX,YMCX )
!
!---      Liquid mixture coefficients  ---
!
          CALL PR_CX( ANX,AIX,BNX,XMCX )
!
!---      Gas mixture compressibility  ---
!
          JNDX = 1
          CALL PR_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
!
!---      Liquid mixture compressibility  ---
!
          JNDX = 2
          CALL PR_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
!
!---      Gas mixture fugacity coefficient  ---
!
          CALL PR_FUG( AGX,AIX,BGX,CAGX,CBGX,FUGGX,YMCX,ZGX )
!
!---      Liquid mixture fugacity coefficient  ---
!
          CALL PR_FUG( ANX,AIX,BNX,CANX,CBNX,FUGNX,XMCX,ZNX )
        ENDIF
        DFKMX = 0.D+0
        DO IGC = 1,NGC+2
          IF( ZMCX(IGC).LT.EPSL ) CYCLE
          DFKX = FUGNX(IGC)/FUGGX(IGC) - FKX(IGC)
          DFKMX = MAX( DFKMX,ABS(DFKX) )
          FKX(IGC) = FKX(IGC) + DFKX
        ENDDO
        IF( ABS(DFKMX).LE.1.D-4 ) EXIT
      ENDDO
!
!---  Rachford-Rice equation to sychronize beta with
!     the updated K-factors  ---
!
      DO
        FX = 0.D+0
        DFDBX = 0.D+0
        DO IGC = 1,NGC+2
          IF( ZMCX(IGC).LT.EPSL ) CYCLE
          GKX = FKX(IGC)-1.D+0
          HKX = 1.D+0 + BETAX*GKX
          FX = FX + ZMCX(IGC)*GKX/HKX
          DFDBX = DFDBX + ZMCX(IGC)*((GKX/HKX)**2)
        ENDDO
        DBZ = FX/DFDBX
        BETAX = BETAX + DBZ
        IF( ABS(DBZ).LE.1.D-7 ) EXIT
      ENDDO
!
!---  Initialize counter  ---
!
      NC = 0
!
!---  Determine number of equations  ---
!
      NEQ = 1
      DO M = 1,NGC+2
        IF( ZMCX(M).LT.EPSL ) CYCLE
        NEQ = NEQ + 1
      ENDDO
!
!---  Top of Newton-Raphson loop for K-factors and beta  ---
!
      DO
        NC = NC+1
!
!---    Increments  ---
!
        DBY = SIGN( 1.D-6,5.D-1-BETAX )
        DFKY = 1.D-6
!
!---    Loop over increments  ---
!
        MX = 0
        DO M = 1,NGC+4
          IF( M.GT.1 .AND. M.LT.NGC+4 ) THEN
            IF( ZMCX(M-1).LT.EPSL ) CYCLE
          ENDIF
          MX = MX + 1
          DO IGC = 1,NGC+2
            FKY(IGC) = FKX(IGC)
            IF( M-1.EQ.IGC ) FKY(IGC) = FKX(IGC) + DFKY
          ENDDO
          BETAY = BETAX
          IF( M.EQ.NGC+4 ) BETAY = BETAX + DBY
!
!---      Vapor and liquid mole fractions  ---
!
          SXMCX = 0.D+0
          SYMCX = 0.D+0
          DO IGC = 1,NGC+2
            XMCX(IGC) = ZMCX(IGC)/(1.D+0 + BETAY*(FKY(IGC)-1.D+0))
            YMCX(IGC) = XMCX(IGC)*FKY(IGC)
            SXMCX = SXMCX + XMCX(IGC)
            SYMCX = SYMCX + YMCX(IGC)
          ENDDO
!
!---      Normalize vapor and liquid mole fractions  ---
!
          DO IGC = 1,NGC+2
            XMCX(IGC) = XMCX(IGC)/SXMCX
            YMCX(IGC) = YMCX(IGC)/SYMCX
          ENDDO
!
!---      Soave-Redlich-Kwong equation of state  ---
!
          IF( ISLC(68).EQ.2 ) THEN
!
!---        Gas mixture coefficients  ---
!
            CALL SRK_CX( AGX,AIX,BGX,YMCX )
!
!---        Liquid mixture coefficients  ---
!
            CALL SRK_CX( ANX,AIX,BNX,XMCX )
!
!---        Gas mixture compressibility  ---
!
            JNDX = 1
            CALL SRK_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
!
!---        Liquid mixture compressibility  ---
!
            JNDX = 2
            CALL SRK_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
!
!---        Gas mixture fugacity coefficient  ---
!
            CALL SRK_FUG( AGX,AIX,BGX,CAGX,CBGX,FUGGX,YMCX,ZGX )
!
!---        Liquid mixture fugacity coefficient  ---
!
            CALL SRK_FUG( ANX,AIX,BNX,CANX,CBNX,FUGNX,XMCX,ZNX )
!
!---      Peng-Robinson equation of state  ---
!
          ELSE
!
!---        Gas mixture coefficients  ---
!
            CALL PR_CX( AGX,AIX,BGX,YMCX )
!
!---        Liquid mixture coefficients  ---
!
            CALL PR_CX( ANX,AIX,BNX,XMCX )
!
!---        Gas mixture compressibility  ---
!
            JNDX = 1
            CALL PR_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
!
!---        Liquid mixture compressibility  ---
!
            JNDX = 2
            CALL PR_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
!
!---        Gas mixture fugacity coefficient  ---
!
            CALL PR_FUG( AGX,AIX,BGX,CAGX,CBGX,FUGGX,YMCX,ZGX )
!
!---        Liquid mixture fugacity coefficient  ---
!
            CALL PR_FUG( ANX,AIX,BNX,CANX,CBNX,FUGNX,XMCX,ZNX )
          ENDIF
!
!---      Objective functions  ---
!
          GX(NEQ,MX) = 0.D+0
          IGCX = 0
          DO IGC = 1,NGC+2
            IF( ZMCX(IGC).LT.EPSL ) CYCLE
            IGCX = IGCX + 1
            IF( FKY(IGC).GT.EPSL ) THEN
              GX(IGCX,MX) = LOG(FKY(IGC)) - LOG(FUGNX(IGC)) + 
     &          LOG(FUGGX(IGC))
            ELSE
              GX(IGCX,MX) = 0.D+0
            ENDIF
            GKX = FKY(IGC)-1.D+0
            GX(NEQ,MX) = GX(NEQ,MX) + ZMCX(IGC)*GKX/(1.D+0 + BETAY*GKX)
          ENDDO
        ENDDO
!
!---    Load solution vector and Jacobian matrix for
!       two-phase conditions  ---
!
        DO IGC = 1,NEQ-1
          DO JGC = 1,NEQ
            AJ(IGC,JGC) = (GX(IGC,JGC+1)-GX(IGC,1))/DFKY
          ENDDO
          BJ(IGC) = -GX(IGC,1)
        ENDDO
        IGC = NEQ
        DO JGC = 1,NEQ
          AJ(IGC,JGC) = (GX(IGC,JGC+1)-GX(IGC,1))/DBY
        ENDDO
        BJ(IGC) = -GX(IGC,1)
!
!---    Solve linear system  ---
!
        JP = MX-1
        KP = LNGC+1
        CALL LUDCMP( AJ,JP,KP,IJ,DJ )
        CALL LUBKSB( AJ,JP,KP,IJ,BJ )
!
!---    Update K-factors and beta  ---
!
        DFKMX = 0.D+0
        IGCX = 0
        DO IGC = 1,NGC+2
          IF( ZMCX(IGC).LT.EPSL ) CYCLE
          IGCX = IGCX + 1
          DFKX = BJ(IGCX)
          FKX(IGC) = MAX( FKX(IGC)+DFKX,0.D+0 )
          DFKMX = MAX( DFKMX,ABS(DFKX) )
        ENDDO
        DBX = BJ(MX-1)
        BETAX = BETAX + DBX
!
!---    Rachford-Rice equation to sychronize beta with
!       the updated K-factors  ---
!
        DO
          FX = 0.D+0
          DFDBX = 0.D+0
          DO IGC = 1,NGC+2
            GKX = FKX(IGC)-1.D+0
            HKX = 1.D+0 + BETAX*GKX
            FX = FX + ZMCX(IGC)*GKX/HKX
            DFDBX = DFDBX + ZMCX(IGC)*((GKX/HKX)**2)
          ENDDO
          DBZ = FX/DFDBX
          BETAX = BETAX + DBZ
          IF( ABS(DBZ).LE.1.D-4 ) EXIT
        ENDDO
!
!---    Convergence check  ---
!
        IF( ABS(DFKMX).LE.1.D-7 ) EXIT
      ENDDO
!
!---  Vapor and liquid mole fractions  ---
!
      SXMCX = 0.D+0
      SYMCX = 0.D+0
      DO IGC = 1,NGC+2
        IF( ZMCX(IGC).LT.EPSL ) CYCLE
        XMCX(IGC) = ZMCX(IGC)/(1.D+0 + BETAX*(FKX(IGC)-1.D+0))
        YMCX(IGC) = XMCX(IGC)*FKX(IGC)
        SXMCX = SXMCX + XMCX(IGC)
        SYMCX = SYMCX + YMCX(IGC)
      ENDDO
!
!---  Normalize vapor and liquid mole fractions  ---
!
      DO IGC = 1,NGC+2
        XMCX(IGC) = XMCX(IGC)/SXMCX
        YMCX(IGC) = YMCX(IGC)/SYMCX
      ENDDO
!
!---  Soave-Redlich-Kwong equation of state  ---
!
      IF( ISLC(68).EQ.2 ) THEN
!
!---    Gas mixture coefficients  ---
!
        CALL SRK_CX( AGX,AIX,BGX,YMCX )
!
!---    Peneloux volume correction  ---
!
        CALL PENELOUX( CGX,TKX,YMCX )
        BGX = BGX - CGX
!
!---    Liquid mixture coefficients  ---
!
        CALL SRK_CX( ANX,AIX,BNX,XMCX )
!
!---    Peneloux volume correction  ---
!
        CALL PENELOUX( CNX,TKX,XMCX )
        BNX = BNX - CNX
!
!---    Gas mixture compressibility  ---
!
        JNDX = 1
        CALL SRK_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
!
!---    Liquid mixture compressibility  ---
!
        JNDX = 2
        CALL SRK_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
!
!---  Peng-Robinson equation of state  ---
!
      ELSE
!
!---    Gas mixture coefficients  ---
!
        CALL PR_CX( AGX,AIX,BGX,YMCX )
!
!---    Peneloux volume correction  ---
!
        CALL PENELOUX( CGX,TKX,YMCX )
        BGX = BGX - CGX
!
!---    Liquid mixture coefficients  ---
!
        CALL PR_CX( ANX,AIX,BNX,XMCX )
!
!---    Peneloux volume correction  ---
!
        CALL PENELOUX( CNX,TKX,XMCX )
        BNX = BNX - CNX
!
!---    Gas mixture compressibility  ---
!
        JNDX = 1
        CALL PR_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
!
!---    Liquid mixture compressibility  ---
!
        JNDX = 2
        CALL PR_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of FLASH group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE NICKALLS( CAX,CBX,CCX,CDX,R1X,R2X,R3X )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     This subroutine calculates the roots of a cubic equation using
!     the Nickalls formulation.
!
!     Nickalls, R.W.D. 1993. A new approach to solving the cubic:
!     Cardan's solution revealed.  Math. Gaz. 77:354-359.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 14 June 2010.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/NICKALLS'
!
!---  Nickalls cubic polynomial solver  ---
!
      XNX = -CBX/(3.D+0*CAX)
      YNX = CAX*(XNX**3) + CBX*(XNX**2) + CCX*XNX + CDX
      YN2X = YNX**2
      D2X = ((CBX**2)-(3.D+0*CAX*CCX))/((3.D+0*CAX)**2)
      IF( D2X.LE.0.D+0 ) THEN
        HX = 0.D+0
      ELSE
        DX = SQRT(D2X)
        HX = -2.D+0*(DX**3)
      ENDIF
      H2X = 4.D+0*(CAX**2)*(D2X**3)
!
!---  YN2X > H2X, 1 real root  ---
!
      IF( YN2X-H2X.GT.EPSL ) THEN
        R1X = (5.D-1/CAX)*(-YNX+SQRT(YN2X-H2X))
        R2X = (5.D-1/CAX)*(-YNX-SQRT(YN2X-H2X))
        IF( R1X.LT.0.D+0 .AND. R2X.LT.0.D+0 ) THEN
          VX = XNX + (ABS(R1X)**(1.D+0/3.D+0))
     &      + (ABS(R2X)**(1.D+0/3.D+0))
          CHKX = CAX*(VX**3) + CBX*(VX**2) + CCX*VX + CDX
        ENDIF
        R3X = XNX + SIGN((ABS(R1X)**(1.D+0/3.D+0)),R1X)
     &    + SIGN((ABS(R2X)**(1.D+0/3.D+0)),R2X)
        R1X = R3X
        R2X = R3X
!
!---  YN2X < H2X, 3 distinct real roots  ---
!
      ELSEIF( YN2X-H2X.LT.-EPSL ) THEN
        THETAX = (ACOS(YNX/HX))/3.D+0
        R1X = XNX + 2.D+0*DX*COS(THETAX)
        R2X = XNX + 2.D+0*DX*COS(((2.D+0*GPI)/3.D+0)+THETAX)
        R3X = XNX + 2.D+0*DX*COS(((4.D+0*GPI)/3.D+0)+THETAX)
!
!---  YN2X = H2X, 3 real roots (two or three equal roots)  ---
!
      ELSE
!
!---    HX /= 0 (two equal roots)  ---
!
        IF( ABS(HX)/EPSL.GT.EPSL ) THEN
          DX = YNX/(2.D+0*CAX)
          DX = SIGN((ABS(DX)**(1.D+0/3.D+0)),DX)
          R1X = XNX + DX
          R2X = XNX + DX
          R3X = XNX - 2.D+0*DX
!
!---    HX = 0 (three equal roots)  ---
!
        ELSE
          R1X = XNX
          R2X = XNX
          R3X = XNX
        ENDIF
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of NICKALLS group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE NORM_CONC( ZMCX,XMCX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Normalize the sum of mole fractions to 1.0
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 13 March 2014
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 XMCX(LNGC),ZMCX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/NORM_CONC'
      SXMCX = 0.D+0
      DO IGC = 1,NGC+2
         IF( ZMCX(IGC).GT.EPSL ) THEN
          SXMCX = SXMCX + XMCX(IGC)
        ENDIF
      ENDDO
      DO IGC = 1,NGC+2
        IF( ZMCX(IGC).GT.EPSL ) THEN
          XMCX(IGC) = XMCX(IGC)/SXMCX
        ELSE
          XMCX(IGC) = 0.D+0
        ENDIF
      ENDDO
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of NORM_CONC group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE PENELOUX( CX,TKX,ZMCX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     This subroutine calculates the Peneloux volume-shift parameter
!     as a function of composition.
!
!     Peneloux, A., Rauzy, E, and Freze, R., 1982 A consistent 
!     correctionfor Redlich-Kwong-Soave volumes. 
!     Fluid Phase Equilibria, 8:7-23.
!
!     Magoulas and Tassios temperature dependent correction factor.
!     J. of Fluid Phase Equilibria, Vol. 56, pp. 119-140-445, 1990.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 2 October 2013.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 ZMCX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/PENELOUX'
      TK1X = TKX
!!
!!---  Magoulas and Tassios temperature dependent correction factor  ---
!!
!      ZMCRX = 2.89D-1 - 7.01D-2*ACFX - 2.07D-2*(ACFX**2)
!      CCX = RCU*TCRX*(0.3704-ZMCRX)/PCRX
!      COX = RCU*TCRX*(-1.4471D-2 + 6.7498D-2*ACFX - 8.4852D-2*(ACFX**2)
!     &  + 6.7298D-2*(ACFX**3) - 1.7366D-2*(ACFX**4))/PCRX
!      BETAX = -1.02447D+1 - 2.86312D+1*ACFX
!      TRX = TKX/TCRX
!      CX = COX + (CCX-COX)*EXP(BETAX*ABS(1.D+0-TRX))
      CX = 0.D+0
      DO IGC = 1,NGC+2
        CX = CX + ZMCX(IGC)*GCPP(23,IGC)
      ENDDO
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of PENELOUX group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE PERM_R( SSX,PERMRFX,PORDX,N )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Calculation of permeability reduction factor.
!
!     Verma, A., and K. Pruess.  1988.  Thermohydrological Conditions
!     and Silica Redistribution Near High-Level Nuclear Wastes
!     Emplaced in Saturated Geological Formations.  Journal of
!     Geophysical Research, 93(B2):1159-1173.
!
!     Pruess, K., and J. Garcia.  2002.  Multiphase flow dynamics
!     during CO2 disposal into saline aquifers.  Environmental Geology
!     http://link.springer.de/link/service/journals/00254/contents
!     /01/00498/paper/s00254-001-0498-3ch110.html
!
!----------------------Authors-----------------------------------------!
!
!     Written by DH Bacon, PNNL, 31 October 2012
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/PERM_R'
!
!---  Reduced porosity with salt precipitation  ---
!
      PORDX = MAX( PORDX*(1.D+0-SSX),PORDX*PERM(5,N),1.D-12 )
!
!---  Normalized porosity  ---
!
      PORD_NX = MAX( (1.D+0-SSX-PERM(5,N))/(1.D+0-PERM(5,N)),0.D+0 )
!
!---  Tube area ratio  ---
!
      OMEGAX = 1.D+0 + (1.D+0/PERM(4,N))/((1.D+0/PERM(5,N))-1.D+0)
!
!---  Permeability reduction factor  ---
!
      PERMRFX = (PORD_NX**2)*(1.D+0-PERM(4,N)+PERM(4,N)/(OMEGAX**2))
     &  /(1.D+0-PERM(4,N)+PERM(4,N)*
     &  ((PORD_NX/(PORD_NX+OMEGAX-1.D+0))**2))
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of PERM_R group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE PERM_V( SSX,PERMRFX,PORDX,PORM1,PORM0,N )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Calculation of permeability reduction factor.
!
!     Verma, A., and K. Pruess.  1988.  Thermohydrological Conditions
!     and Silica Redistribution Near High-Level Nuclear Wastes
!     Emplaced in Saturated Geological Formations.  Journal of
!     Geophysical Research, 93(B2):1159-1173.
!
!     Pruess, K., and J. Garcia.  2002.  Multiphase flow dynamics
!     during CO2 disposal into saline aquifers.  Environmental Geology
!     http://link.springer.de/link/service/journals/00254/contents
!     /01/00498/paper/s00254-001-0498-3ch110.html
!
!----------------------Authors-----------------------------------------!
!
!     Written by DH Bacon, PNNL, 31 October 2012
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/PERM_V'
!
!---  Reduced porosity with salt precipitation  ---
!
      PORDX = MAX( PORDX*(1.D+0-SSX),PORDX*PERM(5,N),1.D-12 )
!
!--- Precipitated mineral saturation
!
      IF( ISLC(43).EQ.1 ) THEN
        SPM = 1.D+0 - PORM1/PORM0
      ENDIF
!
!---  Normalized porosity  ---
!
      PORD_NX = MAX( (1.D+0-SSX-SPM-PERM(5,N))/(1.D+0-PERM(5,N)),
     &  0.D+0 )
!
!---  Tube area ratio  ---
!
      OMEGAX = 1.D+0 + (1.D+0/PERM(4,N))/((1.D+0/PERM(5,N))-1.D+0)
!
!---  Permeability reduction factor  ---
!
      PERMRFX = (PORD_NX**2)*(1.D+0-PERM(4,N)+PERM(4,N)/(OMEGAX**2))
     &  /(1.D+0-PERM(4,N)+PERM(4,N)*
     &  ((PORD_NX/(PORD_NX+OMEGAX-1.D+0))**2))
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of PERM_V group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE PORSTY( N,PX,PREFX,PORDX,PORTX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Compute diffusive and total porosities.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 19 December 2022
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE GRID
      USE GEO_MECH
      USE FDVP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/PORSTY'
      DPX = PX-PREFX
      ISLC50X = ABS(ISLC(50))
!
!---  Geomechanics simulations  --
!
      IF( ISLC(50).NE.0 .AND. MOD(ISLC50X,10).NE.2 .AND. 
     &  MOD(ISLC50X,10).NE.4 ) THEN
!
!---    Drained bulk modulus  --
!
        BLKDRNX = PROP_GM(1,N)/(3.0D+0*(1.0D+0-2.0D+0*PROP_GM(2,N)))
!
!---    1/N  ---
!
        OONMODX = (PROP_GM(3,N)-POR(1,N))*(1.0D+0-PROP_GM(3,N))
     &    /BLKDRNX
!
!---    Volumetric strain differential, at iterate level k  ---
!
        DEVKX = EPSV_GM(2,N)-EPSV_CMP(N)
!
!---    Pressure differential, at iterate level k  ---
!
        DPKX = P_GM(2,N)-PCMP(N)
!
!---    Diffusive and total mechanical porosity, at iterate level k  ---
!
        PORDMCHKX = POR(1,N) - PROP_GM(3,N)*DEVKX + OONMODX*DPKX
        PORTMCHKX = POR(2,N) - PROP_GM(3,N)*DEVKX + OONMODX*DPKX
!
!---    Pressure differential, at iterate level k+1  ---
!
        DPK1X = PX-P_GM(2,N)
!
!---    Diffusive and total flow porosity, at iterate level k+1  ---
!
        PORDX = PORDMCHKX + ((PROP_GM(3,N)**2)/BLKDRNX+OONMODX)*DPK1X
        PORTX = PORTMCHKX + ((PROP_GM(3,N)**2)/BLKDRNX+OONMODX)*DPK1X
!
!---  No geomechanics  --
!
      ELSE        
!
!---    Pore compressibility w/ fixed bulk volume  ---
!
        IF( ISLC(15).EQ.1 ) THEN
!
!---      Reactive transport porosity alteration  ---
!
          IF( ISLC(43).EQ.1 ) THEN
            PORTX = POR0(1,N)*EXP(DPX*CMP(1,N))
            PORDX = POR0(2,N)*EXP(DPX*CMP(1,N))
          ELSE
            PORTX = POR(1,N)*EXP(DPX*CMP(1,N))
            PORDX = POR(2,N)*EXP(DPX*CMP(1,N))
          ENDIF
!
!---    Bulk compressibility w/ variable bulk volume  ---
!
        ELSEIF( ISLC(15).EQ.10 ) THEN
!
!---        Reactive transport porosity alteration  ---
!
            IF( ISLC(43).EQ.1 ) THEN
              PORTX = POR0(1,N)*EXP(DPX*CMP(1,N)*(1.D+0-POR0(1,N)/
     &          POR0(1,N)))
              PORDX = POR0(2,N)*EXP(DPX*CMP(1,N)*(1.D+0-POR0(2,N)/
     &          POR0(2,N)))
            ELSE
              PORTX = POR(1,N)*EXP(DPX*CMP(1,N)*(1.D+0-POR(1,N)/
     &          POR(1,N)))
              PORDX = POR(2,N)*EXP(DPX*CMP(1,N)*(1.D+0-POR(2,N)/
     &          POR(2,N)))
            ENDIF
!
!---    Pore compressibility w/ variable bulk volume  ---
!
        ELSEIF( ISLC(15).EQ.11 ) THEN
!
!---      Reactive transport porosity alteration  ---
!
          IF( ISLC(43).EQ.1 ) THEN
            PORTX = POR0(1,N)*EXP(DPX*CMP(1,N)*(1.D+0-POR0(1,N)))
            PORDX = POR0(2,N)*EXP(DPX*CMP(1,N)*(1.D+0-POR0(2,N)))
          ELSE
            PORTX = POR(1,N)*EXP(DPX*CMP(1,N)*(1.D+0-POR(1,N)))
            PORDX = POR(2,N)*EXP(DPX*CMP(1,N)*(1.D+0-POR(2,N)))
          ENDIF
!
!---    Bulk compressibility w/ fixed bulk volume  ---
!
        ELSE
!
!---      Reactive transport porosity alteration  ---
!
          IF( ISLC(43).EQ.1 ) THEN
            PORTX = POR0(1,N) + DPX*CMP(1,N)
            PORDX = POR0(2,N) + DPX*CMP(1,N)
          ELSE
            PORTX = POR(1,N) + DPX*CMP(1,N)
            PORDX = POR(2,N) + DPX*CMP(1,N)
          ENDIF
        ENDIF
      ENDIF
      PORTX = MAX( MIN( PORTX,1.D+0 ),1.D-6 )
      PORDX = MAX( MIN( PORDX,1.D+0 ),1.D-6 )
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of PORSTY group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE PORSTY_GM
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Update porosity.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 28 February 2017 (The erroneous word
!     "dord" is discovered in the Webster's New International 
!     Dictionary, Second Edition, prompting an investigation in 1939).
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE JACOB
      USE GRID
      USE FDVP
      USE FDVH
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/PORSTY_GM'
!
!---  Loop over the finite elements (i.e., grid cells) ---
!
      DO N = 1,NFCGC(ID+1)
!
!---    Skip for inactive  ---
!
        IF( IXP(N).EQ.0 ) CYCLE
!
!---    Loop over increment indices  ---
!
        DO M = 2,ISVC+2
          PX = MAX( PG(M,N),PL(M,N) ) + PATM
          CALL PORSTY( N,PX,PCMP(N),PORD(M,N),PORT(M,N) )
          IDX = MIN( ID+1,2 )
          PORD(M,N) = MAX( PORD(M,N),EPSL )
          PORT(M,N) = MAX( PORT(M,N),PORD(M,N) )
        ENDDO
      ENDDO
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of PORSTY_GM group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE PTL_A( PX,TX,VAR_TA,VARX,I_PX,I_TX,NF )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     This subroutine computes CO2 properties as a function of
!     pressure and temperature, using bilinear interpolation of
!     tabular data.
!
!     I_PX(1) - lower pressure index
!     I_PX(2) - upper pressure index
!     I_TX(1) - lower temperature index at lower pressure
!     I_TX(2) - lower temperature index at upper pressure
!     VAR_TA(LT_TA,LP_TA,LNGC) - pressure, temperature ordered 
!       array of property values
!     VARX - interpolated property value
!     DVARX - partial derivative of the property value with respect
!             to pressure
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 23 April 2002.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE NCG_PT
      USE GLB_PAR
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 VAR_TA(LT_TA,LP_TA,LNNGC)
      INTEGER I_PX(2),I_TX(2)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/PTL_A'
!
!---  Convert pressure to MPa and temperature to degrees Kelvin  ---
!
      PMX = 1.D-6*PX
      TKX = TX + TABS
!
!---  Interpolation parameters  ---
!
      VPLTLX = VAR_TA(I_TX(1),I_PX(1),NF)
      VPLTUX = VAR_TA(I_TX(1)+1,I_PX(1),NF)
      VPUTLX = VAR_TA(I_TX(2),I_PX(2),NF)
      VPUTUX = VAR_TA(I_TX(2)+1,I_PX(2),NF)
      PLX = P_TA(I_PX(1),NF)
      PUX = P_TA(I_PX(2),NF)
      TLPLX = T_TA(I_TX(1),I_PX(1),NF)
      TUPLX = T_TA(I_TX(1)+1,I_PX(1),NF)
      TLPUX = T_TA(I_TX(2),I_PX(2),NF)
      TUPUX = T_TA(I_TX(2)+1,I_PX(2),NF)
!
!---  Bilinear interpolation scheme  ---
!
      VPLX = ((VPLTUX-VPLTLX)*(TKX-TLPLX)/(TUPLX-TLPLX)) + VPLTLX
      VPUX = ((VPUTUX-VPUTLX)*(TKX-TLPUX)/(TUPUX-TLPUX)) + VPUTLX
      IF( ABS(PUX-PLX).LT.EPSL ) THEN
        DVARX = 0.D+0
        VARX = VPLX
      ELSE
        DVARX = (VPUX-VPLX)/(PUX-PLX)
        VARX = (DVARX*(PMX-PLX)) + VPLX
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of PTL_A group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE PR_CT( AIX,TKX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Peng-Robinson temperature-dependent constants for mixtures.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 10 April 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 AIX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/PR_CT'
      DO IGC = 1,NGC+2
        TRX = TKX/GCPP(3,IGC)
        AIX(IGC) = GCPP(13,IGC)*
     &    (1.D+0 + GCPP(15,IGC)*(1.D+0 - SQRT(TRX)))**2
      ENDDO
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of PR_CT group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE PR_CX( AX,AIX,BX,XMCX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Peng-Robinson composition-dependent constants for mixtures.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 10 April 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE EOR
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 AIX(LNGC),XMCX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/PR_CX'
      AX = 0.D+0
      BX = 0.D+0
      DO IGC = 1,NGC+2
        DO JGC = 1,NGC+2
          AIJX = SQRT(AIX(IGC)*AIX(JGC))*(1.D+0-BIPC(IGC,JGC))
!          AIJX = SQRT(AIX(IGC)*AIX(JGC))
          AX = AX + XMCX(IGC)*XMCX(JGC)*AIJX
        ENDDO
        BX = BX + XMCX(IGC)*GCPP(14,IGC)
      ENDDO
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of PR_CX group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE PR_FUG( AX,AIX,BX,CAX,CBX,FUGX,XMCX,ZX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Fugacity coefficient for the Peng-Robinson cubic equation
!     of state.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 15 March 2012
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE EOR
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 AIX(LNGC),FUGX(LNGC),XMCX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/PR_FUG'
      IF( CAX.GT.EPSL ) THEN
        DO IGC = 1,NGC+2
          V1X = -LOG(ZX-CBX)
          V2X = (ZX-1.D+0)*GCPP(14,IGC)/BX
          V3X = CAX/((2.D+0**1.5D+0)*CBX)
          V4X = 2.D+0*SQRT(AIX(IGC))/AX
          V5X = 0.D+0
          DO JGC = 1,NGC+2
            V5X = V5X + XMCX(JGC)*SQRT(AIX(JGC))*(1.D+0-BIPC(IGC,JGC))
          ENDDO
          V6X = GCPP(14,IGC)/BX
          V7X = (ZX + (SQRT(2.D+0) + 1.D+0)*CBX)
          V8X = (ZX - (SQRT(2.D+0) - 1.D+0)*CBX)
          V3X = V3X*(V4X*V5X-V6X)*LOG( V7X/V8X )
          FUGX(IGC) = EXP( V1X + V2X - V3X )
        ENDDO
       ELSE
        DO IGC = 1,NGC+2
          FUGX(IGC) = 1.D+0
        ENDDO
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of PR_FUG group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE PR_Z( AX,BX,CAX,CBX,PX,TKX,ZX,INDX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Peng-Robinson compressibility.
!
!     INDX = 1 Gas
!     INDX = 2 Liquid
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 15 March 2012
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/PR_Z'
      CAX = AX*PX/((RCU*TKX)**2)
      CBX = BX*PX/(RCU*TKX)
!
!---  Peng-Robinson cubic function for Z  ---
!
      C3X = 1.D+0
      C2X = -(1.D+0-CBX)
      C1X = (CAX - 3.D+0*(CBX**2) - 2.D+0*CBX)
      C0X = -(CAX*CBX - (CBX**2) - (CBX**3))
!
!---  Direct cubic equation solve  ---
!
      CALL NICKALLS( C3X,C2X,C1X,C0X,R1X,R2X,R3X )
!
!---  Gas  ---
!
      IF( INDX.EQ.1 ) THEN
        ZX = MAX(R1X,R2X,R3X)
!
!---  Liquid  ---
!
      ELSEIF( INDX.EQ.2 ) THEN
        R1X = MAX( R1X,1.000001D+0*CBX )
        R2X = MAX( R2X,1.000001D+0*CBX )
        R3X = MAX( R3X,1.000001D+0*CBX )
        ZX = MIN( R1X,R2X,R3X )
!
!---  Ideal gas  ---
!
      ELSE
        ZX = 1.D+0
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of PR_Z group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE RACHFORD_RICE( BETAX,FKX,XMCX,YMCX,ZMCX,INDX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Solve the Rachford-Rice equation for the mole fraction of gas
!     following the scheme outlined in Chapter 8 and 10 of Michelsen
!     and Mollerup.
!
!     IGX = 0 (primary unknown is the mole fraction of liquid) 
!     IGX = 1 (primary unknown is the mole fraction of gas)
!
!     INDX = 0 (no solution, potential single phase) 
!     INDX = 1 (solution found) 
!
!     Michelsen, M.L. and J.M. Mollerup. 2007. Thermodynamic Models:
!     Fundamentals and Computational Aspects. Tie-Line Publications
!     ISBN 87-989961-3-4
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 20 February 2014.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 FKX(LNGC),XMCX(LNGC),YMCX(LNGC),ZMCX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/RACHFORD_RICE'
!
!---  i. Check conditions (4) and (5) for existence of a solution. 
!     If both are satisified set beta_min = 0 AND beta_max = 1. 
!     If not,terminate  ---
!
      C4X = 0.D+0
      C5X = 0.D+0
      DO IGC = 1,NGC+2
        C4X = C4X + ZMCX(IGC)*FKX(IGC)
        C5X = C5X + ZMCX(IGC)/FKX(IGC)
      ENDDO
      C4TX = C4X-1.D+0
      C5TX = 1.D+0-C5X
      IF( C4TX.LE.0.D+0 ) THEN
        INDX = 0
        DO IGC = 1,NGC+2
          XMCX(IGC) = ZMCX(IGC)
          YMCX(IGC) = ZMCX(IGC)*FKX(IGC)/C4X
        ENDDO
        BETAX = 0.D+0
        ISUB_LOG = ISUB_LOG-1
        RETURN
      ELSEIF( C5TX.GE.0.D+0 ) THEN
        INDX = 0
        DO IGC = 1,NGC+2
          XMCX(IGC) = (ZMCX(IGC)/FKX(IGC))/C5X
          YMCX(IGC) = ZMCX(IGC)
        ENDDO
        BETAX = 1.D+0
        ISUB_LOG = ISUB_LOG-1
        RETURN
      ELSE
        INDX = 1
        BMINX = 0.D+0
        BMAXX = 1.D+0
      ENDIF
!
!---  ii. Test conditions (7) and (8) for, whether tighter bounds can
!     be set. For all components with K-factors greater than 1, check
!     whether eqn. (7) yields a positive value for beta. If this is the
!     case, set beta_min = max_i( (K_i*Z_i-1)/(K_i-1) ). In a similar
!     way, eqn (8) might provide a better value for beta_max.  ---
!
      DO IGC = 1,NGC+2
        IF( (FKX(IGC)-1.D+0).GT.EPSL ) THEN
          C7X = (FKX(IGC)*ZMCX(IGC)-1.D+0)/(FKX(IGC)-1.D+0)
          IF( C7X.GT.0.D+0 ) BMINX = MAX( BMINX,C7X )
        ELSEIF( (1.D+0-FKX(IGC)).GT.EPSL ) THEN
          C8X = (1.D+0-ZMCX(IGC))/(1.D+0-FKX(IGC))
          IF( C8X.GT.0.D+0 ) BMAXX = MIN( BMAXX,C8X )
        ENDIF
      ENDDO
!
!---  iii. Calculate beta_ini = 1/2 (beta_min + beta_max). 
!     If g(beta_ini) > 0, set beta_min = beta_ini, otherwise set 
!     beta_max = beta_ini. In the later case, it may also be advisable
!     to change to the liquid fraction as the iteration variable.  ---
!
      BINIX = 5.D-1*(BMINX+BMAXX)
      GX = 0.D+0
      DO IGC = 1,NGC+2
        GX = GX + ZMCX(IGC)*(FKX(IGC)-1.D+0)/
     &    (1.D+0 - BINIX+ (BINIX*FKX(IGC)))
      ENDDO
!
!---  Solve for gas mole fraction (i.e., betax = gas mole fraction)  ---
!
      IF( GX.GT.0.D+0 ) THEN
        BMINX = BINIX
!
!---    No initial guess of betax provided   ---
!
        IF( BETAX.LT.0.D+0 ) THEN
          BETAX = 5.D-1*(BMINX+BMAXX)
!
!---    Initial guess of betax provided, but outside of limits   ---
!
        ELSEIF( BETAX.LT.BMINX .OR. BETAX.GT.BMAXX ) THEN
          BETAX = 5.D-1*(BMINX+BMAXX)
        ENDIF
        IGX = 1
!
!---  Solve for liquid mole fraction (i.e., betax = liquid mole 
!     fraction)   ---
!
      ELSE
!
!---    No initial guess of betax provided   ---
!
        IF( BETAX.LT.0.D+0 ) THEN
          BMAXX = 1.D+0-BMINX
          BMINX = 1.D+0-BINIX
          BETAX = 5.D-1*(BMINX+BMAXX)
!
!---    Initial guess of betax provided, but outside of limits   ---
!
        ELSEIF( BETAX.LT.BMINX .OR. BETAX.GT.BMAXX ) THEN
          BMAXX = 1.D+0-BMINX
          BMINX = 1.D+0-BINIX
          BETAX = 5.D-1*(BMINX+BMAXX)
!
!---    Initial guess of betax provided within limits   ---
!
        ELSE
          BMAXX = 1.D+0-BMINX
          BMINX = 1.D+0-BINIX
          BETAX = 1.D+0-BETAX
        ENDIF
        IGX = 0
      ENDIF
!
!---  iv. At the current value of beta calculate g(beta) and dg/dbeta.
!     If g > 0, set beta_min = beta, if g < 0, set beta_max = beta.
!     calculate the Newton step delta-beta and set beta_new = beta
!     + delta-beta  ---
!
      DO
!
!---    Solve for gas mole fraction  ---
!
        IF( IGX.EQ.1 ) THEN
          GX = 0.D+0
          DGDBX = 0.D+0
          DO IGC = 1,NGC+2
            GX = GX + ZMCX(IGC)*(FKX(IGC)-1.D+0)/
     &        (1.D+0 - BETAX + (BETAX*FKX(IGC)))
            DGDBX = DGDBX - ZMCX(IGC)*((FKX(IGC)-1.D+0)**2)/
     &        ((1.D+0 - BETAX + (BETAX*FKX(IGC)))**2)
          ENDDO
          IF( ABS(GX).GT.0.D+0 ) THEN
            DBETAX = -GX/DGDBX
          ELSE
            DBETAX = 0.D+0
          ENDIF
          BNEWX = BETAX + DBETAX
!
!---    Solve for liquid mole fraction  ---
!
        ELSE
          GX = 0.D+0
          DGDBX = 0.D+0
          DO IGC = 1,NGC+2
            GX = GX + ZMCX(IGC)*(FKX(IGC)-1.D+0)/
     &        (BETAX + ((1.D+0-BETAX)*FKX(IGC)))
            DGDBX = DGDBX + ZMCX(IGC)*((FKX(IGC)-1.D+0)**2)/
     &        ((BETAX + ((1.D+0-BETAX)*FKX(IGC)))**2)
          ENDDO
          IF( ABS(GX).GT.0.D+0 ) THEN
            DBETAX = -GX/DGDBX
          ELSE
            DBETAX = 0.D+0
          ENDIF
          BNEWX = BETAX + DBETAX
        ENDIF
!
!---    v. If beta_min < beta_new < beta_max, set beta = beta_new,
!       otherwise set beta = 1/2 (beta_min + beta_max).  ---
!
         IF( BNEWX.GT.BMINX .AND. BNEWX.LT.BMAXX ) THEN
           BETAX = BNEWX
         ELSEIF( BNEWX.GT.BMAXX ) THEN
           BMINX = BETAX
           BETAX = 5.D-1*(BMINX+BMAXX)
         ELSEIF( BNEWX.LT.BMINX ) THEN
           BMAXX = BETAX
           BETAX = 5.D-1*(BMINX+BMAXX)
         ELSE
           BETAX = 5.D-1*(BMINX+BMAXX)
         ENDIF
!
!---    vi. If the length of the Newton step is above the tolerance
!       set for the solution, return to iv. Otherwise calculate the
!       mole fraction of the equilibrium phase from eqn (6) and 
!       terminate the calculation.  ---
!
        IQUIT = 1
        IF( ABS(BMAXX-BMINX).GT.EPSL ) THEN
          IF( ABS(DBETAX).GT.1.D-6 ) IQUIT = 0
        ENDIF
        IF( IQUIT.EQ.1 ) EXIT
      ENDDO
!
!---  Solve for gas mole fraction  ---
!
      IF( IGX.EQ.1 ) THEN
        SXMCX = 0.D+0
        SYMCX = 0.D+0
        DO IGC = 1,NGC+2
          XMCX(IGC) = ZMCX(IGC)/
     &      (1.D+0 - BETAX + (BETAX*FKX(IGC)))
          YMCX(IGC) = FKX(IGC)*ZMCX(IGC)/
     &      (1.D+0 - BETAX + (BETAX*FKX(IGC)))
          SXMCX = SXMCX + XMCX(IGC)
          SYMCX = SYMCX + YMCX(IGC)
        ENDDO
!
!---    Normalize vapor and liquid mole fractions  ---
!
        DO IGC = 1,NGC+2
          XMCX(IGC) = XMCX(IGC)/SXMCX
          YMCX(IGC) = YMCX(IGC)/SYMCX
        ENDDO
!
!---  Solve for liquid mole fraction  ---
!
      ELSE
        SXMCX = 0.D+0
        SYMCX = 0.D+0
        DO IGC = 1,NGC+2
          XMCX(IGC) = ZMCX(IGC)/
     &      (BETAX + ((1.D+0-BETAX)*FKX(IGC)))
          YMCX(IGC) = FKX(IGC)*ZMCX(IGC)/
     &      (BETAX + ((1.D+0-BETAX)*FKX(IGC)))
          SXMCX = SXMCX + XMCX(IGC)
          SYMCX = SYMCX + YMCX(IGC)
        ENDDO
!
!---    Normalize vapor and liquid mole fractions  ---
!
        DO IGC = 1,NGC+2
          XMCX(IGC) = XMCX(IGC)/SXMCX
          YMCX(IGC) = YMCX(IGC)/SYMCX
        ENDDO
!
!---    Return gas beta  ---
!
        BETAX = 1.D+0-BETAX
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of RACHFORD_RICE group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE RDPF_EOR
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Reads property data files
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 15 March 2013.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE NCG_PT
      USE NAPL
      USE GLB_PAR
      USE EOR
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      LOGICAL FCHK
      CHARACTER*64 FDUM
      CHARACTER*512 CHDUM
      REAL*8 AIX(LNGC)
      REAL*8 XMCX(LNGC),YMCX(LNGC),ZMCX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/RDPF_EOR'
!
!---  Component name  ---
!
      GCNM(1) = 'co2'
      GCNM(2) = 'ch4'
!
!---  Black-oil option  ---
!
      IF( ISLC(68).EQ.0 ) THEN
        GCNM(1) = 'gas'
        GCNM(2) = 'oil'
      ENDIF
!
!---  Component molecular weight, kg/kmol  ---
!
      GCPP(1,1) = 44.0098D+0
      GCPP(1,2) = 16.0428D+0
      GWPP(1) = 18.015D+0
      WTMA = GCPP(1,1)
      WTMO = GCPP(1,2)
      WTMW = GWPP(1)
!
!---  Component normal boiling point, K  ---
!
      GCPP(2,1) = 194.686D+0
      GCPP(2,2) = 111.667D+0
      GWPP(2) = 373.15D+0
!
!---  Component critical temperature, K  ---
!
      GCPP(3,1) = 304.1282D+0
      GCPP(3,2) = 190.564D+0
      GWPP(3) = 647.3D+0
!
!---  Component critical pressure, Pa  ---
!
      GCPP(4,1) = 7377.3D+3
      GCPP(4,2) = 4599.2D+3
      GWPP(4) = 221.2D+5
!
!---  Component critical molar volume, m^3/kmol ---
!
      GCPP(5,1) = 1.D+0/10.6249063D+0
      GCPP(5,2) = 1.D+0/10.139128D+0
      GWPP(5) = 57.1D-3
!
!---  Component critical compressibility  ---
!
      GCPP(6,1) = 0.274D+0
      GCPP(6,2) = 0.288D+0
      GWPP(6) = 0.235D+0
!
!---  Component Pitzer acentric factor  ---
!
      GCPP(7,1) = 0.22394D+0
      GCPP(7,2) = 0.01142D+0
      GWPP(7) = 0.344D+0
!
!---  Epsilon over Boltzmann constant
!     (Reid et al., 1987, pp. 587)  ---
!
      GCPP(8,1) = 1.15D+0*GCPP(2,1)
      GCPP(8,2) = 1.15D+0*GCPP(2,2)
      GWPP(8) = 1.15D+0*GWPP(2)
!
!---  Liquid molar volume m^3/kmol at the
!     normal boiling point, using correlation of Tyn and Calus
!     (Reid et al., 1987, pp. 53)  ---
!
      GCPP(9,1) = 0.285D-3*((1.D+3*GCPP(5,1))**1.048D+0)
      GCPP(9,2) = 0.285D-3*((1.D+3*GCPP(5,2))**1.048D+0)
      GWPP(9) = 0.285D-3*((1.D+3*GWPP(5))**1.048D+0)
!
!---  Characteristic length parameter
!     (Reid et al., 1987, pp. 587)  ---
!
      GCPP(10,1) = 1.18D+0*(1.D+3*GCPP(9,1))**3.333D-1
      GCPP(10,2) = 1.18D+0*(1.D+3*GCPP(9,2))**3.333D-1
      GWPP(10) = 1.18D+0*(1.D+3*GWPP(9))**3.333D-1
!
!---  Component triple-point temperature, K  ---
!
      GCPP(16,1) = 216.592D+0
      GCPP(16,2) = 90.694D+0
      GWPP(16) = 273.16D+0
!
!---  Component triple-point pressure, Pa  ---
!
      GCPP(17,1) = 517.95D+3
      GCPP(17,2) = 11.696D+3
      GWPP(17) = 0.6117D+3
!
!---  Ideal gas heat capacity coefficient A, J/kmol K  ---
!
      GCPP(18,1) = 1.980D+4
      GCPP(18,2) = 1.925D+4
      GWPP(18) = 3.194D+4
!
!---  Ideal gas heat capacity coefficient B, J/kmol K^2  ---
!
      GCPP(19,1) = 7.344D+1
      GCPP(19,2) = 5.213D+1
      GWPP(19) = 1.924D+0
!
!---  Ideal gas heat capacity coefficient C, J/kmol K^3  ---
!
      GCPP(20,1) = -5.602D-2
      GCPP(20,2) = 1.197D-2
      GWPP(20) = 1.055D-2
!
!---  Ideal gas heat capacity coefficient D, J/kmol K^4  ---
!
      GCPP(21,1) = 1.715D-5
      GCPP(21,2) = -1.132D-5
      GWPP(21) = -3.596D-6
!
!---  Parachor  ---
!
      GCPP(22,1) = 78.D+0
      GCPP(22,2) = 77.D+0
!
!---  Peng-Robinson pure component parameters (a, b, fw)  ---
!
      DO IGC = 1,2
        GCPP(13,IGC) = 0.45724D+0*(RCU**2)*(GCPP(3,IGC)**2)/GCPP(4,IGC)
        GCPP(14,IGC) = 0.07780D+0*RCU*GCPP(3,IGC)/GCPP(4,IGC)
        GCPP(15,IGC) = 0.37464D+0 + 1.54226D+0*GCPP(7,IGC) -
     &    0.26992D+0*(GCPP(7,IGC)**2)
      ENDDO
      GWPP(13) = 0.45724D+0*(RCU**2)*(GWPP(3)**2)/GWPP(4)
      GWPP(14) = 0.07780D+0*RCU*GWPP(3)/GWPP(4)
      GWPP(15) = 0.37464D+0 + 1.54226D+0*GWPP(7) -
     &  0.26992D+0*(GWPP(7)**2)
!
!---  Peneloux volume-shift parameter  ---
!
      DO IGC = 1,2
!
!---    Soave-Redlich-Kwong EOS  ---
!
        IF( ISLC(68).EQ.2 ) THEN
          ZRAX = 2.9056D-1 - 8.775D-2*GCPP(7,IGC)
          GCPP(23,IGC) = 4.0768D-1*RCU*GCPP(3,IGC)*(2.9441D-1-ZRAX)/
     &      GCPP(4,IGC)
!
!---    Peng-Robinson EOS  ---
!
        ELSE
          ZRAX = 2.9056D-1 - 8.775D-2*GCPP(7,IGC)
          GCPP(23,IGC) = 5.0033D-1*RCU*GCPP(3,IGC)*(2.5969D-1-ZRAX)/
     &      GCPP(4,IGC)
        ENDIF
      ENDDO
!!
!!---  Check for petroleum fractions property file  ---
!!
!      CARD = 'Reading External Data Files'
!      ICD = INDEX( CARD,'  ' )-1
!      INQUIRE( FILE='petrol_prop.dat', FORM=FDUM, EXIST=FCHK )
!      IF( .NOT.FCHK ) THEN
!        INDX = 4
!        CHMSG = 'Missing Petroleum Property File: petrol_prop.dat'
!        CALL WRMSGS( INDX )
!      ELSEIF( FDUM.EQ.'unformatted' ) THEN
!        INDX = 4
!        CHMSG = 'Unformatted Petroleum Property File: petrol_prop.dat'
!        CALL WRMSGS( INDX )
!      ENDIF
!      OPEN(UNIT=26, FILE='petrol_prop.dat', STATUS='OLD', 
!     &    FORM='FORMATTED')
!!
!!---  Read Id tag line ---
!!
!      READ(26,'(A)') CHDUM
!!
!!---  Loop over the number of petroleum fractions  ---
!!
!      DO NC = 1,LPF_EOR
!!
!!---    Read petroleum fraction properties
!!       name
!!       molecular weight, kg/kmol
!!       normal boiling point, K
!!       critical temperature, K
!!       critical pressure, bar
!!       critical molar volume, cm^3/mole
!!       critical compressibility
!!       Pitzer acentric factor
!!       liquid density, kg/m^3 at 15.5 C and 1 bar  ---
!!
!        READ(26,'(A)') CHDUM
!        IF( CHDUM(1:1).EQ.'#' .OR. CHDUM(1:1).EQ.'!' ) CYCLE
!        CALL LCASE( CHDUM )
!        ISTART = 1
!!
!!---    Read petroleum fraction name  ---
!!
!        VARB = 'Petroleum Fraction Name'
!        CALL RDCHR(ISTART,ICOMMA,NCH,CHDUM,PFNM(NC))
!!
!!---    Read petroleum fraction molecular weight, kg/kmol  ---
!!
!        VARB = 'Petroleum Fraction Molecular Weight'
!        CALL RDDPR(ISTART,ICOMMA,CHDUM,PFPP(1,NC))
!!
!!---    Read petroleum fraction normal boiling point, K  ---
!!
!        VARB = 'Petroleum Fraction Normal Boiling Point'
!        CALL RDDPR(ISTART,ICOMMA,CHDUM,PFPP(2,NC))        
!!
!!---    Read petroleum fraction critical temperature, K  ---
!!
!        VARB = 'Petroleum Fraction Critical Temperature'
!        CALL RDDPR(ISTART,ICOMMA,CHDUM,PFPP(3,NC))
!!
!!---    Read petroleum fraction critical pressure, bar  ---
!!
!        VARB = 'Petroleum Fraction Critical Pressure'
!        CALL RDDPR(ISTART,ICOMMA,CHDUM,PFPP(4,NC))
!!
!!---    Convert critical pressure to Pa  ---
!!
!        PFPP(4,NC) = 1.D+5*PFPP(4,NC)
!!
!!---    Read petroleum fraction critical molar volume, cm^3/mole  ---
!!
!        VARB = 'Petroleum Fraction Critical Molar Volume'
!        CALL RDDPR(ISTART,ICOMMA,CHDUM,PFPP(5,NC))
!!
!!---    Convert critical molar volume to m^3/kmol  ---
!!
!        PFPP(5,NC) = 1.D-3*PFPP(5,NC)
!!
!!---    Read petroleum fraction critical compressibility  ---
!!
!        VARB = 'Petroleum Fraction Critical Compressibility'
!        CALL RDDPR(ISTART,ICOMMA,CHDUM,PFPP(6,NC))
!!
!!---    Read petroleum fraction Pitzer acentric factor  ---
!!
!        VARB = 'Petroleum Fraction Pitzer acentric factor'
!        CALL RDDPR(ISTART,ICOMMA,CHDUM,PFPP(7,NC))
!!
!!---    Liquid molar volume at the normal boiling point
!!       from Tyn and Calus (Reid et al., pp. 53)  ---
!!
!        PFPP(9,NC) = 0.285D-3*((1.D+3*PFPP(5,NC))**1.048D+0)
!!
!!---    Read petroleum fraction Isobaric molar specific 
!!       heat constant a, J/mol K  ---
!!
!        VARB = 'Petroleum Fraction Isobaric Molar Specific Heat a'
!        CALL RDDPR(ISTART,ICOMMA,CHDUM,PFPP(18,NC))
!!
!!---    Read petroleum fraction Isobaric molar specific 
!!       heat constant b, J/mol K^2  ---
!!
!        VARB = 'Petroleum Fraction Isobaric Molar Specific Heat b'
!        CALL RDDPR(ISTART,ICOMMA,CHDUM,PFPP(19,NC))
!!
!!---    Read petroleum fraction Isobaric molar specific 
!!       heat constant c, J/mol K^3  ---
!!
!        VARB = 'Petroleum Fraction Isobaric Molar Specific Heat c'
!        CALL RDDPR(ISTART,ICOMMA,CHDUM,PFPP(20,NC))
!!
!!---    Read petroleum fraction Isobaric molar specific 
!!       heat constant d, J/mol K^4  ---
!!
!        VARB = 'Petroleum Fraction Isobaric Molar Specific Heat d'
!        CALL RDDPR(ISTART,ICOMMA,CHDUM,PFPP(21,NC))
!!
!!---    Read petroleum fraction liquid density at 15.5 C and 1 bar  ---
!!
!        VARB = 'Petroleum Fraction Liquid Density'
!        CALL RDDPR(ISTART,ICOMMA,CHDUM,PFPP(22,NC))
!!
!!---    Peneloux volume shift parameter, no liquid density input
!!       use Peneloux correlation  ---
!!
!        IF( PFPP(22,NC).LT.EPSL ) THEN
!!
!!---      Soave-Redlich-Kwong EOS  ---
!!
!          IF( ISLC(68).EQ.2 ) THEN
!            ZRAX = 2.9056D-1 - 8.775D-2*GCPP(7,NC)
!            PFPP(23,NC) = 4.0768D-1*RCU*PFPP(3,NC)*(2.9441D-1-ZRAX)/
!     &        PFPP(4,NC)
!!
!!---      Peng-Robinson EOS  ---
!!
!          ELSE
!            ZRAX = 2.9056D-1 - 8.775D-2*PFPP(7,NC)
!            PFPP(23,NC) = 5.0033D-1*RCU*PFPP(3,NC)*(2.5969D-1-ZRAX)/
!     &        PFPP(4,NC)
!          ENDIF
!!
!!---    Peneloux volume shift parameter, use liquid density as a 
!!       fitting parameter  ---
!!
!        ELSE
!          TKX = 15.5D+0 + TABS
!          PX = PATM
!          NGCX = NGC
!          NGC = 1
!          ZMCX(1) = 0.D+0
!          ZMCX(2) = 0.D+0
!          ZMCX(3) = 1.D+0
!          PFPP(13,NC) = 0.45724D+0*(RCU**2)*(PFPP(3,NC)**2)/PFPP(4,NC)
!          PFPP(14,NC) = 0.07780D+0*RCU*PFPP(3,NC)/PFPP(4,NC)
!          PFPP(15,NC) = 0.37464D+0 + 1.54226D+0*PFPP(7,NC) -
!     &      0.26992D+0*(PFPP(7,NC)**2)
!          DO M = 1,21
!            GCPP(M,3) = PFPP(M,NC)
!          ENDDO
!!
!!---      Soave-Redlich-Kwong temperature dependent component 
!!         coefficients  ---
!!
!          IF( ISLC(68).EQ.2 ) THEN
!            CALL SRK_CT( AIX,TKX )
!!
!!---      Peng-Robinson temperature dependent component 
!!         coefficients  ---
!!
!          ELSE
!            CALL PR_CT( AIX,TKX )
!          ENDIF
!          CNX = 0.D+0
!          DCNY = 1.D-6
!          DO
!            GCPP(23,3) = CNX
!            CALL LIQUID( BETAX,CNY,PX,TKX,XMCX,YMCX,ZMCX,ZGX,ZNX )
!            VMX = ZNX*RCU*TKX/PX - CNY
!            FX = (PFPP(1,NC)/PFPP(22,NC)) - VMX
!            GCPP(23,3) = CNX + DCNY
!            CALL LIQUID( BETAX,CNY,PX,TKX,XMCX,YMCX,ZMCX,ZGX,ZNX )
!            VMX = ZNX*RCU*TKX/PX - CNY
!            GX = (PFPP(1,NC)/PFPP(22,NC)) - VMX
!            DFX = (GX-FX)/DCNY
!            DCNX = -FX/DFX
!            CNX = CNX + DCNX
!            IF( ABS(DCNX).LE.1.D-9 ) EXIT
!          ENDDO
!          PFPP(23,NC) = CNX
!          NGC = NGCX
!        ENDIF
!      ENDDO
!!
!!---  Read H0 Lee-Kesler residual enthalpy deviation function table  ---
!!
!      READ(26,*) (PR0LKR(M),M=1,15)
!      READ(26,*) (IL0LKR(M),M=1,15)
!      DO N = 1,40
!        READ(26,*) TR0LKR(N),(H0LKR(M,N),M=1,15)
!      ENDDO
!!
!!---  Read H1 Lee-Kesler residual enthalpy deviation function table  ---
!!
!      READ(26,*) (PR1LKR(M),M=1,15)
!      READ(26,*) (IL1LKR(M),M=1,15)
!      DO N = 1,40
!        READ(26,*) TR1LKR(N),(H1LKR(M,N),M=1,15)
!      ENDDO
!!
!!---  Reset GCPP(1:23,3)  ---
!!
!      DO M = 1,23
!        GCPP(M,3) = 0.D+0
!      ENDDO
!!
!!---  Close petroleum fractions property file  ---
!!
!      CLOSE(26)
!!
!!---  Check for CH4 property file  ---
!!
!      CARD = 'Reading External Data Files'
!      ICD = INDEX( CARD,'  ' )-1
!      INQUIRE( FILE='ch4_prop.dat', FORM=FDUM, EXIST=FCHK )
!      IF( .NOT.FCHK ) THEN
!        INDX = 4
!        CHMSG = 'Missing CH4 Property File: ch4_prop.dat'
!        CALL WRMSGS( INDX )
!      ELSEIF( FDUM.EQ.'unformatted' ) THEN
!        INDX = 4
!        CHMSG = 'Unformatted CH4 Property File: ch4_prop.dat'
!        CALL WRMSGS( INDX )
!      ENDIF
!      OPEN(UNIT=26, FILE='ch4_prop.dat', STATUS='OLD', 
!     &    FORM='FORMATTED')
!!
!!---  Read Id tag line ---
!!
!      READ(26,'(A)') CHDUM
!!
!!---  Read CH4 property file  ---
!!
!      NF = 1
!      READ(26,*) IP_TA(NF)
!      READ(26,*) (P_TA(I,NF),I=1,IP_TA(NF))
!      READ(26,*) (IT_TA(I,NF),I=1,IP_TA(NF))
!      DO IPX = 1,IP_TA(NF)
!        READ(26,*) (T_TA(ITX,IPX,NF),ITX=1,IT_TA(IPX,NF))
!      ENDDO
!      DO IPX = 1,IP_TA(NF)
!        READ(26,*) (RHO_TA(ITX,IPX,NF),ITX=1,IT_TA(IPX,NF))
!      ENDDO
!      DO IPX = 1,IP_TA(NF)
!        READ(26,*) (H_TA(ITX,IPX,NF),ITX=1,IT_TA(IPX,NF))
!      ENDDO
!      DO IPX = 1,IP_TA(NF)
!        READ(26,*) (U_TA(ITX,IPX,NF),ITX=1,IT_TA(IPX,NF))
!      ENDDO
!      DO IPX = 1,IP_TA(NF)
!        READ(26,*) (FUG_TA(ITX,IPX,NF),ITX=1,IT_TA(IPX,NF))
!      ENDDO
!      DO IPX = 1,IP_TA(NF)
!        READ(26,*) (S_TA(ITX,IPX,NF),ITX=1,IT_TA(IPX,NF))
!      ENDDO
!      READ(26,*) (IV_TA(I,NF),I=1,IP_TA(NF))
!      READ(26,*) I_LV(NF)
!      DO IPX = 1,I_LV(NF)
!        READ(26,*) T_LV(IPX,NF),P_LV(IPX,NF),RHOL_LV(IPX,NF),
!     &    HL_LV(IPX,NF),UL_LV(IPX,NF),SL_LV(IPX,NF),
!     &    RHOV_LV(IPX,NF),HV_LV(IPX,NF),UV_LV(IPX,NF),
!     &    SV_LV(IPX,NF),FUG_LV(IPX,NF)
!      ENDDO
!      CLOSE(26)
!!
!!---  Load pressure triple-point and critical-point indices  ---
!!
!      IPTP(NF) = 0
!      IPCR(NF) = 0
!      DO I=1,IP_TA(NF)
!        PTPAX = 1.D-6*GCPP(17,2)
!        PCRAX = 1.D-6*GCPP(4,2)
!        IF( ABS(P_TA(I,NF)-PTPAX).LT.EPSL ) IPTP(NF) = I
!        IF( ABS(P_TA(I,NF)-PCRAX).LT.EPSL ) IPCR(NF) = I
!      ENDDO
!      IF( IPTP(NF).EQ.0 ) THEN
!        INDX = 4
!        CHMSG = 'Missing Triple Point: ch4_prop.dat'
!        CALL WRMSGS( INDX )
!      ENDIF
!      IF( IPCR(NF).EQ.0 ) THEN
!        INDX = 4
!        CHMSG = 'Missing Critical Point: ch4_prop.dat'
!        CALL WRMSGS( INDX )
!      ENDIF
!!
!!---  Close CH4 property file  ---
!!
!      CLOSE(26)
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of RDPF_EOR group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE SFT_L( TX,XLSX,SFTLX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     This subroutine calculates the surface tension of aqueous
!     solutions of sodium chloride as a function of temperature
!     and salt concentration.
!
!     Abramzon, A.A., and R.D. Gaukhberg.  1993.  Surface tension of
!     salt solutions.  Russian Journal of Applied Chemistry,
!     66(6):1139-1146.
!
!     Lide, D.R., and H.V. Kehiaian.  1994.  CRC Handbook of
!     Thermophysical and Thermochemical Data.  CRC Press, Boca Raton,
!     Florida.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 14 May 2002.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/SFT_L'
!
!---  Convert mass fraction to molality  ---
!
      GLSX = 1.D+3*XLSX/(WTMS*(1.D+0-XLSX))
!
!---  Pure water vapor surface tension as a function of temperature
!     by D. Lide and H. Kehiaian
!
      SFTWX = 1.D-3*(75.6592D+0 - 1.40959D-1*TX - 2.66317D-4*(TX**2))
!
!---  Function by A. Abramzon and R. Gaukhberg  ---
!
      SFTLX = SFTWX + 1.57D-3*GLSX
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of SFT_L group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE SOL_LA( TX,FUGAX,XLSX,XMLAX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Solubility of CO2 in NaCl aqueous solutions as a function
!     of temperature, salt mass fraction, and CO2 fugacity.
!
!     Battistelli, A., C. Claudio, and K. Pruess.  1997.  The simulator
!     TOUGH2/EWASG for modelling geothermal reservoirs with brines and
!     noncondensible gas.  Geothermics, 26(4): 437-464.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 6 August 2012.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 COBX(6),COCX(5)
      REAL*8 CHBX(4),CHCX(4)
!
!----------------------Data Statements---------------------------------!
!
      DATA COBX / 7.83666D+7, 1.96025D+6, 8.20574D+4, -7.40674D+2,
     &  2.18380D+0, -2.20999D-3 /
      DATA COCX / 1.19784D-1, -7.17823D-4, 4.93854D-6, -1.03826D-8,
     &  1.08233D-11 /
      DATA CHBX / -3.65183D+2, 1.81067D+4, 4.97554D+1, -2.85D-4 /
      DATA CHCX / 1.668D-1, -1.09236D-3, 7.81043D-6, -1.52343D-8 /
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/SOL_LA'
!
!---  Empirical formulation by Battistelli for Henry's coefficient
!     for pure water as a function of temperature  ---
!
      HCX = 0.D+0
      DO I = 0,5
        HCX = HCX + COBX(I+1)*(TX**I)
      ENDDO
      DHCX = 0.D+0
      DO I = 1,5
        DHCX = DHCX + REAL(I)*COBX(I+1)*(TX**(I-1))
      ENDDO
!
!---  Empirical formulation by Battistelli for salting-out
!     coefficient for NaCl aqueous solutions as a function
!     of temperature  ---
!
      SKBX = 0.D+0
      DO I = 0,4
        SKBX = SKBX + COCX(I+1)*(TX**I)
      ENDDO
      DSKBX = 0.D+0
      DO I = 1,4
        DSKBX = DSKBX + REAL(I)*COCX(I+1)*(TX**(I-1))
      ENDDO
!
!---  Empirical formulation by Battistelli for Henry's coefficient
!     coefficient for NaCl aqueous solutions as a function
!     of temperature and salt molality  ---
!
      GLSX = 1.D+3*XLSX/(WTMS*(1.D+0-XLSX))
      HCX = HCX*(1.D+1**(GLSX*SKBX))
      XMLAX = MIN( MAX( (FUGAX/HCX),0.D+0 ),1.D+0 )
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of SOL_LA group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE SOL_LS( TX,XLSMX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     This subroutine calculates the mass fraction of NaCl salt in
!     saturated aqueous solutions.
!
!     McKibbin, R., and A. McNabb.  1993.  Modeling the phase
!     boundaries and fluid properties of the system H2O-NaCl at high
!     temperatures and pressures.  Proceedings 15th NZ Geothermal
!     Workshop, University of Auckland, New Zealand.
!
!     Temperature range 0-800 C.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 2 April 2002.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 SFX(3)
!
!----------------------Data Statements---------------------------------!
!
      DATA SFX / 2.6218D-1, 7.2D-5, 1.06D-6 /
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/SOL_LS'
!
!---  Maximum NaCl saturation  ---
!
      XLSMX = SFX(1) + SFX(2)*TX + SFX(3)*(TX**2)
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of SOL_LS group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE SOL_LN( TX,FUGNX,XLSX,XMLNX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Solubility of N2 in NaCl aqueous solutions as a function
!     of temperature, salt mass fraction, and CO2 fugacity.
!
!     Battistelli, A., C. Claudio, and K. Pruess.  1997.  The simulator
!     TOUGH2/EWASG for modelling geothermal reservoirs with brines and
!     noncondensible gas.  Geothermics, 26(4): 437-464.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 6 August 2012.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 COBX(6),COCX(5)
      REAL*8 CHBX(4),CHCX(4)
!
!----------------------Data Statements---------------------------------!
!
      DATA COBX / 143708218.,7.46970E8,-8212103.26,1731.22092,
     &  371.7169532,-1.41440761/
      DATA COCX / .255021593,-.0089568,1.708820E-4,-1.3136E-6,
     &  3.524175E-9 /
      DATA CHBX / -3.65183D+2, 1.81067D+4, 4.97554D+1, -2.85D-4 /
      DATA CHCX / 1.668D-1, -1.09236D-3, 7.81043D-6, -1.52343D-8 /
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/SOL_LN'
!
!---  Empirical formulation by Battistelli for Henry's coefficient
!     for pure water as a function of temperature  ---
!
      HCX = 0.D+0
      DO I = 0,5
        HCX = HCX + COBX(I+1)*(TX**I)
      ENDDO
      DHCX = 0.D+0
      DO I = 1,5
        DHCX = DHCX + REAL(I)*COBX(I+1)*(TX**(I-1))
      ENDDO
!
!---  Empirical formulation by Battistelli for salting-out
!     coefficient for NaCl aqueous solutions as a function
!     of temperature  ---
!
      SKBX = 0.D+0
      DO I = 0,4
        SKBX = SKBX + COCX(I+1)*(TX**I)
      ENDDO
      DSKBX = 0.D+0
      DO I = 1,4
        DSKBX = DSKBX + REAL(I)*COCX(I+1)*(TX**(I-1))
      ENDDO
!
!---  Empirical formulation by Battistelli for Henry's coefficient
!     coefficient for NaCl aqueous solutions as a function
!     of temperature and salt molality  ---
!
      GLSX = 1.D+3*XLSX/(WTMS*(1.D+0-XLSX))
      HCX = HCX*(1.D+1**(GLSX*SKBX))
      XMLNX = MIN( MAX( (FUGNX/HCX),0.D+0 ),1.D+0 )
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of SOL_LN group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE SOL_LO( TX,FUGOX,XLSX,XMLOX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Solubility of CH4 in NaCl aqueous solutions as a function
!     of temperature, salt mass fraction, and CH4 fugacity.
!
!     Sloan, E. D., Jr.  1997.  Clathrate Hydrates of Natural Gases.
!     Marcel Dekker, Inc., New York.
!
!     Battistelli, A., C. Claudio, and K. Pruess.  1997.  The simulator
!     TOUGH2/EWASG for modelling geothermal reservoirs with brines and
!     noncondensible gas.  Geothermics, 26(4): 437-464.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 6 August 2012.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 CHBX(4),CHCX(4)
!
!----------------------Data Statements---------------------------------!
!
      DATA CHBX / -3.65183D+2, 1.81067D+4, 4.97554D+1, -2.85D-4 /
      DATA CHCX / 1.668D-1, -1.09236D-3, 7.81043D-6, -1.52343D-8 /
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/SOL_LO'
!
!---  The formulation by Sloan for Henry's coefficient of methane 
!     for pure water as a function of temperature  ---
!
      TKX = TX + TABS
      RCX = 1.9872
      HCX = (CHBX(1)/RCX) + (CHBX(2)/(RCX*TKX)) +
     &  ((CHBX(3)/RCX)*LOG(TKX)) + (CHBX(4)*TKX/RCX)
      DHCX = (CHBX(2)/(RCX*(TKX**2))) -
     &  (CHBX(3)/(RCX*TKX)) - (CHBX(4)/RCX)
      HCX = EXP(-HCX)
      HCX = HCX*PATM
      DHCX = DHCX*HCX
!
!---  Empirical formulation for salting-out coefficient for 
!     NaCl aqueous solutions as a function of temperature  
!
      SKBX = 0.D+0
      DO I = 0,3
        SKBX = SKBX + CHCX(I+1)*(TX**I)
      ENDDO
      DSKBX = 0.D+0
      DO I = 1,3
        DSKBX = DSKBX + REAL(I)*CHCX(I+1)*(TX**(I-1))
      ENDDO
!
!---  Empirical formulation by Battistelli for Henry's coefficient
!     coefficient for NaCl aqueous solutions as a function
!     of temperature and salt molality  ---
!
      GLSX = 1.D+3*XLSX/(WTMS*(1.D+0-XLSX))
      HCX = HCX*(1.D+1**(GLSX*SKBX))
      XMLOX = MIN( MAX( (FUGOX/HCX),0.D+0 ),1.D+0 )
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of SOL_LO group  ---
!
      RETURN
      END


!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE SP_A( TX,PVAX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Sublimation-vapor pressure of CO2.
!
!     Span, R., and W. Wagner.  1996.  A New Equation of State for
!     Carbon Dioxide Covering the Fluid Region from the Triple-Point
!     to 1100 K at Pressures up to 800 MPa.  J. Phys. Chem. Ref. Data
!     25(6):1509-1588.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 2 September 2004.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 A_C(3),B_C(4)
!
!----------------------Data Statements---------------------------------!
!
      DATA A_C / -14.740846D+0,2.4327015D+0,-5.3061778D+0 /
      DATA B_C / -7.0602087D+0,1.9391218D+0,-1.6463597D+0,
     &  -3.2995634D+0 /
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/SP_A'
!
!---  Absolute temperature  ---
!
      TKX = TX + TABS
!
!---  Triple-point and critical temperature  ---
!
      TTX = 216.592D+0
      TCX = 304.1282D+0
!
!---  Sublimation pressure  ---
!
      IF( TKX.LT.TTX ) THEN
        PTX = 0.51795D+6
        TRX = TKX/TTX
        PVAX = PTX*EXP((TTX/TKX)*(A_C(1)*(1.D+0-TRX) + 
     &    A_C(2)*((1.D+0-TRX)**1.9D+0) + A_C(3)*((1.D+0-TRX)**2.9D+0)))
!
!---  Vapor pressure  ---
!
      ELSE
        PCX = 7.3773D+6
        TRX = TKX/TCX
        IF( TKX.LT.TCX ) THEN
          PVAX = PCX*EXP((TCX/TKX)*(B_C(1)*(1.D+0-TRX) + 
     &      B_C(2)*((1.D+0-TRX)**1.5D+0) + 
     &      B_C(3)*((1.D+0-TRX)**2.0D+0) +
     &      B_C(4)*((1.D+0-TRX)**4.0D+0)))
        ELSE
          PVAX = PCX
        ENDIF
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of SP_A group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE SP_B( TX,XLSX,PSBX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     This subroutine calculates the saturation pressure of NaCl brine
!     as a function of temperature and salt concentration.
!
!     tx - temperature, C
!     xlsx - mass fraction of NaCl salt
!     psbx - saturation pressure of brine, Pa
!
!     Haas, J.L., Jr.  1976.  Physical Properties of the Coexisting
!     Phases and Thermochemical Properties of the H2O Component in
!     Boiling NaCl Solutions, U.S. Geological Survey Bulletin, 1421-A,
!     United States Government Printing Office, Washington.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 1 April 2002.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 SAX(3),SBX(5)
!
!----------------------Data Statements---------------------------------!
!
      DATA SAX / 5.93582D-6, -5.19386D-5, 1.23156D-5 /
      DATA SBX / 1.15420D-6, 1.41254D-7, -1.92476D-8, -1.70717D-9,
     &  1.05390D-10 /
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/SP_B'
!
!---  Convert temperature to Kelvin and mass fraction to molality  ---
!
      TKX = TX + TABS
      GLSX = 1.D+3*XLSX/(WTMS*(1.D+0-XLSX))
!
!---  Concentration dependent coefficients  ---
!
      AX = 1.D+0
      DO I = 1,3
        AX = AX + SAX(I)*(GLSX**I)
      ENDDO
      BX = 0.D+0
      DO I = 1,5
        BX = BX + SBX(I)*(GLSX**I)
      ENDDO
!
!---  Temperature dependent coefficient  ---
!
      CX = 1.D+0/(AX + BX*TKX)
!
!---  Equivalent pure water temperature  ---
!
      TWX = EXP( CX*LOG(TKX) ) - TABS
      CALL SP_W( TWX,PSBX )
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of SP_B group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE SP_O( TX,PVOX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Vapor pressure of CH4.
!
!     Setzmann, U., and W. Wagner.  1991.  A New Equation of State and
!     Tables of Thermodynamic Properties for Methane Covering the
!     Range from the Melting Line to 625 K at Pressures up to 1000 MPa.
!     J. Phys. Chem. Ref. Data 20(6):1061-1155.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 8 October 2004.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 A_C(4)
!
!----------------------Data Statements---------------------------------!
!
      DATA TCROX,PCROX / 190.564D+0,4.5992D+6 /
      DATA A_C / -6.036219D+0,1.409353D+0,-0.4945199D+0,-1.443048D+0 /
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/SP_O'
!
!---  Absolute temperature  ---
!
      TKX = TX + TABS
      TRX = TKX/TCROX
      THX = 1.D+0 - TRX
!
!---  Vapor pressure  ---
!
      PVOX = PCROX*EXP( (TCROX/TKX)*(A_C(1)*THX + A_C(2)*(THX**1.5D+0)
     &  + A_C(3)*(THX**2) + A_C(4)*(THX**4.5D+0)) )
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of SP_O group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE SP_W( TX,PSWX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Saturation pressure (Pa) of pure water as a function of
!     temperature.
!
!     Meyer, C.A., R.B. McClintock, G.J. Silvestri, and R.C. Spencer
!     1993.  ASME Steam Tables, The American Society of Mechanical
!     Engineers, New York.
!
!     Buck, A. L.  1981.  New equations for computing vapor pressure
!     and enhancement factor.  Journal of Applied Meterology, 
!     20:1527-1532.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 18 March 2002.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 K(9),PSWX,THETAX,THETAY,TX
      INTEGER I
!
!----------------------Data Statements---------------------------------!
!
      DATA K / -7.691234564D+0, -2.608023696D+1, -1.681706546D+2,
     &  6.423285504D+1, -1.189646225D+2, 4.167117320D+0,
     &  2.097506760D+1, 1.D+9, 6.D+0 /
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/SP_W'
!
!---  Merge functions above and below freezing point  ---
!
      VARX = MAX( MIN( 5.D-1*(1.D+0+TX),1.D+0 ), 0.D+0 )
!
!---  The K-function (saturation line)  ---
!
      THETAX = (TX+TABS)/TCRW
      THETAY = (1.D+0-THETAX)
      PSWX = 0.D+0
      DO I = 1,5
        PSWX = PSWX + K(I)*(THETAY**I)
      ENDDO
      PSWX = PSWX/((1.D+0 + K(6)*THETAY + K(7)*(THETAY**2))*THETAX)
      PSWX = PSWX - THETAY/(K(8)*(THETAY**2)+K(9))
      PSWX = VARX*EXP(PSWX)*PCRW
!
!---  Buck formulation  ---
!
      PSWX = PSWX + (1.D+0-VARX)*6.1121D+2*EXP(17.502*TX/(240.97+TX))
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of SP_W group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE SPLIN2( X1A,X2A,YA,Y2A,X1,X2,Y,LM,LN,M,N )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Given an M by N tabulated function YA, and tabulated independent
!     variables X1A(M values) and X2A (N values), and the second 
!     derivatives in the array, Y2A of the one dimensional natural
!     cubic splines of the rows of YA; and given a desired interpolating
!     point X1, X2; this routine returns an interpolated function value
!     Y by bicubic spline interpolation.
!
!     Press, W.H., B.P. Flannery, S.A. Teukolsky, and W.T. Vetterling.
!     1986.  Numerical Recipes, The Art of Scientific Computing,
!     Cambridge University Press, Cambridge.  pp. 101.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 14 May 2012.
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Parameter Statements----------------------------!
!
      PARAMETER(LSPLINE=256)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 X1A(M),X2A(N)
      REAL*8 YA(LM,LN),Y2A(LM,LN)
      REAL*8 YTMP(LSPLINE),Y2TMP(LSPLINE),YYTMP(LSPLINE)
!
!----------------------Executable Lines--------------------------------!
!
      DO J = 1,M
        DO K = 1,N
          YTMP(K) = YA(J,K)
          Y2TMP(K) = Y2A(J,K)
        ENDDO
        CALL SPLINT( X2A,YTMP,Y2TMP,N,X2,YYTMP(J) )
      ENDDO
      CALL SPLINE( X1A,YYTMP,M,Y2TMP )
      CALL SPLINT( X1A,YYTMP,Y2TMP,M,X1,Y )
!
!---  End of SPLIN2 group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE SPLINE( X,Y,N,Y2 )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Cubic spline second derivative.
!
!     Press, W.H., B.P. Flannery, S.A. Teukolsky, and W.T. Vetterling.
!     1986.  Numerical Recipes, The Art of Scientific Computing,
!     Cambridge University Press, Cambridge.  pp. 86-89.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 27 July 2002.
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Parameter Statements----------------------------!
!
      PARAMETER(LSPLINE=256)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 X(N),Y(N),Y2(N)
      REAL*8 U(LSPLINE)
!
!----------------------Executable Lines--------------------------------!
!
      IF( N.EQ.1 ) THEN
        Y2(1) = 0.D+0
        RETURN
      ENDIF
      Y2(1) = 0.D+0
      U(1) = 0.D+0
      DO I = 2,N-1
        SIG = (X(I)-X(I-1))/(X(I+1)-X(I-1))
        P = SIG*Y2(I-1)+2.D+0
        Y2(I) = (SIG-1.D+0)/P
        U(I) = (6.D+0*((Y(I+1)-Y(I))/(X(I+1)-X(I)) -
     &    (Y(I)-Y(I-1))/(X(I)-X(I-1)))/
     &    (X(I+1)-X(I-1)) - SIG*U(I-1))/P
      ENDDO
      QN = 0.D+0
      UN = 0.D+0
      Y2(N) = (UN-QN*U(N-1))/(QN*Y2(N-1)+1.D+0)
      DO K = N-1,1,-1
        Y2(K) = Y2(K)*Y2(K+1)+U(K)
      ENDDO
!
!---  End of SPLINE group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE SPLINT( XA,YA,Y2A,N,X,Y )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Cubic spline interpolation.
!
!     Press, W.H., B.P. Flannery, S.A. Teukolsky, and W.T. Vetterling.
!     1986.  Numerical Recipes, The Art of Scientific Computing,
!     Cambridge University Press, Cambridge.  pp. 86-89.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 27 July 2002.
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 XA(N),YA(N),Y2A(N)
!
!----------------------Executable Lines--------------------------------!
!
      IF( N.EQ.1 ) THEN
        Y = YA(1)
        RETURN
      ELSEIF( X.LE.XA(1) ) THEN
        Y = YA(1)
        RETURN
      ELSEIF( X.GE.XA(N) ) THEN
        Y = YA(N)
        RETURN
      ENDIF
      KLO = 1
      KHI = N
      DO
        IF( KHI-KLO.GT.1 ) THEN
          K = (KHI+KLO)/2
          IF( XA(K).GT.X ) THEN
            KHI = K
          ELSE
            KLO = K
          ENDIF
        ELSE
          EXIT
        ENDIF
      ENDDO
      H = XA(KHI)-XA(KLO)
      A = (XA(KHI)-X)/H
      B = (X-XA(KLO))/H
      Y = A*YA(KLO)+B*YA(KHI)+
     &    ((A**3-A)*Y2A(KLO)+(B**3-B)*Y2A(KHI))*(H**2)/6.D+0
!
!---  End of SPLINT group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE SR_W( TX,PX,ISRX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Formulation subregion as a function of temperature and pressure.
!
!     Meyer, C.A., R.B. McClintock, G.J. Silvestri, and R.C. Spencer
!     1993.  ASME Steam Tables, The American Society of Mechanical
!     Engineers, New York.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 18 March 2002.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 LFCX(3),PSWX,PSRBX,THETAX,TOLX
      INTEGER ISRX
!
!----------------------Data Statements---------------------------------!
!
      DATA LFCX / 1.574373327D+1, -3.417061978D+1, 1.931380707D+1 /
      DATA TOLX / 1.D-2 /
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/SR_W'
!
!---  Subcritical-critical temperature  ---
!
      TKX = TX+TABS
      IF( TKX.LE.TCRW ) THEN
!
!---    The K-function (saturation line)  ---
!
        CALL SP_W( TX,PSWX )
!
!---    Subregions 5/6 and 1/4 boundaries  ---
!
        IF( TX.LE.350.D+0 ) THEN
          IF( (PX-PSWX).GE.TOLX ) THEN
            ISRX = 1
          ELSEIF( (PX-PSWX).LE.-TOLX ) THEN
            ISRX = 2
          ELSE
            ISRX = 6
          ENDIF
        ELSE
          IF( (PX-PSWX).GE.TOLX ) THEN
            ISRX = 4
          ELSEIF( (PX-PSWX).LE.-TOLX ) THEN
            ISRX = 2
          ELSE
            ISRX = 5
          ENDIF
        ENDIF
!
!---  Supercritical temperature  ---
!
      ELSE
!
!---    The L-function (subregions 2/3 boundary)  ---
!
        THETAX = TKX/TCRW
        PSRBX = PCRW*(LFCX(1) + LFCX(2)*THETAX + LFCX(3)*(THETAX**2))
        ISRX = 2
        IF( PX.GT.PSRBX ) ISRX = 3
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of SR_W group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE SRK_CT( AIX,TKX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Soave-Redlich-Kwong temperature-dependent constants for mixtures.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 10 April 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 AIX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/SRK_CT'
      DO IGC = 1,NGC+2
        TRX = TKX/GCPP(3,IGC)
        AIX(IGC) = GCPP(13,IGC)*
     &    (1.D+0 + GCPP(15,IGC)*(1.D+0 - SQRT(TRX)))**2
      ENDDO
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of SRK_CT group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE SRK_CX( AX,AIX,BX,XMCX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Soave-Redlich-Kwong composition-dependent constants for mixtures.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 10 April 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE EOR
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 AIX(LNGC),XMCX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/SRK_CX'
      AX = 0.D+0
      BX = 0.D+0
      DO IGC = 1,NGC+2
        DO JGC = 1,NGC+2
          AIJX = SQRT(AIX(IGC)*AIX(JGC))*(1.D+0-BIPC(IGC,JGC))
!          AIJX = SQRT(AIX(IGC)*AIX(JGC))
          AX = AX + XMCX(IGC)*XMCX(JGC)*AIJX
        ENDDO
        BX = BX + XMCX(IGC)*GCPP(14,IGC)
      ENDDO
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of SRK_CX group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE SRK_FUG( AX,AIX,BX,CAX,CBX,FUGX,XMCX,ZX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Fugacity coefficient for the Soave-Redlich-Kwong cubic equation
!     of state.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 15 March 2012
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE EOR
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 AIX(LNGC),FUGX(LNGC),XMCX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/SRK_FUG'
      IF( CAX.GT.EPSL ) THEN
        DO IGC = 1,NGC+2
          V1X = -LOG(ZX-CBX)
          V2X = (ZX-1.D+0)*GCPP(14,IGC)/BX
          V3X = CAX/CBX
          V4X = 2.D+0*SQRT(AIX(IGC))/AX
          V5X = 0.D+0
          DO JGC = 1,NGC+2
            V5X = V5X + XMCX(JGC)*SQRT(AIX(JGC))*(1.D+0-BIPC(IGC,JGC))
!            V5X = V5X + XMCX(JGC)*SQRT(AIX(JGC))
          ENDDO
          V6X = GCPP(14,IGC)/BX
          V7X = (1.D+0+(BX/ZX))
          V3X = V3X*(V4X*V5X-V6X)*LOG( V7X )
          FUGX(IGC) = EXP( V1X + V2X - V3X )
        ENDDO
      ELSE
        DO IGC = 1,NGC+2
          FUGX(IGC) = 1.D+0
        ENDDO
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of SRK_FUG group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE SRK_Z( AX,BX,CAX,CBX,PX,TKX,ZX,INDX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Soave-Redlich-Kwong compressibility.
!
!     INDX = 1 Gas
!     INDX = 2 Liquid
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 15 March 2012
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/SRK_Z'
      CAX = AX*PX/((RCU*TKX)**2)
      CBX = BX*PX/(RCU*TKX)
!
!---  Soave-Redlich-Kwong cubic function for Z  ---
!
      C3X = 1.D+0
      C2X = -1.D+0
      C1X = (CAX - CBX + CBX**2)
      C0X = -CAX*CBX
!
!---  Direct cubic equation solve  ---
!
      CALL NICKALLS( C3X,C2X,C1X,C0X,R1X,R2X,R3X )
!
!---  Gas  ---
!
      IF( INDX.EQ.1 ) THEN
        ZX = MAX(R1X,R2X,R3X)
!
!---  Liquid  ---
!
      ELSEIF( INDX.EQ.2 ) THEN
        ZX = MIN(R1X,R2X,R3X)
!
!---  Ideal gas  ---
!
      ELSE
        ZX = 1.D+0
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of SRK_Z group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE STABILITY( FKX,PX,TKX,XMCX,YMCX,ZMCX,INDX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Michlesen phase stability analysis.
!     Michlesen, M. 1981. The Isothermal Flash Problem. 
!     Part 1. Stability. Fluid Phase Equilibria, 9 (1982) 1-19.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 6 May 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 AIX(LNGC),FKX(LNGC),XMCX(LNGC),YMCX(LNGC),ZMCX(LNGC)
      REAL*8 FUGGX(LNGC),FUGNX(LNGC)
      REAL*8 HGX(LNGC),HNX(LNGC),HZX(LNGC)
      REAL*8 CYX(LNGC)
      REAL*8 ALPX(LNGC),ALPOX(LNGC),FX(LNGC),FOX(LNGC),GX(LNGC),SX(LNGC)
!      REAL*8 AJ(LNGC,LNGC),BJ(LNGC),GX(LNGC,LNGC+1),CYY(LNGC)
!      INTEGER IJ(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/STABILITY'
      INDX = 0
!
!---  Soave-Redlich-Kwong temperature dependent component 
!     coefficients  ---
!
      IF( ISLC(68).EQ.2 ) THEN
        CALL SRK_CT( AIX,TKX )
!
!---  Peng-Robinson temperature dependent component 
!     coefficients  ---
!
      ELSE
        CALL PR_CT( AIX,TKX )
      ENDIF
!
!---  Soave-Redlich-Kwong equation of state  ---
!
      IF( ISLC(68).EQ.2 ) THEN
!
!---    Gas mixture coefficients  ---
!
        CALL SRK_CX( AGX,AIX,BGX,ZMCX )
!
!---    Liquid mixture coefficients  ---
!
        CALL SRK_CX( ANX,AIX,BNX,ZMCX )
!
!---    Gas mixture compressibility  ---
!
        JNDX = 1
        CALL SRK_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
!
!---    Liquid mixture compressibility  ---
!
        JNDX = 2
        CALL SRK_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
!
!---    Gas mixture fugacity coefficient  ---
!
        CALL SRK_FUG( AGX,AIX,BGX,CAGX,CBGX,FUGGX,ZMCX,ZGX )
!
!---    Liquid mixture fugacity coefficient  ---
!
        CALL SRK_FUG( ANX,AIX,BNX,CANX,CBNX,FUGNX,ZMCX,ZNX )
!
!---  Peng-Robinson equation of state  ---
!
      ELSE
!
!---    Gas mixture coefficients  ---
!
        CALL PR_CX( AGX,AIX,BGX,ZMCX )
!
!---    Liquid mixture coefficients  ---
!
        CALL PR_CX( ANX,AIX,BNX,ZMCX )
!
!---    Gas mixture compressibility  ---
!
        JNDX = 1
        CALL PR_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
!
!---    Liquid mixture compressibility  ---
!
        JNDX = 2
        CALL PR_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
!
!---    Gas mixture fugacity coefficient  ---
!
        CALL PR_FUG( AGX,AIX,BGX,CAGX,CBGX,FUGGX,ZMCX,ZGX )
!
!---    Liquid mixture fugacity coefficient  ---
!
        CALL PR_FUG( ANX,AIX,BNX,CANX,CBNX,FUGNX,ZMCX,ZNX )
      ENDIF
!
!---  h-factors and Gibbs energy  ---
!
      GEGX = 0.D+0
      GENX = 0.D+0
      DO IGC = 1,NGC+2
        HGX(IGC) = 0.D+0
        HNX(IGC) = 0.D+0
        IF( ZMCX(IGC).GT.EPSL ) THEN
          HGX(IGC) = LOG(ZMCX(IGC)) + LOG(FUGGX(IGC))
          HNX(IGC) = LOG(ZMCX(IGC)) + LOG(FUGNX(IGC))
          GEGX = GEGX + ZMCX(IGC)*HGX(IGC)
          GENX = GENX + ZMCX(IGC)*HNX(IGC)
        ENDIF
      ENDDO
!
!---  In case the compressibility factor equation has multiple
!     roots, the root corresponding to the state with the lower
!     Gibbs energy is selected (Michelsen, M.L., 1982, 
!     The Isothermal Flash Problem. Part I. Stability. Fluid Phase 
!     Equilibria, 9:1-19.)
!
!     Mulitple roots, gas yields lower Gibbs energy  ---
!
      IF( (GENX-GEGX).GT.1.D-9 ) THEN
        ICHK = -2
        INDX = -1
        DO IGC = 1,NGC+2
          HZX(IGC) = 0.D+0
          IF( ZMCX(IGC).GT.EPSL ) THEN
            HZX(IGC) = HGX(IGC)
          ENDIF
        ENDDO
!
!---   Mulitple roots, liquid yields lower Gibbs energy  ---
!
      ELSEIF( (GEGX-GENX).GT.1.D-9 ) THEN
        ICHK = 2
        INDX = 1
        DO IGC = 1,NGC+2
          HZX(IGC) = 0.D+0
          IF( ZMCX(IGC).GT.EPSL ) THEN
            HZX(IGC) = HNX(IGC)
          ENDIF
        ENDDO
!
!---  Trival solution  ---
!
      ELSE
        BX = BGX
        ZX = ZGX
        VMX = ZX*RCU*TKX/PX
!
!---    Trival solution w/ liquid criteria,
!       only check for stable liquid  ---
!
        IF( (VMX/BX).LE.1.75D+0 ) THEN
          ICHK = 2
          INDX = 1
          DO IGC = 1,NGC+2
            HZX(IGC) = 0.D+0
            IF( ZMCX(IGC).GT.EPSL ) THEN
              HZX(IGC) = HNX(IGC)
            ENDIF
          ENDDO
!
!---    Trival solution w/ liquid criteria,
!       check for stable liquid and vapor  ---
!
        ELSEIF( (VMX/BX).LE.3.5D+0 ) THEN
          ICHK = 1
          INDX = 1
          DO IGC = 1,NGC+2
            HZX(IGC) = 0.D+0
            IF( ZMCX(IGC).GT.EPSL ) THEN
              HZX(IGC) = HNX(IGC)
            ENDIF
          ENDDO
!
!---    Trival solution w/ vapor criteria,
!       check for stable vapor and liquid  ---
!
        ELSEIF( (VMX/BX).LE.5.25D+0 ) THEN
          ICHK = -1
          INDX = -1
          DO IGC = 1,NGC+2
            HZX(IGC) = 0.D+0
            IF( ZMCX(IGC).GT.EPSL ) THEN
              HZX(IGC) = HGX(IGC)
            ENDIF
          ENDDO
!
!---    Trival solution w/ vapor criteria,
!       only check for stable vapor  ---
!
        ELSE
          ICHK = -2
          INDX = -1
          DO IGC = 1,NGC+2
            HZX(IGC) = 0.D+0
            IF( ZMCX(IGC).GT.EPSL ) THEN
              HZX(IGC) = HGX(IGC)
            ENDIF
          ENDDO
        ENDIF
      ENDIF
!
!---  Check for stable liquid  ---
!
      DO
      IF( ICHK.GE.1 ) THEN
!
!---    Vapor side initial estimate of Y, 
!       using estimates of K-factors  ---
!
        SCYX = 0.D+0
        DO IGC = 1,NGC+2
          FKX(IGC) = (GCPP(4,IGC)/PX)*EXP(5.42D+0*(1.D+0 - 
     &      (GCPP(3,IGC)/TKX)))
          CYX(IGC) = ZMCX(IGC)*FKX(IGC)
          SCYX = SCYX + CYX(IGC)
        ENDDO
!
!---    Convert mole numbers to mole fractions  ---
!
        DO IGC = 1,NGC+2
          YMCX(IGC) = CYX(IGC)/SCYX
        ENDDO
!
!---    Soave-Redlich-Kwong equation of state  ---
!
        IF( ISLC(68).EQ.2 ) THEN
!
!---      Gas mixture coefficients  ---
!
          CALL SRK_CX( AGX,AIX,BGX,YMCX )
!
!---      Gas mixture compressibility  ---
!
          JNDX = 1
          CALL SRK_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
!
!---      Gas mixture fugacity coefficient  ---
!
          CALL SRK_FUG( AGX,AIX,BGX,CAGX,CBGX,FUGGX,YMCX,ZGX )
!
!---    Peng-Robinson equation of state  ---
!
        ELSE
!
!---      Gas mixture coefficients  ---
!
          CALL PR_CX( AGX,AIX,BGX,YMCX )
!
!---      Gas mixture compressibility  ---
!
          JNDX = 1
          CALL PR_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
!
!---      Gas mixture fugacity coefficient  ---
!
          CALL PR_FUG( AGX,AIX,BGX,CAGX,CBGX,FUGGX,YMCX,ZGX )
        ENDIF      
!
!---    Initialize variables  ---
!
        DO IGC = 1,NGC+2
          IF( ZMCX(IGC).GT.EPSL ) THEN
            ALPOX(IGC) = 2.D+0*SQRT(CYX(IGC))
            FOX(IGC) = (5.D-1*ALPOX(IGC))*(LOG(FUGGX(IGC)) + 
     &        LOG(CYX(IGC)) - HZX(IGC))
            ALPX(IGC) = 2.D+0*EXP(5.D-1*(HZX(IGC)-LOG(FUGGX(IGC))))
          ENDIF
        ENDDO
!
!---    Top of BFGS-quasi Newton loop   ---
!
        NC = 0
        ISKIP = 0
        DO
          NC = NC + 1
!
!---      Update mole numbers  ---
!
          SCYX = 0.D+0
          DO IGC = 1,NGC+2
            IF( ZMCX(IGC).GT.EPSL ) THEN
              CYX(IGC) = 2.5D-1*(ALPX(IGC)**2)
              SCYX = SCYX + CYX(IGC)
            ENDIF
          ENDDO
!
!---      Convert mole numbers to mole fractions  ---
!
          DO IGC = 1,NGC+2
            YMCX(IGC) = CYX(IGC)/SCYX
          ENDDO
!
!---      Soave-Redlich-Kwong equation of state  ---
!
          IF( ISLC(68).EQ.2 ) THEN
!
!---        Gas mixture coefficients  ---
!
            CALL SRK_CX( AGX,AIX,BGX,YMCX )
!
!---        Gas mixture compressibility  ---
!
            JNDX = 1
            CALL SRK_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
!
!---        Gas mixture fugacity coefficient  ---
!
            CALL SRK_FUG( AGX,AIX,BGX,CAGX,CBGX,FUGGX,YMCX,ZGX )
!
!---      Peng-Robinson equation of state  ---
!
          ELSE
!
!---        Gas mixture coefficients  ---
!
            CALL PR_CX( AGX,AIX,BGX,YMCX )
!
!---        Gas mixture compressibility  ---
!
            JNDX = 1
            CALL PR_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
!
!---        Gas mixture fugacity coefficient  ---
!
            CALL PR_FUG( AGX,AIX,BGX,CAGX,CBGX,FUGGX,YMCX,ZGX )
          ENDIF      
!
!---      Update the variables  ---
!
          DP1X = 0.D+0
          DP2X = 0.D+0
          DP3X = 0.D+0
          DP4X = 0.D+0
          DO IGC = 1,NGC+2
            IF( ZMCX(IGC).GT.EPSL ) THEN
              FX(IGC) = (5.D-1*ALPX(IGC))*(LOG(FUGGX(IGC)) 
     &          + LOG(CYX(IGC)) - HZX(IGC))
              GX(IGC) = FX(IGC)-FOX(IGC)
              FOX(IGC) = FX(IGC)
              SX(IGC) = ALPX(IGC)-ALPOX(IGC)
              ALPOX(IGC) = ALPX(IGC)
              DP1X = DP1X + SX(IGC)*GX(IGC)
              DP2X = DP2X + (SX(IGC)-GX(IGC))*FX(IGC)
              DP3X = DP3X + GX(IGC)*GX(IGC)
              DP4X = DP4X + SX(IGC)*FX(IGC)
            ENDIF
          ENDDO
          DALPMX = 0.D+0
          BETAX = 0.D+0
          TPDPX = 1.D+0
          DO IGC = 1,NGC+2
            IF( ZMCX(IGC).GT.EPSL ) THEN
              ALPX(IGC) = ALPX(IGC) - (FX(IGC) + 
     &         ((DP2X + DP3X*DP4X/DP1X)/DP1X)*SX(IGC) - 
     &         (DP4X/DP1X)*GX(IGC))
              DALPMX = MAX( DALPMX,ABS(ALPX(IGC)-ALPOX(IGC)) )
              VARX = LOG(FUGGX(IGC)) + LOG(CYX(IGC)) - HZX(IGC)
              BETAX = BETAX + (CYX(IGC)-ZMCX(IGC))*VARX
              TPDPX = TPDPX + CYX(IGC)*(VARX-1.D+0)
            ENDIF
          ENDDO
          RX = 2.D+0*TPDPX/BETAX
!
!---      Trivial solution check  ---
!
          IF( ABS(RX-1.D+0).LT.2.D-1 ) THEN
            DO IGC = 1,NGC+2
              YMCX(IGC) = ZMCX(IGC)
            ENDDO
            SCYX = 1.D+0
            ISKIP = 1
            EXIT
          ENDIF
!
!---      Convergence check  ---
!
          IF( DALPMX.LT.1.D-3 .AND. SCYX.GT.1.D+1 ) EXIT
          IF( DALPMX.LE.1.D-7 ) EXIT
        ENDDO
!
!---    Update mole numbers  ---
!
        IF( ISKIP.EQ.0 ) THEN
          SCYX = 0.D+0
          DO IGC = 1,NGC+2
            IF( ZMCX(IGC).GT.EPSL ) THEN
              CYX(IGC) = 2.5D-1*(ALPX(IGC)**2)
              SCYX = SCYX + CYX(IGC)
            ENDIF
          ENDDO
!
!---      Convert mole numbers to mole fractions  ---
!
           DO IGC = 1,NGC+2
             YMCX(IGC) = CYX(IGC)/SCYX
           ENDDO
         ENDIF
!!
!!---    Top of direct substitution loop   ---
!!
!        NC = 0
!  126   CONTINUE
!        NC = NC + 1
!!
!!---    Soave-Redlich-Kwong equation of state  ---
!!
!        IF( ISLC(68).EQ.2 ) THEN
!!
!!---      Gas mixture coefficients  ---
!!
!          CALL SRK_CX( AGX,AIX,BGX,YMCX )
!!
!!---      Gas mixture compressibility  ---
!!
!          JNDX = 1
!          CALL SRK_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
!!
!!---      Gas mixture fugacity coefficient  ---
!!
!          CALL SRK_FUG( AGX,AIX,BGX,CAGX,CBGX,FUGGX,YMCX,ZGX )
!!
!!---    Peng-Robinson equation of state  ---
!!
!        ELSE
!!
!!---      Gas mixture coefficients  ---
!!
!          CALL PR_CX( AGX,AIX,BGX,YMCX )
!!
!!---      Gas mixture compressibility  ---
!!
!          JNDX = 1
!          CALL PR_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
!!
!!---      Gas mixture fugacity coefficient  ---
!!
!          CALL PR_FUG( AGX,AIX,BGX,CAGX,CBGX,FUGGX,YMCX,ZGX )
!        ENDIF      
!!
!!---    Corrections to mole numbers  ---
!!
!        DO IGC = 1,NGC+2
!          IF( ZMCX(IGC).GT.EPSL ) THEN
!            CYY(IGC) = EXP( HZX(IGC) - LOG(FUGGX(IGC)) ) - CYX(IGC)
!          ELSE
!            CYY(IGC) = 0.D+0
!          ENDIF
!        ENDDO
!!
!!---    Correct mole numbers  ---
!!
!        DCYMX = 0.D+0
!        SCYX = 0.D+0
!        DO IGC = 1,NGC+2
!          IF( ZMCX(IGC).GT.EPSL ) THEN
!            DCYMX = MAX( DCYMX,ABS(CYY(IGC)) )
!            CYX(IGC) = MAX( CYX(IGC)+CYY(IGC),0.D+0 )
!            SCYX = SCYX + CYX(IGC)
!          ENDIF
!        ENDDO
!!
!!---    Convert mole numbers to mole fractions  ---
!!
!        BETAX = 0.D+0
!        TPDPX = 1.D+0
!        DO IGC = 1,NGC+2
!          IF( ZMCX(IGC).GT.EPSL ) THEN
!            YMCX(IGC) = CYX(IGC)/SCYX
!            VARX = LOG(FUGGX(IGC)) + LOG(CYX(IGC)) - HZX(IGC)
!            BETAX = BETAX + (CYX(IGC)-ZMCX(IGC))*VARX
!            TPDPX = TPDPX + CYX(IGC)*(VARX-1.D+0)
!          ELSE
!            YMCX(IGC) = 0.D+0
!          ENDIF
!        ENDDO
!        RX = 2.D+0*TPDPX/BETAX
!!
!!---    Trivial solution check  ---
!!
!        IF( ABS(RX-1.D+0).LT.2.D-1 ) THEN
!          DO IGC = 1,NGC+2
!            YMCX(IGC) = ZMCX(IGC)
!          ENDDO
!          SCYX = 1.D+0
!          GOTO 146
!        ENDIF
!!
!!---    Strongly unstable liquid phase  ---
!!
!        IF( SCYX.GT.1.D+4 ) THEN
!          INDX = 2
!          ISUB_LOG = ISUB_LOG-1
!          RETURN
!        ENDIF
!!
!!---    Convergence check  ---
!!
!        IF( DCYMX.GT.1.D-4 ) GOTO 126
!!
!!---    Top of Newton-Raphson loop   ---
!!
!        NC = 0
!  140   CONTINUE
!        NC = NC + 1
!!
!!---    Increment in mole number  ---
!!
!        DCYY = 1.D-6
!!
!!---    Develop objective functions  ---
!!
!        MX = 0
!        DO M = 1,NGC+3
!          IF( M.GT.1 ) THEN
!            IF( ZMCX(M-1).LT.EPSL ) CYCLE
!          ENDIF
!          MX = MX + 1
!          SCYY = 0.D+0
!          DO IGC = 1,NGC+2
!            CYY(IGC) = CYX(IGC)
!            IF( M-1.EQ.IGC ) CYY(IGC) = CYX(IGC) + DCYY
!            SCYY = SCYY + CYY(IGC)
!          ENDDO
!!
!!---      Convert mole numbers to mole fractions  ---
!!
!          DO IGC = 1,NGC+2
!            YMCX(IGC) = CYY(IGC)/SCYY
!          ENDDO
!!
!!---      Soave-Redlich-Kwong equation of state  ---
!!
!          IF( ISLC(68).EQ.2 ) THEN
!!
!!---        Gas mixture coefficients  ---
!!
!            CALL SRK_CX( AGX,AIX,BGX,YMCX )
!!
!!---        Gas mixture compressibility  ---
!!
!            JNDX = 1
!            CALL SRK_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
!!
!!---        Gas mixture fugacity coefficient  ---
!!
!            CALL SRK_FUG( AGX,AIX,BGX,CAGX,CBGX,FUGGX,YMCX,ZGX )
!!
!!---      Peng-Robinson equation of state  ---
!!
!          ELSE
!!
!!---        Gas mixture coefficients  ---
!!
!            CALL PR_CX( AGX,AIX,BGX,YMCX )
!!
!!---        Gas mixture compressibility  ---
!!
!            JNDX = 1
!            CALL PR_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
!!
!!---        Gas mixture fugacity coefficient  ---
!!
!            CALL PR_FUG( AGX,AIX,BGX,CAGX,CBGX,FUGGX,YMCX,ZGX )
!          ENDIF
!          IGCX = 0
!          DO IGC = 1,NGC+2
!            IF( ZMCX(IGC).LT.EPSL ) GOTO 170
!            IGCX = IGCX + 1
!            IF( YMCX(IGC).GT.EPSL ) THEN
!              GX(IGCX,MX) = LOG(CYY(IGC)) + LOG(FUGGX(IGC)) - HZX(IGC)
!            ELSE
!              GX(IGCX,MX) = 0.D+0
!            ENDIF
!          ENDDO
!        ENDDO
!!
!!---    Load solution vector and Jacobian matrix for
!!       two-phase conditions  ---
!!
!        DO IGC = 1,MX-1
!          DO JGC = 1,MX-1
!            AJ(IGC,JGC) = (GX(IGC,JGC+1)-GX(IGC,1))/DCYY
!          ENDDO
!          BJ(IGC) = -GX(IGC,1)
!        ENDDO
!!
!!---    Solve linear system  ---
!!
!        JP = MX-1
!        KP = LNGC
!        CALL LUDCMP( AJ,JP,KP,IJ,DJ )
!        CALL LUBKSB( AJ,JP,KP,IJ,BJ )
!!
!!---    Update mole numbers  ---
!!
!        DCYMX = 0.D+0
!        IGCX = 0
!        BETAX = 0.D+0
!        TPDPX = 1.D+0
!        DO IGC = 1,NGC+2
!          IF( ZMCX(IGC).LT.EPSL ) CYCLE
!          IGCX = IGCX + 1
!          DCYX = BJ(IGCX)
!          CYX(IGC) = MAX( CYX(IGC)+DCYX,0.D+0 )
!          DCYMX = MAX( DCYMX,ABS(DCYX) )
!          VARX = LOG(FUGGX(IGC)) + LOG(CYX(IGC)) - HZX(IGC)
!          BETAX = BETAX + (CYX(IGC)-ZMCX(IGC))*VARX
!          TPDPX = TPDPX + CYX(IGC)*(VARX-1.D+0)
!        ENDDO
!        RX = 2.D+0*TPDPX/BETAX
!!
!!---    Trivial solution check  ---
!!
!        IF( ABS(RX-1.D+0).LT.2.D-1 .AND. NC.GT.3 ) THEN
!          DO IGC = 1,NGC+2
!            YMCX(IGC) = ZMCX(IGC)
!          ENDDO
!          SCYX = 1.D+0
!          GOTO 252
!        ENDIF
!!
!!---    Convergence check  ---
!!
!        IF( DCYMX.GT.1.D-7 ) GOTO 140
!!
!!---    Update mole numbers  ---
!!
!        SCYX = 0.D+0
!        DO IGC = 1,NGC+2
!          SCYX = SCYX + CYX(IGC)
!        ENDDO
!!
!!---    Convert mole numbers to mole fractions  ---
!!
!        DO IGC = 1,NGC+2
!          YMCX(IGC) = CYX(IGC)/SCYX
!        ENDDO
!  252   CONTINUE
!
!---    Liquid phase unstable  ---
!
        IF( SCYX.GT.1.0001D+0 ) THEN
          INDX = 2
          ISUB_LOG = ISUB_LOG-1
          RETURN
        ENDIF
!
!---    Liquid phase stable check vapor phase stability  ---
!
        IF( ICHK.EQ.1 ) THEN
          ICHK = -3
        ELSE
          ICHK = 0
        ENDIF
      ENDIF
!
!---  Check for stable vapor  ---
!
      IF( ICHK.LE.-1 ) THEN
!
!---    Liquid side initial estimate of Y, 
!       using estimates of K-factors  ---
!
        SCYX = 0.D+0
        DO IGC = 1,NGC+2
          FKX(IGC) = (GCPP(4,IGC)/PX)*EXP(5.42D+0*(1.D+0 - 
     &      (GCPP(3,IGC)/TKX)))
          CYX(IGC) = ZMCX(IGC)/FKX(IGC)
          SCYX = SCYX + CYX(IGC)
        ENDDO
!
!---    Convert mole numbers to mole fractions  ---
!
        DO IGC = 1,NGC+2
          XMCX(IGC) = CYX(IGC)/SCYX
        ENDDO
!
!---    Soave-Redlich-Kwong equation of state  ---
!
        IF( ISLC(68).EQ.2 ) THEN
!
!---      Liquid mixture coefficients  ---
!
          CALL SRK_CX( ANX,AIX,BNX,XMCX )
!
!---      Liquid mixture compressibility  ---
!
          JNDX = 2
          CALL SRK_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
!
!---      Liquid mixture fugacity coefficient  ---
!
          CALL SRK_FUG( ANX,AIX,BNX,CANX,CBNX,FUGNX,XMCX,ZNX )
!
!---    Peng-Robinson equation of state  ---
!
        ELSE
!
!---      Liquid mixture coefficients  ---
!
          CALL PR_CX( ANX,AIX,BNX,XMCX )
!
!---      Liquid mixture compressibility  ---
!
          JNDX = 2
          CALL PR_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
!
!---      Liquid mixture fugacity coefficient  ---
!
          CALL PR_FUG( ANX,AIX,BNX,CANX,CBNX,FUGNX,XMCX,ZNX )
        ENDIF
!
!---    Initialize variables  ---
!
        DO IGC = 1,NGC+2
          IF( ZMCX(IGC).GT.EPSL ) THEN
            ALPOX(IGC) = 2.D+0*SQRT(CYX(IGC))
            FOX(IGC) = (5.D-1*ALPOX(IGC))*(LOG(FUGNX(IGC)) + 
     &        LOG(CYX(IGC)) - HZX(IGC))
            ALPX(IGC) = 2.D+0*EXP(5.D-1*(HZX(IGC)-LOG(FUGNX(IGC))))
          ENDIF
        ENDDO
!
!---    Top of BFGS-quasi Newton loop   ---
!
        NC = 0
        ISKIP = 0
        DO
          NC = NC + 1
!
!---      Update mole numbers  ---
!
          SCYX = 0.D+0
          DO IGC = 1,NGC+2
            IF( ZMCX(IGC).GT.EPSL ) THEN
              CYX(IGC) = 2.5D-1*(ALPX(IGC)**2)
              SCYX = SCYX + CYX(IGC)
            ENDIF
          ENDDO
!
!---      Convert mole numbers to mole fractions  ---
!
          DO IGC = 1,NGC+2
            XMCX(IGC) = CYX(IGC)/SCYX
          ENDDO
!
!---      Soave-Redlich-Kwong equation of state  ---
!
          IF( ISLC(68).EQ.2 ) THEN
!
!---        Liquid mixture coefficients  ---
!
            CALL SRK_CX( ANX,AIX,BNX,XMCX )
!
!---        Liquid mixture compressibility  ---
!
            JNDX = 2
            CALL SRK_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
!
!---        Liquid mixture fugacity coefficient  ---
!
            CALL SRK_FUG( ANX,AIX,BNX,CANX,CBNX,FUGNX,XMCX,ZNX )
!
!---      Peng-Robinson equation of state  ---
!
          ELSE
!
!---        Liquid mixture coefficients  ---
!
            CALL PR_CX( ANX,AIX,BNX,XMCX )
!
!---        Liquid mixture compressibility  ---
!
            JNDX = 2
            CALL PR_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
!
!---        Liquid mixture fugacity coefficient  ---
!
            CALL PR_FUG( ANX,AIX,BNX,CANX,CBNX,FUGNX,XMCX,ZNX )
          ENDIF
!
!---      Update the variables  ---
!
          DP1X = 0.D+0
          DP2X = 0.D+0
          DP3X = 0.D+0
          DP4X = 0.D+0
          DO IGC = 1,NGC+2
            IF( ZMCX(IGC).GT.EPSL ) THEN
              FX(IGC) = (5.D-1*ALPX(IGC))*(LOG(FUGNX(IGC))
     &           + LOG(CYX(IGC)) - HZX(IGC))
              GX(IGC) = FX(IGC)-FOX(IGC)
              FOX(IGC) = FX(IGC)
              SX(IGC) = ALPX(IGC)-ALPOX(IGC)
              ALPOX(IGC) = ALPX(IGC)
              DP1X = DP1X + SX(IGC)*GX(IGC)
              DP2X = DP2X + (SX(IGC)-GX(IGC))*FX(IGC)
              DP3X = DP3X + GX(IGC)*GX(IGC)
              DP4X = DP4X + SX(IGC)*FX(IGC)
            ENDIF
          ENDDO
          DALPMX = 0.D+0
          BETAX = 0.D+0
          TPDPX = 1.D+0
          DO IGC = 1,NGC+2
            IF( ZMCX(IGC).GT.EPSL ) THEN
              ALPX(IGC) = ALPX(IGC) - (FX(IGC) + 
     &         ((DP2X + DP3X*DP4X/DP1X)/DP1X)*SX(IGC) - 
     &         (DP4X/DP1X)*GX(IGC))
              DALPMX = MAX( DALPMX,ABS(ALPX(IGC)-ALPOX(IGC)) )
              VARX = LOG(FUGNX(IGC)) + LOG(CYX(IGC)) - HZX(IGC)
              BETAX = BETAX + (CYX(IGC)-ZMCX(IGC))*VARX
              TPDPX = TPDPX + CYX(IGC)*(VARX-1.D+0)
            ENDIF
          ENDDO
          RX = 2.D+0*TPDPX/BETAX
!
!---      Trivial solution check  ---
!
          IF( ABS(RX-1.D+0).LT.2.D-1 ) THEN
            DO IGC = 1,NGC+2
              XMCX(IGC) = ZMCX(IGC)
            ENDDO
            SCYX = 1.D+0
            ISKIP = 1
            EXIT
          ENDIF
!
!---      Convergence check  ---
!
          IF( DALPMX.LT.1.D-3 .AND. SCYX.GT.1.D+1 ) EXIT
          IF( DALPMX.LE.1.D-7 ) EXIT
        ENDDO
!
!---    Update mole numbers  ---
!
        IF( ISKIP.EQ.0 ) THEN
          SCYX = 0.D+0
          DO IGC = 1,NGC+2
            IF( ZMCX(IGC).GT.EPSL ) THEN
              CYX(IGC) = 2.5D-1*(ALPX(IGC)**2)
              SCYX = SCYX + CYX(IGC)
            ENDIF
          ENDDO
!
!---      Convert mole numbers to mole fractions  ---
!
          DO IGC = 1,NGC+2
            XMCX(IGC) = CYX(IGC)/SCYX
          ENDDO
        ENDIF
!!
!!---    Top of direct substitution loop   ---
!!
!        NC = 0
!  326   CONTINUE
!        NC = NC + 1
!!
!!---    Soave-Redlich-Kwong equation of state  ---
!!
!        IF( ISLC(68).EQ.2 ) THEN
!!
!!---      Liquid mixture coefficients  ---
!!
!          CALL SRK_CX( ANX,AIX,BNX,XMCX )
!!
!!---      Liquid mixture compressibility  ---
!!
!          JNDX = 2
!          CALL SRK_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
!!
!!---      Liquid mixture fugacity coefficient  ---
!!
!          CALL SRK_FUG( ANX,AIX,BNX,CANX,CBNX,FUGNX,XMCX,ZNX )
!!
!!---    Peng-Robinson equation of state  ---
!!
!        ELSE
!!
!!---      Liquid mixture coefficients  ---
!!
!          CALL PR_CX( ANX,AIX,BNX,XMCX )
!!
!!---      Liquid mixture compressibility  ---
!!
!          JNDX = 2
!          CALL PR_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
!!
!!---      Liquid mixture fugacity coefficient  ---
!!
!          CALL PR_FUG( ANX,AIX,BNX,CANX,CBNX,FUGNX,XMCX,ZNX )
!        ENDIF
!!
!!---    Corrections to mole numbers  ---
!!
!        DO IGC = 1,NGC+2
!          IF( ZMCX(IGC).GT.EPSL ) THEN
!            CYY(IGC) = EXP( HZX(IGC) - LOG(FUGNX(IGC)) ) - CYX(IGC)
!          ELSE
!            CYY(IGC) = 0.D+0
!          ENDIF
!        ENDDO
!!
!!---    Correct mole numbers  ---
!!
!        DCYMX = 0.D+0
!        SCYX = 0.D+0
!        DO IGC = 1,NGC+2
!          IF( ZMCX(IGC).GT.EPSL ) THEN
!            DCYMX = MAX( DCYMX,ABS(CYY(IGC)) )
!            CYX(IGC) = MAX( CYX(IGC)+CYY(IGC),0.D+0 )
!            SCYX = SCYX + CYX(IGC)
!          ENDIF
!        ENDDO
!!
!!---    Convert mole numbers to mole fractions  ---
!!
!        DO IGC = 1,NGC+2
!          IF( ZMCX(IGC).GT.EPSL ) THEN
!            XMCX(IGC) = CYX(IGC)/SCYX
!          ENDIF
!        ENDDO
!!
!!---    Strongly unstable vapor phase  ---
!!
!        IF( SCYX.GT.1.D+4 ) THEN
!          INDX = 2
!          ISUB_LOG = ISUB_LOG-1
!          RETURN
!        ENDIF
!!
!!---    Convergence check  ---
!!
!        IF( DCYMX.GT.1.D-7 ) GOTO 326
!!
!!---    Top of Newton-Raphson loop   ---
!!
!        NC = 0
!  330   CONTINUE
!        NC = NC + 1
!!
!!---    Increment in mole number  ---
!!
!        DCYY = 1.D-6
!!
!!---    Develop objective functions  ---
!!
!        MX = 0
!        DO M = 1,NGC+3
!          IF( M.GT.1 ) THEN
!            IF( ZMCX(M-1).LT.EPSL ) CYCLE
!          ENDIF
!          MX = MX + 1
!          SCYY = 0.D+0
!          DO IGC = 1,NGC+2
!            CYY(IGC) = CYX(IGC)
!            IF( M-1.EQ.IGC ) CYY(IGC) = CYY(IGC) + DCYY
!            SCYY = SCYY + CYY(IGC)
!          ENDDO
!!
!!---      Convert mole numbers to mole fractions  ---
!!
!          DO IGC = 1,NGC+2
!            XMCX(IGC) = CYY(IGC)/SCYY
!          ENDDO
!!
!!---      Soave-Redlich-Kwong equation of state  ---
!!
!          IF( ISLC(68).EQ.2 ) THEN
!!
!!---        Liquid mixture coefficients  ---
!!
!            CALL SRK_CX( ANX,AIX,BNX,XMCX )
!!
!!---        Liquid mixture compressibility  ---
!!
!            JNDX = 2
!            CALL SRK_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
!!
!!---        Liquid mixture fugacity coefficient  ---
!!
!            CALL SRK_FUG( ANX,AIX,BNX,CANX,CBNX,FUGNX,XMCX,ZNX )
!!
!!---      Peng-Robinson equation of state  ---
!!
!          ELSE
!!
!!---        Liquid mixture coefficients  ---
!!
!            CALL PR_CX( ANX,AIX,BNX,XMCX )
!!
!!---        Liquid mixture compressibility  ---
!!
!            JNDX = 2
!            CALL PR_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
!!
!!---        Liquid mixture fugacity coefficient  ---
!!
!            CALL PR_FUG( ANX,AIX,BNX,CANX,CBNX,FUGNX,XMCX,ZNX )
!          ENDIF
!          IGCX = 0
!          DO IGC = 1,NGC+2
!            IF( ZMCX(IGC).LT.EPSL ) CYCLE
!            IGCX = IGCX + 1
!            IF( XMCX(IGC).GT.EPSL ) THEN
!              GX(IGCX,MX) = LOG(CYY(IGC)) + LOG(FUGNX(IGC)) - HZX(IGC)
!            ELSE
!              GX(IGCX,MX) = 0.D+0
!            ENDIF
!          ENDDO
!        ENDDO
!!
!!---    Load solution vector and Jacobian matrix for
!!       two-phase conditions  ---
!!
!        DO IGC = 1,MX-1
!          DO JGC = 1,MX-1
!            AJ(IGC,JGC) = (GX(IGC,JGC+1)-GX(IGC,1))/DCYY
!          ENDDO
!          BJ(IGC) = -GX(IGC,1)
!        ENDDO
!!
!!---    Solve linear system  ---
!!
!        JP = MX-1
!        KP = LNGC
!        CALL LUDCMP( AJ,JP,KP,IJ,DJ )
!        CALL LUBKSB( AJ,JP,KP,IJ,BJ )
!!
!!---    Update mole numbers  ---
!!
!        DCYMX = 0.D+0
!        IGCX = 0
!        DO IGC = 1,NGC+2
!          IF( ZMCX(IGC).LT.EPSL ) GOTO 430
!          IGCX = IGCX + 1
!          DCYX = BJ(IGCX)
!          CYX(IGC) = MAX( CYX(IGC)+DCYX,0.D+0 )
!          DCYMX = MAX( DCYMX,ABS(DCYX) )
!        ENDDO
!!
!!---    Convergence check  ---
!!
!        IF( DCYMX.GT.1.D-7 ) GOTO 330
!!
!!---    Update mole numbers  ---
!!
!        SCYX = 0.D+0
!        DO IGC = 1,NGC+2
!          SCYX = SCYX + CYX(IGC)
!        ENDDO
!!
!!---    Convert mole numbers to mole fractions  ---
!!
!        DO IGC = 1,NGC+2
!          XMCX(IGC) = CYX(IGC)/SCYX
!          IF( ZMCX(IGC)/EPSL.GT.EPSL ) THEN
!            FKX(IGC) = ZMCX(IGC)/XMCX(IGC)
!          ELSE
!            FKX(IGC) = 0.D+0
!          ENDIF
!        ENDDO
!
!---    Vapor phase unstable  ---
!
        IF( SCYX.GT.1.0001D+0 ) THEN
          INDX = -2
          ISUB_LOG = ISUB_LOG-1
          RETURN
        ENDIF
!
!---    Vapor phase stable check liquid phase stability  ---
!
        IF( ICHK.EQ.-1 ) THEN
          ICHK = 3
          CYCLE
        ENDIF
      ENDIF
      EXIT
      ENDDO
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of STABILITY group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE SSUB( AIX,BETAX,FKX,PX,TKX,XMCX,YMCX,ZMCX,IFKX,INDX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     The successive substitution method
!     Michelsen, M.L. and J.M. Mollerup. 2007. Thermodynamic Models:
!     Fundamentals and Computational Aspects. Tie-Line Publications
!     ISBN 87-989961-3-4
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 7 March 2014.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 AIX(LNGC),FKX(LNGC),XMCX(LNGC),YMCX(LNGC),ZMCX(LNGC)
      REAL*8 FUGGX(LNGC),FUGNX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/SSUB'
!
!---  K-factors computed from fugacity coefficients, if K-factors are
!     not fixed  ---
!
      IF( IFKX.LE.1 ) THEN
!
!---    Soave-Redlich-Kwong equation of state  ---
!
        IF( ISLC(68).EQ.2 ) THEN
!
!---      Gas mixture coefficients  ---
!
          CALL SRK_CX( AGX,AIX,BGX,YMCX )
!
!---      Liquid mixture coefficients  ---
!
          CALL SRK_CX( ANX,AIX,BNX,XMCX )
!
!---      Gas mixture compressibility  ---
!
          JNDX = 1
          CALL SRK_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
!
!---      Liquid mixture compressibility  ---
!
          JNDX = 2
          CALL SRK_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
!
!---      Gas mixture fugacity coefficient  ---
!
          CALL SRK_FUG( AGX,AIX,BGX,CAGX,CBGX,FUGGX,YMCX,ZGX )
!
!---      Liquid mixture fugacity coefficient  ---
!
          CALL SRK_FUG( ANX,AIX,BNX,CANX,CBNX,FUGNX,XMCX,ZNX )
!
!---    Peng-Robinson equation of state  ---
!
        ELSE
!
!---      Gas mixture coefficients  ---
!
          CALL PR_CX( AGX,AIX,BGX,YMCX )
!
!---      Liquid mixture coefficients  ---
!
          CALL PR_CX( ANX,AIX,BNX,XMCX )
!
!---      Gas mixture compressibility  ---
!
          JNDX = 1
          CALL PR_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
!
!---      Liquid mixture compressibility  ---
!
          JNDX = 2
          CALL PR_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
!
!---      Gas mixture fugacity coefficient  ---
!
          CALL PR_FUG( AGX,AIX,BGX,CAGX,CBGX,FUGGX,YMCX,ZGX )
!
!---      Liquid mixture fugacity coefficient  ---
!
          CALL PR_FUG( ANX,AIX,BNX,CANX,CBNX,FUGNX,XMCX,ZNX )
        ENDIF
      ENDIF
!
!---  Increment K-factor index to skip fugacity coeff. calculation  ---
!
      IF( IFKX.EQ.1 ) IFKX = 2
!
!---  K-factors from ratio of fugacity coefficients, if K-factors
!     are not fixed  ---
!
      IF( IFKX.EQ.0 ) THEN
        DO IGC = 1,NGC+2
          IF( ZMCX(IGC).LT.EPSL ) CYCLE
          FKX(IGC) = FUGNX(IGC)/FUGGX(IGC)
        ENDDO
      ENDIF
!
!---  A 'model' Rachford-Rice routine  ---
!
      CALL RACHFORD_RICE( BETAX,FKX,XMCX,YMCX,ZMCX,INDX )
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of SSUB group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE THK_B( TX,XLSX,THKLWX,THKBX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     This subroutine calculates the thermal conductivity of pure
!     water as a function of temperature.
!
!     tx - temperature, C
!     xlsx - mass fraction of aqueous NaCl
!     tkbx - thermal conductivity of NaCl brine, W/m K
!
!     Ozbek, H. and S.L. Phillips.  1980.  Thermal conductivity of
!     aqueous sodium chloride solutions from 20 to 330 C.
!     J. Chem. Engr. Data, 25:263-267.
!
!     Temperature Range:  20 - 330 C
!     NaCl Concentration Range:  0 - saturation
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 4 April 2002.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 SCX(6)
!
!----------------------Data Statements---------------------------------!
!
      DATA SCX / 2.3434D-3, -7.924D-6, 3.924D-8, 1.06D-5, -2.D-8,
     &  1.2D-10 /
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/THK_B'
!
!---  Yusufova correlation  ---
!
      YLSX = 1.D+2*XLSX
      THKBX = 1.D+0 - (SCX(1) + SCX(2)*TX + SCX(3)*(TX**2))*YLSX +
     &  (SCX(4) + SCX(5)*TX + SCX(6)*(TX**2))*(YLSX**2)
      THKBX = THKBX*THKLWX
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of THK_B group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE THK_G( PX,TX,THKGX,XMGCX,XMGWX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Calculate the gas thermal conductivity using the corresponding
!     states method, with methane as the reference substance.
!
!     Pedersen, K.S. and P.L. Christensen. 2007. Phase Behavior of
!     Petroleum Reservoir Fluids, pp. 215-220.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 19 August 2013.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 XMGCX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/THK_G'
!
!---  Absolute temperature  ---
!
      TKX = TX + TABS
!
!---  Critical temperature and pressure for the gas mixture  ---
!
      SVMCX = 0.D+0
      STVMCX = 0.D+0
      SPCNX = 0.D+0
      SPCDX = 0.D+0
      DO JGC = 1,NGC+3
        DO IGC = 1,NGC+3
          IF( IGC.EQ.NGC+3 .AND. JGC.EQ.NGC+3 ) THEN
            ZZX = XMGWX*XMGWX
            TMCX = SQRT(GWPP(3)*GWPP(3))
            VMCX = ((GWPP(5)**(1.D+0/3.D+0)
     &        + GWPP(5)**(1.D+0/3.D+0))**3)/8.D+0
            TPCX = ((GWPP(3)/GWPP(4))**(1.D+0/3.D+0))
     &        + ((GWPP(3)/GWPP(4))**(1.D+0/3.D+0))
          ELSEIF( IGC.EQ.NGC+3 ) THEN
            ZZX = XMGWX*XMGCX(JGC)
            TMCX = SQRT(GWPP(3)*GCPP(3,JGC))
            VMCX = ((GWPP(5)**(1.D+0/3.D+0)
     &        + GCPP(5,JGC)**(1.D+0/3.D+0))**3)/8.D+0
            TPCX = ((GWPP(3)/GWPP(4))**(1.D+0/3.D+0))
     &        + ((GCPP(3,JGC)/GCPP(4,JGC))**(1.D+0/3.D+0))
          ELSEIF( JGC.EQ.NGC+3 ) THEN
            ZZX = XMGWX*XMGCX(IGC)
            TMCX = SQRT(GWPP(3)*GCPP(3,IGC))
            VMCX = ((GWPP(5)**(1.D+0/3.D+0)
     &        + GCPP(5,IGC)**(1.D+0/3.D+0))**3)/8.D+0
            TPCX = ((GWPP(3)/GWPP(4))**(1.D+0/3.D+0))
     &        + ((GCPP(3,IGC)/GCPP(4,IGC))**(1.D+0/3.D+0))
          ELSE
            ZZX = XMGCX(IGC)*XMGCX(JGC)
            TMCX = SQRT(GCPP(3,IGC)*GCPP(3,JGC))
            VMCX = ((GCPP(5,IGC)**(1.D+0/3.D+0)
     &        + GCPP(5,JGC)**(1.D+0/3.D+0))**3)/8.D+0
            TPCX = ((GCPP(3,IGC)/GCPP(4,IGC))**(1.D+0/3.D+0))
     &        + ((GCPP(3,JGC)/GCPP(4,JGC))**(1.D+0/3.D+0))
          ENDIF
          SVMCX = SVMCX + ZZX*VMCX
          STVMCX = STVMCX + ZZX*VMCX*TMCX
          SPCNX = SPCNX + ZZX*(TPCX**3)*TMCX
          SPCDX = SPCDX + ZZX*(TPCX**3)
        ENDDO
      ENDDO
      TCRX = STVMCX/SVMCX
      PCRX = 8.D+0*SPCNX/(SPCDX**2)
!
!---  Average molecular weight  ---
!
      SWTMX = 0.D+0
      SWTM2X = 0.D+0
      DO IGC = 1,NGC+3
        IF( IGC.EQ.NGC+3 ) THEN
          SWTMX = SWTMX + XMGWX*GWPP(1)
          SWTM2X = SWTM2X + XMGWX*(GWPP(1)**2)
        ELSE
          SWTMX = SWTMX + XMGCX(IGC)*GCPP(1,IGC)
          SWTM2X = SWTM2X + XMGCX(IGC)*(GCPP(1,IGC)**2)
        ENDIF
      ENDDO
      WTMNX = SWTMX
      WTMWX = SWTM2X/SWTMX
      WTMX = 1.304D-4*((WTMWX**2.303D+0)-(WTMNX**2.303D+0)) + WTMNX
!
!---  Methane density at T*TC_CH4/TC_MIX and P*PC_CH4/PC_MIX  ---
!
      TOX = TKX*GCPP(3,2)/TCRX - TABS
      TOX = MAX( TOX,-180.D+0 )
      POX = PX*GCPP(4,2)/PCRX
      CALL DENS_CH4( POX,RHOX,TOX )
      RHORX = RHOX*GCPP(5,2)/GCPP(1,2)
      ALPHMX = 1.D+0 + 7.378D-3*(RHORX**1.847D+0)*(WTMX**5.173D-1)
      ALPHOX = 1.D+0 + 7.378D-3*(RHORX**1.847D+0)*(GCPP(1,2)**5.173D-1)
!
!---  Methane thermal conductivity at T*TC_CH4/TC_MIX and 
!     P*PC_CH4/PC_MIX, W/m K  ---
!
      CALL THK_CH4( RHOX,TOX,THKOX )
!
!---  Gas mixture thermal conductivity without the correction
!     for the transport of internal energy, W/m K  ---
!
      THKGX = ((PCRX/GCPP(4,2))**(2.D+0/3.D+0))/
     &  (((TCRX/GCPP(3,2))**(1.D+0/6.D+0))*SQRT(WTMX/GCPP(1,2)))*
     &  (ALPHMX/ALPHOX)*THKOX
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of THK_G group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE THK_N( PX,TX,THKNX,XMNCX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Calculate the nonaqueous-liquid thermal conductivity using the 
!     corresponding states method, with methane as the
!     reference substance.
!
!     Boiling point method of Sato combined with Riedel equation
!     for temperature adjustment for the pure component liquid thermal
!     conductivity (Reid et al. 1987, pp. 550)
!
!!     Pedersen, K.S. and P.L. Christensen. 2007. Phase Behavior of
!!     Petroleum Reservoir Fluids, pp. 215-220.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 24 September 2013.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE NAPL
      USE GLB_PAR
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 XMNCX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/THK_N'
!
!---  Absolute temperature  ---
!
      TKX = TX + TABS
!
!---  Mole fraction weight of pure liquid thermal conductivities,
!     skipping components with critical temperatures lower than
!     the system temperature  ---
!
      THKNX = 0.D+0
      SXMNCX = 0.D+0
      DO IGC = 1,NGC+2
        TRX = TKX/GCPP(3,IGC)
        TBRX = GCPP(2,IGC)/GCPP(3,IGC)
        IF( TRX.LT.1.D+0 ) THEN 
          THKNX = THKNX + XMNCX(IGC)*((1.11D+0/SQRT(GCPP(1,IGC)))*
     &      (3.D+0 + 2.D+1*((1.D+0-TRX)**(2.D+0/3.D+0)))/
     &      (3.D+0 + 2.D+1*((1.D+0-TBRX)**(2.D+0/3.D+0))))
          SXMNCX = SXMNCX + XMNCX(IGC)
        ENDIF
      ENDDO
      IF( SXMNCX.GT.EPSL ) THEN
        THKNX = THKNX/SXMNCX
      ELSE
!
!---    Critical temperature and pressure for the nonaqueous-liquid
!       mixture  ---
!
        SVMCX = 0.D+0
        STVMCX = 0.D+0
        SPCNX = 0.D+0
        SPCDX = 0.D+0
        DO JGC = 1,NGC+2
          DO IGC = 1,NGC+2
            ZZX = XMNCX(IGC)*XMNCX(JGC)
            TMCX = SQRT(GCPP(3,IGC)*GCPP(3,JGC))
            VMCX = ((GCPP(5,IGC)**(1.D+0/3.D+0)
     &        + GCPP(5,JGC)**(1.D+0/3.D+0))**3)/8.D+0
            TPCX = ((GCPP(3,IGC)/GCPP(4,IGC))**(1.D+0/3.D+0))
     &        + ((GCPP(3,JGC)/GCPP(4,JGC))**(1.D+0/3.D+0))
            SVMCX = SVMCX + ZZX*VMCX
            STVMCX = STVMCX + ZZX*VMCX*TMCX
            SPCNX = SPCNX + ZZX*(TPCX**3)*TMCX
            SPCDX = SPCDX + ZZX*(TPCX**3)
          ENDDO
        ENDDO
        TCRX = STVMCX/SVMCX
        PCRX = 8.D+0*SPCNX/(SPCDX**2)
!
!---    Average molecular weight  ---
!
        SWTMX = 0.D+0
        SWTM2X = 0.D+0
        DO IGC = 1,NGC+2
          SWTMX = SWTMX + XMNCX(IGC)*GCPP(1,IGC)
          SWTM2X = SWTM2X + XMNCX(IGC)*(GCPP(1,IGC)**2)
        ENDDO
        WTMNX = SWTMX
        WTMWX = SWTM2X/SWTMX
        WTMX = 1.304D-4*((WTMWX**2.303D+0)-(WTMNX**2.303D+0)) + WTMNX
!
!---    Methane density at T*TC_CH4/TC_MIX and P*PC_CH4/PC_MIX  ---
!
        TOX = TKX*GCPP(3,2)/TCRX - TABS
        TOX = MAX( TOX,-180.D+0 )
        POX = PX*GCPP(4,2)/PCRX
        CALL DENS_CH4( POX,RHOX,TOX )
        RHORX = RHOX*GCPP(5,2)/GCPP(1,2)
        ALPHMX = 1.D+0 + 7.378D-3*(RHORX**1.847D+0)*(WTMX**5.173D-1)
        ALPHOX = 1.D+0 + 7.378D-3*(RHORX**1.847D+0)*(WTMO**5.173D-1)
!
!---    Methane thermal conductivity at T*TC_CH4/TC_MIX and 
!       P*PC_CH4/PC_MIX, W/m K  ---
!
        CALL THK_CH4( RHOX,TOX,THKOX )
!
!---    Nonaqueous-liquid mixture thermal conductivity without the 
!       correction for the transport of internal energy, W/m K  ---
!
        THKNX = ((PCRX/GCPP(4,2))**(2.D+0/3.D+0))/
     &    (((TCRX/GCPP(3,2))**(1.D+0/6.D+0))*SQRT(WTMX/GCPP(1,2)))*
     &    (ALPHMX/ALPHOX)*THKOX
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of THK_N group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE THK_CH4( RHOOX,TX,THKOX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     CH4 thermal conductivity.
!
!     Hanley, H.J.M., W.M. Haynes, and R.D. McCarty. 1997. The
!     viscosity and thermal conductivity coefficients for dense
!     gaseous and liquid methane. J. Phys. Chem. Ref. Data,
!     6(2):597-609.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 24 September 2012.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE NAPL
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 DX(4),FX(7),GTX(9)
!
!----------------------Data Statements---------------------------------!
!
      DATA DX / -0.25276292D+0, 0.33432859D+0, 1.12D+0, 168.D+0 /
      DATA FX / -7.0403639907D+0, 12.319512908D+0, -8.8525979933D+2,
     &  72.835897919D+0, 0.74421462902D+0, -2.9706914540D+0,
     &  2.2209758501D+3 /
      DATA GTX / -2.147621D+5, 2.190461D+5, -8.618097D+4, 1.496099D+4,
     &  -4.730660D+2, -2.331178D+2, 3.778439D+1, -2.320481D+0,
     &  5.311764D-2 /
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/THK_CH4'
!
!---  Absolute temperature, K ---
!
      TKX = TX + TABS
!
!---  Critical density and density, gm/cm^3 ---
!
      RHOCRX = 1.D-3*WTMO/GCPP(5,2)
      RHOX = 1.D-3*RHOOX
!
!---  Zero-density-limit component, mW/m K  ---
!
      THKO0X = GTX(1)*(TKX**(-1.D+0)) + GTX(2)*(TKX**(-2.D+0/3.D+0))
     &   + GTX(3)*(TKX**(-1.D+0/3.D+0)) + GTX(4)
     &   + GTX(5)*(TKX**(1.D+0/3.D+0)) + GTX(6)*(TKX**(2.D+0/3.D+0))
     &   + GTX(7)*TKX + GTX(8)*(TKX**(4.D+0/3.D+0))
     &   + GTX(9)*(TKX**(5.D+0/3.D+0))
!
!---  First density correction, mW/m K  ---
!
      THKO1X = RHOX*(DX(1) + DX(2)*((DX(3) - LOG(TKX/DX(4)))**2))
!
!---  Remainder density correction, mW/m K  ---
!
      THETAX = (RHOX - RHOCRX)/RHOCRX
      THKO2X = EXP( FX(1) + FX(4)/TKX )*EXP( (RHOX**1.D-1)*(FX(2) + 
     &  FX(3)/(TKX**1.5D+0)) + THETAX*SQRT(RHOX)*(FX(5) + (FX(6)/TKX)
     &  + FX(7)/(TKX**2)) ) - 1.D+0
!
!---  Sum of components, W/m K  ---
!
      THKOX = 1.D-3*(THKO0X + THKO1X + THKO2X)
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of THK_CH4 group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE THK_W( PX,TX,THKX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Thermal conductivity (W/m K) of pure water as a function of
!     temperature and density.
!
!     Meyer, C.A., R.B. McClintock, G.J. Silvestri, and R.C. Spencer
!     1993.  ASME Steam Tables, The American Society of Mechanical
!     Engineers, New York.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 27 March 2002.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 SAX(4),SBX(3),CBX(2),SDX(4),CCX(6)
!
!----------------------Data Statements---------------------------------!
!
      DATA TREF / 6.4727D+2 /
      DATA RHOREF / 3.17763D+2 /
      DATA PREF / 2.2115D+7 /
      DATA THKREF / 1.D+0 /
      DATA SAX / 0.0102811D+0, 0.0299621D+0, 0.0156146D+0,
     &  -0.00422464 /
      DATA SBX / -0.397070D+0, 0.400302D+0, 1.060000D+0 /
      DATA CBX / -0.171587D+0, 2.392190D+0 /
      DATA SDX / 0.0701309D+0, 0.0118520D+0, 0.00169937D+0, -1.0200D+0 /
      DATA CCX / 0.642857D+0, -4.11717D+0, -6.17937D+0, 0.00308976D+0,
     &  0.0822994D+0, 10.0932D+0 /
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/THK_W'
!
!---  Pure water density  ---
!
      CALL SP_W( TX,PSWX )
      PWX = MAX( PX,PSWX )
      ISRX = 1
      CALL DENS_W( TX,PWX,RHOLWX,RHOX,ISRX )
!
!---  Reduced temperature, density, and pressure  ---
!
      THETAX = (TX+TABS)/TREF
      RHOBX = RHOLWX/RHOREF
      BETAX = PX/PREF
!
!---  Zero term  ---
!
      THKX = 0.D+0
      ISAX = 0
      DO I = 0,3
        ISAX = ISAX + 1
        THKX = THKX + SAX(ISAX)*(THETAX**I)
      ENDDO
      THKX = SQRT(THETAX)*THKX
!
!---  First term  ---
!
      THKX = THKX + SBX(1) + SBX(2)*RHOBX +
     &  SBX(3)*EXP(CBX(1)*((RHOBX+CBX(2))**2))
!
!---  Second term  ---
!
      DTHETAX = ABS(THETAX-1.D+0) + CCX(4)
      CQX = 2.D+0 + CCX(5)/(DTHETAX**(3.D+0/5.D+0))
      IF( DTHETAX.GE.1.D+0 ) THEN
        CSX = 1.D+0/DTHETAX
      ELSE
        CSX = CCX(6)/(DTHETAX**(3.D+0/5.D+0))
      ENDIF
      THKX = THKX + ((SDX(1)/(THETAX**10))+SDX(2))*
     &  (RHOBX**(9.D+0/5.D+0))*
     &  EXP(CCX(1)*(1.D+0-(RHOBX**(14.D+0/5.D+0))))
      THKX = THKX + SDX(3)*CSX*(RHOBX**CQX)*
     &  EXP((CQX/(1.D+0+CQX))*(1.D+0-(RHOBX**(1.D+0+CQX))))
      VARX = CCX(2)*(THETAX**(3.D+0/2.D+0)) + CCX(3)/(RHOBX**5)
      VARX = MAX( VARX,-50.D+0 )
      TKX = TKX + SDX(4)*EXP(VARX)
!
!---  Dimensionalize thermal conductivity  ---
!
      THKX = THKX*THKREF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of THK_W group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE TORTU( N,SLX,SGX,SNX,PORDX,TORLX,TORGX,TORNX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Compute phase tortuosity.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, Battelle, PNNL, 19 December 2022.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE MPI
      USE GLB_PAR
      USE GRID
      USE SOLTN
      USE PROP
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/TORTU'
!
!---  Constant phase tortuosity  ---
!
      IF( ITOR(N).EQ.1 ) THEN
        TORLX = TOR(1,N)
        TORGX = TOR(2,N)
        TORNX = TOR(3,N)
!
!---  Millington and Quirk tortuosity model  ---
!
      ELSEIF( ITOR(N).EQ.2 ) THEN
        IF( SLX*PORDX.LT.EPSL ) THEN
          TORLX = 0.D+0
        ELSE
          TORLX = (PORDX*(SLX**7))**(THIRD)
        ENDIF
        IF( SGX*PORDX.LT.EPSL ) THEN
          TORGX = 0.D+0
        ELSE
          TORGX = (PORDX*(SGX**7))**(THIRD)
        ENDIF
        IF( SNX*PORDX.LT.EPSL ) THEN
          TORNX = 0.D+0
        ELSE
          TORNX = (PORDX*(SNX**7))**(THIRD)
        ENDIF
!
!---  Millington and Quirk (free gas) tortuosity model  ---
!
      ELSEIF( ITOR(N).EQ.3 ) THEN
        IF( SLX*PORDX.LT.EPSL ) THEN
          TORLX = 0.D+0
        ELSE
          TORLX = (PORDX*(SLX**7))**(THIRD)
        ENDIF
        SGFX = MAX( SGX,0.D+0 )
        IF( SGFX*PORDX.LT.EPSL ) THEN
          TORGX = 0.D+0
        ELSE
          TORGX = (PORDX*(SGFX**7))**(THIRD)
        ENDIF
        IF( SNX*PORDX.LT.EPSL ) THEN
          TORNX = 0.D+0
        ELSE
          TORNX = (PORDX*(SNX**7))**(THIRD)
        ENDIF
!
!---  Marshal tortuosity model  ---
!
      ELSEIF( ITOR(N).EQ.4 ) THEN
        IF( SLX*PORDX.LT.EPSL ) THEN
          TORLX = 0.D+0
        ELSE
          TORLX = SQRT(PORDX*SLX)
        ENDIF
        IF( SGX*PORDX.LT.EPSL ) THEN
          TORGX = 0.D+0
        ELSE
          TORGX = SQRT(PORDX*SGX)
        ENDIF
        IF( SNX*PORDX.LT.EPSL ) THEN
          TORNX = 0.D+0
        ELSE
          TORNX = SQRT(PORDX*SNX)
        ENDIF
!
!---  Constant aqueous/Millington gas tortuosity model  ---
!
      ELSEIF( ITOR(N).EQ.5 ) THEN
        TORLX = TOR(1,N)
        IF( SGX*PORDX.LT.EPSL ) THEN
          TORGX = 0.D+0
        ELSE
          TORGX = (PORDX*(SGX**7))**(THIRD)
        ENDIF
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of TORTU group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE TPA( AIX,FKX,PX,SIGMAX,TKX,ZMCX,IPHX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Tangent plane analysis
!     Michelsen, M.L. and J.M. Mollerup. 2007. Thermodynamic Models:
!     Fundamentals and Computational Aspects. Tie-Line Publications
!     ISBN 87-989961-3-4
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 4 March 2014
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 AIX(LNGC),FKX(LNGC),ZMCX(LNGC)
      REAL*8 CWMCX(LNGC),WMCX(LNGC),WMCOX(LNGC)
      REAL*8 FUGGX(LNGC),FUGNX(LNGC)
      REAL*8 HGX(LNGC),HNX(LNGC),HZX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/TPA'
      NCMX = 16
      IF( SIGMAX.GT.EPSL ) NCMX = 128
!
!---  Soave-Redlich-Kwong equation of state  ---
!
      IF( ISLC(68).EQ.2 ) THEN
!
!---    Gas mixture coefficients  ---
!
        CALL SRK_CX( AGX,AIX,BGX,ZMCX )
!
!---    Liquid mixture coefficients  ---
!
        CALL SRK_CX( ANX,AIX,BNX,ZMCX )
!
!---    Gas mixture compressibility  ---
!
        JNDX = 1
        CALL SRK_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
!
!---    Liquid mixture compressibility  ---
!
        JNDX = 2
        CALL SRK_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
!
!---    Gas mixture fugacity coefficient  ---
!
        CALL SRK_FUG( AGX,AIX,BGX,CAGX,CBGX,FUGGX,ZMCX,ZGX )
!
!---    Liquid mixture fugacity coefficient  ---
!
        CALL SRK_FUG( ANX,AIX,BNX,CANX,CBNX,FUGNX,ZMCX,ZNX )
!
!---  Peng-Robinson equation of state  ---
!
      ELSE
!
!---    Gas mixture coefficients  ---
!
        CALL PR_CX( AGX,AIX,BGX,ZMCX )
!
!---    Liquid mixture coefficients  ---
!
        CALL PR_CX( ANX,AIX,BNX,ZMCX )
!
!---    Gas mixture compressibility  ---
!
        JNDX = 1
        CALL PR_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
!
!---    Liquid mixture compressibility  ---
!
        JNDX = 2
        CALL PR_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
!
!---    Gas mixture fugacity coefficient  ---
!
        CALL PR_FUG( AGX,AIX,BGX,CAGX,CBGX,FUGGX,ZMCX,ZGX )
!
!---    Liquid mixture fugacity coefficient  ---
!
        CALL PR_FUG( ANX,AIX,BNX,CANX,CBNX,FUGNX,ZMCX,ZNX )
      ENDIF
!
!---  h-factors and Gibbs energy  ---
!
      GEGX = 0.D+0
      GENX = 0.D+0
      DO IGC = 1,NGC+2
        HGX(IGC) = 0.D+0
        HNX(IGC) = 0.D+0
        IF( ZMCX(IGC).GT.EPSL ) THEN
          HGX(IGC) = LOG(ZMCX(IGC)) + LOG(FUGGX(IGC))
          HNX(IGC) = LOG(ZMCX(IGC)) + LOG(FUGNX(IGC))
          GEGX = GEGX + ZMCX(IGC)*HGX(IGC)
          GENX = GENX + ZMCX(IGC)*HNX(IGC)
        ENDIF
      ENDDO
!
!---  In case the compressibility factor equation has multiple
!     roots, the root corresponding to the state with the lower
!     Gibbs energy is selected (Michelsen, M.L., 1982, 
!     The Isothermal Flash Problem. Part I. Stability. Fluid Phase 
!     Equilibria, 9:1-19.)
!
!     Mulitple roots, gas yields lower Gibbs energy  ---
!
      IF( (GENX-GEGX).GT.1.D-9 ) THEN
        IPHX = 1
        DO IGC = 1,NGC+2
          HZX(IGC) = 0.D+0
          IF( ZMCX(IGC).GT.EPSL ) THEN
            HZX(IGC) = HGX(IGC)
          ENDIF
        ENDDO
        BX = BGX
        ZX = ZGX
        VMX = ZX*RCU*TKX/PX
!
!---   Mulitple roots, liquid yields lower Gibbs energy  ---
!
      ELSEIF( (GEGX-GENX).GT.1.D-9 ) THEN
        IPHX = -1
        DO IGC = 1,NGC+2
          HZX(IGC) = 0.D+0
          IF( ZMCX(IGC).GT.EPSL ) THEN
            HZX(IGC) = HNX(IGC)
          ENDIF
        ENDDO
        BX = BNX
        ZX = ZNX
        VMX = ZX*RCU*TKX/PX
!
!---  Trival solution  ---
!
      ELSE
        IPHX = 0
        DO IGC = 1,NGC+2
          HZX(IGC) = 0.D+0
          IF( ZMCX(IGC).GT.EPSL ) THEN
            HZX(IGC) = 5.D-1*(HGX(IGC)+HNX(IGC))
          ENDIF
        ENDDO
        BX = BGX
        ZX = ZGX
        VMX = ZX*RCU*TKX/PX
      ENDIF
!!
!!---  Wilson's approximation for the K-factors  ---
!!
!      DO IGC = 1,NGC+2
!        FKX(IGC) = (GCPP(4,IGC)/PX)*EXP(5.42D+0*(1.D+0 - 
!     &    (GCPP(3,IGC)/TKX)))
!      ENDDO
!
!---  Vapor trial phase  ---
!
      SWMCX = 0.D+0
      DO IGC = 1,NGC+2
        CWMCX(IGC) = FKX(IGC)*ZMCX(IGC)
        SWMCX = SWMCX + CWMCX(IGC)
      ENDDO
      IF( SWMCX.GT.EPSL ) THEN
        DO IGC = 1,NGC+2
          WMCX(IGC) = CWMCX(IGC)/SWMCX
        ENDDO
      ENDIF
!
!---  Top of vapor successive substitution loop  ---
!
      NC = 0
      DWMCOX = 0.D+0
      DWMCX = 0.D+0
      DO
!
!---  Accelerated successive substitution  ---
!
      IF( NC.GT.16 .AND. MOD(NC,3).EQ.0 .AND. (DWMCOX.GT.DWMCX) ) THEN
        FX = 0.3819660D+0*DWMCX/(DWMCOX-DWMCX)
        SWMCX = 0.D+0
        DO IGC = 1,NGC+2
          CWMCX(IGC) = WMCX(IGC) + FX*(WMCX(IGC)-WMCOX(IGC))
          SWMCX = SWMCX + CWMCX(IGC)
        ENDDO
        DO IGC = 1,NGC+2
          WMCX(IGC) = CWMCX(IGC)/SWMCX
          CWMCX(IGC) = WMCX(IGC)
        ENDDO
      ENDIF
!
!---  Soave-Redlich-Kwong equation of state  ---
!
      IF( ISLC(68).EQ.2 ) THEN
!
!---    Gas mixture coefficients  ---
!
        CALL SRK_CX( AGX,AIX,BGX,WMCX )
!
!---    Gas mixture compressibility  ---
!
        JNDX = 1
        CALL SRK_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
!
!---    Gas mixture fugacity coefficient  ---
!
        CALL SRK_FUG( AGX,AIX,BGX,CAGX,CBGX,FUGGX,WMCX,ZGX )
!
!---  Peng-Robinson equation of state  ---
!
      ELSE
!
!---    Gas mixture coefficients  ---
!
        CALL PR_CX( AGX,AIX,BGX,WMCX )
!
!---    Gas mixture compressibility  ---
!
        JNDX = 1
        CALL PR_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
!
!---    Gas mixture fugacity coefficient  ---
!
        CALL PR_FUG( AGX,AIX,BGX,CAGX,CBGX,FUGGX,WMCX,ZGX )
      ENDIF
!
!---  Successive substitution  ---
!
      DWMCOX = DWMCX
      SWMCX = 0.D+0
      DWMCX = 0.D+0
      DO IGC = 1,NGC+2
        WMCOX(IGC) = WMCX(IGC)
        IF( ZMCX(IGC).GT.EPSL ) THEN
          WMCX(IGC) = EXP( HZX(IGC) - LOG(FUGGX(IGC)) )
          DWMCX = MAX( DWMCX,ABS(WMCX(IGC)-CWMCX(IGC)) )
          CWMCX(IGC) = WMCX(IGC)
        ELSE
          WMCX(IGC) = 0.D+0
          CWMCX(IGC) = 0.D+0
        ENDIF
        SWMCX = SWMCX + CWMCX(IGC)
      ENDDO
      IF( SWMCX.GT.EPSL ) THEN
        DO IGC = 1,NGC+2
          WMCX(IGC) = CWMCX(IGC)/SWMCX
        ENDDO
      ENDIF
      NC = NC + 1
      IF( NC.GT.NCMX ) THEN
        ISKIP = 1
        EXIT
      ENDIF
      IF( DWMCX.LE.1.D-9 ) EXIT
      ENDDO
!
!---  Tangent plane distance  ---
!
      IF( ISKIP.EQ.0 ) THEN
        TPDGX = 1.D+0
        DO IGC = 1,NGC+2
          IF( ZMCX(IGC).GT.EPSL ) THEN
            TPDGX = TPDGX + WMCX(IGC)*(LOG(WMCX(IGC)) + LOG(FUGGX(IGC))
     &        - HZX(IGC) - 1.D+0)
          ENDIF
        ENDDO
!
!---    i) We locate a composition W where tm is negative, based on
!       at least one of the initial estimates given in eqns. (49) (i.e., 
!       vapor trial phase) or (50) (i.e., liquid trial phase). In this 
!       case we continue with flash calculations, W providing a 
!       composition estimate for the incipient phase  ---
!
        IF( TPDGX.LT.-1.D-6 ) THEN
          IPHX = 2
          ISUB_LOG = ISUB_LOG-1
          RETURN
        ENDIF
      ENDIF
!
!---  Liquid trial phase  ---
!
      SWMCX = 0.D+0
      DO IGC = 1,NGC+2
        CWMCX(IGC) = ZMCX(IGC)/FKX(IGC)
        SWMCX = SWMCX + CWMCX(IGC)
      ENDDO
      IF( SWMCX.GT.EPSL ) THEN
        DO IGC = 1,NGC+2
          WMCX(IGC) = CWMCX(IGC)/SWMCX
        ENDDO
      ENDIF
!
!---  Top of liquid successive substitution loop  ---
!
      NC = 0
      DWMCOX = 0.D+0
      DWMCX = 0.D+0
      ISKIP = 0
      DO
!
!---  Accelerated successive substitution  ---
!
      IF( NC.GT.16 .AND. MOD(NC,3).EQ.0 .AND. (DWMCOX.GT.DWMCX) ) THEN
        FX = 0.3819660D+0*DWMCX/(DWMCOX-DWMCX)
        SWMCX = 0.D+0
        DO IGC = 1,NGC+2
          CWMCX(IGC) = WMCX(IGC) + FX*(WMCX(IGC)-WMCOX(IGC))
          SWMCX = SWMCX + CWMCX(IGC)
        ENDDO
        DO IGC = 1,NGC+2
          WMCX(IGC) = CWMCX(IGC)/SWMCX
          CWMCX(IGC) = WMCX(IGC)
        ENDDO
      ENDIF
!
!---  Soave-Redlich-Kwong equation of state  ---
!
      IF( ISLC(68).EQ.2 ) THEN
!
!---    Liquid mixture coefficients  ---
!
        CALL SRK_CX( ANX,AIX,BNX,WMCX )
!
!---    Liquid mixture compressibility  ---
!
        JNDX = 2
        CALL SRK_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
!
!---    Liquid mixture fugacity coefficient  ---
!
        CALL SRK_FUG( ANX,AIX,BNX,CANX,CBNX,FUGNX,WMCX,ZNX )
!
!---  Peng-Robinson equation of state  ---
!
      ELSE
!
!---    Liquid mixture coefficients  ---
!
        CALL PR_CX( ANX,AIX,BNX,WMCX )
!
!---    Liquid mixture compressibility  ---
!
        JNDX = 2
        CALL PR_Z( ANX,BNX,CANX,CBNX,PX,TKX,ZNX,JNDX )
!
!---    Liquid mixture fugacity coefficient  ---
!
        CALL PR_FUG( ANX,AIX,BNX,CANX,CBNX,FUGNX,WMCX,ZNX )
      ENDIF
!
!---  Successive substitution  ---
!
      DWMCOX = DWMCX
      SWMCX = 0.D+0
      DWMCX = 0.D+0
      DO IGC = 1,NGC+2
        WMCOX(IGC) = WMCX(IGC)
        IF( ZMCX(IGC).GT.EPSL ) THEN
          WMCX(IGC) = EXP( HZX(IGC) - LOG(FUGNX(IGC)) )
          DWMCX = MAX( DWMCX,ABS(WMCX(IGC)-CWMCX(IGC)) )
          CWMCX(IGC) = WMCX(IGC)
        ELSE
          WMCX(IGC) = 0.D+0
          CWMCX(IGC) = 0.D+0
        ENDIF
        SWMCX = SWMCX + CWMCX(IGC)
      ENDDO
      IF( SWMCX.GT.EPSL ) THEN
        DO IGC = 1,NGC+2
          WMCX(IGC) = CWMCX(IGC)/SWMCX
        ENDDO
      ENDIF
      NC = NC + 1
      IF( NC.GT.NCMX ) THEN
        ISKIP = 1
        EXIT
      ENDIF
      IF( DWMCX.LE.1.D-9 ) EXIT
      ENDDO
!
!---  Tangent plane distance  ---
!
      IF( ISKIP.EQ.0 ) THEN
        TPDNX = 1.D+0
        DO IGC = 1,NGC+2
          IF( ZMCX(IGC).GT.EPSL ) THEN
            TPDNX = TPDNX + WMCX(IGC)*(LOG(WMCX(IGC)) + LOG(FUGNX(IGC))
     &        - HZX(IGC) - 1.D+0)
          ENDIF
        ENDDO
!
!---    i) We locate a composition W where tm is negative, based on
!       at least one of the initial estimates given in eqns. (49) (i.e., 
!       vapor trial phase) or (50) (i.e., liquid trial phase). In this 
!       case we continue with flash calculations, W providing a 
!       composition estimate for the incipient phase  ---
!
        IF( TPDNX.LT.-1.D-6 ) THEN
          IPHX = 2
          ISUB_LOG = ISUB_LOG-1
          RETURN
        ENDIF
      ENDIF
!
!---  ii) Both initial estimates result in convergence to either the
!     trivial solution (i.e., small tangent plane distance) or to a 
!     positive minimum of tm, leading to the conclusion that the feed
!     z is stable.  Convergence to a positive minimum usually
!     indicates that the feed corresponds to a point in the single
!     phase region fairly close to the phase boundary, with W being
!     a good approximation for the composition of the incipient
!     phase at the phase boundary  ---
!
      IF( (VMX/BX).LE.1.75D+0 ) THEN
        IPHX = -1
      ELSE
        IPHX = 1
      ENDIF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of TPA group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE VAPOR( BETAX,CGX,PX,TKX,XMCX,YMCX,ZMCX,ZGX,ZNX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Single phase vapor
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 05 July 2013
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 AIX(LNGC)
      REAL*8 XMCX(LNGC),YMCX(LNGC),ZMCX(LNGC)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/VAPOR'
!
!---  Soave-Redlich-Kwong temperature dependent component 
!     coefficients  ---
!
      IF( ISLC(68).EQ.2 ) THEN
        CALL SRK_CT( AIX,TKX )
!
!---  Peng-Robinson temperature dependent component 
!     coefficients  ---
!
      ELSE
        CALL PR_CT( AIX,TKX )
      ENDIF
!
!---  Beta (vapor molar fraction)  ---
!
      BETAX = 1.D+0
!
!---  Vapor mole fractions  ---
!
      SYMCX = 0.D+0
      DO IGC = 1,NGC+2
        YMCX(IGC) = ZMCX(IGC)
        SYMCX = SYMCX + YMCX(IGC)
      ENDDO
!
!---  Normalize vapor mole fractions  ---
!
      DO IGC = 1,NGC+2
        YMCX(IGC) = YMCX(IGC)/SYMCX
      ENDDO
!
!---  Soave-Redlich-Kwong equation of state  ---
!
      IF( ISLC(68).EQ.2 ) THEN
!
!---    Vapor mixture coefficients  ---
!
        CALL SRK_CX( AGX,AIX,BGX,YMCX )
!
!---    Peneloux volume correction  ---
!
        CALL PENELOUX( CGX,TKX,YMCX )
        BGX = BGX - CGX
!
!---    Vapor mixture compressibility  ---
!
        JNDX = 1
        CALL SRK_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
!
!---  Peng-Robinson equation of state  ---
!
      ELSE
!
!---    Vapor mixture coefficients  ---
!
        CALL PR_CX( AGX,AIX,BGX,YMCX )
!
!---    Peneloux volume correction  ---
!
        CALL PENELOUX( CGX,TKX,YMCX )
        BGX = BGX - CGX
!
!---    Vapor mixture compressibility  ---
!
        JNDX = 1
        CALL PR_Z( AGX,BGX,CAGX,CBGX,PX,TKX,ZGX,JNDX )
      ENDIF
!
!---  Set liquid mole fractions and compressibility
!     equal to those for vapor  ---
!
      DO IGC = 1,NGC+2
        XMCX(IGC) = YMCX(IGC)
      ENDDO
      ZNX = ZGX
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of VAPOR group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE VISC_A( TX,RHOAX,VISAX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Calculation of CO2 viscosity using the formulation of
!     Fenghour et al. in the temperature range 200K < T < 1500K
!     and densities up to 1400 kg/m^3.
!
!     Fenghour, A., W. A. Wakeham, V. Vesovic.  1998.  The viscosity
!     of carbon dioxide.  J. Phys. Chem. Ref. Data, 27(1):31-41.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 25 April 2002.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 SAX(5),SBX(5)
!
!----------------------Data Statements---------------------------------!
!
      DATA SAX / 0.235156D+0, -0.491266D+0,
     &  5.211155D-2, 5.347906D-2, -1.537102D-2 /
      DATA SBX / 0.4071119D-2, 0.7198037D-4,
     &  0.2411697D-16, 0.2971072D-22, -0.1627888D-22 /
      DATA ESPX / 251.196D+0 /
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/VISC_A'
!
!---  Zero-density-limit component  ---
!
      TKX = TX+TABS
      TRX = TKX/ESPX
      ECSX = 0.D+0
      DO I = 0,4
        ECSX = ECSX + SAX(I+1)*(LOG(TRX)**I)
      END DO
      RECSX = EXP(ECSX)
      VIS_ZD = 1.00697D+0*SQRT(TKX)/RECSX
!
!---  Excess-viscosity component  ---
!
      VIS_EX = SBX(1)*RHOAX + SBX(2)*(RHOAX**2) +
     &  SBX(3)*(RHOAX**6)/(TRX**3) +
     &  SBX(4)*(RHOAX**8) + SBX(5)*(RHOAX**8)/TRX
!
!---  Sum components and convert to Pa s  ---
!
      VISAX = (VIS_ZD + VIS_EX)*1.D-6
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of VISC_A group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE VISC_B( TX,XLSX,VISWX,VISBX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Viscosity (Pa s) of brine as a function of temperature (C),
!     NaCl brine mass fraction and pure water viscosity (Pa s)
!
!     Phillips, S.L., A. Igbene, J.A. Fair, H. Ozbek, and M. Tavana.
!     1981.  A Technical Databook for Geothermal Energy Utilization
!     LBL-12810, UC-66a, Lawrence Berkeley Laboratory, University of
!     California, Berkeley, California.
!
!     Temperature Range 10-350 C
!     Pressure Range 0.1-50 MPa
!     NaCl Concentration Range 0-5 Molal (mol NaCl/kg H2O)
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 4 April 2002.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 SAX(5)
!
!----------------------Data Statements---------------------------------!
!
      DATA SAX / 0.0816D+0, 0.0122D+0, 0.000128D+0, 0.000629D+0,
     &  -0.7D+0 /
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/VISC_B'
!
!---  Convert mass fraction to molality  ---
!
      GLSX = 1.D+3*XLSX/(WTMS*(1.D+0-XLSX))
!
!---  Formulation of Phillips et al.  ---
!
      VISBX = VISWX*(1.D+0 + SAX(1)*GLSX + SAX(2)*(GLSX**2) +
     &  SAX(3)*(GLSX**3) + SAX(4)*TX*(1.D+0-EXP(SAX(5)*GLSX)))
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of VISC_B group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE VISC_G( RHOMGX,TX,VISGX,XMGCX,XMGWX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Calculate the gas viscosity using the method of 
!     Lohrenz-Bray-Clark (LBC) Method.
!
!     Pedersen, K.S. and P.L. Christensen. 2007. Phase Behavior of
!     Petroleum Reservoir Fluids, pp. 207
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 13 August 2013.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 XMGCX(LNGC),XICX(LNGC),VISCX(LNGC)
      REAL*8 CAX(5)
!
!----------------------Data Statements---------------------------------!
!
      DATA CAX / 1.0230D+0,0.23364D+0,0.58533D+0,-0.40758D+0,
     &           0.093324D+0 /
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/VISC_G'
!
!---  Absolute temperature  ---
!
      TKX = TX + TABS
!
!---  Reduced inverse viscosity (1/micro-Poise), temperature (K),
!     molecular weight (gm/mole or kg/kmol), and pressure (bar)
!     from Reid et al., Eqn (9-4.14) for each component and water  ---
!
      XIMX = 0.D+0
      DO IGC = 1,NGC+2
        PCBX = GCPP(4,IGC)*1.D-5
        XICX(IGC) = 0.176D+0*((GCPP(3,IGC)/((GCPP(1,IGC)**3)*(PCBX**4)))
     &    **(1.D+0/6.D+0))
        XIMX = XIMX + XMGCX(IGC)*XICX(IGC)
      ENDDO
      PCBX = PCRW*1.D-5
      XIWX = 0.176D+0*((TCRW/((WTMW**3)*(PCBX**4)))
     &    **(1.D+0/6.D+0))
      XIMX = XIMX + XMGWX*XIWX
!
!---  Dilute gas viscosity (micro-Poise) in the form of Lucas, 
!     ignoring polar and quantum corrections, from Reid et
!     al. Eqn (9-4.15) for each component and water  ---
!
      DO IGC = 1,NGC+2
        TRX = TKX/GCPP(3,IGC)
        VISCX(IGC) = 0.807D+0*(TRX**0.618D+0) 
     &    - 0.357D+0*EXP(-0.449D+0*TRX) 
     &    + 0.340D+0*EXP(-4.058*TRX) + 0.018D+0
        VISCX(IGC) = VISCX(IGC)/XICX(IGC)
      ENDDO
      TRWX = TKX/TCRW
      VISGWX = 0.807D+0*(TRWX**0.618D+0) - 0.357D+0*EXP(-0.449D+0*TRWX) 
     &    + 0.340D+0*EXP(-4.058*TRWX) + 0.018D+0
      VISGWX = VISGWX/XIWX
!
!---  Dilute gas mixture viscosity (micro-Poise) from the method of
!     Wilke, from Reid et al. Eqn (9-4.15)  ---
!
      VISGMX = 0.D+0
      DO IGC = 1,NGC+2
        VARX = 0.D+0
        DO JGC = 1,NGC+2
          PHIX = ((1.D+0 + SQRT(VISCX(IGC)/VISCX(JGC))*
     &      SQRT(SQRT(GCPP(1,JGC)/GCPP(1,IGC))))**2)/(8.D+0*
     &      SQRT(1.D+0 + (GCPP(1,IGC)/GCPP(1,JGC))))
          VARX = VARX + XMGCX(JGC)*PHIX
        ENDDO
        PHIX = ((1.D+0 + SQRT(VISCX(IGC)/VISGWX)*
     &    SQRT(SQRT(WTMW/GCPP(1,IGC))))**2)/(8.D+0*
     &    SQRT(1.D+0 + (GCPP(1,IGC)/WTMW)))
        VARX = VARX + XMGWX*PHIX
        VISGMX = VISGMX + XMGCX(IGC)*VISCX(IGC)/VARX
      ENDDO
      VARX = 0.D+0
      DO JGC = 1,NGC+2
        PHIX = ((1.D+0 + SQRT(VISGWX/VISCX(JGC))*
     &    SQRT(SQRT(GCPP(1,JGC)/WTMW)))**2)/(8.D+0*
     &    SQRT(1.D+0 + (WTMW/GCPP(1,JGC))))
        VARX = VARX + XMGCX(JGC)*PHIX
      ENDDO
      VISGMX = VISGMX + XMGWX*VISGWX/VARX
!
!---  Critical molar density, kmol/m^3  ---
!
      RHOCRX = 0.D+0
      DO IGC = 1,NGC+2
        RHOCRX = RHOCRX + XMGCX(IGC)*GCPP(5,IGC)
      ENDDO
      RHOCRX = RHOCRX + XMGWX*(1.D-3*VCRW)
      RHOCRX = 1.D+0/RHOCRX
!
!---  Reduced density  ---
!
      RHORX = RHOMGX/RHOCRX
!
!---  Density gas mixture viscosity (micro-Poise) from the method of
!     Jossi, Stiel, and Thodos, from Reid et al. Eqn (9-6.11)  ---
!
      VARX = 0.D+0
      DO M = 1,5
        VARX = VARX + CAX(M)*(RHORX**(M-1))
      ENDDO
      VISGX = VISGMX + ((VARX**4)-1.D+0)/XIMX
!
!---  Convert from micro-Poise to Pa s  ---
!
      VISGX = VISGX*1.D-7
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of VISC_G group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE VISC_L( CMLAX,CMLSX,PX,TX,VISLX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Kumagai, A., and C. Yokoyama.  1999.  Viscosities of aqueous
!     NaCl solutions containing CO2 at high pressures.  J. Chem. Eng.
!     Data, 44:227-229.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 14 August 2013.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 CAX(9)
      REAL*8 CBX(2)
!
!----------------------Data Statements---------------------------------!
!
      DATA CAX / 3.85971D+0,-1.32561D-2,-5.37539D+0,1.90621D-2,
     &           8.79552D+0,-3.17229D-2,-7.22769D+0,2.64498D-2,
     &           -1.69956D-3 /
      DATA CBX / -2.661D-1,2.33D+2 /
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/VISC_L'
!
!---  Absolute temperature, K  ---
!
      TKX = TX + TABS
      TRX = 5.D+0
      TRKX = TRX + TABS
!
!---  Pressure in MPa  ---
!
      PMX = PX*1.D-6
!
!---  Pure-water viscosity at 0.1 MPa and 278.15 K  ---
!
!      ISRX = 1
!      CALL DENS_W( TRX,PATM,RHOLWX,RHOGWX,ISRX )
!      CALL VISC_W( TRX,PATM,RHOLWX,VISWX )
!      VISWX = 1.D+3*VISWX
      VISWX = 1.51814D+0
!
!---  Kumagai and Yokoyama formulation, as a function of salt
!     molality, CO2 molality, at 278.15 K,
!     and pressure in MPa  ---
!
      VISL1X = (CAX(1) + CAX(2)*TRKX)*CMLSX + 
     &  (CAX(3) + CAX(4)*TRKX)*SQRT(CMLSX) + 
     &  (CAX(5) + CAX(6)*TRKX)*CMLAX +
     &  (CAX(7) + CAX(8)*TRKX)*(CMLAX**2) +
     &  CAX(9)*(PMX-1.D-1) + VISWX
!
!---  Lewis-Squires temperature correction, with viscosity
!     in cP or mPa s  ---
!
      VISL2X = ((VISL1X**CBX(1))+((TKX-TRKX)/CBX(2)))**(1.D+0/CBX(1))
!
!---  Convert aqueous viscosity from mPa s to Pa s  ---
!
      VISLX = VISL2X*1.D-3
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of VISC_L group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE VISC_N( RHOMNX,TX,VISNX,XMNCX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Calculate the nonaqueous-liquid viscosity using the method of 
!     Lohrenz-Bray-Clark (LBC) Method.
!
!     Pedersen, K.S. and P.L. Christensen. 2007. Phase Behavior of
!     Petroleum Reservoir Fluids, pp. 207
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 13 August 2013.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE CONST
      USE CCP
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 XMNCX(LNGC),XICX(LNGC)
      REAL*8 CAX(8)
!
!----------------------Data Statements---------------------------------!
!
      DATA CAX / 0.10230D+0,0.023364D+0,0.058533D+0,-0.040758D+0,
     &           0.0093324D+0,-4.1303D-10,-0.10696D+0,5.6382D+0 /
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/VISC_N'
!
!---  Absolute temperature  ---
!
      TKX = TX + TABS
!
!---  Viscosity-reducing parameter, with critical temperature in K, and 
!     critical pressure in atm  ---
!
      XTX = 0.D+0
      XPX = 0.D+0
      XMX = 0.D+0
      DO IGC = 1,NGC+2
        XTX = XTX + ((XMNCX(IGC)*GCPP(3,IGC))**(1.D+0/6.D+0))
        XMX = XMX + SQRT(XMNCX(IGC)*GCPP(1,IGC))
        XPX = XPX + ((XMNCX(IGC)*GCPP(4,IGC)/PATM)**(2.D+0/3.D+0))
        XICX(IGC) = (GCPP(3,IGC)**(1.D+0/6.D+0))/
     &    (SQRT(GCPP(1,IGC))*((GCPP(4,IGC)/PATM)**(2.D+0/3.D+0)))
      ENDDO
      XIX = XTX/(XMX*XPX)
!
!---  Critical molar density, kmol/m^3  ---
!
      RHOCRX = 0.D+0
      DO IGC = 1,NGC+2
        RHOCRX = RHOCRX + XMNCX(IGC)*GCPP(5,IGC)
      ENDDO
      RHOCRX = 1.D+0/RHOCRX
!
!---  Reduced density  ---
!
      RHORX = RHOMNX/RHOCRX
!
!---  Dilute nonaqueous-liquid mixture viscosity  ---
!
      VISNAX = 0.D+0
      VISNBX = 0.D+0
      DO IGC = 1,NGC+2
!
!---    Dilute nonaqueous-liquid component viscosity from 
!       Stiel and Thodos, 1961  ---
!
        TRX = TKX/GCPP(3,IGC)
        IF( TRX.LE.1.5D+0 ) THEN
          VISNIX = 34.D-5*(TRX**9.4D-1)/XICX(IGC)
        ELSE
          VISNIX = 17.78D-5*((4.58D+0*TRX-1.67D+0)**(5.D+0/8.D+0))/
     &      XICX(IGC)
        ENDIF
        VISNAX = VISNAX + XMNCX(IGC)*VISNIX*SQRT(GCPP(1,IGC))
        VISNBX = VISNBX + XMNCX(IGC)*SQRT(GCPP(1,IGC))
      ENDDO
      VISNPX = VISNAX/VISNBX
!
!---  LBC polynomial  ---
!
      VISNX = 0.D+0
      DO M = 1,5
        VISNX = VISNX + CAX(M)*(RHORX**(M-1))
      ENDDO
!
!---  Peng-Robinson corrections (Xu and Khurana, 1996, SPE 37011)  ---
!
!      VISNX = VISNX + CAX(6)*(RHORX**3)*(1.D+0 + CAX(7)*(RHORX**2))*
!     &  EXP(CAX(8)*RHORX)
      VISNX = ((VISNX**4) - 1.D-4)/XIX + VISNPX
!
!---  Convert from cP to Pa s  ---
!
      VISNX = VISNX*1.D-3
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of VISC_N group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE VISC_W( TX,PX,RHOWX,VISWX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Viscosity (Pa s) of pure water as a function of temperature and
!     density.
!
!     Meyer, C.A., R.B. McClintock, G.J. Silvestri, and R.C. Spencer
!     1993.  ASME Steam Tables, The American Society of Mechanical
!     Engineers, New York.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 27 March 2002.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 CHX(46)
!
!----------------------Data Statements---------------------------------!
!
      DATA TREF / 6.4727D+2 /
      DATA RHOREF / 3.17763D+2 /
      DATA PREF / 2.2115D+7 /
      DATA VISREF / 5.5071D+1 /
      DATA CHX / 1.D+0, 9.78197D-1, 5.79829D-1, -2.02354D-1,
     &  5.132047D-1, 3.205656D-1, 0.D+0, 0.D+0, -7.782567D-1,
     &  1.885447D-1, 2.151778D-1, 7.317883D-1, 1.241044D+0,
     &  1.476783D+0, 0.D+0, 0.D+0, -2.818107D-1, -1.070786D+0,
     & -1.263184D+0, 0.D+0, 0.D+0, 0.D+0, 1.778064D-1,
     &  4.605040D-1, 2.340379D-1, -4.924179D-1, 0.D+0, 0.D+0,
     &  -4.176610D-2, 0.D+0, 0.D+0, 1.600435D-1, 0.D+0, 0.D+0,
     &  0.D+0, -1.578386D-2, 0.D+0, 0.D+0, 0.D+0, 0.D+0, 0.D+0,
     &  0.D+0, 0.D+0, -3.629481D-3,  0.D+0, 0.D+0 /
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/VISC_W'
!
!---  Reduced temperature, density, and pressure  ---
!
      THETAX = (TX+TABS)/TREF
      RHOBX = RHOWX/RHOREF
      BETAX = PX/PREF
!
!---  Zero term  ---
!
      VISWX = 0.D+0
      ICH = 0
      DO I = 0,3
        ICH = ICH + 1
        VISWX = VISWX + CHX(ICH)/(THETAX**I)
      ENDDO
      VISWX = SQRT(THETAX)/VISWX
!
!---  First term  ---
!
      VISAX = 0.D+0
      DO I = 0,5
        DO J = 0,6
          ICH = (J*6) + I + 5
          VISAX = VISAX + CHX(ICH)*(((1.D+0/THETAX)-1.D+0)**I)*
     &      ((RHOBX-1.D+0)**J)
        ENDDO
      ENDDO
      VISWX = VISWX*EXP(RHOBX*VISAX)
!
!---  Second term  ---
!
      IF( THETAX.GE.0.9970D+0 .AND. THETAX.LE.1.0082D+0 .AND.
     &  RHOBX.GE.0.755D+0 .AND. RHOBX.LE.1.290D+0 ) THEN
        DPX = 1.D-1
        DBETAX = DPX/PREF
        PIX = PX+DPX
        CALL SR_W( TX,PIX,ISRX )
        CALL DENS_W( TX,PIX,RHOLX,RHOVX,ISRX )
        IF( (1.D+0-ABS(RHOLX/RHOWX)).LT.(1.D+0-ABS(RHOVX/RHOWX)) ) THEN
          RHOBIX = RHOLX/RHOREF
        ELSE
          RHOBIX = RHOVX/RHOREF
        ENDIF
        CHIX = RHOBX*(RHOBIX-RHOBX)/DBETAX
        IF( CHIX.GE.21.93D+0 ) VISWX = VISWX*0.922D+0*(CHIX**0.0263D+0)
      ENDIF
!
!---  Dimensionalize viscosity  ---
!
      VISWX = 1.D-6*VISWX*VISREF
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of VISC_W group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE VOCDFG( XMW,XMO,XMA,DFGAO,DFGOW,DFGOX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Calculates VOC diffusion coefficient by the Wilke method. pp. 34.
!
!     Falta, R.W., K. Pruess, I. Javandel, and P.A. Witherspoon. 1990.
!     Numerical Modeling of Steam Injection for the Removal of
!     Nonaqueous Phase Liquids from the Subsurface: 1 Numerical
!     Formulation. LBL-29615, Lawrence Berkeley Laboratory.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, Battelle, PNL, January, 1992.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/VOCDFG'
      IF( (1.D+0-XMO) .LE. 1.D-20 ) THEN
        DFGOX = 2.D+0*DFGAO*DFGOW/(DFGAO+DFGOW)
      ELSE
        DFGOX = (1.D+0-XMO)/((XMA/DFGAO) + (XMW/DFGOW))
      ENDIF
      ISUB_LOG = ISUB_LOG-1
!
!---  End of VOCDFG group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE VOLM_LW( TX,PX,VMLWX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Molar volume of water in aqueous.
!
!     Klauda, J. B., and S. I. Sandler.  2000.  A fugacity model
!     for gas hydrate phase equilibria.  Ind. Eng. Chem. Res.
!     39:3377-3386.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 16 November 2004.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/VOLM_LW'
!
!---  Molar volume, m^3/kmol  ---
!
      PMX = (PX-PATM)*1.D-6
      VMLWX = 1.D+3*EXP( -10.9241D+0 + 2.5D-4*TX - 3.532D-4*PMX
     &    + 1.559D-7*(PMX**2))
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of VOLM_LW group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE VPL( PSBX,PVBX,SLX,TX,N )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Vapor pressure lowering versus aqueous saturation.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 1 August 2013.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE PROP
      USE GLB_PAR
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/VPL'
!
!---  Absolute temperature  ---
!
      TKX = TX + TABS
      THETAX = MIN( MAX( SCHR(6,N),0.D+0 ),GPI )
!
!---  van Genuchten saturation function
!
      IF( ISCHR(N).EQ.1 ) THEN
        CAX = SCHR(1,N)
        CNX = MAX( SCHR(3,N),SMALL )
        IF( SCHR(14,N).LE.ZERO ) THEN
          IF( IRPL(N).EQ.2 ) THEN
            CMX = 1.D+0 - 2.D+0/CNX
          ELSE
            CMX = 1.D+0 - 1.D+0/CNX
         ENDIF
        ELSE
          CMX = SCHR(14,N)
        ENDIF
        SMPX = SCHR(7,N)
        HMPX = SCHR(8,N)
!
!---    Aqueous saturation below the aqueous matching point,
!       use Webb extension  ---
!
        IF( SLX.LT.SMPX ) THEN
          HCX = EXP( (SLX*(LOG(HMPX)-LOG(HDOD)) + SMPX*LOG(HDOD))/SMPX )
        ELSE
          SLRX = SCHR(4,N)
          SRX = 5.D-1*SLRX*(1.D+0+COS(THETAX))
          ESLX = MIN( MAX( (SLX-SRX)/(1.D+0-SRX),0.D+0 ),1.D+0 )
          HCX = (((1.D+0/ESLX)**(1.D+0/CMX)-1.D+0)**(1.D+0/CNX))/CAX
        ENDIF
!
!---  Brooks and Corey saturation function  ---
!
      ELSEIF( ISCHR(N).EQ.2 ) THEN
        CPX = SCHR(2,N)
        CLX = MAX( SCHR(3,N),SMALL )
        SMPX = SCHR(7,N)
        HMPX = SCHR(8,N)
!
!---    Aqueous saturation below the aqueous matching point,
!       use Webb extension  ---
!
        IF( SLX.LT.SMPX ) THEN
          HCX = EXP( (SLX*(LOG(HMPX)-LOG(HDOD)) + SMPX*LOG(HDOD))/SMPX )
        ELSE
          SLRX = SCHR(4,N)
          SRX = 5.D-1*SLRX*(1.D+0+COS(THETAX))
          ESLX = MIN( MAX( (SLX-SRX)/(1.D+0-SRX),0.D+0 ),1.D+0 )
          HCX = CPX*(1.D+0/ESLX)**(1.D+0/CLX)
        ENDIF
!
!---  Zero capillary pressure  ---
!
      ELSEIF( ISCHR(N).EQ.3 ) THEN
        HCX = 0.D+0
      ENDIF
!
!---  Kelvin's equation  ---
!
      PVBX = PSBX*EXP( -WTMW*HCX*GRAV/(RCU*TKX) )
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of VPL group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE WATDFG( XMW,XMO,XMA,DFGAW,DFGOW,DFGWX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Calculates water diffusion coefficient by the Wilke
!     method. pp. 34.
!
!     Falta, R.W., K. Pruess, I. Javandel, and P.A. Witherspoon. 1990.
!     Numerical Modeling of Steam Injection for the Removal of
!     Nonaqueous Phase Liquids from the Subsurface: 1 Numerical
!     Formulation. LBL-29615, Lawrence Berkeley Laboratory.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, Battelle, PNL, January, 1992.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/WATDFG'
      IF( (1.D+0-XMW) .LE. 1.D-20 ) THEN
        DFGWX = 2.D+0*DFGAW*DFGOW/(DFGAW+DFGOW)
      ELSE
        DFGWX = (1.D+0-XMW)/((XMA/DFGAW) + (XMO/DFGOW))
      ENDIF
      ISUB_LOG = ISUB_LOG-1
!
!---  End of WATDFG group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE WATLQH( TX,PX,H )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Calculate the subcooled or saturated enthalpy, as a function of
!     temperature and pressure per the steam table equations
!     as given by the 1967 International Formulation Committee:
!     Formulation for Industrial Use.
!
!     Thermodynamic and Transport Properties of Steam.
!     1967. ASME Steam Tables.
!     The American Society of Mechanical Engineers.
!     United Engineering Center, 345 East 47th Street, New York, N.Y.
!
!     The temperature is limited in this subroutine to the following
!     values:  0.01 C < T > 364.0 !
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, Battelle, PNL, January, 1992.
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GLB_PAR
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Type Declarations-------------------------------!
!
      REAL*8 A(23),SA(12),B(4)
!
!----------------------Data Statements---------------------------------!
!
      DATA A /6.824687741D+3,-5.422063673D+2,-2.096666205D+4,
     &3.941286787D+4,-6.733277739D+4,9.902381028D+4,-1.093911774D+5,
     &8.590841667D+4,-4.511168742D+4,1.418138926D+4,-2.017271113D+3,
     &7.982692717D+0,-2.616571843D-2,1.522411790D-3,2.284279054D-2,
     &2.421647003D+2,1.269716088D-10,2.074838328D-7,2.174020350D-8,
     &1.105710498D-9,1.293441934D+1,1.308119072D-5,6.047626338D-14/
      DATA SA /8.438375405D-1,5.362162162D-4,1.720,7.342278489D-2,
     &4.975858870D-2,6.537154300D-1,1.15D-6,1.1508D-5,1.4188D-1,
     &7.002753165D+0,2.995284926D-4,2.040D-1/
      DATA B / -6.36443D+5,1.14468D+2,3.64104D+0,-3.3561464D+5 /
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/WATLQH'
!
!---  Liquid water enthalpy extended below freezing point  ---
!
      TR = (MAX(1.D-2,TX)+TABS)/TCRW
      PR = PX/PCRW
      CY = 1.0D+0 - SA(1)*TR*TR-SA(2)/(TR**6)
      CDY = -2.D+0*SA(1)*TR + 6.D+0*SA(2)/(TR**7)
      CZ = CY +
     &  SQRT(MAX( ZERO,(SA(3)*CY*CY-2.D+0*SA(4)*TR+2.D+0*SA(5)*PR)))
      HX = TR*A(1)
      DO I = 1,10
        HX = HX - (I-2)*A(I+1)*(TR**(I-1))
      ENDDO
      HX = HX + A(12)*(CZ*(1.7D+1*(CZ/2.9D+1 - CY/1.2D+1) +
     &  4.1667D-1*TR*CDY) + SA(4)*TR - (SA(3) - 1.D+0)*TR*CY*CDY)/
     &  (CZ**2.9412D-1)
      HX = HX + (A(13) - A(15)*TR*TR
     &  + A(16)*(9.D+0*TR + SA(6))*((SA(6) - TR)**9)
     &  + A(17)*(2.D+1*(TR**19) + SA(7))/((SA(7) + (TR**19))**2))*PR
      HX = HX - ((1.2D+1*(TR**11) + SA(8))/((SA(8) + (TR**11))**2))*
     &  (A(18)*PR + A(19)*PR*PR + A(20)*PR*PR*PR)
      HX = HX + A(21)*(TR**18)*(1.7D+1*SA(9) + 1.9D+1*TR*TR)*
     &  ((1.D+0/((SA(10) + PR)**3) + SA(11)*PR))
      HX = HX + A(22)*SA(12)*PR*PR*PR + 2.1D+1*A(23)*(PR**4)/(TR**20)
      H = HX*PCRW*VCRW*1.D-3/WTMW
!
!---  Extend the enthalpy function for freezing conditions
!     by incorporating the latent heat of fusion over the
!     temperature range -0.01 C to -1.0 C and using a polynomial
!     fit for the enthalpy of ice, referenced to -1.0 C  ---
!
      IF( TX.LT.1.D-2 ) THEN
        H = H + (MAX(-1.D+0,TX)-1.D-2)*333.7D+3/1.01D+0
      ENDIF
      IF( TX.LT.-1.D+0 ) THEN
        TK = TX + TABS
        H = H + B(1) + B(2)*TK + B(3)*TK**2 - B(4)
      ENDIF
      ISUB_LOG = ISUB_LOG-1
!
!---  End of WATLQH group  ---
!
      RETURN
      END
      
!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE WEBB_BC( CLX,HMPX,PSIX,SMPX,SRX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Webb saturation and capillary pressure matching points for
!     the Brooks-Corey capillary pressure-saturation
!     function.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 16 July 2010
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GRID
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/WEBB_BC'
!
!---  Initial guess of the matching-point head  ---
!
      SMPX = 1.D-2*(1.D+0-SRX) + SRX
      ESMPX = (SMPX-SRX)/(1.D+0-SRX)
      HMPX = PSIX/(ESMPX**(1.D+0/CLX))
      HMPX = 1.D+1**(4.D-1*LOG10(HDOD))
!
!---  Newton-Raphson iteration for the matching-point head  ---
!
      NC = 0
      DO
        NC = NC + 1
        DHX = MAX( 1.D-4,1.D-6*HMPX )
        DHX = SIGN( DHX,5.D-1*HDOD-HMPX )
        AX = -((PSIX/HMPX)**CLX)*(1.D+0-SRX)
        BX = HMPX*(LOG(HDOD)-LOG(HMPX))
        F1X = (AX-SRX)/BX - AX*CLX/HMPX
        HMPY = HMPX + DHX
        AX = -((PSIX/HMPY)**CLX)*(1.D+0-SRX)
        BX = HMPY*(LOG(HDOD)-LOG(HMPY))
        F2X = (AX-SRX)/BX - AX*CLX/HMPY
        DFX = (F2X-F1X)/DHX
        DHMPX = -F1X/DFX
        HMPX = MIN( MAX( HMPX+DHMPX,PSIX ),HDOD-1.D+0 )
!
!---    No convergence on saturation matching point  ---
!
        IF( NC.GT.64 ) THEN
          M_ERR(1) = 'No Convergence on Brooks and Corey'
     &      // ' Matching Point Head @ Node: '
          CALL PATH
          R_ERR = 0.D+0
          I_ERR(1) = ABS(N_DB)
          I_ERR(2) = 0
          I_ERR(3) = 1
          I_ERR(4) = ID
        ENDIF
        IF( ABS(DHMPX).LE.1.D-4 ) EXIT
      ENDDO
!
!---  Find the capillary matching point saturation  ---
!
      ESMPX = (PSIX/HMPX)**CLX
      SMPX = ESMPX*(1.D+0-SRX) + SRX
!!
!!---  Use the matrix saturation at 0.4 LOG10(HDOD) as
!!     the initial guess  ---
!!
!      HDX = 1.D+1**(4.D-1*LOG10(HDOD))
!      SMPX = (PSIX/HDX)**CLX
!      SMPX = SMPX*(1.D+0-SRX) + SRX
!!
!!---  Newton-Raphson iteration for the matrix saturation
!!     matching point  ---
!!
!      NC = 0
!  100 CONTINUE
!      NC = NC + 1
!      SEMPX = (SMPX-SRX)/(1.D+0-SRX)
!      FX = LOG10(HDOD) - LOG10((PSIX/(SEMPX**(1.D+0/CLX))))
!     &  - 1.D+0/(LOG(1.D+1)*CLX*(SMPX-SRX))
!      DFX = 1.D+0/(LOG(1.D+1)*CLX*(SMPX-SRX))
!     &  + 1.D+0/(LOG(1.D+1)*CLX*((SMPX-SRX)**2))
!      DSMPX = -FX/DFX
!      SMPX = MAX( SMPX+DSMPX,SRX+1.D-12 )
!!
!!---  No convergence on saturation matching point  ---
!!
!      IF( NC.GT.32 ) THEN
!        INDX = 7
!        IMSG = N_DB
!        CHMSG = 'No Convergence on Saturation '
!     &    // 'Matching Point @ Node: '
!        CALL WRMSGS( INDX )
!      ENDIF
!      IF( ABS(DSMPX).GT.1.D-9 ) GOTO 100
!!
!!---  Find the capillary head matching point  ---
!!
!      SEMPX = (SMPX-SRX)/(1.D+0-SRX)
!      HMPX = PSIX/(SEMPX**(1.D+0/CLX))
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of WEBB_BC group  ---
!
      RETURN
      END

!----------------------Subroutine--------------------------------------!
!
      SUBROUTINE WEBB_VG( ALPHAX,CMX,CNX,HMPX,SMPX,SRX )
!
!-------------------------Disclaimer-----------------------------------!
!
!     This material was prepared as an account of work sponsored by
!     an agency of the United States Government. Neither the
!     United States Government nor the United States Department of
!     Energy, nor Battelle, nor any of their employees, makes any
!     warranty, express or implied, or assumes any legal liability or
!     responsibility for the accuracy, completeness, or usefulness
!     of any information, apparatus, product, software or process
!     disclosed, or represents that its use would not infringe
!     privately owned rights.
!
!----------------------Acknowledgement---------------------------------!
!
!     This software and its documentation were produced with Government
!     support under Contract Number DE-AC06-76RLO-1830 awarded by the
!     United Department of Energy. The Government retains a paid-up
!     non-exclusive, irrevocable worldwide license to reproduce,
!     prepare derivative works, perform publicly and display publicly
!     by or for the Government, including the right to distribute to
!     other Government contractors.
!
!---------------------Copyright Notices--------------------------------!
!
!            Copyright Battelle Memorial Institute, 1996
!                    All Rights Reserved.
!
!----------------------Description-------------------------------------!
!
!     Webb saturation and capillary pressure matching points for
!     the van Genuchten capillary pressure-saturation
!     function.
!
!----------------------Authors-----------------------------------------!
!
!     Written by M.D. White, PNNL, 16 July 2010
!
!----------------------Fortran 90 Modules------------------------------!
!
      USE GLB_PAR
      USE SOLTN
      USE GRID
      USE CONST
!
!----------------------Implicit Double Precision-----------------------!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
!
!----------------------Executable Lines--------------------------------!
!
      ISUB_LOG = ISUB_LOG+1
      SUB_LOG(ISUB_LOG) = '/WEBB_VG'
!!
!!---  Initial guess of the matching-point head  ---
!!
!      SMPX = 1.D-2*(1.D+0-SRX) + SRX
!      ESMPX = (SMPX-SRX)/(1.D+0-SRX)
!      HMPX = (1.D+0/ALPHAX)*
!     &  (((1.D+0/(ESMPX**(1.D+0/CMX)))-1.D+0)**(1.D+0/CNX))
!      HMPX = 1.D+1**(4.D-1*LOG10(HDOD))
!!
!!---  Newton-Raphson iteration for the matching-point head  ---
!!
!      NC = 0
!  100 CONTINUE
!      NC = NC + 1
!      DHX = MAX( 1.D-4,1.D-6*HMPX )
!      DHX = SIGN( DHX,5.D-1*HDOD-HMPX )
!      AX = ((1.D+0 + (ALPHAX*HMPX)**CNX)**(-CMX))*(1.D+0-SRX) + SRX
!      BX = HMPX*(LOG(HDOD)-LOG(HMPX))
!      CX = (1.D+0 + (ALPHAX*HMPX)**CNX)**(-CMX-1.D+0)
!      DX = CNX*CMX*((ALPHAX*HMPX)**CNX)*(1.D+0-SRX)/HMPX
!      F1X = AX/BX - CX*DX
!      HMPY = HMPX + DHX
!      AX = ((1.D+0 + (ALPHAX*HMPY)**CNX)**(-CMX))*(1.D+0-SRX) + SRX
!      BX = HMPY*(LOG(HDOD)-LOG(HMPY))
!      CX = (1.D+0 + (ALPHAX*HMPY)**CNX)**(-CMX-1.D+0)
!      DX = CNX*CMX*((ALPHAX*HMPY)**CNX)*(1.D+0-SRX)/HMPY
!      F2X = AX/BX - CX*DX
!      DFX = (F2X-F1X)/DHX
!      DHMPX = -F1X/DFX
!      HMPX = MIN( MAX( HMPX+DHMPX,1.D-6 ),HDOD-1.D+0 )
!!
!!---  No convergence on saturation matching point  ---
!!
!      IF( NC.GT.64 ) THEN
!        INDX = 7
!        IMSG = N_DB
!        CHMSG = 'No Convergence on van Genuchten'
!     &    // ' Matching Point Head @ Node: '
!        CALL WRMSGS( INDX )
!      ENDIF
!      IF( ABS(DHMPX).GT.1.D-4 ) GOTO 100
!!
!!---  Find the capillary matching point saturation  ---
!!
!      ESMPX = (1.D+0 + (ALPHAX*HMPX)**CNX)**(-CMX)
!      SMPX = ESMPX*(1.D+0-SRX) + SRX
!
!---  Use the matrix saturation at 0.4 LOG10(HDOD) as
!     the initial guess  ---
!
      HDX = 1.D+1**(4.D-1*LOG10(HDOD))
      SMPX = (1.D+0/(1.D+0 + (ALPHAX*HDX)**CNX))**CMX
      SMPX = SMPX*(1.D+0-SRX) + SRX
!
!---  Newton-Raphson iteration for the matrix saturation
!     matching point  ---
!
      NC = 0
      DO
        NC = NC + 1
        SEMPX = (SMPX-SRX)/(1.D+0-SRX)
        ESEMPX = (1.D+0/SEMPX)**(1.D+0/CMX)
        FX1 = LOG10(HDOD)
        FX1 = FX1 - LOG10(((ESEMPX-1.D+0)**(1.D+0/CNX))/ALPHAX)
        FX1 = FX1 - (SMPX/(SMPX-SRX))/(LOG(1.D+1)*CNX*CMX*
     &    (1.D+0-(SEMPX**(1.D+0/CMX))))
        SMPY = SMPX + 1.D-8
        SEMPX = (SMPY-SRX)/(1.D+0-SRX)
        ESEMPX = (1.D+0/SEMPX)**(1.D+0/CMX)
        FX2 = LOG10(HDOD)
        FX2 = FX2 - LOG10(((ESEMPX-1.D+0)**(1.D+0/CNX))/ALPHAX)
        FX2 = FX2 - (SMPY/(SMPY-SRX))/(LOG(1.D+1)*CNX*CMX*
     &    (1.D+0-(SEMPX**(1.D+0/CMX))))
        DFX = (FX2-FX1)/1.D-8
        DSMPX = -FX1/DFX
        SMPX = MAX( SMPX+DSMPX,SRX+1.D-12 )
!
!---    No convergence on matrix saturation matching point  ---
!
        IF( NC.GT.32 ) THEN
          M_ERR(1) = 'No Convergence on Saturation '
     &      // 'Matching Point @ Node: '
          CALL PATH
          R_ERR = 0.D+0
          I_ERR(1) = ABS(N_DB)
          I_ERR(2) = 0
          I_ERR(3) = 1
          I_ERR(4) = ID
        ENDIF
        IF( ABS(DSMPX).LE.1.D-9 ) EXIT
      ENDDO
!
!---  Find the matrix capillary head matching point  ---
!
      SEMPX = (SMPX-SRX)/(1.D+0-SRX)
      HMPX = (1.D+0/ALPHAX)*
     &  (((1.D+0/(SEMPX**(1.D+0/CMX)))-1.D+0)**(1.D+0/CNX))
!
!---  Reset subroutine string sequence  ---
!
      ISUB_LOG = ISUB_LOG-1
!
!---  End of WEBB_VG group  ---
!
      RETURN
      END
